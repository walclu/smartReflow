
smartReflowController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4b0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008cc  0800c5f0  0800c5f0  0001c5f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cebc  0800cebc  0001cebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cec4  0800cec4  0001cec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800cec8  0800cec8  0001cec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000020c  20000004  0800cecc  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000470  20000210  0800d0d8  00020210  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000680  0800d0d8  00020680  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e424  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003610  00000000  00000000  0003e664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001eb8  00000000  00000000  00041c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001d60  00000000  00000000  00043b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000249ad  00000000  00000000  00045890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001dc95  00000000  00000000  0006a23d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e7e24  00000000  00000000  00087ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0016fcf6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000094dc  00000000  00000000  0016fd48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000210 	.word	0x20000210
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c5d8 	.word	0x0800c5d8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000214 	.word	0x20000214
 800017c:	0800c5d8 	.word	0x0800c5d8

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b974 	b.w	8000e78 <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9d08      	ldr	r5, [sp, #32]
 8000bae:	4604      	mov	r4, r0
 8000bb0:	468e      	mov	lr, r1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d14d      	bne.n	8000c52 <__udivmoddi4+0xaa>
 8000bb6:	428a      	cmp	r2, r1
 8000bb8:	4694      	mov	ip, r2
 8000bba:	d969      	bls.n	8000c90 <__udivmoddi4+0xe8>
 8000bbc:	fab2 f282 	clz	r2, r2
 8000bc0:	b152      	cbz	r2, 8000bd8 <__udivmoddi4+0x30>
 8000bc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bc6:	f1c2 0120 	rsb	r1, r2, #32
 8000bca:	fa20 f101 	lsr.w	r1, r0, r1
 8000bce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bd6:	4094      	lsls	r4, r2
 8000bd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bdc:	0c21      	lsrs	r1, r4, #16
 8000bde:	fbbe f6f8 	udiv	r6, lr, r8
 8000be2:	fa1f f78c 	uxth.w	r7, ip
 8000be6:	fb08 e316 	mls	r3, r8, r6, lr
 8000bea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bee:	fb06 f107 	mul.w	r1, r6, r7
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	d90a      	bls.n	8000c0c <__udivmoddi4+0x64>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bfe:	f080 811f 	bcs.w	8000e40 <__udivmoddi4+0x298>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 811c 	bls.w	8000e40 <__udivmoddi4+0x298>
 8000c08:	3e02      	subs	r6, #2
 8000c0a:	4463      	add	r3, ip
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1c:	fb00 f707 	mul.w	r7, r0, r7
 8000c20:	42a7      	cmp	r7, r4
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x92>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2c:	f080 810a 	bcs.w	8000e44 <__udivmoddi4+0x29c>
 8000c30:	42a7      	cmp	r7, r4
 8000c32:	f240 8107 	bls.w	8000e44 <__udivmoddi4+0x29c>
 8000c36:	4464      	add	r4, ip
 8000c38:	3802      	subs	r0, #2
 8000c3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3e:	1be4      	subs	r4, r4, r7
 8000c40:	2600      	movs	r6, #0
 8000c42:	b11d      	cbz	r5, 8000c4c <__udivmoddi4+0xa4>
 8000c44:	40d4      	lsrs	r4, r2
 8000c46:	2300      	movs	r3, #0
 8000c48:	e9c5 4300 	strd	r4, r3, [r5]
 8000c4c:	4631      	mov	r1, r6
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0xc2>
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	f000 80ef 	beq.w	8000e3a <__udivmoddi4+0x292>
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c62:	4630      	mov	r0, r6
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	fab3 f683 	clz	r6, r3
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d14a      	bne.n	8000d08 <__udivmoddi4+0x160>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d302      	bcc.n	8000c7c <__udivmoddi4+0xd4>
 8000c76:	4282      	cmp	r2, r0
 8000c78:	f200 80f9 	bhi.w	8000e6e <__udivmoddi4+0x2c6>
 8000c7c:	1a84      	subs	r4, r0, r2
 8000c7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c82:	2001      	movs	r0, #1
 8000c84:	469e      	mov	lr, r3
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	d0e0      	beq.n	8000c4c <__udivmoddi4+0xa4>
 8000c8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c8e:	e7dd      	b.n	8000c4c <__udivmoddi4+0xa4>
 8000c90:	b902      	cbnz	r2, 8000c94 <__udivmoddi4+0xec>
 8000c92:	deff      	udf	#255	; 0xff
 8000c94:	fab2 f282 	clz	r2, r2
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	f040 8092 	bne.w	8000dc2 <__udivmoddi4+0x21a>
 8000c9e:	eba1 010c 	sub.w	r1, r1, ip
 8000ca2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca6:	fa1f fe8c 	uxth.w	lr, ip
 8000caa:	2601      	movs	r6, #1
 8000cac:	0c20      	lsrs	r0, r4, #16
 8000cae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cb2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cb6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cba:	fb0e f003 	mul.w	r0, lr, r3
 8000cbe:	4288      	cmp	r0, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x12c>
 8000cc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x12a>
 8000ccc:	4288      	cmp	r0, r1
 8000cce:	f200 80cb 	bhi.w	8000e68 <__udivmoddi4+0x2c0>
 8000cd2:	4643      	mov	r3, r8
 8000cd4:	1a09      	subs	r1, r1, r0
 8000cd6:	b2a4      	uxth	r4, r4
 8000cd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cdc:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce8:	45a6      	cmp	lr, r4
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x156>
 8000cec:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf4:	d202      	bcs.n	8000cfc <__udivmoddi4+0x154>
 8000cf6:	45a6      	cmp	lr, r4
 8000cf8:	f200 80bb 	bhi.w	8000e72 <__udivmoddi4+0x2ca>
 8000cfc:	4608      	mov	r0, r1
 8000cfe:	eba4 040e 	sub.w	r4, r4, lr
 8000d02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d06:	e79c      	b.n	8000c42 <__udivmoddi4+0x9a>
 8000d08:	f1c6 0720 	rsb	r7, r6, #32
 8000d0c:	40b3      	lsls	r3, r6
 8000d0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d16:	fa20 f407 	lsr.w	r4, r0, r7
 8000d1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d1e:	431c      	orrs	r4, r3
 8000d20:	40f9      	lsrs	r1, r7
 8000d22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d26:	fa00 f306 	lsl.w	r3, r0, r6
 8000d2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d2e:	0c20      	lsrs	r0, r4, #16
 8000d30:	fa1f fe8c 	uxth.w	lr, ip
 8000d34:	fb09 1118 	mls	r1, r9, r8, r1
 8000d38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d40:	4288      	cmp	r0, r1
 8000d42:	fa02 f206 	lsl.w	r2, r2, r6
 8000d46:	d90b      	bls.n	8000d60 <__udivmoddi4+0x1b8>
 8000d48:	eb1c 0101 	adds.w	r1, ip, r1
 8000d4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d50:	f080 8088 	bcs.w	8000e64 <__udivmoddi4+0x2bc>
 8000d54:	4288      	cmp	r0, r1
 8000d56:	f240 8085 	bls.w	8000e64 <__udivmoddi4+0x2bc>
 8000d5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	1a09      	subs	r1, r1, r0
 8000d62:	b2a4      	uxth	r4, r4
 8000d64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d68:	fb09 1110 	mls	r1, r9, r0, r1
 8000d6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d74:	458e      	cmp	lr, r1
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x1e2>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d80:	d26c      	bcs.n	8000e5c <__udivmoddi4+0x2b4>
 8000d82:	458e      	cmp	lr, r1
 8000d84:	d96a      	bls.n	8000e5c <__udivmoddi4+0x2b4>
 8000d86:	3802      	subs	r0, #2
 8000d88:	4461      	add	r1, ip
 8000d8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d92:	eba1 010e 	sub.w	r1, r1, lr
 8000d96:	42a1      	cmp	r1, r4
 8000d98:	46c8      	mov	r8, r9
 8000d9a:	46a6      	mov	lr, r4
 8000d9c:	d356      	bcc.n	8000e4c <__udivmoddi4+0x2a4>
 8000d9e:	d053      	beq.n	8000e48 <__udivmoddi4+0x2a0>
 8000da0:	b15d      	cbz	r5, 8000dba <__udivmoddi4+0x212>
 8000da2:	ebb3 0208 	subs.w	r2, r3, r8
 8000da6:	eb61 010e 	sbc.w	r1, r1, lr
 8000daa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dae:	fa22 f306 	lsr.w	r3, r2, r6
 8000db2:	40f1      	lsrs	r1, r6
 8000db4:	431f      	orrs	r7, r3
 8000db6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dba:	2600      	movs	r6, #0
 8000dbc:	4631      	mov	r1, r6
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	f1c2 0320 	rsb	r3, r2, #32
 8000dc6:	40d8      	lsrs	r0, r3
 8000dc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dcc:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd0:	4091      	lsls	r1, r2
 8000dd2:	4301      	orrs	r1, r0
 8000dd4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd8:	fa1f fe8c 	uxth.w	lr, ip
 8000ddc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de0:	fb07 3610 	mls	r6, r7, r0, r3
 8000de4:	0c0b      	lsrs	r3, r1, #16
 8000de6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dea:	fb00 f60e 	mul.w	r6, r0, lr
 8000dee:	429e      	cmp	r6, r3
 8000df0:	fa04 f402 	lsl.w	r4, r4, r2
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x260>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dfe:	d22f      	bcs.n	8000e60 <__udivmoddi4+0x2b8>
 8000e00:	429e      	cmp	r6, r3
 8000e02:	d92d      	bls.n	8000e60 <__udivmoddi4+0x2b8>
 8000e04:	3802      	subs	r0, #2
 8000e06:	4463      	add	r3, ip
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	b289      	uxth	r1, r1
 8000e0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e10:	fb07 3316 	mls	r3, r7, r6, r3
 8000e14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e18:	fb06 f30e 	mul.w	r3, r6, lr
 8000e1c:	428b      	cmp	r3, r1
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x28a>
 8000e20:	eb1c 0101 	adds.w	r1, ip, r1
 8000e24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e28:	d216      	bcs.n	8000e58 <__udivmoddi4+0x2b0>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d914      	bls.n	8000e58 <__udivmoddi4+0x2b0>
 8000e2e:	3e02      	subs	r6, #2
 8000e30:	4461      	add	r1, ip
 8000e32:	1ac9      	subs	r1, r1, r3
 8000e34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e38:	e738      	b.n	8000cac <__udivmoddi4+0x104>
 8000e3a:	462e      	mov	r6, r5
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	e705      	b.n	8000c4c <__udivmoddi4+0xa4>
 8000e40:	4606      	mov	r6, r0
 8000e42:	e6e3      	b.n	8000c0c <__udivmoddi4+0x64>
 8000e44:	4618      	mov	r0, r3
 8000e46:	e6f8      	b.n	8000c3a <__udivmoddi4+0x92>
 8000e48:	454b      	cmp	r3, r9
 8000e4a:	d2a9      	bcs.n	8000da0 <__udivmoddi4+0x1f8>
 8000e4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e54:	3801      	subs	r0, #1
 8000e56:	e7a3      	b.n	8000da0 <__udivmoddi4+0x1f8>
 8000e58:	4646      	mov	r6, r8
 8000e5a:	e7ea      	b.n	8000e32 <__udivmoddi4+0x28a>
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	e794      	b.n	8000d8a <__udivmoddi4+0x1e2>
 8000e60:	4640      	mov	r0, r8
 8000e62:	e7d1      	b.n	8000e08 <__udivmoddi4+0x260>
 8000e64:	46d0      	mov	r8, sl
 8000e66:	e77b      	b.n	8000d60 <__udivmoddi4+0x1b8>
 8000e68:	3b02      	subs	r3, #2
 8000e6a:	4461      	add	r1, ip
 8000e6c:	e732      	b.n	8000cd4 <__udivmoddi4+0x12c>
 8000e6e:	4630      	mov	r0, r6
 8000e70:	e709      	b.n	8000c86 <__udivmoddi4+0xde>
 8000e72:	4464      	add	r4, ip
 8000e74:	3802      	subs	r0, #2
 8000e76:	e742      	b.n	8000cfe <__udivmoddi4+0x156>

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <MAX31855_init>:
 */

#include "main.h"
#include "MAX31855.h"

void MAX31855_init(max31855_t* dev, GPIO_TypeDef* gpio, uint16_t pin, SPI_HandleTypeDef* spi) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	80fb      	strh	r3, [r7, #6]
	dev->gpio = T1_CS_GPIO_Port;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e92:	60da      	str	r2, [r3, #12]
	dev->pin = T1_CS_Pin;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2210      	movs	r2, #16
 8000e98:	821a      	strh	r2, [r3, #16]
	dev->spi = spi;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	683a      	ldr	r2, [r7, #0]
 8000e9e:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(dev->gpio, dev->pin, GPIO_PIN_SET);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	68d8      	ldr	r0, [r3, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	8a1b      	ldrh	r3, [r3, #16]
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f002 feda 	bl	8003c64 <HAL_GPIO_WritePin>

}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <MAX31855_read_celsius>:


float MAX31855_read_celsius(max31855_t* dev) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(dev->gpio, dev->pin, GPIO_PIN_RESET);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68d8      	ldr	r0, [r3, #12]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	8a1b      	ldrh	r3, [r3, #16]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f002 feca 	bl	8003c64 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(dev->spi, dev->buf, 4, 1000);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6818      	ldr	r0, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	1d19      	adds	r1, r3, #4
 8000ed8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000edc:	2204      	movs	r2, #4
 8000ede:	f004 fe88 	bl	8005bf2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(dev->gpio, dev->pin, GPIO_PIN_SET);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	68d8      	ldr	r0, [r3, #12]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	8a1b      	ldrh	r3, [r3, #16]
 8000eea:	2201      	movs	r2, #1
 8000eec:	4619      	mov	r1, r3
 8000eee:	f002 feb9 	bl	8003c64 <HAL_GPIO_WritePin>

	dev->rawData = dev->buf[3] | ( dev->buf[2] << 8 ) | ( dev->buf[1] << 16 ) | ( dev->buf[0] << 24 );
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	79db      	ldrb	r3, [r3, #7]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	799b      	ldrb	r3, [r3, #6]
 8000efc:	021b      	lsls	r3, r3, #8
 8000efe:	431a      	orrs	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	795b      	ldrb	r3, [r3, #5]
 8000f04:	041b      	lsls	r3, r3, #16
 8000f06:	431a      	orrs	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	791b      	ldrb	r3, [r3, #4]
 8000f0c:	061b      	lsls	r3, r3, #24
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	615a      	str	r2, [r3, #20]

	if (dev->rawData & 0x80000000) {
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	da0a      	bge.n	8000f32 <MAX31855_read_celsius+0x7a>
		// Negative value, drop the lower 18 bits and explicitly extend sign bits.
		dev->rawData = 0xFFFFC000 | ((dev->rawData >> 18) & 0x00003FFF);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	0c9b      	lsrs	r3, r3, #18
 8000f22:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8000f26:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	615a      	str	r2, [r3, #20]
 8000f30:	e004      	b.n	8000f3c <MAX31855_read_celsius+0x84>
	} else {
		dev->rawData >>= 18;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	149a      	asrs	r2, r3, #18
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	615a      	str	r2, [r3, #20]
	}

	dev->temp = dev->rawData;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	ee07 3a90 	vmov	s15, r3
 8000f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	edc3 7a06 	vstr	s15, [r3, #24]
	// LSB = 0.25 degrees C
	dev->temp *= 0.25;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f54:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000f58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	edc3 7a06 	vstr	s15, [r3, #24]
	return dev->temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	ee07 3a90 	vmov	s15, r3
}
 8000f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4013      	ands	r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f98:	68fb      	ldr	r3, [r7, #12]
}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <clear_buffer>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void clear_buffer(uint8_t* buf, uint32_t len)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b085      	sub	sp, #20
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
	for(int z = 0; z < len; z++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	e007      	b.n	8000fc6 <clear_buffer+0x20>
	{
		buf[z] = '\0';
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	4413      	add	r3, r2
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
	for(int z = 0; z < len; z++)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d8f3      	bhi.n	8000fb6 <clear_buffer+0x10>
	}
}
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <beep_IT>:

void beep_IT(rfo_t* dev, uint8_t numBeeps) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	70fb      	strb	r3, [r7, #3]
	dev->numBeeps = numBeeps;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	78fa      	ldrb	r2, [r7, #3]
 8000fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	dev->cntBeeps = 0;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	__HAL_TIM_SET_COMPARE(dev->buzPwmTim, TIM_CHANNEL_1, 2);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2202      	movs	r2, #2
 8001000:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_CLEAR_FLAG(dev->buzElapsTim, TIM_SR_UIF);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f06f 0201 	mvn.w	r2, #1
 800100c:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(dev->buzElapsTim);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001012:	4618      	mov	r0, r3
 8001014:	f005 fb44 	bl	80066a0 <HAL_TIM_Base_Start_IT>

}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b09b      	sub	sp, #108	; 0x6c
 8001024:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001026:	f002 fa35 	bl	8003494 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800102a:	f000 fc3f 	bl	80018ac <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 800102e:	f000 fca1 	bl	8001974 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001032:	f000 ff37 	bl	8001ea4 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001036:	f000 fcd7 	bl	80019e8 <MX_I2C1_Init>
	MX_LPUART1_UART_Init();
 800103a:	f000 fd15 	bl	8001a68 <MX_LPUART1_UART_Init>
	MX_USART1_UART_Init();
 800103e:	f000 fd5f 	bl	8001b00 <MX_USART1_UART_Init>
	MX_SPI1_Init();
 8001042:	f000 fda9 	bl	8001b98 <MX_SPI1_Init>
	MX_TIM1_Init();
 8001046:	f000 fde5 	bl	8001c14 <MX_TIM1_Init>
	MX_TIM2_Init();
 800104a:	f000 fe83 	bl	8001d54 <MX_TIM2_Init>
	MX_TIM16_Init();
 800104e:	f000 fedb 	bl	8001e08 <MX_TIM16_Init>
	MX_TIM17_Init();
 8001052:	f000 ff01 	bl	8001e58 <MX_TIM17_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8001056:	f000 fcaa 	bl	80019ae <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	_RFO_INIT(dev, &hlpuart1, &hspi1 ,&htim2, &htim17, &htim2, RFO_DEFAULT_DUTY, RFO_DEFAULT_PWM_FREQ_KHZ);
 800105a:	4bad      	ldr	r3, [pc, #692]	; (8001310 <main+0x2f0>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4aad      	ldr	r2, [pc, #692]	; (8001314 <main+0x2f4>)
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	4bab      	ldr	r3, [pc, #684]	; (8001310 <main+0x2f0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4aac      	ldr	r2, [pc, #688]	; (8001318 <main+0x2f8>)
 8001068:	62da      	str	r2, [r3, #44]	; 0x2c
 800106a:	4ba9      	ldr	r3, [pc, #676]	; (8001310 <main+0x2f0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4aab      	ldr	r2, [pc, #684]	; (800131c <main+0x2fc>)
 8001070:	635a      	str	r2, [r3, #52]	; 0x34
 8001072:	4ba7      	ldr	r3, [pc, #668]	; (8001310 <main+0x2f0>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4aaa      	ldr	r2, [pc, #680]	; (8001320 <main+0x300>)
 8001078:	639a      	str	r2, [r3, #56]	; 0x38
 800107a:	4ba5      	ldr	r3, [pc, #660]	; (8001310 <main+0x2f0>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4aa7      	ldr	r2, [pc, #668]	; (800131c <main+0x2fc>)
 8001080:	63da      	str	r2, [r3, #60]	; 0x3c
 8001082:	4ba3      	ldr	r3, [pc, #652]	; (8001310 <main+0x2f0>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800108c:	4ba0      	ldr	r3, [pc, #640]	; (8001310 <main+0x2f0>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001096:	4b9e      	ldr	r3, [pc, #632]	; (8001310 <main+0x2f0>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	861a      	strh	r2, [r3, #48]	; 0x30
 800109e:	4b9c      	ldr	r3, [pc, #624]	; (8001310 <main+0x2f0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80010a8:	4b99      	ldr	r3, [pc, #612]	; (8001310 <main+0x2f0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2200      	movs	r2, #0
 80010ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80010b0:	4b97      	ldr	r3, [pc, #604]	; (8001310 <main+0x2f0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f04f 0200 	mov.w	r2, #0
 80010b8:	649a      	str	r2, [r3, #72]	; 0x48
 80010ba:	4b95      	ldr	r3, [pc, #596]	; (8001310 <main+0x2f0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80010c4:	4b92      	ldr	r3, [pc, #584]	; (8001310 <main+0x2f0>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80010ce:	4b90      	ldr	r3, [pc, #576]	; (8001310 <main+0x2f0>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	655a      	str	r2, [r3, #84]	; 0x54
 80010d8:	4b8d      	ldr	r3, [pc, #564]	; (8001310 <main+0x2f0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2232      	movs	r2, #50	; 0x32
 80010de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80010e2:	4b8b      	ldr	r3, [pc, #556]	; (8001310 <main+0x2f0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	220a      	movs	r2, #10
 80010e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80010ec:	4b88      	ldr	r3, [pc, #544]	; (8001310 <main+0x2f0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	_RFO_FSM_INIT(fsm);
 80010f6:	4b8b      	ldr	r3, [pc, #556]	; (8001324 <main+0x304>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2200      	movs	r2, #0
 80010fc:	709a      	strb	r2, [r3, #2]
 80010fe:	4b89      	ldr	r3, [pc, #548]	; (8001324 <main+0x304>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
 8001106:	4b87      	ldr	r3, [pc, #540]	; (8001324 <main+0x304>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2200      	movs	r2, #0
 800110c:	705a      	strb	r2, [r3, #1]

	HAL_UART_Receive(&huart1, dp->rcv, 50, 1000); // Resets UART buffers, so isr is not fired on boot
 800110e:	4b86      	ldr	r3, [pc, #536]	; (8001328 <main+0x308>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f103 0108 	add.w	r1, r3, #8
 8001116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111a:	2232      	movs	r2, #50	; 0x32
 800111c:	4883      	ldr	r0, [pc, #524]	; (800132c <main+0x30c>)
 800111e:	f006 fbe5 	bl	80078ec <HAL_UART_Receive>
	HAL_UART_Receive_IT(&huart1, dp->rcv, 4);
 8001122:	4b81      	ldr	r3, [pc, #516]	; (8001328 <main+0x308>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	3308      	adds	r3, #8
 8001128:	2204      	movs	r2, #4
 800112a:	4619      	mov	r1, r3
 800112c:	487f      	ldr	r0, [pc, #508]	; (800132c <main+0x30c>)
 800112e:	f006 fcb1 	bl	8007a94 <HAL_UART_Receive_IT>

	beep_IT(dev,2);
 8001132:	4b77      	ldr	r3, [pc, #476]	; (8001310 <main+0x2f0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2102      	movs	r1, #2
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff4f 	bl	8000fdc <beep_IT>
	nextion_init(dp, &huart1);
 800113e:	4b7a      	ldr	r3, [pc, #488]	; (8001328 <main+0x308>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	497a      	ldr	r1, [pc, #488]	; (800132c <main+0x30c>)
 8001144:	4618      	mov	r0, r3
 8001146:	f001 fcb1 	bl	8002aac <nextion_init>
	char buf[100];

	dp->write_id_val(dp, "j0", 0);
 800114a:	4b77      	ldr	r3, [pc, #476]	; (8001328 <main+0x308>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001150:	4a75      	ldr	r2, [pc, #468]	; (8001328 <main+0x308>)
 8001152:	6810      	ldr	r0, [r2, #0]
 8001154:	2200      	movs	r2, #0
 8001156:	4976      	ldr	r1, [pc, #472]	; (8001330 <main+0x310>)
 8001158:	4798      	blx	r3

	_RFO_PERIPHERAL_INIT();
 800115a:	4b6d      	ldr	r3, [pc, #436]	; (8001310 <main+0x2f0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	3304      	adds	r3, #4
 8001160:	2201      	movs	r2, #1
 8001162:	4619      	mov	r1, r3
 8001164:	486b      	ldr	r0, [pc, #428]	; (8001314 <main+0x2f4>)
 8001166:	f006 fc95 	bl	8007a94 <HAL_UART_Receive_IT>
 800116a:	4b6c      	ldr	r3, [pc, #432]	; (800131c <main+0x2fc>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2200      	movs	r2, #0
 8001170:	635a      	str	r2, [r3, #52]	; 0x34
 8001172:	2100      	movs	r1, #0
 8001174:	4869      	ldr	r0, [pc, #420]	; (800131c <main+0x2fc>)
 8001176:	f005 fb67 	bl	8006848 <HAL_TIM_PWM_Start>
 800117a:	4b6e      	ldr	r3, [pc, #440]	; (8001334 <main+0x314>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2200      	movs	r2, #0
 8001180:	635a      	str	r2, [r3, #52]	; 0x34
 8001182:	4b6c      	ldr	r3, [pc, #432]	; (8001334 <main+0x314>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2200      	movs	r2, #0
 8001188:	639a      	str	r2, [r3, #56]	; 0x38
 800118a:	2100      	movs	r1, #0
 800118c:	4869      	ldr	r0, [pc, #420]	; (8001334 <main+0x314>)
 800118e:	f005 fb5b 	bl	8006848 <HAL_TIM_PWM_Start>
 8001192:	2104      	movs	r1, #4
 8001194:	4867      	ldr	r0, [pc, #412]	; (8001334 <main+0x314>)
 8001196:	f005 fb57 	bl	8006848 <HAL_TIM_PWM_Start>

	MAX31855_init(tempSens, T1_CS_GPIO_Port, T1_CS_Pin, &hspi1);
 800119a:	4b67      	ldr	r3, [pc, #412]	; (8001338 <main+0x318>)
 800119c:	6818      	ldr	r0, [r3, #0]
 800119e:	4b5e      	ldr	r3, [pc, #376]	; (8001318 <main+0x2f8>)
 80011a0:	2210      	movs	r2, #16
 80011a2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80011a6:	f7ff fe69 	bl	8000e7c <MAX31855_init>

	PIDController_Init(pid, kP, kI, kD, SAMPLE_TIME, tau, limMin, limMax, limMinInt, limMaxInt);
 80011aa:	4b64      	ldr	r3, [pc, #400]	; (800133c <main+0x31c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	eddf 7a64 	vldr	s15, [pc, #400]	; 8001340 <main+0x320>
 80011b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011b6:	eef3 6a0f 	vmov.f32	s13, #63	; 0x41f80000  31.0
 80011ba:	ed9f 6a62 	vldr	s12, [pc, #392]	; 8001344 <main+0x324>
 80011be:	eddf 5a62 	vldr	s11, [pc, #392]	; 8001348 <main+0x328>
 80011c2:	ed9f 5a62 	vldr	s10, [pc, #392]	; 800134c <main+0x32c>
 80011c6:	eddf 4a62 	vldr	s9, [pc, #392]	; 8001350 <main+0x330>
 80011ca:	ed9f 4a62 	vldr	s8, [pc, #392]	; 8001354 <main+0x334>
 80011ce:	eef0 3a64 	vmov.f32	s7, s9
 80011d2:	eeb0 3a45 	vmov.f32	s6, s10
 80011d6:	eef0 2a65 	vmov.f32	s5, s11
 80011da:	eeb0 2a46 	vmov.f32	s4, s12
 80011de:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 80011e2:	eeb0 1a66 	vmov.f32	s2, s13
 80011e6:	eef0 0a47 	vmov.f32	s1, s14
 80011ea:	eeb0 0a67 	vmov.f32	s0, s15
 80011ee:	4618      	mov	r0, r3
 80011f0:	f001 fc80 	bl	8002af4 <PIDController_Init>

	dp->write_id_val(dp, "j0", 100);
 80011f4:	4b4c      	ldr	r3, [pc, #304]	; (8001328 <main+0x308>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011fa:	4a4b      	ldr	r2, [pc, #300]	; (8001328 <main+0x308>)
 80011fc:	6810      	ldr	r0, [r2, #0]
 80011fe:	2264      	movs	r2, #100	; 0x64
 8001200:	494b      	ldr	r1, [pc, #300]	; (8001330 <main+0x310>)
 8001202:	4798      	blx	r3
	HAL_Delay(1000);
 8001204:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001208:	f002 f9ca 	bl	80035a0 <HAL_Delay>

	dp->write(dp, "page main");
 800120c:	4b46      	ldr	r3, [pc, #280]	; (8001328 <main+0x308>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001212:	4a45      	ldr	r2, [pc, #276]	; (8001328 <main+0x308>)
 8001214:	6812      	ldr	r2, [r2, #0]
 8001216:	4950      	ldr	r1, [pc, #320]	; (8001358 <main+0x338>)
 8001218:	4610      	mov	r0, r2
 800121a:	4798      	blx	r3
	dev->currentPage = DP_MAIN;
 800121c:	4b3c      	ldr	r3, [pc, #240]	; (8001310 <main+0x2f0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2201      	movs	r2, #1
 8001222:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	nextion_print_page(dp);
 8001226:	4b40      	ldr	r3, [pc, #256]	; (8001328 <main+0x308>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f001 fb7c 	bl	8002928 <nextion_print_page>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		switch(fsm->state)
 8001230:	4b3c      	ldr	r3, [pc, #240]	; (8001324 <main+0x304>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	789b      	ldrb	r3, [r3, #2]
 8001236:	2b0a      	cmp	r3, #10
 8001238:	d8fa      	bhi.n	8001230 <main+0x210>
 800123a:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <main+0x220>)
 800123c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001240:	08001231 	.word	0x08001231
 8001244:	0800126d 	.word	0x0800126d
 8001248:	080014af 	.word	0x080014af
 800124c:	080014ab 	.word	0x080014ab
 8001250:	080014b3 	.word	0x080014b3
 8001254:	080014c5 	.word	0x080014c5
 8001258:	08001231 	.word	0x08001231
 800125c:	08001601 	.word	0x08001601
 8001260:	08001231 	.word	0x08001231
 8001264:	08001231 	.word	0x08001231
 8001268:	0800164f 	.word	0x0800164f

		case RFO_IDLE:
			break;

		case RFO_PROCESS_CMD:
			if(dev->rcv[0] == '\r') {
 800126c:	4b28      	ldr	r3, [pc, #160]	; (8001310 <main+0x2f0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	791b      	ldrb	r3, [r3, #4]
 8001272:	2b0d      	cmp	r3, #13
 8001274:	f040 80d8 	bne.w	8001428 <main+0x408>
				HAL_UART_Transmit(dev->uart, (uint8_t*)"\r\n", 2 , 100);
 8001278:	4b25      	ldr	r3, [pc, #148]	; (8001310 <main+0x2f0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6818      	ldr	r0, [r3, #0]
 800127e:	2364      	movs	r3, #100	; 0x64
 8001280:	2202      	movs	r2, #2
 8001282:	4936      	ldr	r1, [pc, #216]	; (800135c <main+0x33c>)
 8001284:	f006 fa9c 	bl	80077c0 <HAL_UART_Transmit>
				buf[dev->idx] = '\0';
 8001288:	4b21      	ldr	r3, [pc, #132]	; (8001310 <main+0x2f0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800128e:	3368      	adds	r3, #104	; 0x68
 8001290:	443b      	add	r3, r7
 8001292:	2200      	movs	r2, #0
 8001294:	f803 2c68 	strb.w	r2, [r3, #-104]
				for(int i = 0; i < 7; i++) {
 8001298:	2300      	movs	r3, #0
 800129a:	667b      	str	r3, [r7, #100]	; 0x64
 800129c:	e0ad      	b.n	80013fa <main+0x3da>
					if(!strcmp(buf, rfoCmdLut[i]))
 800129e:	4a30      	ldr	r2, [pc, #192]	; (8001360 <main+0x340>)
 80012a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012a6:	463b      	mov	r3, r7
 80012a8:	4611      	mov	r1, r2
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7fe ff68 	bl	8000180 <strcmp>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f040 809e 	bne.w	80013f4 <main+0x3d4>
 80012b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012ba:	2b06      	cmp	r3, #6
 80012bc:	f200 8094 	bhi.w	80013e8 <main+0x3c8>
 80012c0:	a201      	add	r2, pc, #4	; (adr r2, 80012c8 <main+0x2a8>)
 80012c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c6:	bf00      	nop
 80012c8:	080012e5 	.word	0x080012e5
 80012cc:	080012ef 	.word	0x080012ef
 80012d0:	080012f9 	.word	0x080012f9
 80012d4:	08001365 	.word	0x08001365
 80012d8:	080013cb 	.word	0x080013cb
 80012dc:	080013d5 	.word	0x080013d5
 80012e0:	080013df 	.word	0x080013df
					{
						switch(i)
						{
						case 0:
							fsm->state = RFO_PWM_SET_DUTY;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <main+0x304>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2203      	movs	r2, #3
 80012ea:	709a      	strb	r2, [r3, #2]
							break;
 80012ec:	e07d      	b.n	80013ea <main+0x3ca>
						case 1:
							fsm->state = RFO_PWM_SET_FREQ;
 80012ee:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <main+0x304>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2202      	movs	r2, #2
 80012f4:	709a      	strb	r2, [r3, #2]
							break;
 80012f6:	e078      	b.n	80013ea <main+0x3ca>
						case 2:
							fsm->state = RFO_GET_TEMP;
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <main+0x304>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2204      	movs	r2, #4
 80012fe:	709a      	strb	r2, [r3, #2]
							beep_IT(dev, 2);
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <main+0x2f0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2102      	movs	r1, #2
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fe68 	bl	8000fdc <beep_IT>
							break;
 800130c:	e06d      	b.n	80013ea <main+0x3ca>
 800130e:	bf00      	nop
 8001310:	20000020 	.word	0x20000020
 8001314:	20000278 	.word	0x20000278
 8001318:	20000398 	.word	0x20000398
 800131c:	20000448 	.word	0x20000448
 8001320:	200004e0 	.word	0x200004e0
 8001324:	20000024 	.word	0x20000024
 8001328:	20000030 	.word	0x20000030
 800132c:	20000308 	.word	0x20000308
 8001330:	0800c654 	.word	0x0800c654
 8001334:	200003fc 	.word	0x200003fc
 8001338:	20000028 	.word	0x20000028
 800133c:	2000002c 	.word	0x2000002c
 8001340:	421c0000 	.word	0x421c0000
 8001344:	3e4ccccd 	.word	0x3e4ccccd
 8001348:	00000000 	.word	0x00000000
 800134c:	43800000 	.word	0x43800000
 8001350:	c2700000 	.word	0xc2700000
 8001354:	42700000 	.word	0x42700000
 8001358:	0800c658 	.word	0x0800c658
 800135c:	0800c664 	.word	0x0800c664
 8001360:	20000004 	.word	0x20000004
						case 3:
							beep_IT(dev, 3);
 8001364:	4b99      	ldr	r3, [pc, #612]	; (80015cc <main+0x5ac>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2103      	movs	r1, #3
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fe36 	bl	8000fdc <beep_IT>
							fsm->state = RFO_START;
 8001370:	4b97      	ldr	r3, [pc, #604]	; (80015d0 <main+0x5b0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2205      	movs	r2, #5
 8001376:	709a      	strb	r2, [r3, #2]
							dp->write(dp, "page reflow");
 8001378:	4b96      	ldr	r3, [pc, #600]	; (80015d4 <main+0x5b4>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800137e:	4a95      	ldr	r2, [pc, #596]	; (80015d4 <main+0x5b4>)
 8001380:	6812      	ldr	r2, [r2, #0]
 8001382:	4995      	ldr	r1, [pc, #596]	; (80015d8 <main+0x5b8>)
 8001384:	4610      	mov	r0, r2
 8001386:	4798      	blx	r3
							dp->write_id_str(dp, "conState", "Connected");
 8001388:	4b92      	ldr	r3, [pc, #584]	; (80015d4 <main+0x5b4>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138e:	4a91      	ldr	r2, [pc, #580]	; (80015d4 <main+0x5b4>)
 8001390:	6810      	ldr	r0, [r2, #0]
 8001392:	4a92      	ldr	r2, [pc, #584]	; (80015dc <main+0x5bc>)
 8001394:	4992      	ldr	r1, [pc, #584]	; (80015e0 <main+0x5c0>)
 8001396:	4798      	blx	r3
							dp->write_id_str(dp, "reflowState", "Prepare");
 8001398:	4b8e      	ldr	r3, [pc, #568]	; (80015d4 <main+0x5b4>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139e:	4a8d      	ldr	r2, [pc, #564]	; (80015d4 <main+0x5b4>)
 80013a0:	6810      	ldr	r0, [r2, #0]
 80013a2:	4a90      	ldr	r2, [pc, #576]	; (80015e4 <main+0x5c4>)
 80013a4:	4990      	ldr	r1, [pc, #576]	; (80015e8 <main+0x5c8>)
 80013a6:	4798      	blx	r3
							dp->write_id_val(dp, "reflowProgress", 0);
 80013a8:	4b8a      	ldr	r3, [pc, #552]	; (80015d4 <main+0x5b4>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ae:	4a89      	ldr	r2, [pc, #548]	; (80015d4 <main+0x5b4>)
 80013b0:	6810      	ldr	r0, [r2, #0]
 80013b2:	2200      	movs	r2, #0
 80013b4:	498d      	ldr	r1, [pc, #564]	; (80015ec <main+0x5cc>)
 80013b6:	4798      	blx	r3
							dev->currentReflowState = REFLOW_STATE_PREPARE;
 80013b8:	4b84      	ldr	r3, [pc, #528]	; (80015cc <main+0x5ac>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2202      	movs	r2, #2
 80013be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
							HAL_TIM_Base_Start_IT(&htim16);
 80013c2:	488b      	ldr	r0, [pc, #556]	; (80015f0 <main+0x5d0>)
 80013c4:	f005 f96c 	bl	80066a0 <HAL_TIM_Base_Start_IT>
							break;
 80013c8:	e00f      	b.n	80013ea <main+0x3ca>
						case 4:
							fsm->state = RFO_STOP;
 80013ca:	4b81      	ldr	r3, [pc, #516]	; (80015d0 <main+0x5b0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2206      	movs	r2, #6
 80013d0:	709a      	strb	r2, [r3, #2]
							break;
 80013d2:	e00a      	b.n	80013ea <main+0x3ca>
						case 5:
							fsm->state = RFO_CALIBRATE;
 80013d4:	4b7e      	ldr	r3, [pc, #504]	; (80015d0 <main+0x5b0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2208      	movs	r2, #8
 80013da:	709a      	strb	r2, [r3, #2]
							break;
 80013dc:	e005      	b.n	80013ea <main+0x3ca>
						case 6:
							fsm->state = RFO_HELP;
 80013de:	4b7c      	ldr	r3, [pc, #496]	; (80015d0 <main+0x5b0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	220a      	movs	r2, #10
 80013e4:	709a      	strb	r2, [r3, #2]
							break;
 80013e6:	e000      	b.n	80013ea <main+0x3ca>
						default:
							break;
 80013e8:	bf00      	nop
						}
						dev->idx = 0;
 80013ea:	4b78      	ldr	r3, [pc, #480]	; (80015cc <main+0x5ac>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2200      	movs	r2, #0
 80013f0:	861a      	strh	r2, [r3, #48]	; 0x30
						break;
 80013f2:	e006      	b.n	8001402 <main+0x3e2>
				for(int i = 0; i < 7; i++) {
 80013f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013f6:	3301      	adds	r3, #1
 80013f8:	667b      	str	r3, [r7, #100]	; 0x64
 80013fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013fc:	2b06      	cmp	r3, #6
 80013fe:	f77f af4e 	ble.w	800129e <main+0x27e>
					}

				}

				if(fsm->state == RFO_PROCESS_CMD) {
 8001402:	4b73      	ldr	r3, [pc, #460]	; (80015d0 <main+0x5b0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	789b      	ldrb	r3, [r3, #2]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d103      	bne.n	8001414 <main+0x3f4>

					fsm->state = RFO_IDLE;
 800140c:	4b70      	ldr	r3, [pc, #448]	; (80015d0 <main+0x5b0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2200      	movs	r2, #0
 8001412:	709a      	strb	r2, [r3, #2]

				}
				dev->idx = 0;
 8001414:	4b6d      	ldr	r3, [pc, #436]	; (80015cc <main+0x5ac>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2200      	movs	r2, #0
 800141a:	861a      	strh	r2, [r3, #48]	; 0x30
				clear_buffer((uint8_t*)buf, 100);
 800141c:	463b      	mov	r3, r7
 800141e:	2164      	movs	r1, #100	; 0x64
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fdc0 	bl	8000fa6 <clear_buffer>
				dev->idx += 1;
				clear_buffer((dev->rcv), 20);
				fsm->state = RFO_IDLE;
			}

			break;
 8001426:	e21d      	b.n	8001864 <main+0x844>
			else if(dev->rcv[0] == '\177') {
 8001428:	4b68      	ldr	r3, [pc, #416]	; (80015cc <main+0x5ac>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	791b      	ldrb	r3, [r3, #4]
 800142e:	2b7f      	cmp	r3, #127	; 0x7f
 8001430:	d11b      	bne.n	800146a <main+0x44a>
				if(dev->idx > 0)
 8001432:	4b66      	ldr	r3, [pc, #408]	; (80015cc <main+0x5ac>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 8213 	beq.w	8001864 <main+0x844>
					buf[dev->idx-1] = '\0';
 800143e:	4b63      	ldr	r3, [pc, #396]	; (80015cc <main+0x5ac>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001444:	3b01      	subs	r3, #1
 8001446:	3368      	adds	r3, #104	; 0x68
 8001448:	443b      	add	r3, r7
 800144a:	2200      	movs	r2, #0
 800144c:	f803 2c68 	strb.w	r2, [r3, #-104]
					dev->idx -= 1;
 8001450:	4b5e      	ldr	r3, [pc, #376]	; (80015cc <main+0x5ac>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8001456:	4b5d      	ldr	r3, [pc, #372]	; (80015cc <main+0x5ac>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	3a01      	subs	r2, #1
 800145c:	b292      	uxth	r2, r2
 800145e:	861a      	strh	r2, [r3, #48]	; 0x30
					fsm->state = RFO_IDLE;
 8001460:	4b5b      	ldr	r3, [pc, #364]	; (80015d0 <main+0x5b0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2200      	movs	r2, #0
 8001466:	709a      	strb	r2, [r3, #2]
			break;
 8001468:	e1fc      	b.n	8001864 <main+0x844>
				buf[dev->idx] = dev->rcv[0];
 800146a:	4b58      	ldr	r3, [pc, #352]	; (80015cc <main+0x5ac>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a57      	ldr	r2, [pc, #348]	; (80015cc <main+0x5ac>)
 8001470:	6812      	ldr	r2, [r2, #0]
 8001472:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8001474:	4611      	mov	r1, r2
 8001476:	791a      	ldrb	r2, [r3, #4]
 8001478:	f101 0368 	add.w	r3, r1, #104	; 0x68
 800147c:	443b      	add	r3, r7
 800147e:	f803 2c68 	strb.w	r2, [r3, #-104]
				dev->idx += 1;
 8001482:	4b52      	ldr	r3, [pc, #328]	; (80015cc <main+0x5ac>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8001488:	4b50      	ldr	r3, [pc, #320]	; (80015cc <main+0x5ac>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	3201      	adds	r2, #1
 800148e:	b292      	uxth	r2, r2
 8001490:	861a      	strh	r2, [r3, #48]	; 0x30
				clear_buffer((dev->rcv), 20);
 8001492:	4b4e      	ldr	r3, [pc, #312]	; (80015cc <main+0x5ac>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3304      	adds	r3, #4
 8001498:	2114      	movs	r1, #20
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fd83 	bl	8000fa6 <clear_buffer>
				fsm->state = RFO_IDLE;
 80014a0:	4b4b      	ldr	r3, [pc, #300]	; (80015d0 <main+0x5b0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2200      	movs	r2, #0
 80014a6:	709a      	strb	r2, [r3, #2]
			break;
 80014a8:	e1dc      	b.n	8001864 <main+0x844>


		case RFO_PWM_SET_DUTY:
			__NOP();
 80014aa:	bf00      	nop
			break;
 80014ac:	e1df      	b.n	800186e <main+0x84e>

		case RFO_PWM_SET_FREQ:
			__NOP();
 80014ae:	bf00      	nop
			break;
 80014b0:	e1dd      	b.n	800186e <main+0x84e>

		case RFO_GET_TEMP:
			__NOP();
 80014b2:	bf00      	nop
			HAL_TIM_Base_Start_IT(&htim16);
 80014b4:	484e      	ldr	r0, [pc, #312]	; (80015f0 <main+0x5d0>)
 80014b6:	f005 f8f3 	bl	80066a0 <HAL_TIM_Base_Start_IT>
			fsm->state = RFO_TRANSMIT;
 80014ba:	4b45      	ldr	r3, [pc, #276]	; (80015d0 <main+0x5b0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2207      	movs	r2, #7
 80014c0:	709a      	strb	r2, [r3, #2]
			break;
 80014c2:	e1d4      	b.n	800186e <main+0x84e>

		case RFO_START:
			__NOP();
 80014c4:	bf00      	nop
			if(dev->dataRdy) {
 80014c6:	4b41      	ldr	r3, [pc, #260]	; (80015cc <main+0x5ac>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 81ca 	beq.w	8001868 <main+0x848>
				dev->dataRdy = false;
 80014d4:	4b3d      	ldr	r3, [pc, #244]	; (80015cc <main+0x5ac>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				PIDController_Update(pid, dev->targetTemp, dev->temp);
 80014de:	4b45      	ldr	r3, [pc, #276]	; (80015f4 <main+0x5d4>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4b3a      	ldr	r3, [pc, #232]	; (80015cc <main+0x5ac>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80014ea:	4b38      	ldr	r3, [pc, #224]	; (80015cc <main+0x5ac>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80014f2:	eef0 0a47 	vmov.f32	s1, s14
 80014f6:	eeb0 0a67 	vmov.f32	s0, s15
 80014fa:	4610      	mov	r0, r2
 80014fc:	f001 fb45 	bl	8002b8a <PIDController_Update>

				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pid->out);
 8001500:	4b3c      	ldr	r3, [pc, #240]	; (80015f4 <main+0x5d4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001508:	4b3b      	ldr	r3, [pc, #236]	; (80015f8 <main+0x5d8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001510:	ee17 2a90 	vmov	r2, s15
 8001514:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pid->out);
 8001516:	4b37      	ldr	r3, [pc, #220]	; (80015f4 <main+0x5d4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800151e:	4b36      	ldr	r3, [pc, #216]	; (80015f8 <main+0x5d8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001526:	ee17 2a90 	vmov	r2, s15
 800152a:	639a      	str	r2, [r3, #56]	; 0x38

				sprintf(buf, "%.2f\n", dev->temp);
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <main+0x5ac>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001532:	4618      	mov	r0, r3
 8001534:	f7fe fff0 	bl	8000518 <__aeabi_f2d>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4638      	mov	r0, r7
 800153e:	492f      	ldr	r1, [pc, #188]	; (80015fc <main+0x5dc>)
 8001540:	f008 fdd0 	bl	800a0e4 <siprintf>
				HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 8001544:	4b21      	ldr	r3, [pc, #132]	; (80015cc <main+0x5ac>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681c      	ldr	r4, [r3, #0]
 800154a:	463b      	mov	r3, r7
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe fe21 	bl	8000194 <strlen>
 8001552:	4603      	mov	r3, r0
 8001554:	b29a      	uxth	r2, r3
 8001556:	4639      	mov	r1, r7
 8001558:	2364      	movs	r3, #100	; 0x64
 800155a:	4620      	mov	r0, r4
 800155c:	f006 f930 	bl	80077c0 <HAL_UART_Transmit>

				sprintf(buf, "%.2f\n", dev->targetTemp);
 8001560:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <main+0x5ac>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001566:	4618      	mov	r0, r3
 8001568:	f7fe ffd6 	bl	8000518 <__aeabi_f2d>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4638      	mov	r0, r7
 8001572:	4922      	ldr	r1, [pc, #136]	; (80015fc <main+0x5dc>)
 8001574:	f008 fdb6 	bl	800a0e4 <siprintf>
				HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <main+0x5ac>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681c      	ldr	r4, [r3, #0]
 800157e:	463b      	mov	r3, r7
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe fe07 	bl	8000194 <strlen>
 8001586:	4603      	mov	r3, r0
 8001588:	b29a      	uxth	r2, r3
 800158a:	4639      	mov	r1, r7
 800158c:	2364      	movs	r3, #100	; 0x64
 800158e:	4620      	mov	r0, r4
 8001590:	f006 f916 	bl	80077c0 <HAL_UART_Transmit>

				sprintf(buf, "%.2f\n", pid->out);
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <main+0x5d4>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe ffbc 	bl	8000518 <__aeabi_f2d>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4638      	mov	r0, r7
 80015a6:	4915      	ldr	r1, [pc, #84]	; (80015fc <main+0x5dc>)
 80015a8:	f008 fd9c 	bl	800a0e4 <siprintf>
				HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 80015ac:	4b07      	ldr	r3, [pc, #28]	; (80015cc <main+0x5ac>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681c      	ldr	r4, [r3, #0]
 80015b2:	463b      	mov	r3, r7
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe fded 	bl	8000194 <strlen>
 80015ba:	4603      	mov	r3, r0
 80015bc:	b29a      	uxth	r2, r3
 80015be:	4639      	mov	r1, r7
 80015c0:	2364      	movs	r3, #100	; 0x64
 80015c2:	4620      	mov	r0, r4
 80015c4:	f006 f8fc 	bl	80077c0 <HAL_UART_Transmit>

			}
			break;
 80015c8:	e14e      	b.n	8001868 <main+0x848>
 80015ca:	bf00      	nop
 80015cc:	20000020 	.word	0x20000020
 80015d0:	20000024 	.word	0x20000024
 80015d4:	20000030 	.word	0x20000030
 80015d8:	0800c668 	.word	0x0800c668
 80015dc:	0800c674 	.word	0x0800c674
 80015e0:	0800c680 	.word	0x0800c680
 80015e4:	0800c68c 	.word	0x0800c68c
 80015e8:	0800c694 	.word	0x0800c694
 80015ec:	0800c6a0 	.word	0x0800c6a0
 80015f0:	20000494 	.word	0x20000494
 80015f4:	2000002c 	.word	0x2000002c
 80015f8:	200003fc 	.word	0x200003fc
 80015fc:	0800c6b0 	.word	0x0800c6b0

		case RFO_TRANSMIT:
			if(dev->dataRdy) {
 8001600:	4b9b      	ldr	r3, [pc, #620]	; (8001870 <main+0x850>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 812f 	beq.w	800186c <main+0x84c>
				dev->dataRdy = false;
 800160e:	4b98      	ldr	r3, [pc, #608]	; (8001870 <main+0x850>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				sprintf(buf, "Temp is: %.2f\r\n", dev->temp);
 8001618:	4b95      	ldr	r3, [pc, #596]	; (8001870 <main+0x850>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ff7a 	bl	8000518 <__aeabi_f2d>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4638      	mov	r0, r7
 800162a:	4992      	ldr	r1, [pc, #584]	; (8001874 <main+0x854>)
 800162c:	f008 fd5a 	bl	800a0e4 <siprintf>
				HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 8001630:	4b8f      	ldr	r3, [pc, #572]	; (8001870 <main+0x850>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681c      	ldr	r4, [r3, #0]
 8001636:	463b      	mov	r3, r7
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe fdab 	bl	8000194 <strlen>
 800163e:	4603      	mov	r3, r0
 8001640:	b29a      	uxth	r2, r3
 8001642:	4639      	mov	r1, r7
 8001644:	2364      	movs	r3, #100	; 0x64
 8001646:	4620      	mov	r0, r4
 8001648:	f006 f8ba 	bl	80077c0 <HAL_UART_Transmit>
			}
			break;
 800164c:	e10e      	b.n	800186c <main+0x84c>

		case RFO_STOP:
			break;

		case RFO_HELP:
			__NOP();
 800164e:	bf00      	nop
			sprintf(buf, "Help Page for RFO\r\n");
 8001650:	463b      	mov	r3, r7
 8001652:	4989      	ldr	r1, [pc, #548]	; (8001878 <main+0x858>)
 8001654:	4618      	mov	r0, r3
 8001656:	f008 fd45 	bl	800a0e4 <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 800165a:	4b85      	ldr	r3, [pc, #532]	; (8001870 <main+0x850>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681c      	ldr	r4, [r3, #0]
 8001660:	463b      	mov	r3, r7
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe fd96 	bl	8000194 <strlen>
 8001668:	4603      	mov	r3, r0
 800166a:	b29a      	uxth	r2, r3
 800166c:	4639      	mov	r1, r7
 800166e:	2364      	movs	r3, #100	; 0x64
 8001670:	4620      	mov	r0, r4
 8001672:	f006 f8a5 	bl	80077c0 <HAL_UART_Transmit>
			sprintf(buf, "Commands: ");
 8001676:	463b      	mov	r3, r7
 8001678:	4980      	ldr	r1, [pc, #512]	; (800187c <main+0x85c>)
 800167a:	4618      	mov	r0, r3
 800167c:	f008 fd32 	bl	800a0e4 <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 8001680:	4b7b      	ldr	r3, [pc, #492]	; (8001870 <main+0x850>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681c      	ldr	r4, [r3, #0]
 8001686:	463b      	mov	r3, r7
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe fd83 	bl	8000194 <strlen>
 800168e:	4603      	mov	r3, r0
 8001690:	b29a      	uxth	r2, r3
 8001692:	4639      	mov	r1, r7
 8001694:	2364      	movs	r3, #100	; 0x64
 8001696:	4620      	mov	r0, r4
 8001698:	f006 f892 	bl	80077c0 <HAL_UART_Transmit>
			sprintf(buf, "pwm -<OPTION> --<INSTRUCTION>\r\n");
 800169c:	463b      	mov	r3, r7
 800169e:	4978      	ldr	r1, [pc, #480]	; (8001880 <main+0x860>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f008 fd1f 	bl	800a0e4 <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 80016a6:	4b72      	ldr	r3, [pc, #456]	; (8001870 <main+0x850>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681c      	ldr	r4, [r3, #0]
 80016ac:	463b      	mov	r3, r7
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe fd70 	bl	8000194 <strlen>
 80016b4:	4603      	mov	r3, r0
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	4639      	mov	r1, r7
 80016ba:	2364      	movs	r3, #100	; 0x64
 80016bc:	4620      	mov	r0, r4
 80016be:	f006 f87f 	bl	80077c0 <HAL_UART_Transmit>
			sprintf(buf, "          Options: -s\r\n");
 80016c2:	463b      	mov	r3, r7
 80016c4:	496f      	ldr	r1, [pc, #444]	; (8001884 <main+0x864>)
 80016c6:	4618      	mov	r0, r3
 80016c8:	f008 fd0c 	bl	800a0e4 <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 80016cc:	4b68      	ldr	r3, [pc, #416]	; (8001870 <main+0x850>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681c      	ldr	r4, [r3, #0]
 80016d2:	463b      	mov	r3, r7
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fd5d 	bl	8000194 <strlen>
 80016da:	4603      	mov	r3, r0
 80016dc:	b29a      	uxth	r2, r3
 80016de:	4639      	mov	r1, r7
 80016e0:	2364      	movs	r3, #100	; 0x64
 80016e2:	4620      	mov	r0, r4
 80016e4:	f006 f86c 	bl	80077c0 <HAL_UART_Transmit>
			sprintf(buf, "          Instructions: --duty, --freq");
 80016e8:	463b      	mov	r3, r7
 80016ea:	4967      	ldr	r1, [pc, #412]	; (8001888 <main+0x868>)
 80016ec:	4618      	mov	r0, r3
 80016ee:	f008 fcf9 	bl	800a0e4 <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 80016f2:	4b5f      	ldr	r3, [pc, #380]	; (8001870 <main+0x850>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681c      	ldr	r4, [r3, #0]
 80016f8:	463b      	mov	r3, r7
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe fd4a 	bl	8000194 <strlen>
 8001700:	4603      	mov	r3, r0
 8001702:	b29a      	uxth	r2, r3
 8001704:	4639      	mov	r1, r7
 8001706:	2364      	movs	r3, #100	; 0x64
 8001708:	4620      	mov	r0, r4
 800170a:	f006 f859 	bl	80077c0 <HAL_UART_Transmit>

			sprintf(buf, "\r\n");
 800170e:	463b      	mov	r3, r7
 8001710:	495e      	ldr	r1, [pc, #376]	; (800188c <main+0x86c>)
 8001712:	4618      	mov	r0, r3
 8001714:	f008 fce6 	bl	800a0e4 <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 8001718:	4b55      	ldr	r3, [pc, #340]	; (8001870 <main+0x850>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681c      	ldr	r4, [r3, #0]
 800171e:	463b      	mov	r3, r7
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe fd37 	bl	8000194 <strlen>
 8001726:	4603      	mov	r3, r0
 8001728:	b29a      	uxth	r2, r3
 800172a:	4639      	mov	r1, r7
 800172c:	2364      	movs	r3, #100	; 0x64
 800172e:	4620      	mov	r0, r4
 8001730:	f006 f846 	bl	80077c0 <HAL_UART_Transmit>

			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 8001734:	4b4e      	ldr	r3, [pc, #312]	; (8001870 <main+0x850>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681c      	ldr	r4, [r3, #0]
 800173a:	463b      	mov	r3, r7
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe fd29 	bl	8000194 <strlen>
 8001742:	4603      	mov	r3, r0
 8001744:	b29a      	uxth	r2, r3
 8001746:	4639      	mov	r1, r7
 8001748:	2364      	movs	r3, #100	; 0x64
 800174a:	4620      	mov	r0, r4
 800174c:	f006 f838 	bl	80077c0 <HAL_UART_Transmit>
			sprintf(buf, "          temp -<OPTION> --<INSTRUCTION>\r\n");
 8001750:	463b      	mov	r3, r7
 8001752:	494f      	ldr	r1, [pc, #316]	; (8001890 <main+0x870>)
 8001754:	4618      	mov	r0, r3
 8001756:	f008 fcc5 	bl	800a0e4 <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 800175a:	4b45      	ldr	r3, [pc, #276]	; (8001870 <main+0x850>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681c      	ldr	r4, [r3, #0]
 8001760:	463b      	mov	r3, r7
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fd16 	bl	8000194 <strlen>
 8001768:	4603      	mov	r3, r0
 800176a:	b29a      	uxth	r2, r3
 800176c:	4639      	mov	r1, r7
 800176e:	2364      	movs	r3, #100	; 0x64
 8001770:	4620      	mov	r0, r4
 8001772:	f006 f825 	bl	80077c0 <HAL_UART_Transmit>
			sprintf(buf, "          Options: -m\r\n");
 8001776:	463b      	mov	r3, r7
 8001778:	4946      	ldr	r1, [pc, #280]	; (8001894 <main+0x874>)
 800177a:	4618      	mov	r0, r3
 800177c:	f008 fcb2 	bl	800a0e4 <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 8001780:	4b3b      	ldr	r3, [pc, #236]	; (8001870 <main+0x850>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681c      	ldr	r4, [r3, #0]
 8001786:	463b      	mov	r3, r7
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fd03 	bl	8000194 <strlen>
 800178e:	4603      	mov	r3, r0
 8001790:	b29a      	uxth	r2, r3
 8001792:	4639      	mov	r1, r7
 8001794:	2364      	movs	r3, #100	; 0x64
 8001796:	4620      	mov	r0, r4
 8001798:	f006 f812 	bl	80077c0 <HAL_UART_Transmit>
			sprintf(buf, "          Instructions: --cont, --single\r\n");
 800179c:	463b      	mov	r3, r7
 800179e:	493e      	ldr	r1, [pc, #248]	; (8001898 <main+0x878>)
 80017a0:	4618      	mov	r0, r3
 80017a2:	f008 fc9f 	bl	800a0e4 <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 80017a6:	4b32      	ldr	r3, [pc, #200]	; (8001870 <main+0x850>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681c      	ldr	r4, [r3, #0]
 80017ac:	463b      	mov	r3, r7
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe fcf0 	bl	8000194 <strlen>
 80017b4:	4603      	mov	r3, r0
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	4639      	mov	r1, r7
 80017ba:	2364      	movs	r3, #100	; 0x64
 80017bc:	4620      	mov	r0, r4
 80017be:	f005 ffff 	bl	80077c0 <HAL_UART_Transmit>

			sprintf(buf, "\r\n");
 80017c2:	463b      	mov	r3, r7
 80017c4:	4931      	ldr	r1, [pc, #196]	; (800188c <main+0x86c>)
 80017c6:	4618      	mov	r0, r3
 80017c8:	f008 fc8c 	bl	800a0e4 <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 80017cc:	4b28      	ldr	r3, [pc, #160]	; (8001870 <main+0x850>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681c      	ldr	r4, [r3, #0]
 80017d2:	463b      	mov	r3, r7
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fcdd 	bl	8000194 <strlen>
 80017da:	4603      	mov	r3, r0
 80017dc:	b29a      	uxth	r2, r3
 80017de:	4639      	mov	r1, r7
 80017e0:	2364      	movs	r3, #100	; 0x64
 80017e2:	4620      	mov	r0, r4
 80017e4:	f005 ffec 	bl	80077c0 <HAL_UART_Transmit>

			sprintf(buf, "          start -<OPTION> --<INSTRUCTION>\r\n");
 80017e8:	463b      	mov	r3, r7
 80017ea:	492c      	ldr	r1, [pc, #176]	; (800189c <main+0x87c>)
 80017ec:	4618      	mov	r0, r3
 80017ee:	f008 fc79 	bl	800a0e4 <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 80017f2:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <main+0x850>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681c      	ldr	r4, [r3, #0]
 80017f8:	463b      	mov	r3, r7
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fcca 	bl	8000194 <strlen>
 8001800:	4603      	mov	r3, r0
 8001802:	b29a      	uxth	r2, r3
 8001804:	4639      	mov	r1, r7
 8001806:	2364      	movs	r3, #100	; 0x64
 8001808:	4620      	mov	r0, r4
 800180a:	f005 ffd9 	bl	80077c0 <HAL_UART_Transmit>
			sprintf(buf, "          Options: -p\r\n");
 800180e:	463b      	mov	r3, r7
 8001810:	4923      	ldr	r1, [pc, #140]	; (80018a0 <main+0x880>)
 8001812:	4618      	mov	r0, r3
 8001814:	f008 fc66 	bl	800a0e4 <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 8001818:	4b15      	ldr	r3, [pc, #84]	; (8001870 <main+0x850>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681c      	ldr	r4, [r3, #0]
 800181e:	463b      	mov	r3, r7
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fcb7 	bl	8000194 <strlen>
 8001826:	4603      	mov	r3, r0
 8001828:	b29a      	uxth	r2, r3
 800182a:	4639      	mov	r1, r7
 800182c:	2364      	movs	r3, #100	; 0x64
 800182e:	4620      	mov	r0, r4
 8001830:	f005 ffc6 	bl	80077c0 <HAL_UART_Transmit>
			sprintf(buf, "          Instructions: --nonleaded, --leaded\r\n");
 8001834:	463b      	mov	r3, r7
 8001836:	491b      	ldr	r1, [pc, #108]	; (80018a4 <main+0x884>)
 8001838:	4618      	mov	r0, r3
 800183a:	f008 fc53 	bl	800a0e4 <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <main+0x850>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681c      	ldr	r4, [r3, #0]
 8001844:	463b      	mov	r3, r7
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fca4 	bl	8000194 <strlen>
 800184c:	4603      	mov	r3, r0
 800184e:	b29a      	uxth	r2, r3
 8001850:	4639      	mov	r1, r7
 8001852:	2364      	movs	r3, #100	; 0x64
 8001854:	4620      	mov	r0, r4
 8001856:	f005 ffb3 	bl	80077c0 <HAL_UART_Transmit>


			fsm->state = RFO_IDLE;
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <main+0x888>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2200      	movs	r2, #0
 8001860:	709a      	strb	r2, [r3, #2]
			break;
 8001862:	e004      	b.n	800186e <main+0x84e>
			break;
 8001864:	bf00      	nop
 8001866:	e4e3      	b.n	8001230 <main+0x210>
			break;
 8001868:	bf00      	nop
 800186a:	e4e1      	b.n	8001230 <main+0x210>
			break;
 800186c:	bf00      	nop
		switch(fsm->state)
 800186e:	e4df      	b.n	8001230 <main+0x210>
 8001870:	20000020 	.word	0x20000020
 8001874:	0800c6b8 	.word	0x0800c6b8
 8001878:	0800c6c8 	.word	0x0800c6c8
 800187c:	0800c6dc 	.word	0x0800c6dc
 8001880:	0800c6e8 	.word	0x0800c6e8
 8001884:	0800c708 	.word	0x0800c708
 8001888:	0800c720 	.word	0x0800c720
 800188c:	0800c664 	.word	0x0800c664
 8001890:	0800c748 	.word	0x0800c748
 8001894:	0800c774 	.word	0x0800c774
 8001898:	0800c78c 	.word	0x0800c78c
 800189c:	0800c7b8 	.word	0x0800c7b8
 80018a0:	0800c7e4 	.word	0x0800c7e4
 80018a4:	0800c7fc 	.word	0x0800c7fc
 80018a8:	20000024 	.word	0x20000024

080018ac <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b09a      	sub	sp, #104	; 0x68
 80018b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b2:	f107 0320 	add.w	r3, r7, #32
 80018b6:	2248      	movs	r2, #72	; 0x48
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f007 ffa0 	bl	8009800 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]
 80018ce:	615a      	str	r2, [r3, #20]
 80018d0:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018d2:	4b27      	ldr	r3, [pc, #156]	; (8001970 <SystemClock_Config+0xc4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018da:	4a25      	ldr	r2, [pc, #148]	; (8001970 <SystemClock_Config+0xc4>)
 80018dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4b23      	ldr	r3, [pc, #140]	; (8001970 <SystemClock_Config+0xc4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80018ee:	2303      	movs	r3, #3
 80018f0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018fe:	2340      	movs	r3, #64	; 0x40
 8001900:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001902:	2302      	movs	r3, #2
 8001904:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001906:	2303      	movs	r3, #3
 8001908:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800190a:	2310      	movs	r3, #16
 800190c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 8;
 800190e:	2308      	movs	r3, #8
 8001910:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001912:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001916:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001918:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800191c:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800191e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001922:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001924:	f107 0320 	add.w	r3, r7, #32
 8001928:	4618      	mov	r0, r3
 800192a:	f002 fe6d 	bl	8004608 <HAL_RCC_OscConfig>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <SystemClock_Config+0x8c>
	{
		Error_Handler();
 8001934:	f000 fef2 	bl	800271c <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001938:	236f      	movs	r3, #111	; 0x6f
 800193a:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800193c:	2303      	movs	r3, #3
 800193e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001944:	2300      	movs	r3, #0
 8001946:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001950:	2300      	movs	r3, #0
 8001952:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	2103      	movs	r1, #3
 8001958:	4618      	mov	r0, r3
 800195a:	f003 f9e3 	bl	8004d24 <HAL_RCC_ClockConfig>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <SystemClock_Config+0xbc>
	{
		Error_Handler();
 8001964:	f000 feda 	bl	800271c <Error_Handler>
	}
}
 8001968:	bf00      	nop
 800196a:	3768      	adds	r7, #104	; 0x68
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	58000400 	.word	0x58000400

08001974 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b094      	sub	sp, #80	; 0x50
 8001978:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800197a:	463b      	mov	r3, r7
 800197c:	2250      	movs	r2, #80	; 0x50
 800197e:	2100      	movs	r1, #0
 8001980:	4618      	mov	r0, r3
 8001982:	f007 ff3d 	bl	8009800 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8001986:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800198a:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800198c:	2300      	movs	r3, #0
 800198e:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001990:	2310      	movs	r3, #16
 8001992:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001994:	463b      	mov	r3, r7
 8001996:	4618      	mov	r0, r3
 8001998:	f003 fe01 	bl	800559e <HAL_RCCEx_PeriphCLKConfig>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <PeriphCommonClock_Config+0x32>
	{
		Error_Handler();
 80019a2:	f000 febb 	bl	800271c <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 80019a6:	bf00      	nop
 80019a8:	3750      	adds	r7, #80	; 0x50
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	af00      	add	r7, sp, #0
	/* USART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2100      	movs	r1, #0
 80019b6:	2024      	movs	r0, #36	; 0x24
 80019b8:	f001 fef1 	bl	800379e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019bc:	2024      	movs	r0, #36	; 0x24
 80019be:	f001 ff08 	bl	80037d2 <HAL_NVIC_EnableIRQ>
	/* LPUART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2100      	movs	r1, #0
 80019c6:	2025      	movs	r0, #37	; 0x25
 80019c8:	f001 fee9 	bl	800379e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80019cc:	2025      	movs	r0, #37	; 0x25
 80019ce:	f001 ff00 	bl	80037d2 <HAL_NVIC_EnableIRQ>
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	201c      	movs	r0, #28
 80019d8:	f001 fee1 	bl	800379e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019dc:	201c      	movs	r0, #28
 80019de:	f001 fef8 	bl	80037d2 <HAL_NVIC_EnableIRQ>
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80019ec:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <MX_I2C1_Init+0x74>)
 80019ee:	4a1c      	ldr	r2, [pc, #112]	; (8001a60 <MX_I2C1_Init+0x78>)
 80019f0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10707DBC;
 80019f2:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <MX_I2C1_Init+0x74>)
 80019f4:	4a1b      	ldr	r2, [pc, #108]	; (8001a64 <MX_I2C1_Init+0x7c>)
 80019f6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80019f8:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <MX_I2C1_Init+0x74>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <MX_I2C1_Init+0x74>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a04:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <MX_I2C1_Init+0x74>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <MX_I2C1_Init+0x74>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <MX_I2C1_Init+0x74>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <MX_I2C1_Init+0x74>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <MX_I2C1_Init+0x74>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a22:	480e      	ldr	r0, [pc, #56]	; (8001a5c <MX_I2C1_Init+0x74>)
 8001a24:	f002 f936 	bl	8003c94 <HAL_I2C_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8001a2e:	f000 fe75 	bl	800271c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a32:	2100      	movs	r1, #0
 8001a34:	4809      	ldr	r0, [pc, #36]	; (8001a5c <MX_I2C1_Init+0x74>)
 8001a36:	f002 f9bc 	bl	8003db2 <HAL_I2CEx_ConfigAnalogFilter>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001a40:	f000 fe6c 	bl	800271c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a44:	2100      	movs	r1, #0
 8001a46:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_I2C1_Init+0x74>)
 8001a48:	f002 f9fe 	bl	8003e48 <HAL_I2CEx_ConfigDigitalFilter>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8001a52:	f000 fe63 	bl	800271c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000022c 	.word	0x2000022c
 8001a60:	40005400 	.word	0x40005400
 8001a64:	10707dbc 	.word	0x10707dbc

08001a68 <MX_LPUART1_UART_Init>:
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 8001a6c:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <MX_LPUART1_UART_Init+0x90>)
 8001a6e:	4a23      	ldr	r2, [pc, #140]	; (8001afc <MX_LPUART1_UART_Init+0x94>)
 8001a70:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 8001a72:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <MX_LPUART1_UART_Init+0x90>)
 8001a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a78:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <MX_LPUART1_UART_Init+0x90>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001a80:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <MX_LPUART1_UART_Init+0x90>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001a86:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <MX_LPUART1_UART_Init+0x90>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <MX_LPUART1_UART_Init+0x90>)
 8001a8e:	220c      	movs	r2, #12
 8001a90:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a92:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <MX_LPUART1_UART_Init+0x90>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <MX_LPUART1_UART_Init+0x90>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a9e:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <MX_LPUART1_UART_Init+0x90>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <MX_LPUART1_UART_Init+0x90>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	629a      	str	r2, [r3, #40]	; 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001aaa:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <MX_LPUART1_UART_Init+0x90>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	665a      	str	r2, [r3, #100]	; 0x64
	if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001ab0:	4811      	ldr	r0, [pc, #68]	; (8001af8 <MX_LPUART1_UART_Init+0x90>)
 8001ab2:	f005 fe35 	bl	8007720 <HAL_UART_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_LPUART1_UART_Init+0x58>
	{
		Error_Handler();
 8001abc:	f000 fe2e 	bl	800271c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	480d      	ldr	r0, [pc, #52]	; (8001af8 <MX_LPUART1_UART_Init+0x90>)
 8001ac4:	f007 fda7 	bl	8009616 <HAL_UARTEx_SetTxFifoThreshold>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_LPUART1_UART_Init+0x6a>
	{
		Error_Handler();
 8001ace:	f000 fe25 	bl	800271c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4808      	ldr	r0, [pc, #32]	; (8001af8 <MX_LPUART1_UART_Init+0x90>)
 8001ad6:	f007 fddc 	bl	8009692 <HAL_UARTEx_SetRxFifoThreshold>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_LPUART1_UART_Init+0x7c>
	{
		Error_Handler();
 8001ae0:	f000 fe1c 	bl	800271c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001ae4:	4804      	ldr	r0, [pc, #16]	; (8001af8 <MX_LPUART1_UART_Init+0x90>)
 8001ae6:	f007 fd5d 	bl	80095a4 <HAL_UARTEx_DisableFifoMode>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_LPUART1_UART_Init+0x8c>
	{
		Error_Handler();
 8001af0:	f000 fe14 	bl	800271c <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000278 	.word	0x20000278
 8001afc:	40008000 	.word	0x40008000

08001b00 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001b04:	4b22      	ldr	r3, [pc, #136]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b06:	4a23      	ldr	r2, [pc, #140]	; (8001b94 <MX_USART1_UART_Init+0x94>)
 8001b08:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001b0a:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b10:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b12:	4b1f      	ldr	r3, [pc, #124]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001b24:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b26:	220c      	movs	r2, #12
 8001b28:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b2a:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b36:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b3c:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b42:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b48:	4811      	ldr	r0, [pc, #68]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b4a:	f005 fde9 	bl	8007720 <HAL_UART_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 8001b54:	f000 fde2 	bl	800271c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b58:	2100      	movs	r1, #0
 8001b5a:	480d      	ldr	r0, [pc, #52]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b5c:	f007 fd5b 	bl	8009616 <HAL_UARTEx_SetTxFifoThreshold>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_USART1_UART_Init+0x6a>
	{
		Error_Handler();
 8001b66:	f000 fdd9 	bl	800271c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4808      	ldr	r0, [pc, #32]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b6e:	f007 fd90 	bl	8009692 <HAL_UARTEx_SetRxFifoThreshold>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_USART1_UART_Init+0x7c>
	{
		Error_Handler();
 8001b78:	f000 fdd0 	bl	800271c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b7c:	4804      	ldr	r0, [pc, #16]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b7e:	f007 fd11 	bl	80095a4 <HAL_UARTEx_DisableFifoMode>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 8001b88:	f000 fdc8 	bl	800271c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000308 	.word	0x20000308
 8001b94:	40013800 	.word	0x40013800

08001b98 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001b9e:	4a1c      	ldr	r2, [pc, #112]	; (8001c10 <MX_SPI1_Init+0x78>)
 8001ba0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ba2:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001ba4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ba8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001baa:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001bac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bb0:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bb2:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001bb4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001bb8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bba:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bcc:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001bd0:	2230      	movs	r2, #48	; 0x30
 8001bd2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001be0:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001be8:	2207      	movs	r2, #7
 8001bea:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bec:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bf8:	4804      	ldr	r0, [pc, #16]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001bfa:	f003 ff57 	bl	8005aac <HAL_SPI_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_SPI1_Init+0x70>
	{
		Error_Handler();
 8001c04:	f000 fd8a 	bl	800271c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000398 	.word	0x20000398
 8001c10:	40013000 	.word	0x40013000

08001c14 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b098      	sub	sp, #96	; 0x60
 8001c18:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c1a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001c26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
 8001c34:	611a      	str	r2, [r3, #16]
 8001c36:	615a      	str	r2, [r3, #20]
 8001c38:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	2234      	movs	r2, #52	; 0x34
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f007 fddd 	bl	8009800 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001c46:	4b41      	ldr	r3, [pc, #260]	; (8001d4c <MX_TIM1_Init+0x138>)
 8001c48:	4a41      	ldr	r2, [pc, #260]	; (8001d50 <MX_TIM1_Init+0x13c>)
 8001c4a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 250;
 8001c4c:	4b3f      	ldr	r3, [pc, #252]	; (8001d4c <MX_TIM1_Init+0x138>)
 8001c4e:	22fa      	movs	r2, #250	; 0xfa
 8001c50:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c52:	4b3e      	ldr	r3, [pc, #248]	; (8001d4c <MX_TIM1_Init+0x138>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 256;
 8001c58:	4b3c      	ldr	r3, [pc, #240]	; (8001d4c <MX_TIM1_Init+0x138>)
 8001c5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c5e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c60:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <MX_TIM1_Init+0x138>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001c66:	4b39      	ldr	r3, [pc, #228]	; (8001d4c <MX_TIM1_Init+0x138>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c6c:	4b37      	ldr	r3, [pc, #220]	; (8001d4c <MX_TIM1_Init+0x138>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c72:	4836      	ldr	r0, [pc, #216]	; (8001d4c <MX_TIM1_Init+0x138>)
 8001c74:	f004 fd91 	bl	800679a <HAL_TIM_PWM_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM1_Init+0x6e>
	{
		Error_Handler();
 8001c7e:	f000 fd4d 	bl	800271c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c92:	4619      	mov	r1, r3
 8001c94:	482d      	ldr	r0, [pc, #180]	; (8001d4c <MX_TIM1_Init+0x138>)
 8001c96:	f005 fc15 	bl	80074c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 8001ca0:	f000 fd3c 	bl	800271c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ca4:	2360      	movs	r3, #96	; 0x60
 8001ca6:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cac:	2300      	movs	r3, #0
 8001cae:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cc0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4820      	ldr	r0, [pc, #128]	; (8001d4c <MX_TIM1_Init+0x138>)
 8001cca:	f004 ffb7 	bl	8006c3c <HAL_TIM_PWM_ConfigChannel>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM1_Init+0xc4>
	{
		Error_Handler();
 8001cd4:	f000 fd22 	bl	800271c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cd8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cdc:	2204      	movs	r2, #4
 8001cde:	4619      	mov	r1, r3
 8001ce0:	481a      	ldr	r0, [pc, #104]	; (8001d4c <MX_TIM1_Init+0x138>)
 8001ce2:	f004 ffab 	bl	8006c3c <HAL_TIM_PWM_ConfigChannel>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM1_Init+0xdc>
	{
		Error_Handler();
 8001cec:	f000 fd16 	bl	800271c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d08:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d20:	2300      	movs	r3, #0
 8001d22:	633b      	str	r3, [r7, #48]	; 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4807      	ldr	r0, [pc, #28]	; (8001d4c <MX_TIM1_Init+0x138>)
 8001d2e:	f005 fc29 	bl	8007584 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM1_Init+0x128>
	{
		Error_Handler();
 8001d38:	f000 fcf0 	bl	800271c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001d3c:	4803      	ldr	r0, [pc, #12]	; (8001d4c <MX_TIM1_Init+0x138>)
 8001d3e:	f001 f9af 	bl	80030a0 <HAL_TIM_MspPostInit>

}
 8001d42:	bf00      	nop
 8001d44:	3760      	adds	r7, #96	; 0x60
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200003fc 	.word	0x200003fc
 8001d50:	40012c00 	.word	0x40012c00

08001d54 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	; 0x28
 8001d58:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001d66:	463b      	mov	r3, r7
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
 8001d74:	615a      	str	r2, [r3, #20]
 8001d76:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001d78:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <MX_TIM2_Init+0xb0>)
 8001d7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d7e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 8000-1;
 8001d80:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <MX_TIM2_Init+0xb0>)
 8001d82:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001d86:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d88:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <MX_TIM2_Init+0xb0>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4;
 8001d8e:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <MX_TIM2_Init+0xb0>)
 8001d90:	2204      	movs	r2, #4
 8001d92:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d94:	4b1b      	ldr	r3, [pc, #108]	; (8001e04 <MX_TIM2_Init+0xb0>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d9a:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <MX_TIM2_Init+0xb0>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001da0:	4818      	ldr	r0, [pc, #96]	; (8001e04 <MX_TIM2_Init+0xb0>)
 8001da2:	f004 fcfa 	bl	800679a <HAL_TIM_PWM_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 8001dac:	f000 fcb6 	bl	800271c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001db8:	f107 031c 	add.w	r3, r7, #28
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4811      	ldr	r0, [pc, #68]	; (8001e04 <MX_TIM2_Init+0xb0>)
 8001dc0:	f005 fb80 	bl	80074c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_TIM2_Init+0x7a>
	{
		Error_Handler();
 8001dca:	f000 fca7 	bl	800271c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dce:	2360      	movs	r3, #96	; 0x60
 8001dd0:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 2;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dde:	463b      	mov	r3, r7
 8001de0:	2200      	movs	r2, #0
 8001de2:	4619      	mov	r1, r3
 8001de4:	4807      	ldr	r0, [pc, #28]	; (8001e04 <MX_TIM2_Init+0xb0>)
 8001de6:	f004 ff29 	bl	8006c3c <HAL_TIM_PWM_ConfigChannel>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_TIM2_Init+0xa0>
	{
		Error_Handler();
 8001df0:	f000 fc94 	bl	800271c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001df4:	4803      	ldr	r0, [pc, #12]	; (8001e04 <MX_TIM2_Init+0xb0>)
 8001df6:	f001 f953 	bl	80030a0 <HAL_TIM_MspPostInit>

}
 8001dfa:	bf00      	nop
 8001dfc:	3728      	adds	r7, #40	; 0x28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000448 	.word	0x20000448

08001e08 <MX_TIM16_Init>:
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8001e0c:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <MX_TIM16_Init+0x48>)
 8001e0e:	4a11      	ldr	r2, [pc, #68]	; (8001e54 <MX_TIM16_Init+0x4c>)
 8001e10:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 64000;
 8001e12:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <MX_TIM16_Init+0x48>)
 8001e14:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001e18:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <MX_TIM16_Init+0x48>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 500;
 8001e20:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <MX_TIM16_Init+0x48>)
 8001e22:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001e26:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <MX_TIM16_Init+0x48>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8001e2e:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <MX_TIM16_Init+0x48>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <MX_TIM16_Init+0x48>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001e3a:	4805      	ldr	r0, [pc, #20]	; (8001e50 <MX_TIM16_Init+0x48>)
 8001e3c:	f004 fbd8 	bl	80065f0 <HAL_TIM_Base_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM16_Init+0x42>
	{
		Error_Handler();
 8001e46:	f000 fc69 	bl	800271c <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000494 	.word	0x20000494
 8001e54:	40014400 	.word	0x40014400

08001e58 <MX_TIM17_Init>:
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM17_Init 0 */

	/* USER CODE BEGIN TIM17_Init 1 */

	/* USER CODE END TIM17_Init 1 */
	htim17.Instance = TIM17;
 8001e5c:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <MX_TIM17_Init+0x44>)
 8001e5e:	4a10      	ldr	r2, [pc, #64]	; (8001ea0 <MX_TIM17_Init+0x48>)
 8001e60:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = 64000-1;
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <MX_TIM17_Init+0x44>)
 8001e64:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001e68:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6a:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <MX_TIM17_Init+0x44>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 50;
 8001e70:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <MX_TIM17_Init+0x44>)
 8001e72:	2232      	movs	r2, #50	; 0x32
 8001e74:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <MX_TIM17_Init+0x44>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 8001e7c:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <MX_TIM17_Init+0x44>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <MX_TIM17_Init+0x44>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001e88:	4804      	ldr	r0, [pc, #16]	; (8001e9c <MX_TIM17_Init+0x44>)
 8001e8a:	f004 fbb1 	bl	80065f0 <HAL_TIM_Base_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM17_Init+0x40>
	{
		Error_Handler();
 8001e94:	f000 fc42 	bl	800271c <Error_Handler>
	}
	/* USER CODE BEGIN TIM17_Init 2 */

	/* USER CODE END TIM17_Init 2 */

}
 8001e98:	bf00      	nop
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	200004e0 	.word	0x200004e0
 8001ea0:	40014800 	.word	0x40014800

08001ea4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb8:	2004      	movs	r0, #4
 8001eba:	f7ff f85b 	bl	8000f74 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ebe:	2002      	movs	r0, #2
 8001ec0:	f7ff f858 	bl	8000f74 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f7ff f855 	bl	8000f74 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, T1_CS_Pin|T2_CS_Pin, GPIO_PIN_RESET);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2130      	movs	r1, #48	; 0x30
 8001ece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed2:	f001 fec7 	bl	8003c64 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(WS_DATA_GPIO_Port, WS_DATA_Pin, GPIO_PIN_RESET);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2102      	movs	r1, #2
 8001eda:	4811      	ldr	r0, [pc, #68]	; (8001f20 <MX_GPIO_Init+0x7c>)
 8001edc:	f001 fec2 	bl	8003c64 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : T1_CS_Pin T2_CS_Pin */
	GPIO_InitStruct.Pin = T1_CS_Pin|T2_CS_Pin;
 8001ee0:	2330      	movs	r3, #48	; 0x30
 8001ee2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eec:	2300      	movs	r3, #0
 8001eee:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef8:	f001 fd44 	bl	8003984 <HAL_GPIO_Init>

	/*Configure GPIO pin : WS_DATA_Pin */
	GPIO_InitStruct.Pin = WS_DATA_Pin;
 8001efc:	2302      	movs	r3, #2
 8001efe:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f00:	2301      	movs	r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(WS_DATA_GPIO_Port, &GPIO_InitStruct);
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4803      	ldr	r0, [pc, #12]	; (8001f20 <MX_GPIO_Init+0x7c>)
 8001f12:	f001 fd37 	bl	8003984 <HAL_GPIO_Init>

}
 8001f16:	bf00      	nop
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	48000400 	.word	0x48000400

08001f24 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	dp->trmRdy = 1;
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <HAL_UART_TxCpltCallback+0x1c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2201      	movs	r2, #1
 8001f32:	709a      	strb	r2, [r3, #2]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	20000030 	.word	0x20000030

08001f44 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == LPUART1){
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a76      	ldr	r2, [pc, #472]	; (800212c <HAL_UART_RxCpltCallback+0x1e8>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d11d      	bne.n	8001f92 <HAL_UART_RxCpltCallback+0x4e>
		if(HAL_UART_Transmit(dev->uart, dev->rcv, 1, 1000) == HAL_OK) {
 8001f56:	4b76      	ldr	r3, [pc, #472]	; (8002130 <HAL_UART_RxCpltCallback+0x1ec>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	4b74      	ldr	r3, [pc, #464]	; (8002130 <HAL_UART_RxCpltCallback+0x1ec>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	1d19      	adds	r1, r3, #4
 8001f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f66:	2201      	movs	r2, #1
 8001f68:	f005 fc2a 	bl	80077c0 <HAL_UART_Transmit>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f040 80d7 	bne.w	8002122 <HAL_UART_RxCpltCallback+0x1de>
			fsm->state = RFO_PROCESS_CMD;
 8001f74:	4b6f      	ldr	r3, [pc, #444]	; (8002134 <HAL_UART_RxCpltCallback+0x1f0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	709a      	strb	r2, [r3, #2]
			HAL_UART_Receive_IT(dev->uart, dev->rcv, 1);
 8001f7c:	4b6c      	ldr	r3, [pc, #432]	; (8002130 <HAL_UART_RxCpltCallback+0x1ec>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6818      	ldr	r0, [r3, #0]
 8001f82:	4b6b      	ldr	r3, [pc, #428]	; (8002130 <HAL_UART_RxCpltCallback+0x1ec>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	3304      	adds	r3, #4
 8001f88:	2201      	movs	r2, #1
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f005 fd82 	bl	8007a94 <HAL_UART_Receive_IT>
					break;
		}

		HAL_UART_Receive_IT(&huart1, dp->rcv, 4);
	}
}
 8001f90:	e0c7      	b.n	8002122 <HAL_UART_RxCpltCallback+0x1de>
	else if(huart->Instance == USART1)  {
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a68      	ldr	r2, [pc, #416]	; (8002138 <HAL_UART_RxCpltCallback+0x1f4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	f040 80c2 	bne.w	8002122 <HAL_UART_RxCpltCallback+0x1de>
		nextion_decode_response(dp);
 8001f9e:	4b67      	ldr	r3, [pc, #412]	; (800213c <HAL_UART_RxCpltCallback+0x1f8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 fca6 	bl	80028f4 <nextion_decode_response>
		switch(dp->response.page) {
 8001fa8:	4b64      	ldr	r3, [pc, #400]	; (800213c <HAL_UART_RxCpltCallback+0x1f8>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	d075      	beq.n	800209e <HAL_UART_RxCpltCallback+0x15a>
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	f300 80ad 	bgt.w	8002112 <HAL_UART_RxCpltCallback+0x1ce>
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d002      	beq.n	8001fc2 <HAL_UART_RxCpltCallback+0x7e>
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d055      	beq.n	800206c <HAL_UART_RxCpltCallback+0x128>
 8001fc0:	e0a7      	b.n	8002112 <HAL_UART_RxCpltCallback+0x1ce>
			switch(dp->response.id) {
 8001fc2:	4b5e      	ldr	r3, [pc, #376]	; (800213c <HAL_UART_RxCpltCallback+0x1f8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	785b      	ldrb	r3, [r3, #1]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d002      	beq.n	8001fd2 <HAL_UART_RxCpltCallback+0x8e>
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	d038      	beq.n	8002042 <HAL_UART_RxCpltCallback+0xfe>
			break;
 8001fd0:	e09f      	b.n	8002112 <HAL_UART_RxCpltCallback+0x1ce>
				beep_IT(dev,3);
 8001fd2:	4b57      	ldr	r3, [pc, #348]	; (8002130 <HAL_UART_RxCpltCallback+0x1ec>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2103      	movs	r1, #3
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe ffff 	bl	8000fdc <beep_IT>
				dp->write(dp, "page reflow");
 8001fde:	4b57      	ldr	r3, [pc, #348]	; (800213c <HAL_UART_RxCpltCallback+0x1f8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001fe4:	4a55      	ldr	r2, [pc, #340]	; (800213c <HAL_UART_RxCpltCallback+0x1f8>)
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	4955      	ldr	r1, [pc, #340]	; (8002140 <HAL_UART_RxCpltCallback+0x1fc>)
 8001fea:	4610      	mov	r0, r2
 8001fec:	4798      	blx	r3
				dp->write_id_str(dp, "conState", "Not connected");
 8001fee:	4b53      	ldr	r3, [pc, #332]	; (800213c <HAL_UART_RxCpltCallback+0x1f8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff4:	4a51      	ldr	r2, [pc, #324]	; (800213c <HAL_UART_RxCpltCallback+0x1f8>)
 8001ff6:	6810      	ldr	r0, [r2, #0]
 8001ff8:	4a52      	ldr	r2, [pc, #328]	; (8002144 <HAL_UART_RxCpltCallback+0x200>)
 8001ffa:	4953      	ldr	r1, [pc, #332]	; (8002148 <HAL_UART_RxCpltCallback+0x204>)
 8001ffc:	4798      	blx	r3
				dp->write_id_str(dp, "reflowState", "Prepare");
 8001ffe:	4b4f      	ldr	r3, [pc, #316]	; (800213c <HAL_UART_RxCpltCallback+0x1f8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	4a4d      	ldr	r2, [pc, #308]	; (800213c <HAL_UART_RxCpltCallback+0x1f8>)
 8002006:	6810      	ldr	r0, [r2, #0]
 8002008:	4a50      	ldr	r2, [pc, #320]	; (800214c <HAL_UART_RxCpltCallback+0x208>)
 800200a:	4951      	ldr	r1, [pc, #324]	; (8002150 <HAL_UART_RxCpltCallback+0x20c>)
 800200c:	4798      	blx	r3
				dp->write_id_val(dp, "reflowProgress", 0);
 800200e:	4b4b      	ldr	r3, [pc, #300]	; (800213c <HAL_UART_RxCpltCallback+0x1f8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002014:	4a49      	ldr	r2, [pc, #292]	; (800213c <HAL_UART_RxCpltCallback+0x1f8>)
 8002016:	6810      	ldr	r0, [r2, #0]
 8002018:	2200      	movs	r2, #0
 800201a:	494e      	ldr	r1, [pc, #312]	; (8002154 <HAL_UART_RxCpltCallback+0x210>)
 800201c:	4798      	blx	r3
				fsm->state = RFO_START;
 800201e:	4b45      	ldr	r3, [pc, #276]	; (8002134 <HAL_UART_RxCpltCallback+0x1f0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2205      	movs	r2, #5
 8002024:	709a      	strb	r2, [r3, #2]
				dev->currentReflowState = REFLOW_STATE_PREPARE;
 8002026:	4b42      	ldr	r3, [pc, #264]	; (8002130 <HAL_UART_RxCpltCallback+0x1ec>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2202      	movs	r2, #2
 800202c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				dev->print = true;
 8002030:	4b3f      	ldr	r3, [pc, #252]	; (8002130 <HAL_UART_RxCpltCallback+0x1ec>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				HAL_TIM_Base_Start_IT(&htim16);
 800203a:	4847      	ldr	r0, [pc, #284]	; (8002158 <HAL_UART_RxCpltCallback+0x214>)
 800203c:	f004 fb30 	bl	80066a0 <HAL_TIM_Base_Start_IT>
				break;
 8002040:	e013      	b.n	800206a <HAL_UART_RxCpltCallback+0x126>
				beep_IT(dev,1);
 8002042:	4b3b      	ldr	r3, [pc, #236]	; (8002130 <HAL_UART_RxCpltCallback+0x1ec>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2101      	movs	r1, #1
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe ffc7 	bl	8000fdc <beep_IT>
				dp->write(dp, "page setting");
 800204e:	4b3b      	ldr	r3, [pc, #236]	; (800213c <HAL_UART_RxCpltCallback+0x1f8>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002054:	4a39      	ldr	r2, [pc, #228]	; (800213c <HAL_UART_RxCpltCallback+0x1f8>)
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	4940      	ldr	r1, [pc, #256]	; (800215c <HAL_UART_RxCpltCallback+0x218>)
 800205a:	4610      	mov	r0, r2
 800205c:	4798      	blx	r3
				dev->currentPage = DP_SETTINGS;
 800205e:	4b34      	ldr	r3, [pc, #208]	; (8002130 <HAL_UART_RxCpltCallback+0x1ec>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				break;
 8002068:	bf00      	nop
			break;
 800206a:	e052      	b.n	8002112 <HAL_UART_RxCpltCallback+0x1ce>
				switch(dp->response.id) {
 800206c:	4b33      	ldr	r3, [pc, #204]	; (800213c <HAL_UART_RxCpltCallback+0x1f8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	785b      	ldrb	r3, [r3, #1]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d14a      	bne.n	800210c <HAL_UART_RxCpltCallback+0x1c8>
					dp->write(dp, "page main");
 8002076:	4b31      	ldr	r3, [pc, #196]	; (800213c <HAL_UART_RxCpltCallback+0x1f8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800207c:	4a2f      	ldr	r2, [pc, #188]	; (800213c <HAL_UART_RxCpltCallback+0x1f8>)
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	4937      	ldr	r1, [pc, #220]	; (8002160 <HAL_UART_RxCpltCallback+0x21c>)
 8002082:	4610      	mov	r0, r2
 8002084:	4798      	blx	r3
					dev->currentPage = DP_MAIN;
 8002086:	4b2a      	ldr	r3, [pc, #168]	; (8002130 <HAL_UART_RxCpltCallback+0x1ec>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
					nextion_print_page(dp);
 8002090:	4b2a      	ldr	r3, [pc, #168]	; (800213c <HAL_UART_RxCpltCallback+0x1f8>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f000 fc47 	bl	8002928 <nextion_print_page>
					break;
 800209a:	bf00      	nop
				break;
 800209c:	e036      	b.n	800210c <HAL_UART_RxCpltCallback+0x1c8>
					switch(dp->response.id) {
 800209e:	4b27      	ldr	r3, [pc, #156]	; (800213c <HAL_UART_RxCpltCallback+0x1f8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	785b      	ldrb	r3, [r3, #1]
 80020a4:	2b0f      	cmp	r3, #15
 80020a6:	d133      	bne.n	8002110 <HAL_UART_RxCpltCallback+0x1cc>
						beep_IT(dev,3);
 80020a8:	4b21      	ldr	r3, [pc, #132]	; (8002130 <HAL_UART_RxCpltCallback+0x1ec>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2103      	movs	r1, #3
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe ff94 	bl	8000fdc <beep_IT>
						HAL_TIM_Base_Stop_IT(&htim16);
 80020b4:	4828      	ldr	r0, [pc, #160]	; (8002158 <HAL_UART_RxCpltCallback+0x214>)
 80020b6:	f004 fb41 	bl	800673c <HAL_TIM_Base_Stop_IT>
						dev->currentReflowState = REFLOW_STATE_IDLE;
 80020ba:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <HAL_UART_RxCpltCallback+0x1ec>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
						fsm->state = RFO_IDLE;
 80020c4:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <HAL_UART_RxCpltCallback+0x1f0>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2200      	movs	r2, #0
 80020ca:	709a      	strb	r2, [r3, #2]
						dev->elaps = 0;
 80020cc:	4b18      	ldr	r3, [pc, #96]	; (8002130 <HAL_UART_RxCpltCallback+0x1ec>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2200      	movs	r2, #0
 80020d2:	64da      	str	r2, [r3, #76]	; 0x4c
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80020d4:	4b23      	ldr	r3, [pc, #140]	; (8002164 <HAL_UART_RxCpltCallback+0x220>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2200      	movs	r2, #0
 80020da:	635a      	str	r2, [r3, #52]	; 0x34
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80020dc:	4b21      	ldr	r3, [pc, #132]	; (8002164 <HAL_UART_RxCpltCallback+0x220>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2200      	movs	r2, #0
 80020e2:	639a      	str	r2, [r3, #56]	; 0x38
						dp->write(dp, "page main");
 80020e4:	4b15      	ldr	r3, [pc, #84]	; (800213c <HAL_UART_RxCpltCallback+0x1f8>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020ea:	4a14      	ldr	r2, [pc, #80]	; (800213c <HAL_UART_RxCpltCallback+0x1f8>)
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	491c      	ldr	r1, [pc, #112]	; (8002160 <HAL_UART_RxCpltCallback+0x21c>)
 80020f0:	4610      	mov	r0, r2
 80020f2:	4798      	blx	r3
						dev->currentPage = DP_MAIN;
 80020f4:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <HAL_UART_RxCpltCallback+0x1ec>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
						nextion_print_page(dp);
 80020fe:	4b0f      	ldr	r3, [pc, #60]	; (800213c <HAL_UART_RxCpltCallback+0x1f8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f000 fc10 	bl	8002928 <nextion_print_page>
						break;
 8002108:	bf00      	nop
					break;
 800210a:	e001      	b.n	8002110 <HAL_UART_RxCpltCallback+0x1cc>
				break;
 800210c:	bf00      	nop
 800210e:	e000      	b.n	8002112 <HAL_UART_RxCpltCallback+0x1ce>
					break;
 8002110:	bf00      	nop
		HAL_UART_Receive_IT(&huart1, dp->rcv, 4);
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <HAL_UART_RxCpltCallback+0x1f8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	3308      	adds	r3, #8
 8002118:	2204      	movs	r2, #4
 800211a:	4619      	mov	r1, r3
 800211c:	4812      	ldr	r0, [pc, #72]	; (8002168 <HAL_UART_RxCpltCallback+0x224>)
 800211e:	f005 fcb9 	bl	8007a94 <HAL_UART_Receive_IT>
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40008000 	.word	0x40008000
 8002130:	20000020 	.word	0x20000020
 8002134:	20000024 	.word	0x20000024
 8002138:	40013800 	.word	0x40013800
 800213c:	20000030 	.word	0x20000030
 8002140:	0800c668 	.word	0x0800c668
 8002144:	0800c82c 	.word	0x0800c82c
 8002148:	0800c680 	.word	0x0800c680
 800214c:	0800c68c 	.word	0x0800c68c
 8002150:	0800c694 	.word	0x0800c694
 8002154:	0800c6a0 	.word	0x0800c6a0
 8002158:	20000494 	.word	0x20000494
 800215c:	0800c83c 	.word	0x0800c83c
 8002160:	0800c658 	.word	0x0800c658
 8002164:	200003fc 	.word	0x200003fc
 8002168:	20000308 	.word	0x20000308

0800216c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM17) {
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a9a      	ldr	r2, [pc, #616]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d13e      	bne.n	80021fc <HAL_TIM_PeriodElapsedCallback+0x90>

		if(dev->cntBeeps == 2*dev->numBeeps-1) {
 800217e:	4b9a      	ldr	r3, [pc, #616]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002186:	461a      	mov	r2, r3
 8002188:	4b97      	ldr	r3, [pc, #604]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	3b01      	subs	r3, #1
 8002194:	429a      	cmp	r2, r3
 8002196:	d110      	bne.n	80021ba <HAL_TIM_PeriodElapsedCallback+0x4e>
			__HAL_TIM_SET_COMPARE(dev->buzPwmTim, TIM_CHANNEL_1, 0);
 8002198:	4b93      	ldr	r3, [pc, #588]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2200      	movs	r2, #0
 80021a2:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_Base_Stop_IT(dev->buzElapsTim);
 80021a4:	4b90      	ldr	r3, [pc, #576]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021aa:	4618      	mov	r0, r3
 80021ac:	f004 fac6 	bl	800673c <HAL_TIM_Base_Stop_IT>
			dev->cntBeeps = 0;
 80021b0:	4b8d      	ldr	r3, [pc, #564]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		}

		if(dev->cntBeeps % 2) {
 80021ba:	4b8b      	ldr	r3, [pc, #556]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d006      	beq.n	80021da <HAL_TIM_PeriodElapsedCallback+0x6e>
			__HAL_TIM_SET_COMPARE(dev->buzPwmTim, TIM_CHANNEL_1, 2);
 80021cc:	4b86      	ldr	r3, [pc, #536]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2202      	movs	r2, #2
 80021d6:	635a      	str	r2, [r3, #52]	; 0x34
 80021d8:	e005      	b.n	80021e6 <HAL_TIM_PeriodElapsedCallback+0x7a>
		}
		else {
			__HAL_TIM_SET_COMPARE(dev->buzPwmTim, TIM_CHANNEL_1, 0);
 80021da:	4b83      	ldr	r3, [pc, #524]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2200      	movs	r2, #0
 80021e4:	635a      	str	r2, [r3, #52]	; 0x34
		}

		dev->cntBeeps += 1;
 80021e6:	4b80      	ldr	r3, [pc, #512]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80021ee:	4b7e      	ldr	r3, [pc, #504]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	3201      	adds	r2, #1
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

		dev->dataRdy = true;

	}

}
 80021fa:	e27d      	b.n	80026f8 <HAL_TIM_PeriodElapsedCallback+0x58c>
	else if(htim->Instance == TIM16) {
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a7a      	ldr	r2, [pc, #488]	; (80023ec <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002202:	4293      	cmp	r3, r2
 8002204:	f040 8278 	bne.w	80026f8 <HAL_TIM_PeriodElapsedCallback+0x58c>
		MAX31855_read_celsius(tempSens);
 8002208:	4b79      	ldr	r3, [pc, #484]	; (80023f0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe fe53 	bl	8000eb8 <MAX31855_read_celsius>
		dev->elaps += 1;
 8002212:	4b75      	ldr	r3, [pc, #468]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002218:	4b73      	ldr	r3, [pc, #460]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	3201      	adds	r2, #1
 800221e:	64da      	str	r2, [r3, #76]	; 0x4c
		dev->temp = tempSens->temp;
 8002220:	4b73      	ldr	r3, [pc, #460]	; (80023f0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b70      	ldr	r3, [pc, #448]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6992      	ldr	r2, [r2, #24]
 800222a:	655a      	str	r2, [r3, #84]	; 0x54
		switch(dev->currentReflowState){
 800222c:	4b6e      	ldr	r3, [pc, #440]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002234:	2b07      	cmp	r3, #7
 8002236:	f200 821a 	bhi.w	800266e <HAL_TIM_PeriodElapsedCallback+0x502>
 800223a:	a201      	add	r2, pc, #4	; (adr r2, 8002240 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800223c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002240:	0800266f 	.word	0x0800266f
 8002244:	0800266f 	.word	0x0800266f
 8002248:	08002261 	.word	0x08002261
 800224c:	080022a3 	.word	0x080022a3
 8002250:	0800233f 	.word	0x0800233f
 8002254:	08002419 	.word	0x08002419
 8002258:	080024b5 	.word	0x080024b5
 800225c:	0800254f 	.word	0x0800254f
			dev->targetTemp = 256;
 8002260:	4b61      	ldr	r3, [pc, #388]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f04f 4287 	mov.w	r2, #1132462080	; 0x43800000
 8002268:	649a      	str	r2, [r3, #72]	; 0x48
			if(dev->temp > PREHEAT_START_TEMP) {
 800226a:	4b5f      	ldr	r3, [pc, #380]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002272:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002276:	eef4 7ac7 	vcmpe.f32	s15, s14
 800227a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227e:	dc00      	bgt.n	8002282 <HAL_TIM_PeriodElapsedCallback+0x116>
			break;
 8002280:	e1f5      	b.n	800266e <HAL_TIM_PeriodElapsedCallback+0x502>
				beep_IT(dev,2);
 8002282:	4b59      	ldr	r3, [pc, #356]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2102      	movs	r1, #2
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe fea7 	bl	8000fdc <beep_IT>
				dev->currentReflowState = REFLOW_STATE_PREHEAT;
 800228e:	4b56      	ldr	r3, [pc, #344]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2203      	movs	r2, #3
 8002294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				dev->elaps = 0;
 8002298:	4b53      	ldr	r3, [pc, #332]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2200      	movs	r2, #0
 800229e:	64da      	str	r2, [r3, #76]	; 0x4c
			break;
 80022a0:	e1e5      	b.n	800266e <HAL_TIM_PeriodElapsedCallback+0x502>
			dp->write_id_str(dp, "reflowState", "PREHEAT");
 80022a2:	4b54      	ldr	r3, [pc, #336]	; (80023f4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a8:	4a52      	ldr	r2, [pc, #328]	; (80023f4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80022aa:	6810      	ldr	r0, [r2, #0]
 80022ac:	4a52      	ldr	r2, [pc, #328]	; (80023f8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80022ae:	4953      	ldr	r1, [pc, #332]	; (80023fc <HAL_TIM_PeriodElapsedCallback+0x290>)
 80022b0:	4798      	blx	r3
			if(!(dev->elaps % 4) || dev->elaps == 1) {
 80022b2:	4b4d      	ldr	r3, [pc, #308]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d004      	beq.n	80022ca <HAL_TIM_PeriodElapsedCallback+0x15e>
 80022c0:	4b49      	ldr	r3, [pc, #292]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d116      	bne.n	80022f8 <HAL_TIM_PeriodElapsedCallback+0x18c>
				dev->targetTemp = (float)PREHEAT_START_TEMP + (PREHEAT_TEMP_INCREASE*SAMPLE_TIME)*dev->elaps;
 80022ca:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8002400 <HAL_TIM_PeriodElapsedCallback+0x294>
 80022ce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80022d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022d6:	4b44      	ldr	r3, [pc, #272]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022dc:	ee07 3a90 	vmov	s15, r3
 80022e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80022ec:	4b3e      	ldr	r3, [pc, #248]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022f4:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			if(dev->elaps == (float)PREHEAT_DURATION/SAMPLE_TIME) {
 80022f8:	4b3b      	ldr	r3, [pc, #236]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fe:	ee07 3a90 	vmov	s15, r3
 8002302:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002306:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8002404 <HAL_TIM_PeriodElapsedCallback+0x298>
 800230a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800230e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002312:	eeb4 7a67 	vcmp.f32	s14, s15
 8002316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231a:	f040 8182 	bne.w	8002622 <HAL_TIM_PeriodElapsedCallback+0x4b6>
				beep_IT(dev,2);
 800231e:	4b32      	ldr	r3, [pc, #200]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2102      	movs	r1, #2
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe fe59 	bl	8000fdc <beep_IT>
				dev->currentReflowState = REFLOW_STATE_SOAK;
 800232a:	4b2f      	ldr	r3, [pc, #188]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2204      	movs	r2, #4
 8002330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				dev->elaps = 0;
 8002334:	4b2c      	ldr	r3, [pc, #176]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2200      	movs	r2, #0
 800233a:	64da      	str	r2, [r3, #76]	; 0x4c
			break;
 800233c:	e171      	b.n	8002622 <HAL_TIM_PeriodElapsedCallback+0x4b6>
			dp->write_id_str(dp, "reflowState", "SOAK");
 800233e:	4b2d      	ldr	r3, [pc, #180]	; (80023f4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002344:	4a2b      	ldr	r2, [pc, #172]	; (80023f4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002346:	6810      	ldr	r0, [r2, #0]
 8002348:	4a2f      	ldr	r2, [pc, #188]	; (8002408 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800234a:	492c      	ldr	r1, [pc, #176]	; (80023fc <HAL_TIM_PeriodElapsedCallback+0x290>)
 800234c:	4798      	blx	r3
			if(!(dev->elaps % 4) || dev->elaps == 1) {
 800234e:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d004      	beq.n	8002366 <HAL_TIM_PeriodElapsedCallback+0x1fa>
 800235c:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002362:	2b01      	cmp	r3, #1
 8002364:	d116      	bne.n	8002394 <HAL_TIM_PeriodElapsedCallback+0x228>
				dev->targetTemp = (float)SOAK_START_TEMP + (SOAK_TEMP_INCREASE*SAMPLE_TIME)*dev->elaps;
 8002366:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800240c <HAL_TIM_PeriodElapsedCallback+0x2a0>
 800236a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800236e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002372:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002378:	ee07 3a90 	vmov	s15, r3
 800237c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002384:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002404 <HAL_TIM_PeriodElapsedCallback+0x298>
 8002388:	4b17      	ldr	r3, [pc, #92]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002390:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			if(dev->elaps == (float)SOAK_DURATION/SAMPLE_TIME) {
 8002394:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239a:	ee07 3a90 	vmov	s15, r3
 800239e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023a2:	ed9f 6a18 	vldr	s12, [pc, #96]	; 8002404 <HAL_TIM_PeriodElapsedCallback+0x298>
 80023a6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80023aa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80023ae:	eeb4 7a67 	vcmp.f32	s14, s15
 80023b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b6:	f040 8136 	bne.w	8002626 <HAL_TIM_PeriodElapsedCallback+0x4ba>
				beep_IT(dev,2);
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2102      	movs	r1, #2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe fe0b 	bl	8000fdc <beep_IT>
				dev->currentReflowState = REFLOW_STATE_RAMP;
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2205      	movs	r2, #5
 80023cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				dev->elaps = 0;
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2200      	movs	r2, #0
 80023d6:	64da      	str	r2, [r3, #76]	; 0x4c
				pid->Kp = 50;
 80023d8:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a0d      	ldr	r2, [pc, #52]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80023de:	601a      	str	r2, [r3, #0]
			break;
 80023e0:	e121      	b.n	8002626 <HAL_TIM_PeriodElapsedCallback+0x4ba>
 80023e2:	bf00      	nop
 80023e4:	40014800 	.word	0x40014800
 80023e8:	20000020 	.word	0x20000020
 80023ec:	40014400 	.word	0x40014400
 80023f0:	20000028 	.word	0x20000028
 80023f4:	20000030 	.word	0x20000030
 80023f8:	0800c84c 	.word	0x0800c84c
 80023fc:	0800c694 	.word	0x0800c694
 8002400:	3f2aaaab 	.word	0x3f2aaaab
 8002404:	42b40000 	.word	0x42b40000
 8002408:	0800c854 	.word	0x0800c854
 800240c:	3ee38e39 	.word	0x3ee38e39
 8002410:	2000002c 	.word	0x2000002c
 8002414:	42480000 	.word	0x42480000
			dp->write_id_str(dp, "reflowState", "RAMP");
 8002418:	4b86      	ldr	r3, [pc, #536]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241e:	4a85      	ldr	r2, [pc, #532]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8002420:	6810      	ldr	r0, [r2, #0]
 8002422:	4a85      	ldr	r2, [pc, #532]	; (8002638 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8002424:	4985      	ldr	r1, [pc, #532]	; (800263c <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8002426:	4798      	blx	r3
			if(!(dev->elaps % 4) || dev->elaps == 1) {
 8002428:	4b85      	ldr	r3, [pc, #532]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d004      	beq.n	8002440 <HAL_TIM_PeriodElapsedCallback+0x2d4>
 8002436:	4b82      	ldr	r3, [pc, #520]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243c:	2b01      	cmp	r3, #1
 800243e:	d116      	bne.n	800246e <HAL_TIM_PeriodElapsedCallback+0x302>
				dev->targetTemp = (float)RAMP_START_TEMP + (RAMP_TEMP_INCREASE*SAMPLE_TIME)*dev->elaps;
 8002440:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002644 <HAL_TIM_PeriodElapsedCallback+0x4d8>
 8002444:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002448:	ee27 7a27 	vmul.f32	s14, s14, s15
 800244c:	4b7c      	ldr	r3, [pc, #496]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002452:	ee07 3a90 	vmov	s15, r3
 8002456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800245a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800245e:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8002648 <HAL_TIM_PeriodElapsedCallback+0x4dc>
 8002462:	4b77      	ldr	r3, [pc, #476]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	ee77 7a87 	vadd.f32	s15, s15, s14
 800246a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			if(dev->elaps == (float)RAMP_DURATION/SAMPLE_TIME) {
 800246e:	4b74      	ldr	r3, [pc, #464]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002474:	ee07 3a90 	vmov	s15, r3
 8002478:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800247c:	eeb3 6a0e 	vmov.f32	s12, #62	; 0x41f00000  30.0
 8002480:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002484:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002488:	eeb4 7a67 	vcmp.f32	s14, s15
 800248c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002490:	f040 80cb 	bne.w	800262a <HAL_TIM_PeriodElapsedCallback+0x4be>
				beep_IT(dev,2);
 8002494:	4b6a      	ldr	r3, [pc, #424]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2102      	movs	r1, #2
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fd9e 	bl	8000fdc <beep_IT>
				dev->currentReflowState = REFLOW_STATE_REFLOW;
 80024a0:	4b67      	ldr	r3, [pc, #412]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2206      	movs	r2, #6
 80024a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				dev->elaps = 0;
 80024aa:	4b65      	ldr	r3, [pc, #404]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2200      	movs	r2, #0
 80024b0:	64da      	str	r2, [r3, #76]	; 0x4c
			break;
 80024b2:	e0ba      	b.n	800262a <HAL_TIM_PeriodElapsedCallback+0x4be>
			dp->write_id_str(dp, "reflowState", "REFLOW");
 80024b4:	4b5f      	ldr	r3, [pc, #380]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ba:	4a5e      	ldr	r2, [pc, #376]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 80024bc:	6810      	ldr	r0, [r2, #0]
 80024be:	4a63      	ldr	r2, [pc, #396]	; (800264c <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 80024c0:	495e      	ldr	r1, [pc, #376]	; (800263c <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 80024c2:	4798      	blx	r3
			if(!(dev->elaps % 4) || dev->elaps == 1) {
 80024c4:	4b5e      	ldr	r3, [pc, #376]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d004      	beq.n	80024dc <HAL_TIM_PeriodElapsedCallback+0x370>
 80024d2:	4b5b      	ldr	r3, [pc, #364]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d116      	bne.n	800250a <HAL_TIM_PeriodElapsedCallback+0x39e>
				dev->targetTemp = REFLOW_START_TEMP + (REFLOW_TEMP_INCREASE*SAMPLE_TIME)*dev->elaps;
 80024dc:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8002650 <HAL_TIM_PeriodElapsedCallback+0x4e4>
 80024e0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80024e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024e8:	4b55      	ldr	r3, [pc, #340]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ee:	ee07 3a90 	vmov	s15, r3
 80024f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024fa:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8002654 <HAL_TIM_PeriodElapsedCallback+0x4e8>
 80024fe:	4b50      	ldr	r3, [pc, #320]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002506:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			if(dev->elaps == REFLOW_DURATION/SAMPLE_TIME) {
 800250a:	4b4d      	ldr	r3, [pc, #308]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002510:	ee07 3a90 	vmov	s15, r3
 8002514:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002518:	eeb3 6a0e 	vmov.f32	s12, #62	; 0x41f00000  30.0
 800251c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002520:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002524:	eeb4 7a67 	vcmp.f32	s14, s15
 8002528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800252c:	d17f      	bne.n	800262e <HAL_TIM_PeriodElapsedCallback+0x4c2>
				beep_IT(dev,2);
 800252e:	4b44      	ldr	r3, [pc, #272]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2102      	movs	r1, #2
 8002534:	4618      	mov	r0, r3
 8002536:	f7fe fd51 	bl	8000fdc <beep_IT>
				dev->currentReflowState = REFLOW_STATE_COOL;
 800253a:	4b41      	ldr	r3, [pc, #260]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2207      	movs	r2, #7
 8002540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				dev->elaps = 0;
 8002544:	4b3e      	ldr	r3, [pc, #248]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2200      	movs	r2, #0
 800254a:	64da      	str	r2, [r3, #76]	; 0x4c
			break;
 800254c:	e06f      	b.n	800262e <HAL_TIM_PeriodElapsedCallback+0x4c2>
			dp->write_id_str(dp, "reflowState", "IDLE");
 800254e:	4b39      	ldr	r3, [pc, #228]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002554:	4a37      	ldr	r2, [pc, #220]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8002556:	6810      	ldr	r0, [r2, #0]
 8002558:	4a3f      	ldr	r2, [pc, #252]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 800255a:	4938      	ldr	r1, [pc, #224]	; (800263c <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 800255c:	4798      	blx	r3
			if(!(dev->elaps % 4) || dev->elaps == 1) {
 800255e:	4b38      	ldr	r3, [pc, #224]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002564:	f003 0303 	and.w	r3, r3, #3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d004      	beq.n	8002576 <HAL_TIM_PeriodElapsedCallback+0x40a>
 800256c:	4b34      	ldr	r3, [pc, #208]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002572:	2b01      	cmp	r3, #1
 8002574:	d116      	bne.n	80025a4 <HAL_TIM_PeriodElapsedCallback+0x438>
				dev->targetTemp = REFLOW_END_TEMP - (COOL_TEMP_DECREASE*SAMPLE_TIME)*dev->elaps;
 8002576:	eddf 6a39 	vldr	s13, [pc, #228]	; 800265c <HAL_TIM_PeriodElapsedCallback+0x4f0>
 800257a:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002650 <HAL_TIM_PeriodElapsedCallback+0x4e4>
 800257e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002582:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002586:	4b2e      	ldr	r3, [pc, #184]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258c:	ee07 3a90 	vmov	s15, r3
 8002590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002598:	4b29      	ldr	r3, [pc, #164]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80025a0:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			if(dev->elaps == (float)COOL_DURATION/SAMPLE_TIME) {
 80025a4:	4b26      	ldr	r3, [pc, #152]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025aa:	ee07 3a90 	vmov	s15, r3
 80025ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025b2:	eeb3 6a0e 	vmov.f32	s12, #62	; 0x41f00000  30.0
 80025b6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80025ba:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80025be:	eeb4 7a67 	vcmp.f32	s14, s15
 80025c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c6:	d151      	bne.n	800266c <HAL_TIM_PeriodElapsedCallback+0x500>
				beep_IT(dev,5);
 80025c8:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2105      	movs	r1, #5
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe fd04 	bl	8000fdc <beep_IT>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80025d4:	4b22      	ldr	r3, [pc, #136]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2200      	movs	r2, #0
 80025da:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80025dc:	4b20      	ldr	r3, [pc, #128]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2200      	movs	r2, #0
 80025e2:	639a      	str	r2, [r3, #56]	; 0x38
				dev->currentReflowState = REFLOW_STATE_IDLE;
 80025e4:	4b16      	ldr	r3, [pc, #88]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				dev->elaps = 0;
 80025ee:	4b14      	ldr	r3, [pc, #80]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2200      	movs	r2, #0
 80025f4:	64da      	str	r2, [r3, #76]	; 0x4c
				HAL_TIM_Base_Stop_IT(&htim16);
 80025f6:	481b      	ldr	r0, [pc, #108]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80025f8:	f004 f8a0 	bl	800673c <HAL_TIM_Base_Stop_IT>
				dp->write(dp, "page main");
 80025fc:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002602:	4a0c      	ldr	r2, [pc, #48]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8002604:	6812      	ldr	r2, [r2, #0]
 8002606:	4918      	ldr	r1, [pc, #96]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8002608:	4610      	mov	r0, r2
 800260a:	4798      	blx	r3
				dev->currentPage = DP_MAIN;
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				nextion_print_page(dp);
 8002616:	4b07      	ldr	r3, [pc, #28]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f000 f984 	bl	8002928 <nextion_print_page>
			break;
 8002620:	e024      	b.n	800266c <HAL_TIM_PeriodElapsedCallback+0x500>
			break;
 8002622:	bf00      	nop
 8002624:	e023      	b.n	800266e <HAL_TIM_PeriodElapsedCallback+0x502>
			break;
 8002626:	bf00      	nop
 8002628:	e021      	b.n	800266e <HAL_TIM_PeriodElapsedCallback+0x502>
			break;
 800262a:	bf00      	nop
 800262c:	e01f      	b.n	800266e <HAL_TIM_PeriodElapsedCallback+0x502>
			break;
 800262e:	bf00      	nop
 8002630:	e01d      	b.n	800266e <HAL_TIM_PeriodElapsedCallback+0x502>
 8002632:	bf00      	nop
 8002634:	20000030 	.word	0x20000030
 8002638:	0800c85c 	.word	0x0800c85c
 800263c:	0800c694 	.word	0x0800c694
 8002640:	20000020 	.word	0x20000020
 8002644:	3e888889 	.word	0x3e888889
 8002648:	43020000 	.word	0x43020000
 800264c:	0800c864 	.word	0x0800c864
 8002650:	3f666666 	.word	0x3f666666
 8002654:	430a0000 	.word	0x430a0000
 8002658:	0800c86c 	.word	0x0800c86c
 800265c:	43250000 	.word	0x43250000
 8002660:	200003fc 	.word	0x200003fc
 8002664:	20000494 	.word	0x20000494
 8002668:	0800c658 	.word	0x0800c658
			break;
 800266c:	bf00      	nop
		if(dev->currentReflowState != REFLOW_STATE_IDLE) {
 800266e:	4b24      	ldr	r3, [pc, #144]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x594>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002676:	2b00      	cmp	r3, #0
 8002678:	d039      	beq.n	80026ee <HAL_TIM_PeriodElapsedCallback+0x582>
			dp->write_id_float(dp, "targetTemp", dev->targetTemp);
 800267a:	4b22      	ldr	r3, [pc, #136]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002680:	4a20      	ldr	r2, [pc, #128]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8002682:	6810      	ldr	r0, [r2, #0]
 8002684:	4a1e      	ldr	r2, [pc, #120]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x594>)
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	edd2 7a12 	vldr	s15, [r2, #72]	; 0x48
 800268c:	eeb0 0a67 	vmov.f32	s0, s15
 8002690:	491d      	ldr	r1, [pc, #116]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8002692:	4798      	blx	r3
			dp->write_id_float(dp, "currentTemp", dev->temp);
 8002694:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800269a:	4a1a      	ldr	r2, [pc, #104]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800269c:	6810      	ldr	r0, [r2, #0]
 800269e:	4a18      	ldr	r2, [pc, #96]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x594>)
 80026a0:	6812      	ldr	r2, [r2, #0]
 80026a2:	edd2 7a15 	vldr	s15, [r2, #84]	; 0x54
 80026a6:	eeb0 0a67 	vmov.f32	s0, s15
 80026aa:	4918      	ldr	r1, [pc, #96]	; (800270c <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80026ac:	4798      	blx	r3
			dp->write_id_float(dp, "tempDiff", dev->targetTemp-dev->temp);
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026b4:	4a13      	ldr	r2, [pc, #76]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80026b6:	6810      	ldr	r0, [r2, #0]
 80026b8:	4a11      	ldr	r2, [pc, #68]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x594>)
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	ed92 7a12 	vldr	s14, [r2, #72]	; 0x48
 80026c0:	4a0f      	ldr	r2, [pc, #60]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x594>)
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	edd2 7a15 	vldr	s15, [r2, #84]	; 0x54
 80026c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026cc:	eeb0 0a67 	vmov.f32	s0, s15
 80026d0:	490f      	ldr	r1, [pc, #60]	; (8002710 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80026d2:	4798      	blx	r3
			dp->write_id_float(dp, "pidVal", pid->out);
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026da:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80026dc:	6810      	ldr	r0, [r2, #0]
 80026de:	4a0d      	ldr	r2, [pc, #52]	; (8002714 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80026e6:	eeb0 0a67 	vmov.f32	s0, s15
 80026ea:	490b      	ldr	r1, [pc, #44]	; (8002718 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 80026ec:	4798      	blx	r3
		dev->dataRdy = true;
 80026ee:	4b04      	ldr	r3, [pc, #16]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x594>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80026f8:	bf00      	nop
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20000020 	.word	0x20000020
 8002704:	20000030 	.word	0x20000030
 8002708:	0800c874 	.word	0x0800c874
 800270c:	0800c880 	.word	0x0800c880
 8002710:	0800c88c 	.word	0x0800c88c
 8002714:	2000002c 	.word	0x2000002c
 8002718:	0800c898 	.word	0x0800c898

0800271c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002720:	b672      	cpsid	i
}
 8002722:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002724:	e7fe      	b.n	8002724 <Error_Handler+0x8>
	...

08002728 <nextion_send_str_to_id>:
#include "main.h"
#include "nextion.h"

const uint8_t nxEnd[3] = {0xFF,0xFF,0xFF};

int nextion_send_str_to_id(nextion_t* dp, char* id, char* msg) {
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]

	int len = sprintf(dp->trm, "%s.txt=\"%s\"",id,msg);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f103 003a 	add.w	r0, r3, #58	; 0x3a
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	4914      	ldr	r1, [pc, #80]	; (8002790 <nextion_send_str_to_id+0x68>)
 8002740:	f007 fcd0 	bl	800a0e4 <siprintf>
 8002744:	6178      	str	r0, [r7, #20]

	if(HAL_UART_Transmit(dp->uart, (uint8_t*)dp->trm, len, 1000) != HAL_OK) {
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6858      	ldr	r0, [r3, #4]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f103 013a 	add.w	r1, r3, #58	; 0x3a
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	b29a      	uxth	r2, r3
 8002754:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002758:	f005 f832 	bl	80077c0 <HAL_UART_Transmit>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d002      	beq.n	8002768 <nextion_send_str_to_id+0x40>
		return NX_ERROR;
 8002762:	f04f 33ff 	mov.w	r3, #4294967295
 8002766:	e00e      	b.n	8002786 <nextion_send_str_to_id+0x5e>
	}
	if(HAL_UART_Transmit(dp->uart, nxEnd, 3, 1000) != HAL_OK) {
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6858      	ldr	r0, [r3, #4]
 800276c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002770:	2203      	movs	r2, #3
 8002772:	4908      	ldr	r1, [pc, #32]	; (8002794 <nextion_send_str_to_id+0x6c>)
 8002774:	f005 f824 	bl	80077c0 <HAL_UART_Transmit>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <nextion_send_str_to_id+0x5c>
		return NX_ERROR;
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
 8002782:	e000      	b.n	8002786 <nextion_send_str_to_id+0x5e>
	}
	return NX_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	0800c8a0 	.word	0x0800c8a0
 8002794:	0800ca14 	.word	0x0800ca14

08002798 <nextion_send_val_to_id>:

int nextion_send_val_to_id(nextion_t* dp, char* id, int val) {
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]

	int len = sprintf(dp->trm, "%s.val=%d",id,val);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f103 003a 	add.w	r0, r3, #58	; 0x3a
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	4914      	ldr	r1, [pc, #80]	; (8002800 <nextion_send_val_to_id+0x68>)
 80027b0:	f007 fc98 	bl	800a0e4 <siprintf>
 80027b4:	6178      	str	r0, [r7, #20]

	if(HAL_UART_Transmit(dp->uart, (uint8_t*)dp->trm, len, 1000) != HAL_OK) {
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6858      	ldr	r0, [r3, #4]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f103 013a 	add.w	r1, r3, #58	; 0x3a
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027c8:	f004 fffa 	bl	80077c0 <HAL_UART_Transmit>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <nextion_send_val_to_id+0x40>
		return NX_ERROR;
 80027d2:	f04f 33ff 	mov.w	r3, #4294967295
 80027d6:	e00e      	b.n	80027f6 <nextion_send_val_to_id+0x5e>
	}
	if(HAL_UART_Transmit(dp->uart, nxEnd, 3, 1000) != HAL_OK) {
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6858      	ldr	r0, [r3, #4]
 80027dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027e0:	2203      	movs	r2, #3
 80027e2:	4908      	ldr	r1, [pc, #32]	; (8002804 <nextion_send_val_to_id+0x6c>)
 80027e4:	f004 ffec 	bl	80077c0 <HAL_UART_Transmit>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <nextion_send_val_to_id+0x5c>
		return NX_ERROR;
 80027ee:	f04f 33ff 	mov.w	r3, #4294967295
 80027f2:	e000      	b.n	80027f6 <nextion_send_val_to_id+0x5e>
	}
	return NX_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	0800c8ac 	.word	0x0800c8ac
 8002804:	0800ca14 	.word	0x0800ca14

08002808 <nextion_send_float_to_id>:

int nextion_send_float_to_id(nextion_t* dp, char* id, float val) {
 8002808:	b590      	push	{r4, r7, lr}
 800280a:	b089      	sub	sp, #36	; 0x24
 800280c:	af02      	add	r7, sp, #8
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	ed87 0a01 	vstr	s0, [r7, #4]

	int len = sprintf(dp->trm, "%s.txt=\"%.2f\"",id,val);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f103 043a 	add.w	r4, r3, #58	; 0x3a
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7fd fe7b 	bl	8000518 <__aeabi_f2d>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	e9cd 2300 	strd	r2, r3, [sp]
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	4914      	ldr	r1, [pc, #80]	; (8002880 <nextion_send_float_to_id+0x78>)
 800282e:	4620      	mov	r0, r4
 8002830:	f007 fc58 	bl	800a0e4 <siprintf>
 8002834:	6178      	str	r0, [r7, #20]

	if(HAL_UART_Transmit(dp->uart, (uint8_t*)dp->trm, len,1000) != HAL_OK) {
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6858      	ldr	r0, [r3, #4]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f103 013a 	add.w	r1, r3, #58	; 0x3a
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	b29a      	uxth	r2, r3
 8002844:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002848:	f004 ffba 	bl	80077c0 <HAL_UART_Transmit>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <nextion_send_float_to_id+0x50>
		return NX_ERROR;
 8002852:	f04f 33ff 	mov.w	r3, #4294967295
 8002856:	e00e      	b.n	8002876 <nextion_send_float_to_id+0x6e>
	}

	if(HAL_UART_Transmit(dp->uart, (uint8_t*)nxEnd, 3,1000) != HAL_OK) {
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6858      	ldr	r0, [r3, #4]
 800285c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002860:	2203      	movs	r2, #3
 8002862:	4908      	ldr	r1, [pc, #32]	; (8002884 <nextion_send_float_to_id+0x7c>)
 8002864:	f004 ffac 	bl	80077c0 <HAL_UART_Transmit>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <nextion_send_float_to_id+0x6c>
		return NX_ERROR;
 800286e:	f04f 33ff 	mov.w	r3, #4294967295
 8002872:	e000      	b.n	8002876 <nextion_send_float_to_id+0x6e>
	}
	return NX_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	371c      	adds	r7, #28
 800287a:	46bd      	mov	sp, r7
 800287c:	bd90      	pop	{r4, r7, pc}
 800287e:	bf00      	nop
 8002880:	0800c8b8 	.word	0x0800c8b8
 8002884:	0800ca14 	.word	0x0800ca14

08002888 <write>:

int write(nextion_t* dp, char* msg) {
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]

	int len = sprintf(dp->trm, "%s", msg);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	333a      	adds	r3, #58	; 0x3a
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	4914      	ldr	r1, [pc, #80]	; (80028ec <write+0x64>)
 800289a:	4618      	mov	r0, r3
 800289c:	f007 fc22 	bl	800a0e4 <siprintf>
 80028a0:	60f8      	str	r0, [r7, #12]

	if(HAL_UART_Transmit(dp->uart, (uint8_t*)dp->trm, len, 1000) != HAL_OK) {
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6858      	ldr	r0, [r3, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f103 013a 	add.w	r1, r3, #58	; 0x3a
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028b4:	f004 ff84 	bl	80077c0 <HAL_UART_Transmit>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <write+0x3c>
		return NX_ERROR;
 80028be:	f04f 33ff 	mov.w	r3, #4294967295
 80028c2:	e00e      	b.n	80028e2 <write+0x5a>
	}
	if(HAL_UART_Transmit(dp->uart, nxEnd, 3, 1000) != HAL_OK) {
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6858      	ldr	r0, [r3, #4]
 80028c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028cc:	2203      	movs	r2, #3
 80028ce:	4908      	ldr	r1, [pc, #32]	; (80028f0 <write+0x68>)
 80028d0:	f004 ff76 	bl	80077c0 <HAL_UART_Transmit>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <write+0x58>
		return NX_ERROR;
 80028da:	f04f 33ff 	mov.w	r3, #4294967295
 80028de:	e000      	b.n	80028e2 <write+0x5a>
	}
	return NX_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	0800c8c8 	.word	0x0800c8c8
 80028f0:	0800ca14 	.word	0x0800ca14

080028f4 <nextion_decode_response>:

void nextion_decode_response(nextion_t* dp) {
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

	if(dp->rcv[0] == '$' && dp->rcv[3] == '&') {
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	7a1b      	ldrb	r3, [r3, #8]
 8002900:	2b24      	cmp	r3, #36	; 0x24
 8002902:	d10b      	bne.n	800291c <nextion_decode_response+0x28>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	7adb      	ldrb	r3, [r3, #11]
 8002908:	2b26      	cmp	r3, #38	; 0x26
 800290a:	d107      	bne.n	800291c <nextion_decode_response+0x28>

		dp->response.page = dp->rcv[1];
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	7a5a      	ldrb	r2, [r3, #9]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	701a      	strb	r2, [r3, #0]
		dp->response.id = dp->rcv[2];
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	7a9a      	ldrb	r2, [r3, #10]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	705a      	strb	r2, [r3, #1]
	}

}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <nextion_print_page>:

void nextion_print_page(nextion_t* dp) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
	dp->write_id_str(dp, "varProfile", "TS391LT50");
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002934:	4a3c      	ldr	r2, [pc, #240]	; (8002a28 <nextion_print_page+0x100>)
 8002936:	493d      	ldr	r1, [pc, #244]	; (8002a2c <nextion_print_page+0x104>)
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	4798      	blx	r3
	dp->write_id_str(dp, "varState", "IDLE");
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002940:	4a3b      	ldr	r2, [pc, #236]	; (8002a30 <nextion_print_page+0x108>)
 8002942:	493c      	ldr	r1, [pc, #240]	; (8002a34 <nextion_print_page+0x10c>)
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	4798      	blx	r3
	dp->write_id_str(dp, "prepStart", "0");
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294c:	4a3a      	ldr	r2, [pc, #232]	; (8002a38 <nextion_print_page+0x110>)
 800294e:	493b      	ldr	r1, [pc, #236]	; (8002a3c <nextion_print_page+0x114>)
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	4798      	blx	r3
	dp->write_id_str(dp, "prepEnd", "-");
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002958:	4a39      	ldr	r2, [pc, #228]	; (8002a40 <nextion_print_page+0x118>)
 800295a:	493a      	ldr	r1, [pc, #232]	; (8002a44 <nextion_print_page+0x11c>)
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	4798      	blx	r3
	dp->write_id_str(dp, "prepTemp", "30");
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	4a38      	ldr	r2, [pc, #224]	; (8002a48 <nextion_print_page+0x120>)
 8002966:	4939      	ldr	r1, [pc, #228]	; (8002a4c <nextion_print_page+0x124>)
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	4798      	blx	r3
	dp->write_id_str(dp, "heatStart", "-");
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002970:	4a33      	ldr	r2, [pc, #204]	; (8002a40 <nextion_print_page+0x118>)
 8002972:	4937      	ldr	r1, [pc, #220]	; (8002a50 <nextion_print_page+0x128>)
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	4798      	blx	r3
	dp->write_id_str(dp, "heatEnd", "90");
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297c:	4a35      	ldr	r2, [pc, #212]	; (8002a54 <nextion_print_page+0x12c>)
 800297e:	4936      	ldr	r1, [pc, #216]	; (8002a58 <nextion_print_page+0x130>)
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	4798      	blx	r3
	dp->write_id_str(dp, "heatTemp", "90");
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002988:	4a32      	ldr	r2, [pc, #200]	; (8002a54 <nextion_print_page+0x12c>)
 800298a:	4934      	ldr	r1, [pc, #208]	; (8002a5c <nextion_print_page+0x134>)
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	4798      	blx	r3
	dp->write_id_str(dp, "soakStart", "90");
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002994:	4a2f      	ldr	r2, [pc, #188]	; (8002a54 <nextion_print_page+0x12c>)
 8002996:	4932      	ldr	r1, [pc, #200]	; (8002a60 <nextion_print_page+0x138>)
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	4798      	blx	r3
	dp->write_id_str(dp, "soakEnd", "180");
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a0:	4a30      	ldr	r2, [pc, #192]	; (8002a64 <nextion_print_page+0x13c>)
 80029a2:	4931      	ldr	r1, [pc, #196]	; (8002a68 <nextion_print_page+0x140>)
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	4798      	blx	r3
	dp->write_id_str(dp, "soakTemp", "130");
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ac:	4a2f      	ldr	r2, [pc, #188]	; (8002a6c <nextion_print_page+0x144>)
 80029ae:	4930      	ldr	r1, [pc, #192]	; (8002a70 <nextion_print_page+0x148>)
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	4798      	blx	r3
	dp->write_id_str(dp, "rampStart", "180");
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b8:	4a2a      	ldr	r2, [pc, #168]	; (8002a64 <nextion_print_page+0x13c>)
 80029ba:	492e      	ldr	r1, [pc, #184]	; (8002a74 <nextion_print_page+0x14c>)
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	4798      	blx	r3
	dp->write_id_str(dp, "rampEnd", "210");
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	4a2c      	ldr	r2, [pc, #176]	; (8002a78 <nextion_print_page+0x150>)
 80029c6:	492d      	ldr	r1, [pc, #180]	; (8002a7c <nextion_print_page+0x154>)
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	4798      	blx	r3
	dp->write_id_str(dp, "rampTemp", "138");
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d0:	4a2b      	ldr	r2, [pc, #172]	; (8002a80 <nextion_print_page+0x158>)
 80029d2:	492c      	ldr	r1, [pc, #176]	; (8002a84 <nextion_print_page+0x15c>)
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4798      	blx	r3
	dp->write_id_str(dp, "reflowStart", "210");
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029dc:	4a26      	ldr	r2, [pc, #152]	; (8002a78 <nextion_print_page+0x150>)
 80029de:	492a      	ldr	r1, [pc, #168]	; (8002a88 <nextion_print_page+0x160>)
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	4798      	blx	r3
	dp->write_id_str(dp, "reflowEnd", "240");
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e8:	4a28      	ldr	r2, [pc, #160]	; (8002a8c <nextion_print_page+0x164>)
 80029ea:	4929      	ldr	r1, [pc, #164]	; (8002a90 <nextion_print_page+0x168>)
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	4798      	blx	r3
	dp->write_id_str(dp, "reflowTemp", "165");
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f4:	4a27      	ldr	r2, [pc, #156]	; (8002a94 <nextion_print_page+0x16c>)
 80029f6:	4928      	ldr	r1, [pc, #160]	; (8002a98 <nextion_print_page+0x170>)
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	4798      	blx	r3
	dp->write_id_str(dp, "coolStart", "240");
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a00:	4a22      	ldr	r2, [pc, #136]	; (8002a8c <nextion_print_page+0x164>)
 8002a02:	4926      	ldr	r1, [pc, #152]	; (8002a9c <nextion_print_page+0x174>)
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	4798      	blx	r3
	dp->write_id_str(dp, "coolEnd", "270");
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0c:	4a24      	ldr	r2, [pc, #144]	; (8002aa0 <nextion_print_page+0x178>)
 8002a0e:	4925      	ldr	r1, [pc, #148]	; (8002aa4 <nextion_print_page+0x17c>)
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	4798      	blx	r3
	dp->write_id_str(dp, "coolTemp", "138");
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a18:	4a19      	ldr	r2, [pc, #100]	; (8002a80 <nextion_print_page+0x158>)
 8002a1a:	4923      	ldr	r1, [pc, #140]	; (8002aa8 <nextion_print_page+0x180>)
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	4798      	blx	r3
}
 8002a20:	bf00      	nop
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	0800c8cc 	.word	0x0800c8cc
 8002a2c:	0800c8d8 	.word	0x0800c8d8
 8002a30:	0800c8e4 	.word	0x0800c8e4
 8002a34:	0800c8ec 	.word	0x0800c8ec
 8002a38:	0800c8f8 	.word	0x0800c8f8
 8002a3c:	0800c8fc 	.word	0x0800c8fc
 8002a40:	0800c908 	.word	0x0800c908
 8002a44:	0800c90c 	.word	0x0800c90c
 8002a48:	0800c914 	.word	0x0800c914
 8002a4c:	0800c918 	.word	0x0800c918
 8002a50:	0800c924 	.word	0x0800c924
 8002a54:	0800c930 	.word	0x0800c930
 8002a58:	0800c934 	.word	0x0800c934
 8002a5c:	0800c93c 	.word	0x0800c93c
 8002a60:	0800c948 	.word	0x0800c948
 8002a64:	0800c954 	.word	0x0800c954
 8002a68:	0800c958 	.word	0x0800c958
 8002a6c:	0800c960 	.word	0x0800c960
 8002a70:	0800c964 	.word	0x0800c964
 8002a74:	0800c970 	.word	0x0800c970
 8002a78:	0800c97c 	.word	0x0800c97c
 8002a7c:	0800c980 	.word	0x0800c980
 8002a80:	0800c988 	.word	0x0800c988
 8002a84:	0800c98c 	.word	0x0800c98c
 8002a88:	0800c998 	.word	0x0800c998
 8002a8c:	0800c9a4 	.word	0x0800c9a4
 8002a90:	0800c9a8 	.word	0x0800c9a8
 8002a94:	0800c9b4 	.word	0x0800c9b4
 8002a98:	0800c9b8 	.word	0x0800c9b8
 8002a9c:	0800c9c4 	.word	0x0800c9c4
 8002aa0:	0800c9d0 	.word	0x0800c9d0
 8002aa4:	0800c9d4 	.word	0x0800c9d4
 8002aa8:	0800c9dc 	.word	0x0800c9dc

08002aac <nextion_init>:


int nextion_init(nextion_t* dp, UART_HandleTypeDef *uart) {
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
	dp->uart = uart;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	605a      	str	r2, [r3, #4]
	dp->write_id_str = &nextion_send_str_to_id;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a09      	ldr	r2, [pc, #36]	; (8002ae4 <nextion_init+0x38>)
 8002ac0:	671a      	str	r2, [r3, #112]	; 0x70
	dp->write_id_val = &nextion_send_val_to_id;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a08      	ldr	r2, [pc, #32]	; (8002ae8 <nextion_init+0x3c>)
 8002ac6:	675a      	str	r2, [r3, #116]	; 0x74
	dp->write_id_float = &nextion_send_float_to_id;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a08      	ldr	r2, [pc, #32]	; (8002aec <nextion_init+0x40>)
 8002acc:	67da      	str	r2, [r3, #124]	; 0x7c
	dp->write = &write;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a07      	ldr	r2, [pc, #28]	; (8002af0 <nextion_init+0x44>)
 8002ad2:	679a      	str	r2, [r3, #120]	; 0x78
	return NX_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	08002729 	.word	0x08002729
 8002ae8:	08002799 	.word	0x08002799
 8002aec:	08002809 	.word	0x08002809
 8002af0:	08002889 	.word	0x08002889

08002af4 <PIDController_Init>:
 */

#include "pid.h"

void PIDController_Init(PIDController *pid, const float kP, const float kI, const float kD, const float sampleTime, const float tau,
						const float limMin, const float limMax, const float limMinInt, const float limMaxInt) {
 8002af4:	b480      	push	{r7}
 8002af6:	b08b      	sub	sp, #44	; 0x2c
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6278      	str	r0, [r7, #36]	; 0x24
 8002afc:	ed87 0a08 	vstr	s0, [r7, #32]
 8002b00:	edc7 0a07 	vstr	s1, [r7, #28]
 8002b04:	ed87 1a06 	vstr	s2, [r7, #24]
 8002b08:	edc7 1a05 	vstr	s3, [r7, #20]
 8002b0c:	ed87 2a04 	vstr	s4, [r7, #16]
 8002b10:	edc7 2a03 	vstr	s5, [r7, #12]
 8002b14:	ed87 3a02 	vstr	s6, [r7, #8]
 8002b18:	edc7 3a01 	vstr	s7, [r7, #4]
 8002b1c:	ed87 4a00 	vstr	s8, [r7]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError  = 0.0f;
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator  = 0.0f;
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	631a      	str	r2, [r3, #48]	; 0x30

	pid->out = 0.0f;
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	635a      	str	r2, [r3, #52]	; 0x34

	pid->Kp = kP;
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	6a3a      	ldr	r2, [r7, #32]
 8002b4c:	601a      	str	r2, [r3, #0]
	pid->Ki = kI;
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	69fa      	ldr	r2, [r7, #28]
 8002b52:	605a      	str	r2, [r3, #4]
	pid->Kd = kD;
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	609a      	str	r2, [r3, #8]

	pid->T = sampleTime;
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	621a      	str	r2, [r3, #32]

	pid->tau = tau;
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	60da      	str	r2, [r3, #12]

	pid->limMin = limMin;
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	611a      	str	r2, [r3, #16]
	pid->limMax = limMax;
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	615a      	str	r2, [r3, #20]

	pid->limMinInt = limMinInt;
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	619a      	str	r2, [r3, #24]
	pid->limMaxInt = limMaxInt;
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	61da      	str	r2, [r3, #28]

}
 8002b7e:	bf00      	nop
 8002b80:	372c      	adds	r7, #44	; 0x2c
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 8002b8a:	b480      	push	{r7}
 8002b8c:	b087      	sub	sp, #28
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	ed87 0a02 	vstr	s0, [r7, #8]
 8002b96:	edc7 0a01 	vstr	s1, [r7, #4]

	/*
	* Error signal
	*/
    float error = setpoint - measurement;
 8002b9a:	ed97 7a02 	vldr	s14, [r7, #8]
 8002b9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ba2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ba6:	edc7 7a05 	vstr	s15, [r7, #20]


	/*
	* Proportional
	*/
    float proportional = pid->Kp * error;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	edd3 7a00 	vldr	s15, [r3]
 8002bb0:	ed97 7a05 	vldr	s14, [r7, #20]
 8002bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb8:	edc7 7a04 	vstr	s15, [r7, #16]


	/*
	* Integral
	*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bc8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002bcc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	edd3 7a08 	vldr	s15, [r3, #32]
 8002bd6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 8002be0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002be4:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002be8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator > pid->limMaxInt) {
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0a:	dd04      	ble.n	8002c16 <PIDController_Update+0x8c>

        pid->integrator = pid->limMaxInt;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	69da      	ldr	r2, [r3, #28]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	625a      	str	r2, [r3, #36]	; 0x24
 8002c14:	e00e      	b.n	8002c34 <PIDController_Update+0xaa>

    } else if (pid->integrator < pid->limMinInt) {
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2a:	d503      	bpl.n	8002c34 <PIDController_Update+0xaa>

        pid->integrator = pid->limMinInt;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	699a      	ldr	r2, [r3, #24]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	625a      	str	r2, [r3, #36]	; 0x24

	/*
	* Derivative (band-limited differentiator)
	*/

    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement) + (2.0f * pid->tau - pid->T) * pid->differentiator) / (2.0f * pid->tau + pid->T);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c3a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002c44:	edd7 6a01 	vldr	s13, [r7, #4]
 8002c48:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c56:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c60:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002c6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c72:	eef1 6a67 	vneg.f32	s13, s15
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c7c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	/*
	* Compute output and apply limits
	*/
    //pid->differentiator = pid->Kd*(measurement - pid->prevMeasurement);

    pid->out = proportional + pid->integrator + pid->differentiator;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002c9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (pid->out > pid->limMax) {
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	edd3 7a05 	vldr	s15, [r3, #20]
 8002cbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc6:	dd04      	ble.n	8002cd2 <PIDController_Update+0x148>

        pid->out = pid->limMax;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	695a      	ldr	r2, [r3, #20]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	635a      	str	r2, [r3, #52]	; 0x34
 8002cd0:	e00e      	b.n	8002cf0 <PIDController_Update+0x166>

    } else if (pid->out < pid->limMin) {
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	edd3 7a04 	vldr	s15, [r3, #16]
 8002cde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce6:	d503      	bpl.n	8002cf0 <PIDController_Update+0x166>

        pid->out = pid->limMin;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	635a      	str	r2, [r3, #52]	; 0x34

    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	629a      	str	r2, [r3, #40]	; 0x28
    pid->prevMeasurement = measurement;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	631a      	str	r2, [r3, #48]	; 0x30

	/* Return controller output */
    return pid->out;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d00:	ee07 3a90 	vmov	s15, r3

}
 8002d04:	eeb0 0a67 	vmov.f32	s0, s15
 8002d08:	371c      	adds	r7, #28
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <LL_AHB2_GRP1_EnableClock>:
{
 8002d12:	b480      	push	{r7}
 8002d14:	b085      	sub	sp, #20
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4013      	ands	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d36:	68fb      	ldr	r3, [r7, #12]
}
 8002d38:	bf00      	nop
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4013      	ands	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d68:	68fb      	ldr	r3, [r7, #12]
}
 8002d6a:	bf00      	nop
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b085      	sub	sp, #20
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4013      	ands	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
}
 8002d9c:	bf00      	nop
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002db6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
}
 8002dce:	bf00      	nop
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dde:	bf00      	nop
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b09c      	sub	sp, #112	; 0x70
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e00:	f107 030c 	add.w	r3, r7, #12
 8002e04:	2250      	movs	r2, #80	; 0x50
 8002e06:	2100      	movs	r1, #0
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f006 fcf9 	bl	8009800 <memset>
  if(hi2c->Instance==I2C1)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a17      	ldr	r2, [pc, #92]	; (8002e70 <HAL_I2C_MspInit+0x88>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d126      	bne.n	8002e66 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002e18:	2304      	movs	r3, #4
 8002e1a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002e1c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e22:	f107 030c 	add.w	r3, r7, #12
 8002e26:	4618      	mov	r0, r3
 8002e28:	f002 fbb9 	bl	800559e <HAL_RCCEx_PeriphCLKConfig>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002e32:	f7ff fc73 	bl	800271c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e36:	2002      	movs	r0, #2
 8002e38:	f7ff ff6b 	bl	8002d12 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8002e3c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002e40:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e42:	2312      	movs	r3, #18
 8002e44:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e4e:	2304      	movs	r3, #4
 8002e50:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e52:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e56:	4619      	mov	r1, r3
 8002e58:	4806      	ldr	r0, [pc, #24]	; (8002e74 <HAL_I2C_MspInit+0x8c>)
 8002e5a:	f000 fd93 	bl	8003984 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e5e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002e62:	f7ff ff6f 	bl	8002d44 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e66:	bf00      	nop
 8002e68:	3770      	adds	r7, #112	; 0x70
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40005400 	.word	0x40005400
 8002e74:	48000400 	.word	0x48000400

08002e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b09c      	sub	sp, #112	; 0x70
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e80:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	60da      	str	r2, [r3, #12]
 8002e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e90:	f107 030c 	add.w	r3, r7, #12
 8002e94:	2250      	movs	r2, #80	; 0x50
 8002e96:	2100      	movs	r1, #0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f006 fcb1 	bl	8009800 <memset>
  if(huart->Instance==LPUART1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a36      	ldr	r2, [pc, #216]	; (8002f7c <HAL_UART_MspInit+0x104>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d125      	bne.n	8002ef4 <HAL_UART_MspInit+0x7c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002eac:	2300      	movs	r3, #0
 8002eae:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eb0:	f107 030c 	add.w	r3, r7, #12
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f002 fb72 	bl	800559e <HAL_RCCEx_PeriphCLKConfig>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ec0:	f7ff fc2c 	bl	800271c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002ec4:	2001      	movs	r0, #1
 8002ec6:	f7ff ff56 	bl	8002d76 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eca:	2001      	movs	r0, #1
 8002ecc:	f7ff ff21 	bl	8002d12 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ed0:	230c      	movs	r3, #12
 8002ed2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002edc:	2300      	movs	r3, #0
 8002ede:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002ee0:	2308      	movs	r3, #8
 8002ee2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ee8:	4619      	mov	r1, r3
 8002eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eee:	f000 fd49 	bl	8003984 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ef2:	e03e      	b.n	8002f72 <HAL_UART_MspInit+0xfa>
  else if(huart->Instance==USART1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a21      	ldr	r2, [pc, #132]	; (8002f80 <HAL_UART_MspInit+0x108>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d139      	bne.n	8002f72 <HAL_UART_MspInit+0xfa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002efe:	2301      	movs	r3, #1
 8002f00:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f02:	2300      	movs	r3, #0
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f06:	f107 030c 	add.w	r3, r7, #12
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f002 fb47 	bl	800559e <HAL_RCCEx_PeriphCLKConfig>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_UART_MspInit+0xa2>
      Error_Handler();
 8002f16:	f7ff fc01 	bl	800271c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f1a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002f1e:	f7ff ff43 	bl	8002da8 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f22:	2001      	movs	r0, #1
 8002f24:	f7ff fef5 	bl	8002d12 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f28:	2002      	movs	r0, #2
 8002f2a:	f7ff fef2 	bl	8002d12 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f32:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f34:	2302      	movs	r3, #2
 8002f36:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f40:	2307      	movs	r3, #7
 8002f42:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f44:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f4e:	f000 fd19 	bl	8003984 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f52:	2340      	movs	r3, #64	; 0x40
 8002f54:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f56:	2302      	movs	r3, #2
 8002f58:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f62:	2307      	movs	r3, #7
 8002f64:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f66:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4805      	ldr	r0, [pc, #20]	; (8002f84 <HAL_UART_MspInit+0x10c>)
 8002f6e:	f000 fd09 	bl	8003984 <HAL_GPIO_Init>
}
 8002f72:	bf00      	nop
 8002f74:	3770      	adds	r7, #112	; 0x70
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40008000 	.word	0x40008000
 8002f80:	40013800 	.word	0x40013800
 8002f84:	48000400 	.word	0x48000400

08002f88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f90:	f107 030c 	add.w	r3, r7, #12
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a0f      	ldr	r2, [pc, #60]	; (8002fe4 <HAL_SPI_MspInit+0x5c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d117      	bne.n	8002fda <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002faa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002fae:	f7ff fefb 	bl	8002da8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb2:	2001      	movs	r0, #1
 8002fb4:	f7ff fead 	bl	8002d12 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8002fb8:	2342      	movs	r3, #66	; 0x42
 8002fba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fc8:	2305      	movs	r3, #5
 8002fca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fcc:	f107 030c 	add.w	r3, r7, #12
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fd6:	f000 fcd5 	bl	8003984 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002fda:	bf00      	nop
 8002fdc:	3720      	adds	r7, #32
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40013000 	.word	0x40013000

08002fe8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a11      	ldr	r2, [pc, #68]	; (800303c <HAL_TIM_PWM_MspInit+0x54>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d114      	bne.n	8003024 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ffa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002ffe:	f7ff fed3 	bl	8002da8 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003002:	2200      	movs	r2, #0
 8003004:	2100      	movs	r1, #0
 8003006:	2019      	movs	r0, #25
 8003008:	f000 fbc9 	bl	800379e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800300c:	2019      	movs	r0, #25
 800300e:	f000 fbe0 	bl	80037d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8003012:	2200      	movs	r2, #0
 8003014:	2100      	movs	r1, #0
 8003016:	201a      	movs	r0, #26
 8003018:	f000 fbc1 	bl	800379e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800301c:	201a      	movs	r0, #26
 800301e:	f000 fbd8 	bl	80037d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003022:	e007      	b.n	8003034 <HAL_TIM_PWM_MspInit+0x4c>
  else if(htim_pwm->Instance==TIM2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800302c:	d102      	bne.n	8003034 <HAL_TIM_PWM_MspInit+0x4c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800302e:	2001      	movs	r0, #1
 8003030:	f7ff fe88 	bl	8002d44 <LL_APB1_GRP1_EnableClock>
}
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40012c00 	.word	0x40012c00

08003040 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a12      	ldr	r2, [pc, #72]	; (8003098 <HAL_TIM_Base_MspInit+0x58>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d10c      	bne.n	800306c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003052:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003056:	f7ff fea7 	bl	8002da8 <LL_APB2_GRP1_EnableClock>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800305a:	2200      	movs	r2, #0
 800305c:	2100      	movs	r1, #0
 800305e:	2019      	movs	r0, #25
 8003060:	f000 fb9d 	bl	800379e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003064:	2019      	movs	r0, #25
 8003066:	f000 fbb4 	bl	80037d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800306a:	e010      	b.n	800308e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a0a      	ldr	r2, [pc, #40]	; (800309c <HAL_TIM_Base_MspInit+0x5c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d10b      	bne.n	800308e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003076:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800307a:	f7ff fe95 	bl	8002da8 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800307e:	2200      	movs	r2, #0
 8003080:	2100      	movs	r1, #0
 8003082:	201a      	movs	r0, #26
 8003084:	f000 fb8b 	bl	800379e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003088:	201a      	movs	r0, #26
 800308a:	f000 fba2 	bl	80037d2 <HAL_NVIC_EnableIRQ>
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40014400 	.word	0x40014400
 800309c:	40014800 	.word	0x40014800

080030a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a8:	f107 030c 	add.w	r3, r7, #12
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a1a      	ldr	r2, [pc, #104]	; (8003128 <HAL_TIM_MspPostInit+0x88>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d115      	bne.n	80030ee <HAL_TIM_MspPostInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c2:	2001      	movs	r0, #1
 80030c4:	f7ff fe25 	bl	8002d12 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ce:	2302      	movs	r3, #2
 80030d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80030da:	2301      	movs	r3, #1
 80030dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030de:	f107 030c 	add.w	r3, r7, #12
 80030e2:	4619      	mov	r1, r3
 80030e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030e8:	f000 fc4c 	bl	8003984 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80030ec:	e018      	b.n	8003120 <HAL_TIM_MspPostInit+0x80>
  else if(htim->Instance==TIM2)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f6:	d113      	bne.n	8003120 <HAL_TIM_MspPostInit+0x80>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f8:	2001      	movs	r0, #1
 80030fa:	f7ff fe0a 	bl	8002d12 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80030fe:	2301      	movs	r3, #1
 8003100:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003102:	2302      	movs	r3, #2
 8003104:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310a:	2300      	movs	r3, #0
 800310c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800310e:	2301      	movs	r3, #1
 8003110:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003112:	f107 030c 	add.w	r3, r7, #12
 8003116:	4619      	mov	r1, r3
 8003118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800311c:	f000 fc32 	bl	8003984 <HAL_GPIO_Init>
}
 8003120:	bf00      	nop
 8003122:	3720      	adds	r7, #32
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40012c00 	.word	0x40012c00

0800312c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003130:	e7fe      	b.n	8003130 <NMI_Handler+0x4>

08003132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003132:	b480      	push	{r7}
 8003134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003136:	e7fe      	b.n	8003136 <HardFault_Handler+0x4>

08003138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800313c:	e7fe      	b.n	800313c <MemManage_Handler+0x4>

0800313e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800313e:	b480      	push	{r7}
 8003140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003142:	e7fe      	b.n	8003142 <BusFault_Handler+0x4>

08003144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003148:	e7fe      	b.n	8003148 <UsageFault_Handler+0x4>

0800314a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800314a:	b480      	push	{r7}
 800314c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003166:	b480      	push	{r7}
 8003168:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003178:	f000 f9e6 	bl	8003548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800317c:	bf00      	nop
 800317e:	bd80      	pop	{r7, pc}

08003180 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003184:	4803      	ldr	r0, [pc, #12]	; (8003194 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003186:	f003 fc39 	bl	80069fc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800318a:	4803      	ldr	r0, [pc, #12]	; (8003198 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800318c:	f003 fc36 	bl	80069fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003190:	bf00      	nop
 8003192:	bd80      	pop	{r7, pc}
 8003194:	200003fc 	.word	0x200003fc
 8003198:	20000494 	.word	0x20000494

0800319c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031a0:	4803      	ldr	r0, [pc, #12]	; (80031b0 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 80031a2:	f003 fc2b 	bl	80069fc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80031a6:	4803      	ldr	r0, [pc, #12]	; (80031b4 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80031a8:	f003 fc28 	bl	80069fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80031ac:	bf00      	nop
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	200003fc 	.word	0x200003fc
 80031b4:	200004e0 	.word	0x200004e0

080031b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80031bc:	4802      	ldr	r0, [pc, #8]	; (80031c8 <TIM2_IRQHandler+0x10>)
 80031be:	f003 fc1d 	bl	80069fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80031c2:	bf00      	nop
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000448 	.word	0x20000448

080031cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031d0:	4802      	ldr	r0, [pc, #8]	; (80031dc <USART1_IRQHandler+0x10>)
 80031d2:	f004 fcb5 	bl	8007b40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80031d6:	bf00      	nop
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	20000308 	.word	0x20000308

080031e0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80031e4:	4802      	ldr	r0, [pc, #8]	; (80031f0 <LPUART1_IRQHandler+0x10>)
 80031e6:	f004 fcab 	bl	8007b40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20000278 	.word	0x20000278

080031f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
	return 1;
 80031f8:	2301      	movs	r3, #1
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <_kill>:

int _kill(int pid, int sig)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800320e:	f006 facd 	bl	80097ac <__errno>
 8003212:	4603      	mov	r3, r0
 8003214:	2216      	movs	r2, #22
 8003216:	601a      	str	r2, [r3, #0]
	return -1;
 8003218:	f04f 33ff 	mov.w	r3, #4294967295
}
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <_exit>:

void _exit (int status)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800322c:	f04f 31ff 	mov.w	r1, #4294967295
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7ff ffe7 	bl	8003204 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003236:	e7fe      	b.n	8003236 <_exit+0x12>

08003238 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	e00a      	b.n	8003260 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800324a:	f3af 8000 	nop.w
 800324e:	4601      	mov	r1, r0
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	60ba      	str	r2, [r7, #8]
 8003256:	b2ca      	uxtb	r2, r1
 8003258:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	3301      	adds	r3, #1
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	429a      	cmp	r2, r3
 8003266:	dbf0      	blt.n	800324a <_read+0x12>
	}

return len;
 8003268:	687b      	ldr	r3, [r7, #4]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b086      	sub	sp, #24
 8003276:	af00      	add	r7, sp, #0
 8003278:	60f8      	str	r0, [r7, #12]
 800327a:	60b9      	str	r1, [r7, #8]
 800327c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	e009      	b.n	8003298 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	60ba      	str	r2, [r7, #8]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	3301      	adds	r3, #1
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	429a      	cmp	r2, r3
 800329e:	dbf1      	blt.n	8003284 <_write+0x12>
	}
	return len;
 80032a0:	687b      	ldr	r3, [r7, #4]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <_close>:

int _close(int file)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
	return -1;
 80032b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032d2:	605a      	str	r2, [r3, #4]
	return 0;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <_isatty>:

int _isatty(int file)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
	return 1;
 80032ea:	2301      	movs	r3, #1
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
	return 0;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800331c:	4a14      	ldr	r2, [pc, #80]	; (8003370 <_sbrk+0x5c>)
 800331e:	4b15      	ldr	r3, [pc, #84]	; (8003374 <_sbrk+0x60>)
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003328:	4b13      	ldr	r3, [pc, #76]	; (8003378 <_sbrk+0x64>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d102      	bne.n	8003336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003330:	4b11      	ldr	r3, [pc, #68]	; (8003378 <_sbrk+0x64>)
 8003332:	4a12      	ldr	r2, [pc, #72]	; (800337c <_sbrk+0x68>)
 8003334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003336:	4b10      	ldr	r3, [pc, #64]	; (8003378 <_sbrk+0x64>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4413      	add	r3, r2
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	429a      	cmp	r2, r3
 8003342:	d207      	bcs.n	8003354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003344:	f006 fa32 	bl	80097ac <__errno>
 8003348:	4603      	mov	r3, r0
 800334a:	220c      	movs	r2, #12
 800334c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800334e:	f04f 33ff 	mov.w	r3, #4294967295
 8003352:	e009      	b.n	8003368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003354:	4b08      	ldr	r3, [pc, #32]	; (8003378 <_sbrk+0x64>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800335a:	4b07      	ldr	r3, [pc, #28]	; (8003378 <_sbrk+0x64>)
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4413      	add	r3, r2
 8003362:	4a05      	ldr	r2, [pc, #20]	; (8003378 <_sbrk+0x64>)
 8003364:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003366:	68fb      	ldr	r3, [r7, #12]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	20030000 	.word	0x20030000
 8003374:	00000400 	.word	0x00000400
 8003378:	20000668 	.word	0x20000668
 800337c:	20000680 	.word	0x20000680

08003380 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003384:	4b24      	ldr	r3, [pc, #144]	; (8003418 <SystemInit+0x98>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338a:	4a23      	ldr	r2, [pc, #140]	; (8003418 <SystemInit+0x98>)
 800338c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800339e:	f043 0301 	orr.w	r3, r3, #1
 80033a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80033a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80033ac:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80033ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033b8:	4b18      	ldr	r3, [pc, #96]	; (800341c <SystemInit+0x9c>)
 80033ba:	4013      	ands	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80033be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033ca:	f023 0305 	bic.w	r3, r3, #5
 80033ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80033d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033de:	f023 0301 	bic.w	r3, r3, #1
 80033e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80033e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ea:	4a0d      	ldr	r2, [pc, #52]	; (8003420 <SystemInit+0xa0>)
 80033ec:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80033ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f2:	4a0b      	ldr	r2, [pc, #44]	; (8003420 <SystemInit+0xa0>)
 80033f4:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80033f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003400:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003404:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340a:	2200      	movs	r2, #0
 800340c:	619a      	str	r2, [r3, #24]
}
 800340e:	bf00      	nop
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	e000ed00 	.word	0xe000ed00
 800341c:	faf6fefb 	.word	0xfaf6fefb
 8003420:	22041000 	.word	0x22041000

08003424 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003424:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003426:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003428:	3304      	adds	r3, #4

0800342a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800342a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800342c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800342e:	d3f9      	bcc.n	8003424 <CopyDataInit>
  bx lr
 8003430:	4770      	bx	lr

08003432 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003432:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003434:	3004      	adds	r0, #4

08003436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003436:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003438:	d3fb      	bcc.n	8003432 <FillZerobss>
  bx lr
 800343a:	4770      	bx	lr

0800343c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800343c:	480c      	ldr	r0, [pc, #48]	; (8003470 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800343e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003440:	f7ff ff9e 	bl	8003380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003444:	480b      	ldr	r0, [pc, #44]	; (8003474 <LoopForever+0x8>)
 8003446:	490c      	ldr	r1, [pc, #48]	; (8003478 <LoopForever+0xc>)
 8003448:	4a0c      	ldr	r2, [pc, #48]	; (800347c <LoopForever+0x10>)
 800344a:	2300      	movs	r3, #0
 800344c:	f7ff ffed 	bl	800342a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003450:	480b      	ldr	r0, [pc, #44]	; (8003480 <LoopForever+0x14>)
 8003452:	490c      	ldr	r1, [pc, #48]	; (8003484 <LoopForever+0x18>)
 8003454:	2300      	movs	r3, #0
 8003456:	f7ff ffee 	bl	8003436 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800345a:	480b      	ldr	r0, [pc, #44]	; (8003488 <LoopForever+0x1c>)
 800345c:	490b      	ldr	r1, [pc, #44]	; (800348c <LoopForever+0x20>)
 800345e:	2300      	movs	r3, #0
 8003460:	f7ff ffe9 	bl	8003436 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003464:	f006 f9a8 	bl	80097b8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8003468:	f7fd fdda 	bl	8001020 <main>

0800346c <LoopForever>:

LoopForever:
  b LoopForever
 800346c:	e7fe      	b.n	800346c <LoopForever>
 800346e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8003470:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003474:	20000004 	.word	0x20000004
 8003478:	20000210 	.word	0x20000210
 800347c:	0800cecc 	.word	0x0800cecc
  INIT_BSS _sbss, _ebss
 8003480:	20000210 	.word	0x20000210
 8003484:	20000680 	.word	0x20000680
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003488:	20030000 	.word	0x20030000
 800348c:	20030000 	.word	0x20030000

08003490 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003490:	e7fe      	b.n	8003490 <ADC1_IRQHandler>
	...

08003494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800349e:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <HAL_Init+0x3c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a0b      	ldr	r2, [pc, #44]	; (80034d0 <HAL_Init+0x3c>)
 80034a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034aa:	2003      	movs	r0, #3
 80034ac:	f000 f96c 	bl	8003788 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034b0:	200f      	movs	r0, #15
 80034b2:	f000 f80f 	bl	80034d4 <HAL_InitTick>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	71fb      	strb	r3, [r7, #7]
 80034c0:	e001      	b.n	80034c6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80034c2:	f7ff fc8a 	bl	8002dda <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80034c6:	79fb      	ldrb	r3, [r7, #7]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	58004000 	.word	0x58004000

080034d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80034dc:	2300      	movs	r3, #0
 80034de:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80034e0:	4b17      	ldr	r3, [pc, #92]	; (8003540 <HAL_InitTick+0x6c>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d024      	beq.n	8003532 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80034e8:	f001 fdc8 	bl	800507c <HAL_RCC_GetHCLKFreq>
 80034ec:	4602      	mov	r2, r0
 80034ee:	4b14      	ldr	r3, [pc, #80]	; (8003540 <HAL_InitTick+0x6c>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	4619      	mov	r1, r3
 80034f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80034fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003500:	4618      	mov	r0, r3
 8003502:	f000 f974 	bl	80037ee <HAL_SYSTICK_Config>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10f      	bne.n	800352c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b0f      	cmp	r3, #15
 8003510:	d809      	bhi.n	8003526 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003512:	2200      	movs	r2, #0
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	f04f 30ff 	mov.w	r0, #4294967295
 800351a:	f000 f940 	bl	800379e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800351e:	4a09      	ldr	r2, [pc, #36]	; (8003544 <HAL_InitTick+0x70>)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	e007      	b.n	8003536 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	73fb      	strb	r3, [r7, #15]
 800352a:	e004      	b.n	8003536 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]
 8003530:	e001      	b.n	8003536 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003536:	7bfb      	ldrb	r3, [r7, #15]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	2000003c 	.word	0x2000003c
 8003544:	20000038 	.word	0x20000038

08003548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800354c:	4b06      	ldr	r3, [pc, #24]	; (8003568 <HAL_IncTick+0x20>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_IncTick+0x24>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4413      	add	r3, r2
 8003558:	4a04      	ldr	r2, [pc, #16]	; (800356c <HAL_IncTick+0x24>)
 800355a:	6013      	str	r3, [r2, #0]
}
 800355c:	bf00      	nop
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	2000003c 	.word	0x2000003c
 800356c:	2000066c 	.word	0x2000066c

08003570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return uwTick;
 8003574:	4b03      	ldr	r3, [pc, #12]	; (8003584 <HAL_GetTick+0x14>)
 8003576:	681b      	ldr	r3, [r3, #0]
}
 8003578:	4618      	mov	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	2000066c 	.word	0x2000066c

08003588 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800358c:	4b03      	ldr	r3, [pc, #12]	; (800359c <HAL_GetTickPrio+0x14>)
 800358e:	681b      	ldr	r3, [r3, #0]
}
 8003590:	4618      	mov	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	20000038 	.word	0x20000038

080035a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80035a8:	f7ff ffe2 	bl	8003570 <HAL_GetTick>
 80035ac:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b8:	d005      	beq.n	80035c6 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 80035ba:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <HAL_Delay+0x44>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4413      	add	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80035c6:	bf00      	nop
 80035c8:	f7ff ffd2 	bl	8003570 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d8f7      	bhi.n	80035c8 <HAL_Delay+0x28>
    {
    }
  }
 80035d8:	bf00      	nop
 80035da:	bf00      	nop
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	2000003c 	.word	0x2000003c

080035e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035f8:	4b0c      	ldr	r3, [pc, #48]	; (800362c <__NVIC_SetPriorityGrouping+0x44>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003604:	4013      	ands	r3, r2
 8003606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800361a:	4a04      	ldr	r2, [pc, #16]	; (800362c <__NVIC_SetPriorityGrouping+0x44>)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	60d3      	str	r3, [r2, #12]
}
 8003620:	bf00      	nop
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	e000ed00 	.word	0xe000ed00

08003630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003634:	4b04      	ldr	r3, [pc, #16]	; (8003648 <__NVIC_GetPriorityGrouping+0x18>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	0a1b      	lsrs	r3, r3, #8
 800363a:	f003 0307 	and.w	r3, r3, #7
}
 800363e:	4618      	mov	r0, r3
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365a:	2b00      	cmp	r3, #0
 800365c:	db0b      	blt.n	8003676 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800365e:	79fb      	ldrb	r3, [r7, #7]
 8003660:	f003 021f 	and.w	r2, r3, #31
 8003664:	4907      	ldr	r1, [pc, #28]	; (8003684 <__NVIC_EnableIRQ+0x38>)
 8003666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	2001      	movs	r0, #1
 800366e:	fa00 f202 	lsl.w	r2, r0, r2
 8003672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	e000e100 	.word	0xe000e100

08003688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	6039      	str	r1, [r7, #0]
 8003692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003698:	2b00      	cmp	r3, #0
 800369a:	db0a      	blt.n	80036b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	490c      	ldr	r1, [pc, #48]	; (80036d4 <__NVIC_SetPriority+0x4c>)
 80036a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a6:	0112      	lsls	r2, r2, #4
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	440b      	add	r3, r1
 80036ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036b0:	e00a      	b.n	80036c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	4908      	ldr	r1, [pc, #32]	; (80036d8 <__NVIC_SetPriority+0x50>)
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	3b04      	subs	r3, #4
 80036c0:	0112      	lsls	r2, r2, #4
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	440b      	add	r3, r1
 80036c6:	761a      	strb	r2, [r3, #24]
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	e000e100 	.word	0xe000e100
 80036d8:	e000ed00 	.word	0xe000ed00

080036dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036dc:	b480      	push	{r7}
 80036de:	b089      	sub	sp, #36	; 0x24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f1c3 0307 	rsb	r3, r3, #7
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	bf28      	it	cs
 80036fa:	2304      	movcs	r3, #4
 80036fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	3304      	adds	r3, #4
 8003702:	2b06      	cmp	r3, #6
 8003704:	d902      	bls.n	800370c <NVIC_EncodePriority+0x30>
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	3b03      	subs	r3, #3
 800370a:	e000      	b.n	800370e <NVIC_EncodePriority+0x32>
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003710:	f04f 32ff 	mov.w	r2, #4294967295
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	43da      	mvns	r2, r3
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	401a      	ands	r2, r3
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003724:	f04f 31ff 	mov.w	r1, #4294967295
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	fa01 f303 	lsl.w	r3, r1, r3
 800372e:	43d9      	mvns	r1, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003734:	4313      	orrs	r3, r2
         );
}
 8003736:	4618      	mov	r0, r3
 8003738:	3724      	adds	r7, #36	; 0x24
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
	...

08003744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3b01      	subs	r3, #1
 8003750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003754:	d301      	bcc.n	800375a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003756:	2301      	movs	r3, #1
 8003758:	e00f      	b.n	800377a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800375a:	4a0a      	ldr	r2, [pc, #40]	; (8003784 <SysTick_Config+0x40>)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3b01      	subs	r3, #1
 8003760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003762:	210f      	movs	r1, #15
 8003764:	f04f 30ff 	mov.w	r0, #4294967295
 8003768:	f7ff ff8e 	bl	8003688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800376c:	4b05      	ldr	r3, [pc, #20]	; (8003784 <SysTick_Config+0x40>)
 800376e:	2200      	movs	r2, #0
 8003770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003772:	4b04      	ldr	r3, [pc, #16]	; (8003784 <SysTick_Config+0x40>)
 8003774:	2207      	movs	r2, #7
 8003776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	e000e010 	.word	0xe000e010

08003788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff ff29 	bl	80035e8 <__NVIC_SetPriorityGrouping>
}
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b086      	sub	sp, #24
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	4603      	mov	r3, r0
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	607a      	str	r2, [r7, #4]
 80037aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037ac:	f7ff ff40 	bl	8003630 <__NVIC_GetPriorityGrouping>
 80037b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	68b9      	ldr	r1, [r7, #8]
 80037b6:	6978      	ldr	r0, [r7, #20]
 80037b8:	f7ff ff90 	bl	80036dc <NVIC_EncodePriority>
 80037bc:	4602      	mov	r2, r0
 80037be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037c2:	4611      	mov	r1, r2
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff ff5f 	bl	8003688 <__NVIC_SetPriority>
}
 80037ca:	bf00      	nop
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b082      	sub	sp, #8
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	4603      	mov	r3, r0
 80037da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff ff33 	bl	800364c <__NVIC_EnableIRQ>
}
 80037e6:	bf00      	nop
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b082      	sub	sp, #8
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff ffa4 	bl	8003744 <SysTick_Config>
 80037fc:	4603      	mov	r3, r0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e04f      	b.n	80038b8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d008      	beq.n	8003836 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2204      	movs	r2, #4
 8003828:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e040      	b.n	80038b8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 020e 	bic.w	r2, r2, #14
 8003844:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003850:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003854:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0201 	bic.w	r2, r2, #1
 8003864:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	f003 021c 	and.w	r2, r3, #28
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	2101      	movs	r1, #1
 8003874:	fa01 f202 	lsl.w	r2, r1, r2
 8003878:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003882:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00c      	beq.n	80038a6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003896:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800389a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038a4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d005      	beq.n	80038e8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2204      	movs	r2, #4
 80038e0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	73fb      	strb	r3, [r7, #15]
 80038e6:	e047      	b.n	8003978 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 020e 	bic.w	r2, r2, #14
 80038f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0201 	bic.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003912:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003916:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391c:	f003 021c 	and.w	r2, r3, #28
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	2101      	movs	r1, #1
 8003926:	fa01 f202 	lsl.w	r2, r1, r2
 800392a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003934:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00c      	beq.n	8003958 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003948:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800394c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003956:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	4798      	blx	r3
    }
  }
  return status;
 8003978:	7bfb      	ldrb	r3, [r7, #15]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003992:	e14c      	b.n	8003c2e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	2101      	movs	r1, #1
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	fa01 f303 	lsl.w	r3, r1, r3
 80039a0:	4013      	ands	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 813e 	beq.w	8003c28 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f003 0303 	and.w	r3, r3, #3
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d005      	beq.n	80039c4 <HAL_GPIO_Init+0x40>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 0303 	and.w	r3, r3, #3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d130      	bne.n	8003a26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	2203      	movs	r2, #3
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	43db      	mvns	r3, r3
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4013      	ands	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	68da      	ldr	r2, [r3, #12]
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039fa:	2201      	movs	r2, #1
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	43db      	mvns	r3, r3
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4013      	ands	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	091b      	lsrs	r3, r3, #4
 8003a10:	f003 0201 	and.w	r2, r3, #1
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d017      	beq.n	8003a62 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43db      	mvns	r3, r3
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4013      	ands	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d123      	bne.n	8003ab6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	08da      	lsrs	r2, r3, #3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	3208      	adds	r2, #8
 8003a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	220f      	movs	r2, #15
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	691a      	ldr	r2, [r3, #16]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	08da      	lsrs	r2, r3, #3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3208      	adds	r2, #8
 8003ab0:	6939      	ldr	r1, [r7, #16]
 8003ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	2203      	movs	r2, #3
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4013      	ands	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f003 0203 	and.w	r2, r3, #3
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 8098 	beq.w	8003c28 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003af8:	4a54      	ldr	r2, [pc, #336]	; (8003c4c <HAL_GPIO_Init+0x2c8>)
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	089b      	lsrs	r3, r3, #2
 8003afe:	3302      	adds	r3, #2
 8003b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f003 0303 	and.w	r3, r3, #3
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	220f      	movs	r2, #15
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	43db      	mvns	r3, r3
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b22:	d019      	beq.n	8003b58 <HAL_GPIO_Init+0x1d4>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a4a      	ldr	r2, [pc, #296]	; (8003c50 <HAL_GPIO_Init+0x2cc>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d013      	beq.n	8003b54 <HAL_GPIO_Init+0x1d0>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a49      	ldr	r2, [pc, #292]	; (8003c54 <HAL_GPIO_Init+0x2d0>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d00d      	beq.n	8003b50 <HAL_GPIO_Init+0x1cc>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a48      	ldr	r2, [pc, #288]	; (8003c58 <HAL_GPIO_Init+0x2d4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d007      	beq.n	8003b4c <HAL_GPIO_Init+0x1c8>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a47      	ldr	r2, [pc, #284]	; (8003c5c <HAL_GPIO_Init+0x2d8>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d101      	bne.n	8003b48 <HAL_GPIO_Init+0x1c4>
 8003b44:	2304      	movs	r3, #4
 8003b46:	e008      	b.n	8003b5a <HAL_GPIO_Init+0x1d6>
 8003b48:	2307      	movs	r3, #7
 8003b4a:	e006      	b.n	8003b5a <HAL_GPIO_Init+0x1d6>
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e004      	b.n	8003b5a <HAL_GPIO_Init+0x1d6>
 8003b50:	2302      	movs	r3, #2
 8003b52:	e002      	b.n	8003b5a <HAL_GPIO_Init+0x1d6>
 8003b54:	2301      	movs	r3, #1
 8003b56:	e000      	b.n	8003b5a <HAL_GPIO_Init+0x1d6>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	f002 0203 	and.w	r2, r2, #3
 8003b60:	0092      	lsls	r2, r2, #2
 8003b62:	4093      	lsls	r3, r2
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b6a:	4938      	ldr	r1, [pc, #224]	; (8003c4c <HAL_GPIO_Init+0x2c8>)
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	089b      	lsrs	r3, r3, #2
 8003b70:	3302      	adds	r3, #2
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b78:	4b39      	ldr	r3, [pc, #228]	; (8003c60 <HAL_GPIO_Init+0x2dc>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	43db      	mvns	r3, r3
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	4013      	ands	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b9c:	4a30      	ldr	r2, [pc, #192]	; (8003c60 <HAL_GPIO_Init+0x2dc>)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003ba2:	4b2f      	ldr	r3, [pc, #188]	; (8003c60 <HAL_GPIO_Init+0x2dc>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	43db      	mvns	r3, r3
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bc6:	4a26      	ldr	r2, [pc, #152]	; (8003c60 <HAL_GPIO_Init+0x2dc>)
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003bcc:	4b24      	ldr	r3, [pc, #144]	; (8003c60 <HAL_GPIO_Init+0x2dc>)
 8003bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bf2:	4a1b      	ldr	r2, [pc, #108]	; (8003c60 <HAL_GPIO_Init+0x2dc>)
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003bfa:	4b19      	ldr	r3, [pc, #100]	; (8003c60 <HAL_GPIO_Init+0x2dc>)
 8003bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	43db      	mvns	r3, r3
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c20:	4a0f      	ldr	r2, [pc, #60]	; (8003c60 <HAL_GPIO_Init+0x2dc>)
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	fa22 f303 	lsr.w	r3, r2, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f47f aeab 	bne.w	8003994 <HAL_GPIO_Init+0x10>
  }
}
 8003c3e:	bf00      	nop
 8003c40:	bf00      	nop
 8003c42:	371c      	adds	r7, #28
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	40010000 	.word	0x40010000
 8003c50:	48000400 	.word	0x48000400
 8003c54:	48000800 	.word	0x48000800
 8003c58:	48000c00 	.word	0x48000c00
 8003c5c:	48001000 	.word	0x48001000
 8003c60:	58000800 	.word	0x58000800

08003c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	807b      	strh	r3, [r7, #2]
 8003c70:	4613      	mov	r3, r2
 8003c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c74:	787b      	ldrb	r3, [r7, #1]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c7a:	887a      	ldrh	r2, [r7, #2]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c80:	e002      	b.n	8003c88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c82:	887a      	ldrh	r2, [r7, #2]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e081      	b.n	8003daa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d106      	bne.n	8003cc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff f894 	bl	8002de8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2224      	movs	r2, #36	; 0x24
 8003cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0201 	bic.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ce4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cf4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d107      	bne.n	8003d0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d0a:	609a      	str	r2, [r3, #8]
 8003d0c:	e006      	b.n	8003d1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d104      	bne.n	8003d2e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6812      	ldr	r2, [r2, #0]
 8003d38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691a      	ldr	r2, [r3, #16]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69d9      	ldr	r1, [r3, #28]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1a      	ldr	r2, [r3, #32]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2220      	movs	r2, #32
 8003d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
 8003dba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	d138      	bne.n	8003e3a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d101      	bne.n	8003dd6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e032      	b.n	8003e3c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2224      	movs	r2, #36	; 0x24
 8003de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0201 	bic.w	r2, r2, #1
 8003df4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e04:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6819      	ldr	r1, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f042 0201 	orr.w	r2, r2, #1
 8003e24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	e000      	b.n	8003e3c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e3a:	2302      	movs	r3, #2
  }
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	d139      	bne.n	8003ed2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d101      	bne.n	8003e6c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e68:	2302      	movs	r3, #2
 8003e6a:	e033      	b.n	8003ed4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2224      	movs	r2, #36	; 0x24
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0201 	bic.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e9a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	021b      	lsls	r3, r3, #8
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f042 0201 	orr.w	r2, r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	e000      	b.n	8003ed4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ed2:	2302      	movs	r3, #2
  }
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ee4:	4b05      	ldr	r3, [pc, #20]	; (8003efc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a04      	ldr	r2, [pc, #16]	; (8003efc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eee:	6013      	str	r3, [r2, #0]
}
 8003ef0:	bf00      	nop
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	58000400 	.word	0x58000400

08003f00 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f04:	4b04      	ldr	r3, [pc, #16]	; (8003f18 <HAL_PWREx_GetVoltageRange+0x18>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	58000400 	.word	0x58000400

08003f1c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f2e:	d101      	bne.n	8003f34 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003f30:	2301      	movs	r3, #1
 8003f32:	e000      	b.n	8003f36 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f52:	6013      	str	r3, [r2, #0]
}
 8003f54:	bf00      	nop
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f70:	6013      	str	r3, [r2, #0]
}
 8003f72:	bf00      	nop
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f8e:	d101      	bne.n	8003f94 <LL_RCC_HSE_IsReady+0x18>
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <LL_RCC_HSE_IsReady+0x1a>
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb2:	6013      	str	r3, [r2, #0]
}
 8003fb4:	bf00      	nop
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fd0:	6013      	str	r3, [r2, #0]
}
 8003fd2:	bf00      	nop
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fee:	d101      	bne.n	8003ff4 <LL_RCC_HSI_IsReady+0x18>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <LL_RCC_HSI_IsReady+0x1a>
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	061b      	lsls	r3, r3, #24
 8004016:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800401a:	4313      	orrs	r3, r2
 800401c:	604b      	str	r3, [r1, #4]
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800402a:	b480      	push	{r7}
 800402c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800402e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004032:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004036:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800403a:	f043 0301 	orr.w	r3, r3, #1
 800403e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004042:	bf00      	nop
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004054:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004058:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800405c:	f023 0301 	bic.w	r3, r3, #1
 8004060:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004064:	bf00      	nop
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800406e:	b480      	push	{r7}
 8004070:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004076:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b02      	cmp	r3, #2
 8004080:	d101      	bne.n	8004086 <LL_RCC_HSI48_IsReady+0x18>
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <LL_RCC_HSI48_IsReady+0x1a>
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8004092:	b480      	push	{r7}
 8004094:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040a2:	f043 0301 	orr.w	r3, r3, #1
 80040a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040aa:	bf00      	nop
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80040b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040c4:	f023 0301 	bic.w	r3, r3, #1
 80040c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040cc:	bf00      	nop
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80040d6:	b480      	push	{r7}
 80040d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80040da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040e6:	f043 0304 	orr.w	r3, r3, #4
 80040ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040ee:	bf00      	nop
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80040fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004104:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004108:	f023 0304 	bic.w	r3, r3, #4
 800410c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004110:	bf00      	nop
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800411a:	b480      	push	{r7}
 800411c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800411e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b02      	cmp	r3, #2
 800412c:	d101      	bne.n	8004132 <LL_RCC_LSE_IsReady+0x18>
 800412e:	2301      	movs	r3, #1
 8004130:	e000      	b.n	8004134 <LL_RCC_LSE_IsReady+0x1a>
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800413e:	b480      	push	{r7}
 8004140:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800414a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800414e:	f043 0301 	orr.w	r3, r3, #1
 8004152:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004156:	bf00      	nop
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800416c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004170:	f023 0301 	bic.w	r3, r3, #1
 8004174:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004178:	bf00      	nop
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8004182:	b480      	push	{r7}
 8004184:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800418a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b02      	cmp	r3, #2
 8004194:	d101      	bne.n	800419a <LL_RCC_LSI1_IsReady+0x18>
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <LL_RCC_LSI1_IsReady+0x1a>
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80041a6:	b480      	push	{r7}
 80041a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80041aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041b6:	f043 0304 	orr.w	r3, r3, #4
 80041ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80041be:	bf00      	nop
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80041cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041d8:	f023 0304 	bic.w	r3, r3, #4
 80041dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80041e0:	bf00      	nop
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80041ea:	b480      	push	{r7}
 80041ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80041ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d101      	bne.n	8004202 <LL_RCC_LSI2_IsReady+0x18>
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <LL_RCC_LSI2_IsReady+0x1a>
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800421a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800421e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	021b      	lsls	r3, r3, #8
 8004226:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800424a:	f043 0301 	orr.w	r3, r3, #1
 800424e:	6013      	str	r3, [r2, #0]
}
 8004250:	bf00      	nop
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800425a:	b480      	push	{r7}
 800425c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800425e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004268:	f023 0301 	bic.w	r3, r3, #1
 800426c:	6013      	str	r3, [r2, #0]
}
 800426e:	bf00      	nop
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800427c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b02      	cmp	r3, #2
 8004288:	d101      	bne.n	800428e <LL_RCC_MSI_IsReady+0x16>
 800428a:	2301      	movs	r3, #1
 800428c:	e000      	b.n	8004290 <LL_RCC_MSI_IsReady+0x18>
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800429a:	b480      	push	{r7}
 800429c:	b083      	sub	sp, #12
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80042a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	600b      	str	r3, [r1, #0]
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80042c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042d2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2bb0      	cmp	r3, #176	; 0xb0
 80042d8:	d901      	bls.n	80042de <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80042da:	23b0      	movs	r3, #176	; 0xb0
 80042dc:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80042de:	687b      	ldr	r3, [r7, #4]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80042f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	021b      	lsls	r3, r3, #8
 8004302:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004306:	4313      	orrs	r3, r2
 8004308:	604b      	str	r3, [r1, #4]
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800431e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f023 0203 	bic.w	r2, r3, #3
 8004328:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4313      	orrs	r3, r2
 8004330:	608b      	str	r3, [r1, #8]
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800433e:	b480      	push	{r7}
 8004340:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 030c 	and.w	r3, r3, #12
}
 800434c:	4618      	mov	r0, r3
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800435e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004368:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4313      	orrs	r3, r2
 8004370:	608b      	str	r3, [r1, #8]
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004386:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800438a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800438e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004392:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80043b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80043ba:	f023 020f 	bic.w	r2, r3, #15
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	091b      	lsrs	r3, r3, #4
 80043c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80043e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	608b      	str	r3, [r1, #8]
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004412:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4313      	orrs	r3, r2
 800441a:	608b      	str	r3, [r1, #8]
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800442c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004436:	4618      	mov	r0, r3
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004448:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004452:	4618      	mov	r0, r3
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800446a:	4618      	mov	r0, r3
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004482:	4618      	mov	r0, r3
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800449a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800449e:	6013      	str	r3, [r2, #0]
}
 80044a0:	bf00      	nop
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80044aa:	b480      	push	{r7}
 80044ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80044ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044bc:	6013      	str	r3, [r2, #0]
}
 80044be:	bf00      	nop
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80044cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044da:	d101      	bne.n	80044e0 <LL_RCC_PLL_IsReady+0x18>
 80044dc:	2301      	movs	r3, #1
 80044de:	e000      	b.n	80044e2 <LL_RCC_PLL_IsReady+0x1a>
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80044f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	0a1b      	lsrs	r3, r3, #8
 80044f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004506:	b480      	push	{r7}
 8004508:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800450a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004514:	4618      	mov	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800451e:	b480      	push	{r7}
 8004520:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800452c:	4618      	mov	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004536:	b480      	push	{r7}
 8004538:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800453a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 0303 	and.w	r3, r3, #3
}
 8004544:	4618      	mov	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800454e:	b480      	push	{r7}
 8004550:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800455c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004560:	d101      	bne.n	8004566 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004572:	b480      	push	{r7}
 8004574:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800457a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800457e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004582:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004586:	d101      	bne.n	800458c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004588:	2301      	movs	r3, #1
 800458a:	e000      	b.n	800458e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800459c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80045a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ac:	d101      	bne.n	80045b2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80045ae:	2301      	movs	r3, #1
 80045b0:	e000      	b.n	80045b4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80045be:	b480      	push	{r7}
 80045c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80045c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045d0:	d101      	bne.n	80045d6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80045e2:	b480      	push	{r7}
 80045e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80045e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045f4:	d101      	bne.n	80045fa <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80045f6:	2301      	movs	r3, #1
 80045f8:	e000      	b.n	80045fc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
	...

08004608 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004608:	b590      	push	{r4, r7, lr}
 800460a:	b08d      	sub	sp, #52	; 0x34
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e37f      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0320 	and.w	r3, r3, #32
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 8092 	beq.w	800474c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004628:	f7ff fe89 	bl	800433e <LL_RCC_GetSysClkSource>
 800462c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800462e:	f7ff ff82 	bl	8004536 <LL_RCC_PLL_GetMainSource>
 8004632:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004636:	2b00      	cmp	r3, #0
 8004638:	d005      	beq.n	8004646 <HAL_RCC_OscConfig+0x3e>
 800463a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463c:	2b0c      	cmp	r3, #12
 800463e:	d14c      	bne.n	80046da <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	2b01      	cmp	r3, #1
 8004644:	d149      	bne.n	80046da <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004646:	f7ff fe17 	bl	8004278 <LL_RCC_MSI_IsReady>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_RCC_OscConfig+0x54>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e35e      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004660:	f7ff fe2f 	bl	80042c2 <LL_RCC_MSI_GetRange>
 8004664:	4603      	mov	r3, r0
 8004666:	429c      	cmp	r4, r3
 8004668:	d914      	bls.n	8004694 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fd44 	bl	80050fc <RCC_SetFlashLatencyFromMSIRange>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e34d      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff fe09 	bl	800429a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff fe2d 	bl	80042ec <LL_RCC_MSI_SetCalibTrimming>
 8004692:	e013      	b.n	80046bc <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff fdfe 	bl	800429a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff fe22 	bl	80042ec <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 fd25 	bl	80050fc <RCC_SetFlashLatencyFromMSIRange>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e32e      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80046bc:	f000 fcde 	bl	800507c <HAL_RCC_GetHCLKFreq>
 80046c0:	4603      	mov	r3, r0
 80046c2:	4aa5      	ldr	r2, [pc, #660]	; (8004958 <HAL_RCC_OscConfig+0x350>)
 80046c4:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80046c6:	4ba5      	ldr	r3, [pc, #660]	; (800495c <HAL_RCC_OscConfig+0x354>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fe ff02 	bl	80034d4 <HAL_InitTick>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d039      	beq.n	800474a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e31f      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d01e      	beq.n	8004720 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80046e2:	f7ff fdab 	bl	800423c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046e6:	f7fe ff43 	bl	8003570 <HAL_GetTick>
 80046ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046ee:	f7fe ff3f 	bl	8003570 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e30c      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004700:	f7ff fdba 	bl	8004278 <LL_RCC_MSI_IsReady>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0f1      	beq.n	80046ee <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff fdc3 	bl	800429a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	4618      	mov	r0, r3
 800471a:	f7ff fde7 	bl	80042ec <LL_RCC_MSI_SetCalibTrimming>
 800471e:	e015      	b.n	800474c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004720:	f7ff fd9b 	bl	800425a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004724:	f7fe ff24 	bl	8003570 <HAL_GetTick>
 8004728:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800472c:	f7fe ff20 	bl	8003570 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e2ed      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() != 0U)
 800473e:	f7ff fd9b 	bl	8004278 <LL_RCC_MSI_IsReady>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1f1      	bne.n	800472c <HAL_RCC_OscConfig+0x124>
 8004748:	e000      	b.n	800474c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800474a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d04e      	beq.n	80047f6 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004758:	f7ff fdf1 	bl	800433e <LL_RCC_GetSysClkSource>
 800475c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800475e:	f7ff feea 	bl	8004536 <LL_RCC_PLL_GetMainSource>
 8004762:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	2b08      	cmp	r3, #8
 8004768:	d005      	beq.n	8004776 <HAL_RCC_OscConfig+0x16e>
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	2b0c      	cmp	r3, #12
 800476e:	d10d      	bne.n	800478c <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	2b03      	cmp	r3, #3
 8004774:	d10a      	bne.n	800478c <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004776:	f7ff fc01 	bl	8003f7c <LL_RCC_HSE_IsReady>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d039      	beq.n	80047f4 <HAL_RCC_OscConfig+0x1ec>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d135      	bne.n	80047f4 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e2c6      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004794:	d102      	bne.n	800479c <HAL_RCC_OscConfig+0x194>
 8004796:	f7ff fbd3 	bl	8003f40 <LL_RCC_HSE_Enable>
 800479a:	e001      	b.n	80047a0 <HAL_RCC_OscConfig+0x198>
 800479c:	f7ff fbdf 	bl	8003f5e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d012      	beq.n	80047ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a8:	f7fe fee2 	bl	8003570 <HAL_GetTick>
 80047ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b0:	f7fe fede 	bl	8003570 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b64      	cmp	r3, #100	; 0x64
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e2ab      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() == 0U)
 80047c2:	f7ff fbdb 	bl	8003f7c <LL_RCC_HSE_IsReady>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0f1      	beq.n	80047b0 <HAL_RCC_OscConfig+0x1a8>
 80047cc:	e013      	b.n	80047f6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ce:	f7fe fecf 	bl	8003570 <HAL_GetTick>
 80047d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047d6:	f7fe fecb 	bl	8003570 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b64      	cmp	r3, #100	; 0x64
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e298      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() != 0U)
 80047e8:	f7ff fbc8 	bl	8003f7c <LL_RCC_HSE_IsReady>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f1      	bne.n	80047d6 <HAL_RCC_OscConfig+0x1ce>
 80047f2:	e000      	b.n	80047f6 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f4:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d051      	beq.n	80048a6 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004802:	f7ff fd9c 	bl	800433e <LL_RCC_GetSysClkSource>
 8004806:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004808:	f7ff fe95 	bl	8004536 <LL_RCC_PLL_GetMainSource>
 800480c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	2b04      	cmp	r3, #4
 8004812:	d005      	beq.n	8004820 <HAL_RCC_OscConfig+0x218>
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	2b0c      	cmp	r3, #12
 8004818:	d113      	bne.n	8004842 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2b02      	cmp	r3, #2
 800481e:	d110      	bne.n	8004842 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004820:	f7ff fbdc 	bl	8003fdc <LL_RCC_HSI_IsReady>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d005      	beq.n	8004836 <HAL_RCC_OscConfig+0x22e>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e271      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff fbe0 	bl	8004000 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004840:	e031      	b.n	80048a6 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d019      	beq.n	800487e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800484a:	f7ff fba9 	bl	8003fa0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484e:	f7fe fe8f 	bl	8003570 <HAL_GetTick>
 8004852:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004854:	e008      	b.n	8004868 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004856:	f7fe fe8b 	bl	8003570 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e258      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004868:	f7ff fbb8 	bl	8003fdc <LL_RCC_HSI_IsReady>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0f1      	beq.n	8004856 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff fbc2 	bl	8004000 <LL_RCC_HSI_SetCalibTrimming>
 800487c:	e013      	b.n	80048a6 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800487e:	f7ff fb9e 	bl	8003fbe <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004882:	f7fe fe75 	bl	8003570 <HAL_GetTick>
 8004886:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800488a:	f7fe fe71 	bl	8003570 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e23e      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() != 0U)
 800489c:	f7ff fb9e 	bl	8003fdc <LL_RCC_HSI_IsReady>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f1      	bne.n	800488a <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d106      	bne.n	80048c0 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 80a4 	beq.w	8004a08 <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d077      	beq.n	80049b8 <HAL_RCC_OscConfig+0x3b0>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0310 	and.w	r3, r3, #16
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d04b      	beq.n	800496c <HAL_RCC_OscConfig+0x364>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80048d4:	f7ff fc55 	bl	8004182 <LL_RCC_LSI1_IsReady>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d113      	bne.n	8004906 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80048de:	f7ff fc2e 	bl	800413e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048e2:	f7fe fe45 	bl	8003570 <HAL_GetTick>
 80048e6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80048ea:	f7fe fe41 	bl	8003570 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e20e      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80048fc:	f7ff fc41 	bl	8004182 <LL_RCC_LSI1_IsReady>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0f1      	beq.n	80048ea <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004906:	f7ff fc4e 	bl	80041a6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490a:	f7fe fe31 	bl	8003570 <HAL_GetTick>
 800490e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004910:	e008      	b.n	8004924 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004912:	f7fe fe2d 	bl	8003570 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b03      	cmp	r3, #3
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e1fa      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004924:	f7ff fc61 	bl	80041ea <LL_RCC_LSI2_IsReady>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0f1      	beq.n	8004912 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff fc6b 	bl	800420e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004938:	f7ff fc12 	bl	8004160 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493c:	f7fe fe18 	bl	8003570 <HAL_GetTick>
 8004940:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004942:	e00d      	b.n	8004960 <HAL_RCC_OscConfig+0x358>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004944:	f7fe fe14 	bl	8003570 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d906      	bls.n	8004960 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e1e1      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
 8004956:	bf00      	nop
 8004958:	20000034 	.word	0x20000034
 800495c:	20000038 	.word	0x20000038
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004960:	f7ff fc0f 	bl	8004182 <LL_RCC_LSI1_IsReady>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1ec      	bne.n	8004944 <HAL_RCC_OscConfig+0x33c>
 800496a:	e04d      	b.n	8004a08 <HAL_RCC_OscConfig+0x400>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800496c:	f7ff fbe7 	bl	800413e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004970:	f7fe fdfe 	bl	8003570 <HAL_GetTick>
 8004974:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x382>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004978:	f7fe fdfa 	bl	8003570 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e1c7      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800498a:	f7ff fbfa 	bl	8004182 <LL_RCC_LSI1_IsReady>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0f1      	beq.n	8004978 <HAL_RCC_OscConfig+0x370>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004994:	f7ff fc18 	bl	80041c8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x3a4>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800499a:	f7fe fde9 	bl	8003570 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e1b6      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80049ac:	f7ff fc1d 	bl	80041ea <LL_RCC_LSI2_IsReady>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f1      	bne.n	800499a <HAL_RCC_OscConfig+0x392>
 80049b6:	e027      	b.n	8004a08 <HAL_RCC_OscConfig+0x400>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80049b8:	f7ff fc06 	bl	80041c8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049bc:	f7fe fdd8 	bl	8003570 <HAL_GetTick>
 80049c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x3ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80049c4:	f7fe fdd4 	bl	8003570 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b03      	cmp	r3, #3
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e1a1      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80049d6:	f7ff fc08 	bl	80041ea <LL_RCC_LSI2_IsReady>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1f1      	bne.n	80049c4 <HAL_RCC_OscConfig+0x3bc>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80049e0:	f7ff fbbe 	bl	8004160 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e4:	f7fe fdc4 	bl	8003570 <HAL_GetTick>
 80049e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x3f6>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80049ec:	f7fe fdc0 	bl	8003570 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e18d      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80049fe:	f7ff fbc0 	bl	8004182 <LL_RCC_LSI1_IsReady>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1f1      	bne.n	80049ec <HAL_RCC_OscConfig+0x3e4>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d05b      	beq.n	8004acc <HAL_RCC_OscConfig+0x4c4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a14:	4ba7      	ldr	r3, [pc, #668]	; (8004cb4 <HAL_RCC_OscConfig+0x6ac>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d114      	bne.n	8004a4a <HAL_RCC_OscConfig+0x442>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004a20:	f7ff fa5e 	bl	8003ee0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a24:	f7fe fda4 	bl	8003570 <HAL_GetTick>
 8004a28:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x436>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a2c:	f7fe fda0 	bl	8003570 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e16d      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a3e:	4b9d      	ldr	r3, [pc, #628]	; (8004cb4 <HAL_RCC_OscConfig+0x6ac>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0f0      	beq.n	8004a2c <HAL_RCC_OscConfig+0x424>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d102      	bne.n	8004a58 <HAL_RCC_OscConfig+0x450>
 8004a52:	f7ff fb1e 	bl	8004092 <LL_RCC_LSE_Enable>
 8004a56:	e00c      	b.n	8004a72 <HAL_RCC_OscConfig+0x46a>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	2b05      	cmp	r3, #5
 8004a5e:	d104      	bne.n	8004a6a <HAL_RCC_OscConfig+0x462>
 8004a60:	f7ff fb39 	bl	80040d6 <LL_RCC_LSE_EnableBypass>
 8004a64:	f7ff fb15 	bl	8004092 <LL_RCC_LSE_Enable>
 8004a68:	e003      	b.n	8004a72 <HAL_RCC_OscConfig+0x46a>
 8004a6a:	f7ff fb23 	bl	80040b4 <LL_RCC_LSE_Disable>
 8004a6e:	f7ff fb43 	bl	80040f8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d014      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7a:	f7fe fd79 	bl	8003570 <HAL_GetTick>
 8004a7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004a80:	e00a      	b.n	8004a98 <HAL_RCC_OscConfig+0x490>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a82:	f7fe fd75 	bl	8003570 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e140      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004a98:	f7ff fb3f 	bl	800411a <LL_RCC_LSE_IsReady>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0ef      	beq.n	8004a82 <HAL_RCC_OscConfig+0x47a>
 8004aa2:	e013      	b.n	8004acc <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa4:	f7fe fd64 	bl	8003570 <HAL_GetTick>
 8004aa8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004aaa:	e00a      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aac:	f7fe fd60 	bl	8003570 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e12b      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004ac2:	f7ff fb2a 	bl	800411a <LL_RCC_LSE_IsReady>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1ef      	bne.n	8004aac <HAL_RCC_OscConfig+0x4a4>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d02c      	beq.n	8004b32 <HAL_RCC_OscConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d014      	beq.n	8004b0a <HAL_RCC_OscConfig+0x502>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ae0:	f7ff faa3 	bl	800402a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae4:	f7fe fd44 	bl	8003570 <HAL_GetTick>
 8004ae8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x4f6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004aec:	f7fe fd40 	bl	8003570 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e10d      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004afe:	f7ff fab6 	bl	800406e <LL_RCC_HSI48_IsReady>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d0f1      	beq.n	8004aec <HAL_RCC_OscConfig+0x4e4>
 8004b08:	e013      	b.n	8004b32 <HAL_RCC_OscConfig+0x52a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b0a:	f7ff fa9f 	bl	800404c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0e:	f7fe fd2f 	bl	8003570 <HAL_GetTick>
 8004b12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004b14:	e008      	b.n	8004b28 <HAL_RCC_OscConfig+0x520>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b16:	f7fe fd2b 	bl	8003570 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e0f8      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004b28:	f7ff faa1 	bl	800406e <LL_RCC_HSI48_IsReady>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1f1      	bne.n	8004b16 <HAL_RCC_OscConfig+0x50e>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 80ee 	beq.w	8004d18 <HAL_RCC_OscConfig+0x710>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b3c:	f7ff fbff 	bl	800433e <LL_RCC_GetSysClkSource>
 8004b40:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	f040 80b4 	bne.w	8004cbc <HAL_RCC_OscConfig+0x6b4>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f003 0203 	and.w	r2, r3, #3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d123      	bne.n	8004baa <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d11c      	bne.n	8004baa <HAL_RCC_OscConfig+0x5a2>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	0a1b      	lsrs	r3, r3, #8
 8004b74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d114      	bne.n	8004baa <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d10d      	bne.n	8004baa <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d106      	bne.n	8004baa <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d05d      	beq.n	8004c66 <HAL_RCC_OscConfig+0x65e>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2b0c      	cmp	r3, #12
 8004bae:	d058      	beq.n	8004c62 <HAL_RCC_OscConfig+0x65a>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x5ba>

          {
            return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e0ab      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004bc2:	f7ff fc72 	bl	80044aa <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bc6:	f7fe fcd3 	bl	8003570 <HAL_GetTick>
 8004bca:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x5d8>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bce:	f7fe fccf 	bl	8003570 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x5d8>
              {
                return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e09c      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1ef      	bne.n	8004bce <HAL_RCC_OscConfig+0x5c6>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	4b30      	ldr	r3, [pc, #192]	; (8004cb8 <HAL_RCC_OscConfig+0x6b0>)
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c00:	4311      	orrs	r1, r2
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c06:	0212      	lsls	r2, r2, #8
 8004c08:	4311      	orrs	r1, r2
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c0e:	4311      	orrs	r1, r2
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c14:	4311      	orrs	r1, r2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c20:	4313      	orrs	r3, r2
 8004c22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c24:	f7ff fc32 	bl	800448c <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c36:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c38:	f7fe fc9a 	bl	8003570 <HAL_GetTick>
 8004c3c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x64a>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c40:	f7fe fc96 	bl	8003570 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x64a>
              {
                return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e063      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0ef      	beq.n	8004c40 <HAL_RCC_OscConfig+0x638>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c60:	e05a      	b.n	8004d18 <HAL_RCC_OscConfig+0x710>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e059      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d151      	bne.n	8004d18 <HAL_RCC_OscConfig+0x710>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c74:	f7ff fc0a 	bl	800448c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c88:	f7fe fc72 	bl	8003570 <HAL_GetTick>
 8004c8c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x69a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c90:	f7fe fc6e 	bl	8003570 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x69a>
            {
              return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e03b      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0ef      	beq.n	8004c90 <HAL_RCC_OscConfig+0x688>
 8004cb0:	e032      	b.n	8004d18 <HAL_RCC_OscConfig+0x710>
 8004cb2:	bf00      	nop
 8004cb4:	58000400 	.word	0x58000400
 8004cb8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	2b0c      	cmp	r3, #12
 8004cc0:	d028      	beq.n	8004d14 <HAL_RCC_OscConfig+0x70c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc2:	f7ff fbf2 	bl	80044aa <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cd0:	f023 0303 	bic.w	r3, r3, #3
 8004cd4:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8004cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ce0:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ce8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cea:	f7fe fc41 	bl	8003570 <HAL_GetTick>
 8004cee:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cf0:	e008      	b.n	8004d04 <HAL_RCC_OscConfig+0x6fc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf2:	f7fe fc3d 	bl	8003570 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x6fc>
          {
            return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e00a      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1ef      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x6ea>
 8004d12:	e001      	b.n	8004d18 <HAL_RCC_OscConfig+0x710>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e000      	b.n	8004d1a <HAL_RCC_OscConfig+0x712>
      }
    }
  }
  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3734      	adds	r7, #52	; 0x34
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd90      	pop	{r4, r7, pc}
 8004d22:	bf00      	nop

08004d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e12d      	b.n	8004f94 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d38:	4b98      	ldr	r3, [pc, #608]	; (8004f9c <HAL_RCC_ClockConfig+0x278>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d91b      	bls.n	8004d7e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d46:	4b95      	ldr	r3, [pc, #596]	; (8004f9c <HAL_RCC_ClockConfig+0x278>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f023 0207 	bic.w	r2, r3, #7
 8004d4e:	4993      	ldr	r1, [pc, #588]	; (8004f9c <HAL_RCC_ClockConfig+0x278>)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d56:	f7fe fc0b 	bl	8003570 <HAL_GetTick>
 8004d5a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004d5e:	f7fe fc07 	bl	8003570 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e111      	b.n	8004f94 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d70:	4b8a      	ldr	r3, [pc, #552]	; (8004f9c <HAL_RCC_ClockConfig+0x278>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d1ef      	bne.n	8004d5e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d016      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7ff fae1 	bl	8004356 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d94:	f7fe fbec 	bl	8003570 <HAL_GetTick>
 8004d98:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d9c:	f7fe fbe8 	bl	8003570 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e0f2      	b.n	8004f94 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004dae:	f7ff fbce 	bl	800454e <LL_RCC_IsActiveFlag_HPRE>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0f1      	beq.n	8004d9c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0320 	and.w	r3, r3, #32
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d016      	beq.n	8004df2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7ff fad8 	bl	800437e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004dce:	f7fe fbcf 	bl	8003570 <HAL_GetTick>
 8004dd2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004dd4:	e008      	b.n	8004de8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004dd6:	f7fe fbcb 	bl	8003570 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e0d5      	b.n	8004f94 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004de8:	f7ff fbc3 	bl	8004572 <LL_RCC_IsActiveFlag_C2HPRE>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0f1      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d016      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff fad1 	bl	80043aa <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e08:	f7fe fbb2 	bl	8003570 <HAL_GetTick>
 8004e0c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e10:	f7fe fbae 	bl	8003570 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e0b8      	b.n	8004f94 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004e22:	f7ff fbb9 	bl	8004598 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0f1      	beq.n	8004e10 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d016      	beq.n	8004e66 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff facb 	bl	80043d8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e42:	f7fe fb95 	bl	8003570 <HAL_GetTick>
 8004e46:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004e48:	e008      	b.n	8004e5c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e4a:	f7fe fb91 	bl	8003570 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e09b      	b.n	8004f94 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004e5c:	f7ff fbaf 	bl	80045be <LL_RCC_IsActiveFlag_PPRE1>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0f1      	beq.n	8004e4a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d017      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7ff fac1 	bl	8004400 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e7e:	f7fe fb77 	bl	8003570 <HAL_GetTick>
 8004e82:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004e84:	e008      	b.n	8004e98 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e86:	f7fe fb73 	bl	8003570 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e07d      	b.n	8004f94 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004e98:	f7ff fba3 	bl	80045e2 <LL_RCC_IsActiveFlag_PPRE2>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0f1      	beq.n	8004e86 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d043      	beq.n	8004f36 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d106      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004eb6:	f7ff f861 	bl	8003f7c <LL_RCC_HSE_IsReady>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d11e      	bne.n	8004efe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e067      	b.n	8004f94 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	2b03      	cmp	r3, #3
 8004eca:	d106      	bne.n	8004eda <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004ecc:	f7ff fafc 	bl	80044c8 <LL_RCC_PLL_IsReady>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d113      	bne.n	8004efe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e05c      	b.n	8004f94 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d106      	bne.n	8004ef0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004ee2:	f7ff f9c9 	bl	8004278 <LL_RCC_MSI_IsReady>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d108      	bne.n	8004efe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e051      	b.n	8004f94 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004ef0:	f7ff f874 	bl	8003fdc <LL_RCC_HSI_IsReady>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e04a      	b.n	8004f94 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7ff fa07 	bl	8004316 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f08:	f7fe fb32 	bl	8003570 <HAL_GetTick>
 8004f0c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f0e:	e00a      	b.n	8004f26 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f10:	f7fe fb2e 	bl	8003570 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e036      	b.n	8004f94 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f26:	f7ff fa0a 	bl	800433e <LL_RCC_GetSysClkSource>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d1ec      	bne.n	8004f10 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f36:	4b19      	ldr	r3, [pc, #100]	; (8004f9c <HAL_RCC_ClockConfig+0x278>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d21b      	bcs.n	8004f7c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f44:	4b15      	ldr	r3, [pc, #84]	; (8004f9c <HAL_RCC_ClockConfig+0x278>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f023 0207 	bic.w	r2, r3, #7
 8004f4c:	4913      	ldr	r1, [pc, #76]	; (8004f9c <HAL_RCC_ClockConfig+0x278>)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f54:	f7fe fb0c 	bl	8003570 <HAL_GetTick>
 8004f58:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004f5c:	f7fe fb08 	bl	8003570 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e012      	b.n	8004f94 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f6e:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <HAL_RCC_ClockConfig+0x278>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d1ef      	bne.n	8004f5c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004f7c:	f000 f87e 	bl	800507c <HAL_RCC_GetHCLKFreq>
 8004f80:	4603      	mov	r3, r0
 8004f82:	4a07      	ldr	r2, [pc, #28]	; (8004fa0 <HAL_RCC_ClockConfig+0x27c>)
 8004f84:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004f86:	f7fe faff 	bl	8003588 <HAL_GetTickPrio>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fe faa1 	bl	80034d4 <HAL_InitTick>
 8004f92:	4603      	mov	r3, r0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	58004000 	.word	0x58004000
 8004fa0:	20000034 	.word	0x20000034

08004fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fa4:	b590      	push	{r4, r7, lr}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004faa:	f7ff f9c8 	bl	800433e <LL_RCC_GetSysClkSource>
 8004fae:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10a      	bne.n	8004fcc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004fb6:	f7ff f984 	bl	80042c2 <LL_RCC_MSI_GetRange>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	091b      	lsrs	r3, r3, #4
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	4a2b      	ldr	r2, [pc, #172]	; (8005070 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	e04b      	b.n	8005064 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b04      	cmp	r3, #4
 8004fd0:	d102      	bne.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004fd2:	4b28      	ldr	r3, [pc, #160]	; (8005074 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	e045      	b.n	8005064 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b08      	cmp	r3, #8
 8004fdc:	d10a      	bne.n	8004ff4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004fde:	f7fe ff9d 	bl	8003f1c <LL_RCC_HSE_IsEnabledDiv2>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d102      	bne.n	8004fee <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004fe8:	4b22      	ldr	r3, [pc, #136]	; (8005074 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	e03a      	b.n	8005064 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004fee:	4b22      	ldr	r3, [pc, #136]	; (8005078 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ff0:	60fb      	str	r3, [r7, #12]
 8004ff2:	e037      	b.n	8005064 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004ff4:	f7ff fa9f 	bl	8004536 <LL_RCC_PLL_GetMainSource>
 8004ff8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d003      	beq.n	8005008 <HAL_RCC_GetSysClockFreq+0x64>
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	2b03      	cmp	r3, #3
 8005004:	d003      	beq.n	800500e <HAL_RCC_GetSysClockFreq+0x6a>
 8005006:	e00d      	b.n	8005024 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005008:	4b1a      	ldr	r3, [pc, #104]	; (8005074 <HAL_RCC_GetSysClockFreq+0xd0>)
 800500a:	60bb      	str	r3, [r7, #8]
        break;
 800500c:	e015      	b.n	800503a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800500e:	f7fe ff85 	bl	8003f1c <LL_RCC_HSE_IsEnabledDiv2>
 8005012:	4603      	mov	r3, r0
 8005014:	2b01      	cmp	r3, #1
 8005016:	d102      	bne.n	800501e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005018:	4b16      	ldr	r3, [pc, #88]	; (8005074 <HAL_RCC_GetSysClockFreq+0xd0>)
 800501a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800501c:	e00d      	b.n	800503a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800501e:	4b16      	ldr	r3, [pc, #88]	; (8005078 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005020:	60bb      	str	r3, [r7, #8]
        break;
 8005022:	e00a      	b.n	800503a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005024:	f7ff f94d 	bl	80042c2 <LL_RCC_MSI_GetRange>
 8005028:	4603      	mov	r3, r0
 800502a:	091b      	lsrs	r3, r3, #4
 800502c:	f003 030f 	and.w	r3, r3, #15
 8005030:	4a0f      	ldr	r2, [pc, #60]	; (8005070 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005036:	60bb      	str	r3, [r7, #8]
        break;
 8005038:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800503a:	f7ff fa57 	bl	80044ec <LL_RCC_PLL_GetN>
 800503e:	4602      	mov	r2, r0
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	fb03 f402 	mul.w	r4, r3, r2
 8005046:	f7ff fa6a 	bl	800451e <LL_RCC_PLL_GetDivider>
 800504a:	4603      	mov	r3, r0
 800504c:	091b      	lsrs	r3, r3, #4
 800504e:	3301      	adds	r3, #1
 8005050:	fbb4 f4f3 	udiv	r4, r4, r3
 8005054:	f7ff fa57 	bl	8004506 <LL_RCC_PLL_GetR>
 8005058:	4603      	mov	r3, r0
 800505a:	0f5b      	lsrs	r3, r3, #29
 800505c:	3301      	adds	r3, #1
 800505e:	fbb4 f3f3 	udiv	r3, r4, r3
 8005062:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8005064:	68fb      	ldr	r3, [r7, #12]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	bd90      	pop	{r4, r7, pc}
 800506e:	bf00      	nop
 8005070:	0800ca78 	.word	0x0800ca78
 8005074:	00f42400 	.word	0x00f42400
 8005078:	01e84800 	.word	0x01e84800

0800507c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800507c:	b598      	push	{r3, r4, r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005080:	f7ff ff90 	bl	8004fa4 <HAL_RCC_GetSysClockFreq>
 8005084:	4604      	mov	r4, r0
 8005086:	f7ff f9cf 	bl	8004428 <LL_RCC_GetAHBPrescaler>
 800508a:	4603      	mov	r3, r0
 800508c:	091b      	lsrs	r3, r3, #4
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	4a03      	ldr	r2, [pc, #12]	; (80050a0 <HAL_RCC_GetHCLKFreq+0x24>)
 8005094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005098:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800509c:	4618      	mov	r0, r3
 800509e:	bd98      	pop	{r3, r4, r7, pc}
 80050a0:	0800ca18 	.word	0x0800ca18

080050a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050a4:	b598      	push	{r3, r4, r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80050a8:	f7ff ffe8 	bl	800507c <HAL_RCC_GetHCLKFreq>
 80050ac:	4604      	mov	r4, r0
 80050ae:	f7ff f9d5 	bl	800445c <LL_RCC_GetAPB1Prescaler>
 80050b2:	4603      	mov	r3, r0
 80050b4:	0a1b      	lsrs	r3, r3, #8
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	4a04      	ldr	r2, [pc, #16]	; (80050cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80050bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c0:	f003 031f 	and.w	r3, r3, #31
 80050c4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	bd98      	pop	{r3, r4, r7, pc}
 80050cc:	0800ca58 	.word	0x0800ca58

080050d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050d0:	b598      	push	{r3, r4, r7, lr}
 80050d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80050d4:	f7ff ffd2 	bl	800507c <HAL_RCC_GetHCLKFreq>
 80050d8:	4604      	mov	r4, r0
 80050da:	f7ff f9cb 	bl	8004474 <LL_RCC_GetAPB2Prescaler>
 80050de:	4603      	mov	r3, r0
 80050e0:	0adb      	lsrs	r3, r3, #11
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	4a04      	ldr	r2, [pc, #16]	; (80050f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80050e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ec:	f003 031f 	and.w	r3, r3, #31
 80050f0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	bd98      	pop	{r3, r4, r7, pc}
 80050f8:	0800ca58 	.word	0x0800ca58

080050fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80050fc:	b590      	push	{r4, r7, lr}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2bb0      	cmp	r3, #176	; 0xb0
 8005108:	d903      	bls.n	8005112 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800510a:	4b15      	ldr	r3, [pc, #84]	; (8005160 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800510c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	e007      	b.n	8005122 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	091b      	lsrs	r3, r3, #4
 8005116:	f003 030f 	and.w	r3, r3, #15
 800511a:	4a11      	ldr	r2, [pc, #68]	; (8005160 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800511c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005120:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005122:	f7ff f98d 	bl	8004440 <LL_RCC_GetAHB4Prescaler>
 8005126:	4603      	mov	r3, r0
 8005128:	091b      	lsrs	r3, r3, #4
 800512a:	f003 030f 	and.w	r3, r3, #15
 800512e:	4a0d      	ldr	r2, [pc, #52]	; (8005164 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	fbb2 f3f3 	udiv	r3, r2, r3
 800513a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4a0a      	ldr	r2, [pc, #40]	; (8005168 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005140:	fba2 2303 	umull	r2, r3, r2, r3
 8005144:	0c9c      	lsrs	r4, r3, #18
 8005146:	f7fe fedb 	bl	8003f00 <HAL_PWREx_GetVoltageRange>
 800514a:	4603      	mov	r3, r0
 800514c:	4619      	mov	r1, r3
 800514e:	4620      	mov	r0, r4
 8005150:	f000 f80c 	bl	800516c <RCC_SetFlashLatency>
 8005154:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8005156:	4618      	mov	r0, r3
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	bd90      	pop	{r4, r7, pc}
 800515e:	bf00      	nop
 8005160:	0800ca78 	.word	0x0800ca78
 8005164:	0800ca18 	.word	0x0800ca18
 8005168:	431bde83 	.word	0x431bde83

0800516c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800516c:	b590      	push	{r4, r7, lr}
 800516e:	b093      	sub	sp, #76	; 0x4c
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005176:	4b37      	ldr	r3, [pc, #220]	; (8005254 <RCC_SetFlashLatency+0xe8>)
 8005178:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800517c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800517e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005182:	4a35      	ldr	r2, [pc, #212]	; (8005258 <RCC_SetFlashLatency+0xec>)
 8005184:	f107 031c 	add.w	r3, r7, #28
 8005188:	ca07      	ldmia	r2, {r0, r1, r2}
 800518a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800518e:	4b33      	ldr	r3, [pc, #204]	; (800525c <RCC_SetFlashLatency+0xf0>)
 8005190:	f107 040c 	add.w	r4, r7, #12
 8005194:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005196:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800519a:	2300      	movs	r3, #0
 800519c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051a4:	d11a      	bne.n	80051dc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80051a6:	2300      	movs	r3, #0
 80051a8:	643b      	str	r3, [r7, #64]	; 0x40
 80051aa:	e013      	b.n	80051d4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80051ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	3348      	adds	r3, #72	; 0x48
 80051b2:	443b      	add	r3, r7
 80051b4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d807      	bhi.n	80051ce <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80051be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	3348      	adds	r3, #72	; 0x48
 80051c4:	443b      	add	r3, r7
 80051c6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80051ca:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80051cc:	e020      	b.n	8005210 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80051ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051d0:	3301      	adds	r3, #1
 80051d2:	643b      	str	r3, [r7, #64]	; 0x40
 80051d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051d6:	2b03      	cmp	r3, #3
 80051d8:	d9e8      	bls.n	80051ac <RCC_SetFlashLatency+0x40>
 80051da:	e019      	b.n	8005210 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80051dc:	2300      	movs	r3, #0
 80051de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051e0:	e013      	b.n	800520a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80051e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	3348      	adds	r3, #72	; 0x48
 80051e8:	443b      	add	r3, r7
 80051ea:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d807      	bhi.n	8005204 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80051f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	3348      	adds	r3, #72	; 0x48
 80051fa:	443b      	add	r3, r7
 80051fc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005200:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005202:	e005      	b.n	8005210 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005206:	3301      	adds	r3, #1
 8005208:	63fb      	str	r3, [r7, #60]	; 0x3c
 800520a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800520c:	2b02      	cmp	r3, #2
 800520e:	d9e8      	bls.n	80051e2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8005210:	4b13      	ldr	r3, [pc, #76]	; (8005260 <RCC_SetFlashLatency+0xf4>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f023 0207 	bic.w	r2, r3, #7
 8005218:	4911      	ldr	r1, [pc, #68]	; (8005260 <RCC_SetFlashLatency+0xf4>)
 800521a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800521c:	4313      	orrs	r3, r2
 800521e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005220:	f7fe f9a6 	bl	8003570 <HAL_GetTick>
 8005224:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005226:	e008      	b.n	800523a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005228:	f7fe f9a2 	bl	8003570 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d901      	bls.n	800523a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e007      	b.n	800524a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800523a:	4b09      	ldr	r3, [pc, #36]	; (8005260 <RCC_SetFlashLatency+0xf4>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005244:	429a      	cmp	r2, r3
 8005246:	d1ef      	bne.n	8005228 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	374c      	adds	r7, #76	; 0x4c
 800524e:	46bd      	mov	sp, r7
 8005250:	bd90      	pop	{r4, r7, pc}
 8005252:	bf00      	nop
 8005254:	0800c9e8 	.word	0x0800c9e8
 8005258:	0800c9f8 	.word	0x0800c9f8
 800525c:	0800ca04 	.word	0x0800ca04
 8005260:	58004000 	.word	0x58004000

08005264 <LL_RCC_LSE_IsEnabled>:
{
 8005264:	b480      	push	{r7}
 8005266:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800526c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b01      	cmp	r3, #1
 8005276:	d101      	bne.n	800527c <LL_RCC_LSE_IsEnabled+0x18>
 8005278:	2301      	movs	r3, #1
 800527a:	e000      	b.n	800527e <LL_RCC_LSE_IsEnabled+0x1a>
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <LL_RCC_LSE_IsReady>:
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800528c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b02      	cmp	r3, #2
 800529a:	d101      	bne.n	80052a0 <LL_RCC_LSE_IsReady+0x18>
 800529c:	2301      	movs	r3, #1
 800529e:	e000      	b.n	80052a2 <LL_RCC_LSE_IsReady+0x1a>
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <LL_RCC_SetRFWKPClockSource>:
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80052b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <LL_RCC_SetSMPSClockSource>:
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80052e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	f023 0203 	bic.w	r2, r3, #3
 80052ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <LL_RCC_SetSMPSPrescaler>:
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005312:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4313      	orrs	r3, r2
 800531a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <LL_RCC_SetUSARTClockSource>:
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005338:	f023 0203 	bic.w	r2, r3, #3
 800533c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4313      	orrs	r3, r2
 8005344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <LL_RCC_SetLPUARTClockSource>:
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800535c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005364:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005368:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <LL_RCC_SetI2CClockSource>:
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800538c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	091b      	lsrs	r3, r3, #4
 8005394:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005398:	43db      	mvns	r3, r3
 800539a:	401a      	ands	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80053a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053a8:	4313      	orrs	r3, r2
 80053aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <LL_RCC_SetLPTIMClockSource>:
{
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80053c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	0c1b      	lsrs	r3, r3, #16
 80053ce:	041b      	lsls	r3, r3, #16
 80053d0:	43db      	mvns	r3, r3
 80053d2:	401a      	ands	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	041b      	lsls	r3, r3, #16
 80053d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053dc:	4313      	orrs	r3, r2
 80053de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <LL_RCC_SetSAIClockSource>:
{
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80053f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005402:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4313      	orrs	r3, r2
 800540a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800540e:	bf00      	nop
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <LL_RCC_SetRNGClockSource>:
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800542e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4313      	orrs	r3, r2
 8005436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <LL_RCC_SetCLK48ClockSource>:
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800544e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005456:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800545a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4313      	orrs	r3, r2
 8005462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <LL_RCC_SetUSBClockSource>:
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b082      	sub	sp, #8
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7ff ffe3 	bl	8005446 <LL_RCC_SetCLK48ClockSource>
}
 8005480:	bf00      	nop
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <LL_RCC_SetADCClockSource>:
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005498:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800549c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <LL_RCC_SetRTCClockSource>:
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80054bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <LL_RCC_GetRTCClockSource>:
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80054e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <LL_RCC_ForceBackupDomainReset>:
{
 80054fa:	b480      	push	{r7}
 80054fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80054fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005506:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800550a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800550e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005512:	bf00      	nop
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <LL_RCC_ReleaseBackupDomainReset>:
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005528:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800552c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005534:	bf00      	nop
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <LL_RCC_PLLSAI1_Enable>:
{
 800553e:	b480      	push	{r7}
 8005540:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800554c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005550:	6013      	str	r3, [r2, #0]
}
 8005552:	bf00      	nop
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <LL_RCC_PLLSAI1_Disable>:
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800556a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800556e:	6013      	str	r3, [r2, #0]
}
 8005570:	bf00      	nop
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <LL_RCC_PLLSAI1_IsReady>:
{
 800557a:	b480      	push	{r7}
 800557c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800557e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005588:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800558c:	d101      	bne.n	8005592 <LL_RCC_PLLSAI1_IsReady+0x18>
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b088      	sub	sp, #32
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80055a6:	2300      	movs	r3, #0
 80055a8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80055aa:	2300      	movs	r3, #0
 80055ac:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d034      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055c2:	d021      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80055c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055c8:	d81b      	bhi.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055ce:	d01d      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80055d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055d4:	d815      	bhi.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00b      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80055da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055de:	d110      	bne.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80055e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ee:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80055f0:	e00d      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	3304      	adds	r3, #4
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 f947 	bl	800588a <RCCEx_PLLSAI1_ConfigNP>
 80055fc:	4603      	mov	r3, r0
 80055fe:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005600:	e005      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	77fb      	strb	r3, [r7, #31]
        break;
 8005606:	e002      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005608:	bf00      	nop
 800560a:	e000      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800560c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800560e:	7ffb      	ldrb	r3, [r7, #31]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d105      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005618:	4618      	mov	r0, r3
 800561a:	f7ff fee8 	bl	80053ee <LL_RCC_SetSAIClockSource>
 800561e:	e001      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005620:	7ffb      	ldrb	r3, [r7, #31]
 8005622:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800562c:	2b00      	cmp	r3, #0
 800562e:	d046      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005630:	f7ff ff56 	bl	80054e0 <LL_RCC_GetRTCClockSource>
 8005634:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	429a      	cmp	r2, r3
 800563e:	d03c      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005640:	f7fe fc4e 	bl	8003ee0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d105      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564e:	4618      	mov	r0, r3
 8005650:	f7ff ff30 	bl	80054b4 <LL_RCC_SetRTCClockSource>
 8005654:	e02e      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800565a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005660:	f7ff ff4b 	bl	80054fa <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005664:	f7ff ff5a 	bl	800551c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	4313      	orrs	r3, r2
 8005674:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005676:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005680:	f7ff fdf0 	bl	8005264 <LL_RCC_LSE_IsEnabled>
 8005684:	4603      	mov	r3, r0
 8005686:	2b01      	cmp	r3, #1
 8005688:	d114      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800568a:	f7fd ff71 	bl	8003570 <HAL_GetTick>
 800568e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005690:	e00b      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005692:	f7fd ff6d 	bl	8003570 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d902      	bls.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	77fb      	strb	r3, [r7, #31]
              break;
 80056a8:	e004      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80056aa:	f7ff fded 	bl	8005288 <LL_RCC_LSE_IsReady>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d1ee      	bne.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80056b4:	7ffb      	ldrb	r3, [r7, #31]
 80056b6:	77bb      	strb	r3, [r7, #30]
 80056b8:	e001      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ba:	7ffb      	ldrb	r3, [r7, #31]
 80056bc:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d004      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7ff fe2a 	bl	8005328 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d004      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7ff fe35 	bl	8005354 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0310 	and.w	r3, r3, #16
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d004      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7ff fe5d 	bl	80053ba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0320 	and.w	r3, r3, #32
 8005708:	2b00      	cmp	r3, #0
 800570a:	d004      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff fe52 	bl	80053ba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0304 	and.w	r3, r3, #4
 800571e:	2b00      	cmp	r3, #0
 8005720:	d004      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff fe2a 	bl	8005380 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0308 	and.w	r3, r3, #8
 8005734:	2b00      	cmp	r3, #0
 8005736:	d004      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	4618      	mov	r0, r3
 800573e:	f7ff fe1f 	bl	8005380 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574a:	2b00      	cmp	r3, #0
 800574c:	d022      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005752:	4618      	mov	r0, r3
 8005754:	f7ff fe8d 	bl	8005472 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005760:	d107      	bne.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800576c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005770:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005776:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800577a:	d10b      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	3304      	adds	r3, #4
 8005780:	4618      	mov	r0, r3
 8005782:	f000 f8dd 	bl	8005940 <RCCEx_PLLSAI1_ConfigNQ>
 8005786:	4603      	mov	r3, r0
 8005788:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800578a:	7ffb      	ldrb	r3, [r7, #31]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8005790:	7ffb      	ldrb	r3, [r7, #31]
 8005792:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800579c:	2b00      	cmp	r3, #0
 800579e:	d02b      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a8:	d008      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057b2:	d003      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d105      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7ff fe2a 	bl	800541a <LL_RCC_SetRNGClockSource>
 80057c6:	e00a      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x240>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	2000      	movs	r0, #0
 80057d4:	f7ff fe21 	bl	800541a <LL_RCC_SetRNGClockSource>
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f7ff fe34 	bl	8005446 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80057e6:	d107      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80057e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005800:	2b00      	cmp	r3, #0
 8005802:	d022      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005808:	4618      	mov	r0, r3
 800580a:	f7ff fe3d 	bl	8005488 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005816:	d107      	bne.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005826:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800582c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005830:	d10b      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	3304      	adds	r3, #4
 8005836:	4618      	mov	r0, r3
 8005838:	f000 f8dd 	bl	80059f6 <RCCEx_PLLSAI1_ConfigNR>
 800583c:	4603      	mov	r3, r0
 800583e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005840:	7ffb      	ldrb	r3, [r7, #31]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d001      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8005846:	7ffb      	ldrb	r3, [r7, #31]
 8005848:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d004      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585a:	4618      	mov	r0, r3
 800585c:	f7ff fd26 	bl	80052ac <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d009      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff fd45 	bl	8005300 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff fd2c 	bl	80052d8 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8005880:	7fbb      	ldrb	r3, [r7, #30]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3720      	adds	r7, #32
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b084      	sub	sp, #16
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005892:	2300      	movs	r3, #0
 8005894:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005896:	f7ff fe61 	bl	800555c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800589a:	f7fd fe69 	bl	8003570 <HAL_GetTick>
 800589e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80058a0:	e009      	b.n	80058b6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058a2:	f7fd fe65 	bl	8003570 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d902      	bls.n	80058b6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	73fb      	strb	r3, [r7, #15]
      break;
 80058b4:	e004      	b.n	80058c0 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80058b6:	f7ff fe60 	bl	800557a <LL_RCC_PLLSAI1_IsReady>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1f0      	bne.n	80058a2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d137      	bne.n	8005936 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80058c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	021b      	lsls	r3, r3, #8
 80058d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058da:	4313      	orrs	r3, r2
 80058dc:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80058de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058f0:	4313      	orrs	r3, r2
 80058f2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80058f4:	f7ff fe23 	bl	800553e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058f8:	f7fd fe3a 	bl	8003570 <HAL_GetTick>
 80058fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80058fe:	e009      	b.n	8005914 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005900:	f7fd fe36 	bl	8003570 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b02      	cmp	r3, #2
 800590c:	d902      	bls.n	8005914 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	73fb      	strb	r3, [r7, #15]
        break;
 8005912:	e004      	b.n	800591e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005914:	f7ff fe31 	bl	800557a <LL_RCC_PLLSAI1_IsReady>
 8005918:	4603      	mov	r3, r0
 800591a:	2b01      	cmp	r3, #1
 800591c:	d1f0      	bne.n	8005900 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800591e:	7bfb      	ldrb	r3, [r7, #15]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d108      	bne.n	8005936 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005928:	691a      	ldr	r2, [r3, #16]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005932:	4313      	orrs	r3, r2
 8005934:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005936:	7bfb      	ldrb	r3, [r7, #15]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005948:	2300      	movs	r3, #0
 800594a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800594c:	f7ff fe06 	bl	800555c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005950:	f7fd fe0e 	bl	8003570 <HAL_GetTick>
 8005954:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005956:	e009      	b.n	800596c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005958:	f7fd fe0a 	bl	8003570 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d902      	bls.n	800596c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	73fb      	strb	r3, [r7, #15]
      break;
 800596a:	e004      	b.n	8005976 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800596c:	f7ff fe05 	bl	800557a <LL_RCC_PLLSAI1_IsReady>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1f0      	bne.n	8005958 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005976:	7bfb      	ldrb	r3, [r7, #15]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d137      	bne.n	80059ec <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800597c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	021b      	lsls	r3, r3, #8
 800598c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005990:	4313      	orrs	r3, r2
 8005992:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059a6:	4313      	orrs	r3, r2
 80059a8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80059aa:	f7ff fdc8 	bl	800553e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059ae:	f7fd fddf 	bl	8003570 <HAL_GetTick>
 80059b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80059b4:	e009      	b.n	80059ca <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059b6:	f7fd fddb 	bl	8003570 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d902      	bls.n	80059ca <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	73fb      	strb	r3, [r7, #15]
        break;
 80059c8:	e004      	b.n	80059d4 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80059ca:	f7ff fdd6 	bl	800557a <LL_RCC_PLLSAI1_IsReady>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d1f0      	bne.n	80059b6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d108      	bne.n	80059ec <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80059da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059e8:	4313      	orrs	r3, r2
 80059ea:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b084      	sub	sp, #16
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005a02:	f7ff fdab 	bl	800555c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a06:	f7fd fdb3 	bl	8003570 <HAL_GetTick>
 8005a0a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005a0c:	e009      	b.n	8005a22 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a0e:	f7fd fdaf 	bl	8003570 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d902      	bls.n	8005a22 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a20:	e004      	b.n	8005a2c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005a22:	f7ff fdaa 	bl	800557a <LL_RCC_PLLSAI1_IsReady>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1f0      	bne.n	8005a0e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d137      	bne.n	8005aa2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	021b      	lsls	r3, r3, #8
 8005a42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a46:	4313      	orrs	r3, r2
 8005a48:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005a60:	f7ff fd6d 	bl	800553e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a64:	f7fd fd84 	bl	8003570 <HAL_GetTick>
 8005a68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005a6a:	e009      	b.n	8005a80 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a6c:	f7fd fd80 	bl	8003570 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d902      	bls.n	8005a80 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	73fb      	strb	r3, [r7, #15]
        break;
 8005a7e:	e004      	b.n	8005a8a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005a80:	f7ff fd7b 	bl	800557a <LL_RCC_PLLSAI1_IsReady>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d1f0      	bne.n	8005a6c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d108      	bne.n	8005aa2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a94:	691a      	ldr	r2, [r3, #16]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e095      	b.n	8005bea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d108      	bne.n	8005ad8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ace:	d009      	beq.n	8005ae4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	61da      	str	r2, [r3, #28]
 8005ad6:	e005      	b.n	8005ae4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d106      	bne.n	8005b04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7fd fa42 	bl	8002f88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b24:	d902      	bls.n	8005b2c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b26:	2300      	movs	r3, #0
 8005b28:	60fb      	str	r3, [r7, #12]
 8005b2a:	e002      	b.n	8005b32 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b30:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005b3a:	d007      	beq.n	8005b4c <HAL_SPI_Init+0xa0>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b44:	d002      	beq.n	8005b4c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	431a      	orrs	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b84:	431a      	orrs	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8e:	ea42 0103 	orr.w	r1, r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b96:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	0c1b      	lsrs	r3, r3, #16
 8005ba8:	f003 0204 	and.w	r2, r3, #4
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	f003 0310 	and.w	r3, r3, #16
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005bc8:	ea42 0103 	orr.w	r1, r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b088      	sub	sp, #32
 8005bf6:	af02      	add	r7, sp, #8
 8005bf8:	60f8      	str	r0, [r7, #12]
 8005bfa:	60b9      	str	r1, [r7, #8]
 8005bfc:	603b      	str	r3, [r7, #0]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c02:	2300      	movs	r3, #0
 8005c04:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c0e:	d112      	bne.n	8005c36 <HAL_SPI_Receive+0x44>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10e      	bne.n	8005c36 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2204      	movs	r2, #4
 8005c1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c20:	88fa      	ldrh	r2, [r7, #6]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	4613      	mov	r3, r2
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	68b9      	ldr	r1, [r7, #8]
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 f910 	bl	8005e52 <HAL_SPI_TransmitReceive>
 8005c32:	4603      	mov	r3, r0
 8005c34:	e109      	b.n	8005e4a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d101      	bne.n	8005c44 <HAL_SPI_Receive+0x52>
 8005c40:	2302      	movs	r3, #2
 8005c42:	e102      	b.n	8005e4a <HAL_SPI_Receive+0x258>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c4c:	f7fd fc90 	bl	8003570 <HAL_GetTick>
 8005c50:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d002      	beq.n	8005c64 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005c5e:	2302      	movs	r3, #2
 8005c60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c62:	e0e9      	b.n	8005e38 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <HAL_SPI_Receive+0x7e>
 8005c6a:	88fb      	ldrh	r3, [r7, #6]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d102      	bne.n	8005c76 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c74:	e0e0      	b.n	8005e38 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2204      	movs	r2, #4
 8005c7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	88fa      	ldrh	r2, [r7, #6]
 8005c8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	88fa      	ldrh	r2, [r7, #6]
 8005c96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cc0:	d908      	bls.n	8005cd4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005cd0:	605a      	str	r2, [r3, #4]
 8005cd2:	e007      	b.n	8005ce4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ce2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cec:	d10f      	bne.n	8005d0e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d0c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d18:	2b40      	cmp	r3, #64	; 0x40
 8005d1a:	d007      	beq.n	8005d2c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d2a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d34:	d867      	bhi.n	8005e06 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d36:	e030      	b.n	8005d9a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d117      	bne.n	8005d76 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f103 020c 	add.w	r2, r3, #12
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d52:	7812      	ldrb	r2, [r2, #0]
 8005d54:	b2d2      	uxtb	r2, r2
 8005d56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5c:	1c5a      	adds	r2, r3, #1
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005d74:	e011      	b.n	8005d9a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d76:	f7fd fbfb 	bl	8003570 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d803      	bhi.n	8005d8e <HAL_SPI_Receive+0x19c>
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8c:	d102      	bne.n	8005d94 <HAL_SPI_Receive+0x1a2>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d102      	bne.n	8005d9a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005d98:	e04e      	b.n	8005e38 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1c8      	bne.n	8005d38 <HAL_SPI_Receive+0x146>
 8005da6:	e034      	b.n	8005e12 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d115      	bne.n	8005de2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc0:	b292      	uxth	r2, r2
 8005dc2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc8:	1c9a      	adds	r2, r3, #2
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005de0:	e011      	b.n	8005e06 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005de2:	f7fd fbc5 	bl	8003570 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d803      	bhi.n	8005dfa <HAL_SPI_Receive+0x208>
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df8:	d102      	bne.n	8005e00 <HAL_SPI_Receive+0x20e>
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d102      	bne.n	8005e06 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005e04:	e018      	b.n	8005e38 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1ca      	bne.n	8005da8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	6839      	ldr	r1, [r7, #0]
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f000 fb4c 	bl	80064b4 <SPI_EndRxTransaction>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d002      	beq.n	8005e28 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2220      	movs	r2, #32
 8005e26:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d002      	beq.n	8005e36 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	75fb      	strb	r3, [r7, #23]
 8005e34:	e000      	b.n	8005e38 <HAL_SPI_Receive+0x246>
  }

error :
 8005e36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b08a      	sub	sp, #40	; 0x28
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	60f8      	str	r0, [r7, #12]
 8005e5a:	60b9      	str	r1, [r7, #8]
 8005e5c:	607a      	str	r2, [r7, #4]
 8005e5e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e60:	2301      	movs	r3, #1
 8005e62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e64:	2300      	movs	r3, #0
 8005e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d101      	bne.n	8005e78 <HAL_SPI_TransmitReceive+0x26>
 8005e74:	2302      	movs	r3, #2
 8005e76:	e1fb      	b.n	8006270 <HAL_SPI_TransmitReceive+0x41e>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e80:	f7fd fb76 	bl	8003570 <HAL_GetTick>
 8005e84:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e8c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005e94:	887b      	ldrh	r3, [r7, #2]
 8005e96:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005e98:	887b      	ldrh	r3, [r7, #2]
 8005e9a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e9c:	7efb      	ldrb	r3, [r7, #27]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d00e      	beq.n	8005ec0 <HAL_SPI_TransmitReceive+0x6e>
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ea8:	d106      	bne.n	8005eb8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d102      	bne.n	8005eb8 <HAL_SPI_TransmitReceive+0x66>
 8005eb2:	7efb      	ldrb	r3, [r7, #27]
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	d003      	beq.n	8005ec0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005eb8:	2302      	movs	r3, #2
 8005eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005ebe:	e1cd      	b.n	800625c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d005      	beq.n	8005ed2 <HAL_SPI_TransmitReceive+0x80>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <HAL_SPI_TransmitReceive+0x80>
 8005ecc:	887b      	ldrh	r3, [r7, #2]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d103      	bne.n	8005eda <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005ed8:	e1c0      	b.n	800625c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b04      	cmp	r3, #4
 8005ee4:	d003      	beq.n	8005eee <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2205      	movs	r2, #5
 8005eea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	887a      	ldrh	r2, [r7, #2]
 8005efe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	887a      	ldrh	r2, [r7, #2]
 8005f06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	887a      	ldrh	r2, [r7, #2]
 8005f14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	887a      	ldrh	r2, [r7, #2]
 8005f1a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f30:	d802      	bhi.n	8005f38 <HAL_SPI_TransmitReceive+0xe6>
 8005f32:	8a3b      	ldrh	r3, [r7, #16]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d908      	bls.n	8005f4a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f46:	605a      	str	r2, [r3, #4]
 8005f48:	e007      	b.n	8005f5a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f58:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f64:	2b40      	cmp	r3, #64	; 0x40
 8005f66:	d007      	beq.n	8005f78 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f80:	d97c      	bls.n	800607c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d002      	beq.n	8005f90 <HAL_SPI_TransmitReceive+0x13e>
 8005f8a:	8a7b      	ldrh	r3, [r7, #18]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d169      	bne.n	8006064 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f94:	881a      	ldrh	r2, [r3, #0]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa0:	1c9a      	adds	r2, r3, #2
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fb4:	e056      	b.n	8006064 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d11b      	bne.n	8005ffc <HAL_SPI_TransmitReceive+0x1aa>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d016      	beq.n	8005ffc <HAL_SPI_TransmitReceive+0x1aa>
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d113      	bne.n	8005ffc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd8:	881a      	ldrh	r2, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe4:	1c9a      	adds	r2, r3, #2
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b01      	cmp	r3, #1
 8006008:	d11c      	bne.n	8006044 <HAL_SPI_TransmitReceive+0x1f2>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006010:	b29b      	uxth	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d016      	beq.n	8006044 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68da      	ldr	r2, [r3, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006020:	b292      	uxth	r2, r2
 8006022:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006028:	1c9a      	adds	r2, r3, #2
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006034:	b29b      	uxth	r3, r3
 8006036:	3b01      	subs	r3, #1
 8006038:	b29a      	uxth	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006040:	2301      	movs	r3, #1
 8006042:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006044:	f7fd fa94 	bl	8003570 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006050:	429a      	cmp	r2, r3
 8006052:	d807      	bhi.n	8006064 <HAL_SPI_TransmitReceive+0x212>
 8006054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605a:	d003      	beq.n	8006064 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006062:	e0fb      	b.n	800625c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006068:	b29b      	uxth	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1a3      	bne.n	8005fb6 <HAL_SPI_TransmitReceive+0x164>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006074:	b29b      	uxth	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d19d      	bne.n	8005fb6 <HAL_SPI_TransmitReceive+0x164>
 800607a:	e0df      	b.n	800623c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d003      	beq.n	800608c <HAL_SPI_TransmitReceive+0x23a>
 8006084:	8a7b      	ldrh	r3, [r7, #18]
 8006086:	2b01      	cmp	r3, #1
 8006088:	f040 80cb 	bne.w	8006222 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006090:	b29b      	uxth	r3, r3
 8006092:	2b01      	cmp	r3, #1
 8006094:	d912      	bls.n	80060bc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609a:	881a      	ldrh	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a6:	1c9a      	adds	r2, r3, #2
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	3b02      	subs	r3, #2
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060ba:	e0b2      	b.n	8006222 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	330c      	adds	r3, #12
 80060c6:	7812      	ldrb	r2, [r2, #0]
 80060c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060d8:	b29b      	uxth	r3, r3
 80060da:	3b01      	subs	r3, #1
 80060dc:	b29a      	uxth	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060e2:	e09e      	b.n	8006222 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d134      	bne.n	800615c <HAL_SPI_TransmitReceive+0x30a>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d02f      	beq.n	800615c <HAL_SPI_TransmitReceive+0x30a>
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d12c      	bne.n	800615c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006106:	b29b      	uxth	r3, r3
 8006108:	2b01      	cmp	r3, #1
 800610a:	d912      	bls.n	8006132 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006110:	881a      	ldrh	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611c:	1c9a      	adds	r2, r3, #2
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006126:	b29b      	uxth	r3, r3
 8006128:	3b02      	subs	r3, #2
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006130:	e012      	b.n	8006158 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	330c      	adds	r3, #12
 800613c:	7812      	ldrb	r2, [r2, #0]
 800613e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006144:	1c5a      	adds	r2, r3, #1
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800614e:	b29b      	uxth	r3, r3
 8006150:	3b01      	subs	r3, #1
 8006152:	b29a      	uxth	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006158:	2300      	movs	r3, #0
 800615a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b01      	cmp	r3, #1
 8006168:	d148      	bne.n	80061fc <HAL_SPI_TransmitReceive+0x3aa>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006170:	b29b      	uxth	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d042      	beq.n	80061fc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800617c:	b29b      	uxth	r3, r3
 800617e:	2b01      	cmp	r3, #1
 8006180:	d923      	bls.n	80061ca <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68da      	ldr	r2, [r3, #12]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618c:	b292      	uxth	r2, r2
 800618e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006194:	1c9a      	adds	r2, r3, #2
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	3b02      	subs	r3, #2
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d81f      	bhi.n	80061f8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061c6:	605a      	str	r2, [r3, #4]
 80061c8:	e016      	b.n	80061f8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f103 020c 	add.w	r2, r3, #12
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	7812      	ldrb	r2, [r2, #0]
 80061d8:	b2d2      	uxtb	r2, r2
 80061da:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	3b01      	subs	r3, #1
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061f8:	2301      	movs	r3, #1
 80061fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80061fc:	f7fd f9b8 	bl	8003570 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006208:	429a      	cmp	r2, r3
 800620a:	d803      	bhi.n	8006214 <HAL_SPI_TransmitReceive+0x3c2>
 800620c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006212:	d102      	bne.n	800621a <HAL_SPI_TransmitReceive+0x3c8>
 8006214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006216:	2b00      	cmp	r3, #0
 8006218:	d103      	bne.n	8006222 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006220:	e01c      	b.n	800625c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006226:	b29b      	uxth	r3, r3
 8006228:	2b00      	cmp	r3, #0
 800622a:	f47f af5b 	bne.w	80060e4 <HAL_SPI_TransmitReceive+0x292>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006234:	b29b      	uxth	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	f47f af54 	bne.w	80060e4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800623c:	69fa      	ldr	r2, [r7, #28]
 800623e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f000 f98f 	bl	8006564 <SPI_EndRxTxTransaction>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d006      	beq.n	800625a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2220      	movs	r2, #32
 8006256:	661a      	str	r2, [r3, #96]	; 0x60
 8006258:	e000      	b.n	800625c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800625a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800626c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006270:	4618      	mov	r0, r3
 8006272:	3728      	adds	r7, #40	; 0x28
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b088      	sub	sp, #32
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	603b      	str	r3, [r7, #0]
 8006284:	4613      	mov	r3, r2
 8006286:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006288:	f7fd f972 	bl	8003570 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006290:	1a9b      	subs	r3, r3, r2
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	4413      	add	r3, r2
 8006296:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006298:	f7fd f96a 	bl	8003570 <HAL_GetTick>
 800629c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800629e:	4b39      	ldr	r3, [pc, #228]	; (8006384 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	015b      	lsls	r3, r3, #5
 80062a4:	0d1b      	lsrs	r3, r3, #20
 80062a6:	69fa      	ldr	r2, [r7, #28]
 80062a8:	fb02 f303 	mul.w	r3, r2, r3
 80062ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062ae:	e054      	b.n	800635a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b6:	d050      	beq.n	800635a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062b8:	f7fd f95a 	bl	8003570 <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	69fa      	ldr	r2, [r7, #28]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d902      	bls.n	80062ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d13d      	bne.n	800634a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80062dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062e6:	d111      	bne.n	800630c <SPI_WaitFlagStateUntilTimeout+0x94>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062f0:	d004      	beq.n	80062fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062fa:	d107      	bne.n	800630c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800630a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006314:	d10f      	bne.n	8006336 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006324:	601a      	str	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006334:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e017      	b.n	800637a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	3b01      	subs	r3, #1
 8006358:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	4013      	ands	r3, r2
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	429a      	cmp	r2, r3
 8006368:	bf0c      	ite	eq
 800636a:	2301      	moveq	r3, #1
 800636c:	2300      	movne	r3, #0
 800636e:	b2db      	uxtb	r3, r3
 8006370:	461a      	mov	r2, r3
 8006372:	79fb      	ldrb	r3, [r7, #7]
 8006374:	429a      	cmp	r2, r3
 8006376:	d19b      	bne.n	80062b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3720      	adds	r7, #32
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20000034 	.word	0x20000034

08006388 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b08a      	sub	sp, #40	; 0x28
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
 8006394:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006396:	2300      	movs	r3, #0
 8006398:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800639a:	f7fd f8e9 	bl	8003570 <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a2:	1a9b      	subs	r3, r3, r2
 80063a4:	683a      	ldr	r2, [r7, #0]
 80063a6:	4413      	add	r3, r2
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80063aa:	f7fd f8e1 	bl	8003570 <HAL_GetTick>
 80063ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	330c      	adds	r3, #12
 80063b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80063b8:	4b3d      	ldr	r3, [pc, #244]	; (80064b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	4613      	mov	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	00da      	lsls	r2, r3, #3
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	0d1b      	lsrs	r3, r3, #20
 80063c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ca:	fb02 f303 	mul.w	r3, r2, r3
 80063ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80063d0:	e060      	b.n	8006494 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80063d8:	d107      	bne.n	80063ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d104      	bne.n	80063ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80063e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f0:	d050      	beq.n	8006494 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063f2:	f7fd f8bd 	bl	8003570 <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063fe:	429a      	cmp	r2, r3
 8006400:	d902      	bls.n	8006408 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006404:	2b00      	cmp	r3, #0
 8006406:	d13d      	bne.n	8006484 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685a      	ldr	r2, [r3, #4]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006416:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006420:	d111      	bne.n	8006446 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800642a:	d004      	beq.n	8006436 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006434:	d107      	bne.n	8006446 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006444:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800644e:	d10f      	bne.n	8006470 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800646e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e010      	b.n	80064a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800648a:	2300      	movs	r3, #0
 800648c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	3b01      	subs	r3, #1
 8006492:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689a      	ldr	r2, [r3, #8]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	4013      	ands	r3, r2
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d196      	bne.n	80063d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3728      	adds	r7, #40	; 0x28
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	20000034 	.word	0x20000034

080064b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af02      	add	r7, sp, #8
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064c8:	d111      	bne.n	80064ee <SPI_EndRxTransaction+0x3a>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064d2:	d004      	beq.n	80064de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064dc:	d107      	bne.n	80064ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064ec:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2200      	movs	r2, #0
 80064f6:	2180      	movs	r1, #128	; 0x80
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f7ff febd 	bl	8006278 <SPI_WaitFlagStateUntilTimeout>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d007      	beq.n	8006514 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006508:	f043 0220 	orr.w	r2, r3, #32
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e023      	b.n	800655c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800651c:	d11d      	bne.n	800655a <SPI_EndRxTransaction+0xa6>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006526:	d004      	beq.n	8006532 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006530:	d113      	bne.n	800655a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2200      	movs	r2, #0
 800653a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f7ff ff22 	bl	8006388 <SPI_WaitFifoStateUntilTimeout>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d007      	beq.n	800655a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800654e:	f043 0220 	orr.w	r2, r3, #32
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e000      	b.n	800655c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af02      	add	r7, sp, #8
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2200      	movs	r2, #0
 8006578:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f7ff ff03 	bl	8006388 <SPI_WaitFifoStateUntilTimeout>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d007      	beq.n	8006598 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800658c:	f043 0220 	orr.w	r2, r3, #32
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e027      	b.n	80065e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2200      	movs	r2, #0
 80065a0:	2180      	movs	r1, #128	; 0x80
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f7ff fe68 	bl	8006278 <SPI_WaitFlagStateUntilTimeout>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d007      	beq.n	80065be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065b2:	f043 0220 	orr.w	r2, r3, #32
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e014      	b.n	80065e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	9300      	str	r3, [sp, #0]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f7ff fedc 	bl	8006388 <SPI_WaitFifoStateUntilTimeout>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d007      	beq.n	80065e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065da:	f043 0220 	orr.w	r2, r3, #32
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e000      	b.n	80065e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e049      	b.n	8006696 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d106      	bne.n	800661c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7fc fd12 	bl	8003040 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	3304      	adds	r3, #4
 800662c:	4619      	mov	r1, r3
 800662e:	4610      	mov	r0, r2
 8006630:	f000 fc40 	bl	8006eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
	...

080066a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d001      	beq.n	80066b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e036      	b.n	8006726 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2202      	movs	r2, #2
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f042 0201 	orr.w	r2, r2, #1
 80066ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a17      	ldr	r2, [pc, #92]	; (8006734 <HAL_TIM_Base_Start_IT+0x94>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d004      	beq.n	80066e4 <HAL_TIM_Base_Start_IT+0x44>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066e2:	d115      	bne.n	8006710 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689a      	ldr	r2, [r3, #8]
 80066ea:	4b13      	ldr	r3, [pc, #76]	; (8006738 <HAL_TIM_Base_Start_IT+0x98>)
 80066ec:	4013      	ands	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2b06      	cmp	r3, #6
 80066f4:	d015      	beq.n	8006722 <HAL_TIM_Base_Start_IT+0x82>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066fc:	d011      	beq.n	8006722 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f042 0201 	orr.w	r2, r2, #1
 800670c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800670e:	e008      	b.n	8006722 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f042 0201 	orr.w	r2, r2, #1
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	e000      	b.n	8006724 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006722:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	40012c00 	.word	0x40012c00
 8006738:	00010007 	.word	0x00010007

0800673c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68da      	ldr	r2, [r3, #12]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 0201 	bic.w	r2, r2, #1
 8006752:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6a1a      	ldr	r2, [r3, #32]
 800675a:	f241 1311 	movw	r3, #4369	; 0x1111
 800675e:	4013      	ands	r3, r2
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10f      	bne.n	8006784 <HAL_TIM_Base_Stop_IT+0x48>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6a1a      	ldr	r2, [r3, #32]
 800676a:	f240 4344 	movw	r3, #1092	; 0x444
 800676e:	4013      	ands	r3, r2
 8006770:	2b00      	cmp	r3, #0
 8006772:	d107      	bne.n	8006784 <HAL_TIM_Base_Stop_IT+0x48>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f022 0201 	bic.w	r2, r2, #1
 8006782:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b082      	sub	sp, #8
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e049      	b.n	8006840 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d106      	bne.n	80067c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f7fc fc11 	bl	8002fe8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2202      	movs	r2, #2
 80067ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3304      	adds	r3, #4
 80067d6:	4619      	mov	r1, r3
 80067d8:	4610      	mov	r0, r2
 80067da:	f000 fb6b 	bl	8006eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d109      	bne.n	800686c <HAL_TIM_PWM_Start+0x24>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b01      	cmp	r3, #1
 8006862:	bf14      	ite	ne
 8006864:	2301      	movne	r3, #1
 8006866:	2300      	moveq	r3, #0
 8006868:	b2db      	uxtb	r3, r3
 800686a:	e03c      	b.n	80068e6 <HAL_TIM_PWM_Start+0x9e>
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	2b04      	cmp	r3, #4
 8006870:	d109      	bne.n	8006886 <HAL_TIM_PWM_Start+0x3e>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b01      	cmp	r3, #1
 800687c:	bf14      	ite	ne
 800687e:	2301      	movne	r3, #1
 8006880:	2300      	moveq	r3, #0
 8006882:	b2db      	uxtb	r3, r3
 8006884:	e02f      	b.n	80068e6 <HAL_TIM_PWM_Start+0x9e>
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b08      	cmp	r3, #8
 800688a:	d109      	bne.n	80068a0 <HAL_TIM_PWM_Start+0x58>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b01      	cmp	r3, #1
 8006896:	bf14      	ite	ne
 8006898:	2301      	movne	r3, #1
 800689a:	2300      	moveq	r3, #0
 800689c:	b2db      	uxtb	r3, r3
 800689e:	e022      	b.n	80068e6 <HAL_TIM_PWM_Start+0x9e>
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	2b0c      	cmp	r3, #12
 80068a4:	d109      	bne.n	80068ba <HAL_TIM_PWM_Start+0x72>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	bf14      	ite	ne
 80068b2:	2301      	movne	r3, #1
 80068b4:	2300      	moveq	r3, #0
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	e015      	b.n	80068e6 <HAL_TIM_PWM_Start+0x9e>
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b10      	cmp	r3, #16
 80068be:	d109      	bne.n	80068d4 <HAL_TIM_PWM_Start+0x8c>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	bf14      	ite	ne
 80068cc:	2301      	movne	r3, #1
 80068ce:	2300      	moveq	r3, #0
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	e008      	b.n	80068e6 <HAL_TIM_PWM_Start+0x9e>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b01      	cmp	r3, #1
 80068de:	bf14      	ite	ne
 80068e0:	2301      	movne	r3, #1
 80068e2:	2300      	moveq	r3, #0
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d001      	beq.n	80068ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e079      	b.n	80069e2 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d104      	bne.n	80068fe <HAL_TIM_PWM_Start+0xb6>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2202      	movs	r2, #2
 80068f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068fc:	e023      	b.n	8006946 <HAL_TIM_PWM_Start+0xfe>
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	2b04      	cmp	r3, #4
 8006902:	d104      	bne.n	800690e <HAL_TIM_PWM_Start+0xc6>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2202      	movs	r2, #2
 8006908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800690c:	e01b      	b.n	8006946 <HAL_TIM_PWM_Start+0xfe>
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2b08      	cmp	r3, #8
 8006912:	d104      	bne.n	800691e <HAL_TIM_PWM_Start+0xd6>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800691c:	e013      	b.n	8006946 <HAL_TIM_PWM_Start+0xfe>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2b0c      	cmp	r3, #12
 8006922:	d104      	bne.n	800692e <HAL_TIM_PWM_Start+0xe6>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2202      	movs	r2, #2
 8006928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800692c:	e00b      	b.n	8006946 <HAL_TIM_PWM_Start+0xfe>
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	2b10      	cmp	r3, #16
 8006932:	d104      	bne.n	800693e <HAL_TIM_PWM_Start+0xf6>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2202      	movs	r2, #2
 8006938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800693c:	e003      	b.n	8006946 <HAL_TIM_PWM_Start+0xfe>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2202      	movs	r2, #2
 8006942:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2201      	movs	r2, #1
 800694c:	6839      	ldr	r1, [r7, #0]
 800694e:	4618      	mov	r0, r3
 8006950:	f000 fd92 	bl	8007478 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a24      	ldr	r2, [pc, #144]	; (80069ec <HAL_TIM_PWM_Start+0x1a4>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d009      	beq.n	8006972 <HAL_TIM_PWM_Start+0x12a>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a23      	ldr	r2, [pc, #140]	; (80069f0 <HAL_TIM_PWM_Start+0x1a8>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d004      	beq.n	8006972 <HAL_TIM_PWM_Start+0x12a>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a21      	ldr	r2, [pc, #132]	; (80069f4 <HAL_TIM_PWM_Start+0x1ac>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d101      	bne.n	8006976 <HAL_TIM_PWM_Start+0x12e>
 8006972:	2301      	movs	r3, #1
 8006974:	e000      	b.n	8006978 <HAL_TIM_PWM_Start+0x130>
 8006976:	2300      	movs	r3, #0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d007      	beq.n	800698c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800698a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a16      	ldr	r2, [pc, #88]	; (80069ec <HAL_TIM_PWM_Start+0x1a4>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d004      	beq.n	80069a0 <HAL_TIM_PWM_Start+0x158>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800699e:	d115      	bne.n	80069cc <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689a      	ldr	r2, [r3, #8]
 80069a6:	4b14      	ldr	r3, [pc, #80]	; (80069f8 <HAL_TIM_PWM_Start+0x1b0>)
 80069a8:	4013      	ands	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2b06      	cmp	r3, #6
 80069b0:	d015      	beq.n	80069de <HAL_TIM_PWM_Start+0x196>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b8:	d011      	beq.n	80069de <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f042 0201 	orr.w	r2, r2, #1
 80069c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ca:	e008      	b.n	80069de <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f042 0201 	orr.w	r2, r2, #1
 80069da:	601a      	str	r2, [r3, #0]
 80069dc:	e000      	b.n	80069e0 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	40012c00 	.word	0x40012c00
 80069f0:	40014400 	.word	0x40014400
 80069f4:	40014800 	.word	0x40014800
 80069f8:	00010007 	.word	0x00010007

080069fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	f003 0302 	and.w	r3, r3, #2
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d122      	bne.n	8006a58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	f003 0302 	and.w	r3, r3, #2
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d11b      	bne.n	8006a58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f06f 0202 	mvn.w	r2, #2
 8006a28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	f003 0303 	and.w	r3, r3, #3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d003      	beq.n	8006a46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fa1a 	bl	8006e78 <HAL_TIM_IC_CaptureCallback>
 8006a44:	e005      	b.n	8006a52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fa0c 	bl	8006e64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fa1d 	bl	8006e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	f003 0304 	and.w	r3, r3, #4
 8006a62:	2b04      	cmp	r3, #4
 8006a64:	d122      	bne.n	8006aac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	f003 0304 	and.w	r3, r3, #4
 8006a70:	2b04      	cmp	r3, #4
 8006a72:	d11b      	bne.n	8006aac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f06f 0204 	mvn.w	r2, #4
 8006a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2202      	movs	r2, #2
 8006a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f9f0 	bl	8006e78 <HAL_TIM_IC_CaptureCallback>
 8006a98:	e005      	b.n	8006aa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f9e2 	bl	8006e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 f9f3 	bl	8006e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	f003 0308 	and.w	r3, r3, #8
 8006ab6:	2b08      	cmp	r3, #8
 8006ab8:	d122      	bne.n	8006b00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	f003 0308 	and.w	r3, r3, #8
 8006ac4:	2b08      	cmp	r3, #8
 8006ac6:	d11b      	bne.n	8006b00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f06f 0208 	mvn.w	r2, #8
 8006ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2204      	movs	r2, #4
 8006ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	f003 0303 	and.w	r3, r3, #3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d003      	beq.n	8006aee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f9c6 	bl	8006e78 <HAL_TIM_IC_CaptureCallback>
 8006aec:	e005      	b.n	8006afa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f9b8 	bl	8006e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f9c9 	bl	8006e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	f003 0310 	and.w	r3, r3, #16
 8006b0a:	2b10      	cmp	r3, #16
 8006b0c:	d122      	bne.n	8006b54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f003 0310 	and.w	r3, r3, #16
 8006b18:	2b10      	cmp	r3, #16
 8006b1a:	d11b      	bne.n	8006b54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f06f 0210 	mvn.w	r2, #16
 8006b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2208      	movs	r2, #8
 8006b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d003      	beq.n	8006b42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f99c 	bl	8006e78 <HAL_TIM_IC_CaptureCallback>
 8006b40:	e005      	b.n	8006b4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f98e 	bl	8006e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 f99f 	bl	8006e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d10e      	bne.n	8006b80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d107      	bne.n	8006b80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f06f 0201 	mvn.w	r2, #1
 8006b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7fb faf6 	bl	800216c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b8a:	2b80      	cmp	r3, #128	; 0x80
 8006b8c:	d10e      	bne.n	8006bac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b98:	2b80      	cmp	r3, #128	; 0x80
 8006b9a:	d107      	bne.n	8006bac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fd86 	bl	80076b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bba:	d10e      	bne.n	8006bda <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc6:	2b80      	cmp	r3, #128	; 0x80
 8006bc8:	d107      	bne.n	8006bda <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fd79 	bl	80076cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be4:	2b40      	cmp	r3, #64	; 0x40
 8006be6:	d10e      	bne.n	8006c06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf2:	2b40      	cmp	r3, #64	; 0x40
 8006bf4:	d107      	bne.n	8006c06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f94d 	bl	8006ea0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	f003 0320 	and.w	r3, r3, #32
 8006c10:	2b20      	cmp	r3, #32
 8006c12:	d10e      	bne.n	8006c32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f003 0320 	and.w	r3, r3, #32
 8006c1e:	2b20      	cmp	r3, #32
 8006c20:	d107      	bne.n	8006c32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f06f 0220 	mvn.w	r2, #32
 8006c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 fd39 	bl	80076a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
	...

08006c3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d101      	bne.n	8006c5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c56:	2302      	movs	r3, #2
 8006c58:	e0ff      	b.n	8006e5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b14      	cmp	r3, #20
 8006c66:	f200 80f0 	bhi.w	8006e4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006c6a:	a201      	add	r2, pc, #4	; (adr r2, 8006c70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c70:	08006cc5 	.word	0x08006cc5
 8006c74:	08006e4b 	.word	0x08006e4b
 8006c78:	08006e4b 	.word	0x08006e4b
 8006c7c:	08006e4b 	.word	0x08006e4b
 8006c80:	08006d05 	.word	0x08006d05
 8006c84:	08006e4b 	.word	0x08006e4b
 8006c88:	08006e4b 	.word	0x08006e4b
 8006c8c:	08006e4b 	.word	0x08006e4b
 8006c90:	08006d47 	.word	0x08006d47
 8006c94:	08006e4b 	.word	0x08006e4b
 8006c98:	08006e4b 	.word	0x08006e4b
 8006c9c:	08006e4b 	.word	0x08006e4b
 8006ca0:	08006d87 	.word	0x08006d87
 8006ca4:	08006e4b 	.word	0x08006e4b
 8006ca8:	08006e4b 	.word	0x08006e4b
 8006cac:	08006e4b 	.word	0x08006e4b
 8006cb0:	08006dc9 	.word	0x08006dc9
 8006cb4:	08006e4b 	.word	0x08006e4b
 8006cb8:	08006e4b 	.word	0x08006e4b
 8006cbc:	08006e4b 	.word	0x08006e4b
 8006cc0:	08006e09 	.word	0x08006e09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68b9      	ldr	r1, [r7, #8]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 f956 	bl	8006f7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	699a      	ldr	r2, [r3, #24]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f042 0208 	orr.w	r2, r2, #8
 8006cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	699a      	ldr	r2, [r3, #24]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 0204 	bic.w	r2, r2, #4
 8006cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6999      	ldr	r1, [r3, #24]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	691a      	ldr	r2, [r3, #16]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	619a      	str	r2, [r3, #24]
      break;
 8006d02:	e0a5      	b.n	8006e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68b9      	ldr	r1, [r7, #8]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 f9b2 	bl	8007074 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	699a      	ldr	r2, [r3, #24]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	699a      	ldr	r2, [r3, #24]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6999      	ldr	r1, [r3, #24]
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	021a      	lsls	r2, r3, #8
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	430a      	orrs	r2, r1
 8006d42:	619a      	str	r2, [r3, #24]
      break;
 8006d44:	e084      	b.n	8006e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68b9      	ldr	r1, [r7, #8]
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 fa0b 	bl	8007168 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	69da      	ldr	r2, [r3, #28]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f042 0208 	orr.w	r2, r2, #8
 8006d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	69da      	ldr	r2, [r3, #28]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f022 0204 	bic.w	r2, r2, #4
 8006d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	69d9      	ldr	r1, [r3, #28]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	691a      	ldr	r2, [r3, #16]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	430a      	orrs	r2, r1
 8006d82:	61da      	str	r2, [r3, #28]
      break;
 8006d84:	e064      	b.n	8006e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68b9      	ldr	r1, [r7, #8]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f000 fa63 	bl	8007258 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	69da      	ldr	r2, [r3, #28]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006da0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	69da      	ldr	r2, [r3, #28]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	69d9      	ldr	r1, [r3, #28]
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	021a      	lsls	r2, r3, #8
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	61da      	str	r2, [r3, #28]
      break;
 8006dc6:	e043      	b.n	8006e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68b9      	ldr	r1, [r7, #8]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 faa0 	bl	8007314 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f042 0208 	orr.w	r2, r2, #8
 8006de2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0204 	bic.w	r2, r2, #4
 8006df2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	691a      	ldr	r2, [r3, #16]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e06:	e023      	b.n	8006e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68b9      	ldr	r1, [r7, #8]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 fad8 	bl	80073c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	021a      	lsls	r2, r3, #8
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e48:	e002      	b.n	8006e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3718      	adds	r7, #24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop

08006e64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a2a      	ldr	r2, [pc, #168]	; (8006f70 <TIM_Base_SetConfig+0xbc>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d003      	beq.n	8006ed4 <TIM_Base_SetConfig+0x20>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed2:	d108      	bne.n	8006ee6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a21      	ldr	r2, [pc, #132]	; (8006f70 <TIM_Base_SetConfig+0xbc>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d00b      	beq.n	8006f06 <TIM_Base_SetConfig+0x52>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ef4:	d007      	beq.n	8006f06 <TIM_Base_SetConfig+0x52>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a1e      	ldr	r2, [pc, #120]	; (8006f74 <TIM_Base_SetConfig+0xc0>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d003      	beq.n	8006f06 <TIM_Base_SetConfig+0x52>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a1d      	ldr	r2, [pc, #116]	; (8006f78 <TIM_Base_SetConfig+0xc4>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d108      	bne.n	8006f18 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	689a      	ldr	r2, [r3, #8]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a0c      	ldr	r2, [pc, #48]	; (8006f70 <TIM_Base_SetConfig+0xbc>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d007      	beq.n	8006f54 <TIM_Base_SetConfig+0xa0>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a0b      	ldr	r2, [pc, #44]	; (8006f74 <TIM_Base_SetConfig+0xc0>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d003      	beq.n	8006f54 <TIM_Base_SetConfig+0xa0>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a0a      	ldr	r2, [pc, #40]	; (8006f78 <TIM_Base_SetConfig+0xc4>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d103      	bne.n	8006f5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	691a      	ldr	r2, [r3, #16]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	615a      	str	r2, [r3, #20]
}
 8006f62:	bf00      	nop
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	40012c00 	.word	0x40012c00
 8006f74:	40014400 	.word	0x40014400
 8006f78:	40014800 	.word	0x40014800

08006f7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b087      	sub	sp, #28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	f023 0201 	bic.w	r2, r3, #1
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f023 0303 	bic.w	r3, r3, #3
 8006fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f023 0302 	bic.w	r3, r3, #2
 8006fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a24      	ldr	r2, [pc, #144]	; (8007068 <TIM_OC1_SetConfig+0xec>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d007      	beq.n	8006fec <TIM_OC1_SetConfig+0x70>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a23      	ldr	r2, [pc, #140]	; (800706c <TIM_OC1_SetConfig+0xf0>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d003      	beq.n	8006fec <TIM_OC1_SetConfig+0x70>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a22      	ldr	r2, [pc, #136]	; (8007070 <TIM_OC1_SetConfig+0xf4>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d10c      	bne.n	8007006 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	f023 0308 	bic.w	r3, r3, #8
 8006ff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f023 0304 	bic.w	r3, r3, #4
 8007004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a17      	ldr	r2, [pc, #92]	; (8007068 <TIM_OC1_SetConfig+0xec>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d007      	beq.n	800701e <TIM_OC1_SetConfig+0xa2>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a17      	ldr	r2, [pc, #92]	; (8007070 <TIM_OC1_SetConfig+0xf4>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d003      	beq.n	800701e <TIM_OC1_SetConfig+0xa2>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a14      	ldr	r2, [pc, #80]	; (800706c <TIM_OC1_SetConfig+0xf0>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d111      	bne.n	8007042 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800702c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	4313      	orrs	r3, r2
 8007036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	4313      	orrs	r3, r2
 8007040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	621a      	str	r2, [r3, #32]
}
 800705c:	bf00      	nop
 800705e:	371c      	adds	r7, #28
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	40012c00 	.word	0x40012c00
 800706c:	40014800 	.word	0x40014800
 8007070:	40014400 	.word	0x40014400

08007074 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007074:	b480      	push	{r7}
 8007076:	b087      	sub	sp, #28
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	f023 0210 	bic.w	r2, r3, #16
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	021b      	lsls	r3, r3, #8
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f023 0320 	bic.w	r3, r3, #32
 80070c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	011b      	lsls	r3, r3, #4
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a22      	ldr	r2, [pc, #136]	; (800715c <TIM_OC2_SetConfig+0xe8>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d10d      	bne.n	80070f4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	011b      	lsls	r3, r3, #4
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a19      	ldr	r2, [pc, #100]	; (800715c <TIM_OC2_SetConfig+0xe8>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d007      	beq.n	800710c <TIM_OC2_SetConfig+0x98>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a18      	ldr	r2, [pc, #96]	; (8007160 <TIM_OC2_SetConfig+0xec>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d003      	beq.n	800710c <TIM_OC2_SetConfig+0x98>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a17      	ldr	r2, [pc, #92]	; (8007164 <TIM_OC2_SetConfig+0xf0>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d113      	bne.n	8007134 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007112:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800711a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	4313      	orrs	r3, r2
 8007126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	4313      	orrs	r3, r2
 8007132:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	621a      	str	r2, [r3, #32]
}
 800714e:	bf00      	nop
 8007150:	371c      	adds	r7, #28
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	40012c00 	.word	0x40012c00
 8007160:	40014400 	.word	0x40014400
 8007164:	40014800 	.word	0x40014800

08007168 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007168:	b480      	push	{r7}
 800716a:	b087      	sub	sp, #28
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800719a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f023 0303 	bic.w	r3, r3, #3
 80071a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	021b      	lsls	r3, r3, #8
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	4313      	orrs	r3, r2
 80071c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a21      	ldr	r2, [pc, #132]	; (800724c <TIM_OC3_SetConfig+0xe4>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d10d      	bne.n	80071e6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	021b      	lsls	r3, r3, #8
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	4313      	orrs	r3, r2
 80071dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a18      	ldr	r2, [pc, #96]	; (800724c <TIM_OC3_SetConfig+0xe4>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d007      	beq.n	80071fe <TIM_OC3_SetConfig+0x96>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a17      	ldr	r2, [pc, #92]	; (8007250 <TIM_OC3_SetConfig+0xe8>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d003      	beq.n	80071fe <TIM_OC3_SetConfig+0x96>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a16      	ldr	r2, [pc, #88]	; (8007254 <TIM_OC3_SetConfig+0xec>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d113      	bne.n	8007226 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800720c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	011b      	lsls	r3, r3, #4
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	4313      	orrs	r3, r2
 8007218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	011b      	lsls	r3, r3, #4
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	4313      	orrs	r3, r2
 8007224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	685a      	ldr	r2, [r3, #4]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	621a      	str	r2, [r3, #32]
}
 8007240:	bf00      	nop
 8007242:	371c      	adds	r7, #28
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	40012c00 	.word	0x40012c00
 8007250:	40014400 	.word	0x40014400
 8007254:	40014800 	.word	0x40014800

08007258 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800728a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	021b      	lsls	r3, r3, #8
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	4313      	orrs	r3, r2
 800729e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	031b      	lsls	r3, r3, #12
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a14      	ldr	r2, [pc, #80]	; (8007308 <TIM_OC4_SetConfig+0xb0>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d007      	beq.n	80072cc <TIM_OC4_SetConfig+0x74>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a13      	ldr	r2, [pc, #76]	; (800730c <TIM_OC4_SetConfig+0xb4>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d003      	beq.n	80072cc <TIM_OC4_SetConfig+0x74>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a12      	ldr	r2, [pc, #72]	; (8007310 <TIM_OC4_SetConfig+0xb8>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d109      	bne.n	80072e0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	695b      	ldr	r3, [r3, #20]
 80072d8:	019b      	lsls	r3, r3, #6
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	4313      	orrs	r3, r2
 80072de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	621a      	str	r2, [r3, #32]
}
 80072fa:	bf00      	nop
 80072fc:	371c      	adds	r7, #28
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	40012c00 	.word	0x40012c00
 800730c:	40014400 	.word	0x40014400
 8007310:	40014800 	.word	0x40014800

08007314 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007314:	b480      	push	{r7}
 8007316:	b087      	sub	sp, #28
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800733a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007358:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	041b      	lsls	r3, r3, #16
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	4313      	orrs	r3, r2
 8007364:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a13      	ldr	r2, [pc, #76]	; (80073b8 <TIM_OC5_SetConfig+0xa4>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d007      	beq.n	800737e <TIM_OC5_SetConfig+0x6a>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a12      	ldr	r2, [pc, #72]	; (80073bc <TIM_OC5_SetConfig+0xa8>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d003      	beq.n	800737e <TIM_OC5_SetConfig+0x6a>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a11      	ldr	r2, [pc, #68]	; (80073c0 <TIM_OC5_SetConfig+0xac>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d109      	bne.n	8007392 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007384:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	021b      	lsls	r3, r3, #8
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	4313      	orrs	r3, r2
 8007390:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	685a      	ldr	r2, [r3, #4]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	621a      	str	r2, [r3, #32]
}
 80073ac:	bf00      	nop
 80073ae:	371c      	adds	r7, #28
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	40012c00 	.word	0x40012c00
 80073bc:	40014400 	.word	0x40014400
 80073c0:	40014800 	.word	0x40014800

080073c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b087      	sub	sp, #28
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	021b      	lsls	r3, r3, #8
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	4313      	orrs	r3, r2
 8007402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800740a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	051b      	lsls	r3, r3, #20
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	4313      	orrs	r3, r2
 8007416:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a14      	ldr	r2, [pc, #80]	; (800746c <TIM_OC6_SetConfig+0xa8>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d007      	beq.n	8007430 <TIM_OC6_SetConfig+0x6c>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a13      	ldr	r2, [pc, #76]	; (8007470 <TIM_OC6_SetConfig+0xac>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d003      	beq.n	8007430 <TIM_OC6_SetConfig+0x6c>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a12      	ldr	r2, [pc, #72]	; (8007474 <TIM_OC6_SetConfig+0xb0>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d109      	bne.n	8007444 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007436:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	029b      	lsls	r3, r3, #10
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	4313      	orrs	r3, r2
 8007442:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	621a      	str	r2, [r3, #32]
}
 800745e:	bf00      	nop
 8007460:	371c      	adds	r7, #28
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	40012c00 	.word	0x40012c00
 8007470:	40014400 	.word	0x40014400
 8007474:	40014800 	.word	0x40014800

08007478 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007478:	b480      	push	{r7}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f003 031f 	and.w	r3, r3, #31
 800748a:	2201      	movs	r2, #1
 800748c:	fa02 f303 	lsl.w	r3, r2, r3
 8007490:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6a1a      	ldr	r2, [r3, #32]
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	43db      	mvns	r3, r3
 800749a:	401a      	ands	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6a1a      	ldr	r2, [r3, #32]
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f003 031f 	and.w	r3, r3, #31
 80074aa:	6879      	ldr	r1, [r7, #4]
 80074ac:	fa01 f303 	lsl.w	r3, r1, r3
 80074b0:	431a      	orrs	r2, r3
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	621a      	str	r2, [r3, #32]
}
 80074b6:	bf00      	nop
 80074b8:	371c      	adds	r7, #28
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
	...

080074c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d101      	bne.n	80074dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074d8:	2302      	movs	r3, #2
 80074da:	e04a      	b.n	8007572 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2202      	movs	r2, #2
 80074e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a1f      	ldr	r2, [pc, #124]	; (8007580 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d108      	bne.n	8007518 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800750c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	4313      	orrs	r3, r2
 8007516:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800751e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	4313      	orrs	r3, r2
 8007528:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a12      	ldr	r2, [pc, #72]	; (8007580 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d004      	beq.n	8007546 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007544:	d10c      	bne.n	8007560 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800754c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	4313      	orrs	r3, r2
 8007556:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3714      	adds	r7, #20
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	40012c00 	.word	0x40012c00

08007584 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007598:	2b01      	cmp	r3, #1
 800759a:	d101      	bne.n	80075a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800759c:	2302      	movs	r3, #2
 800759e:	e078      	b.n	8007692 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4313      	orrs	r3, r2
 80075de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	695b      	ldr	r3, [r3, #20]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007606:	4313      	orrs	r3, r2
 8007608:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	041b      	lsls	r3, r3, #16
 8007616:	4313      	orrs	r3, r2
 8007618:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a20      	ldr	r2, [pc, #128]	; (80076a0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d106      	bne.n	8007632 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	69db      	ldr	r3, [r3, #28]
 800762e:	4313      	orrs	r3, r2
 8007630:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a1a      	ldr	r2, [pc, #104]	; (80076a0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d121      	bne.n	8007680 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007646:	051b      	lsls	r3, r3, #20
 8007648:	4313      	orrs	r3, r2
 800764a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	4313      	orrs	r3, r2
 8007658:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	4313      	orrs	r3, r2
 8007666:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a0c      	ldr	r2, [pc, #48]	; (80076a0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d106      	bne.n	8007680 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767c:	4313      	orrs	r3, r2
 800767e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	40012c00 	.word	0x40012c00

080076a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <LL_RCC_GetUSARTClockSource>:
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80076e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4013      	ands	r3, r2
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <LL_RCC_GetLPUARTClockSource>:
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800770c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4013      	ands	r3, r2
}
 8007714:	4618      	mov	r0, r3
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d101      	bne.n	8007732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e042      	b.n	80077b8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007738:	2b00      	cmp	r3, #0
 800773a:	d106      	bne.n	800774a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f7fb fb97 	bl	8002e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2224      	movs	r2, #36	; 0x24
 800774e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f022 0201 	bic.w	r2, r2, #1
 8007760:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fd1a 	bl	800819c <UART_SetConfig>
 8007768:	4603      	mov	r3, r0
 800776a:	2b01      	cmp	r3, #1
 800776c:	d101      	bne.n	8007772 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e022      	b.n	80077b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007776:	2b00      	cmp	r3, #0
 8007778:	d002      	beq.n	8007780 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 ff36 	bl	80085ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800778e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	689a      	ldr	r2, [r3, #8]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800779e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f042 0201 	orr.w	r2, r2, #1
 80077ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 ffbd 	bl	8008730 <UART_CheckIdleState>
 80077b6:	4603      	mov	r3, r0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b08a      	sub	sp, #40	; 0x28
 80077c4:	af02      	add	r7, sp, #8
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	603b      	str	r3, [r7, #0]
 80077cc:	4613      	mov	r3, r2
 80077ce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077d6:	2b20      	cmp	r3, #32
 80077d8:	f040 8083 	bne.w	80078e2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d002      	beq.n	80077e8 <HAL_UART_Transmit+0x28>
 80077e2:	88fb      	ldrh	r3, [r7, #6]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e07b      	b.n	80078e4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d101      	bne.n	80077fa <HAL_UART_Transmit+0x3a>
 80077f6:	2302      	movs	r3, #2
 80077f8:	e074      	b.n	80078e4 <HAL_UART_Transmit+0x124>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2221      	movs	r2, #33	; 0x21
 800780e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007812:	f7fb fead 	bl	8003570 <HAL_GetTick>
 8007816:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	88fa      	ldrh	r2, [r7, #6]
 800781c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	88fa      	ldrh	r2, [r7, #6]
 8007824:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007830:	d108      	bne.n	8007844 <HAL_UART_Transmit+0x84>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d104      	bne.n	8007844 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800783a:	2300      	movs	r3, #0
 800783c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	61bb      	str	r3, [r7, #24]
 8007842:	e003      	b.n	800784c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007848:	2300      	movs	r3, #0
 800784a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007854:	e02c      	b.n	80078b0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	2200      	movs	r2, #0
 800785e:	2180      	movs	r1, #128	; 0x80
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 ffb0 	bl	80087c6 <UART_WaitOnFlagUntilTimeout>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d001      	beq.n	8007870 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e039      	b.n	80078e4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10b      	bne.n	800788e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	881b      	ldrh	r3, [r3, #0]
 800787a:	461a      	mov	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007884:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	3302      	adds	r3, #2
 800788a:	61bb      	str	r3, [r7, #24]
 800788c:	e007      	b.n	800789e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	781a      	ldrb	r2, [r3, #0]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	3301      	adds	r3, #1
 800789c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	3b01      	subs	r3, #1
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1cc      	bne.n	8007856 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	2200      	movs	r2, #0
 80078c4:	2140      	movs	r1, #64	; 0x40
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f000 ff7d 	bl	80087c6 <UART_WaitOnFlagUntilTimeout>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d001      	beq.n	80078d6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80078d2:	2303      	movs	r3, #3
 80078d4:	e006      	b.n	80078e4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2220      	movs	r2, #32
 80078da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80078de:	2300      	movs	r3, #0
 80078e0:	e000      	b.n	80078e4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80078e2:	2302      	movs	r3, #2
  }
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3720      	adds	r7, #32
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b08a      	sub	sp, #40	; 0x28
 80078f0:	af02      	add	r7, sp, #8
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	603b      	str	r3, [r7, #0]
 80078f8:	4613      	mov	r3, r2
 80078fa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007902:	2b20      	cmp	r3, #32
 8007904:	f040 80c0 	bne.w	8007a88 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d002      	beq.n	8007914 <HAL_UART_Receive+0x28>
 800790e:	88fb      	ldrh	r3, [r7, #6]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d101      	bne.n	8007918 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e0b8      	b.n	8007a8a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800791e:	2b01      	cmp	r3, #1
 8007920:	d101      	bne.n	8007926 <HAL_UART_Receive+0x3a>
 8007922:	2302      	movs	r3, #2
 8007924:	e0b1      	b.n	8007a8a <HAL_UART_Receive+0x19e>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2222      	movs	r2, #34	; 0x22
 800793a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007944:	f7fb fe14 	bl	8003570 <HAL_GetTick>
 8007948:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	88fa      	ldrh	r2, [r7, #6]
 800794e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	88fa      	ldrh	r2, [r7, #6]
 8007956:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007962:	d10e      	bne.n	8007982 <HAL_UART_Receive+0x96>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d105      	bne.n	8007978 <HAL_UART_Receive+0x8c>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007972:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007976:	e02d      	b.n	80079d4 <HAL_UART_Receive+0xe8>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	22ff      	movs	r2, #255	; 0xff
 800797c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007980:	e028      	b.n	80079d4 <HAL_UART_Receive+0xe8>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10d      	bne.n	80079a6 <HAL_UART_Receive+0xba>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d104      	bne.n	800799c <HAL_UART_Receive+0xb0>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	22ff      	movs	r2, #255	; 0xff
 8007996:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800799a:	e01b      	b.n	80079d4 <HAL_UART_Receive+0xe8>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	227f      	movs	r2, #127	; 0x7f
 80079a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80079a4:	e016      	b.n	80079d4 <HAL_UART_Receive+0xe8>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079ae:	d10d      	bne.n	80079cc <HAL_UART_Receive+0xe0>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d104      	bne.n	80079c2 <HAL_UART_Receive+0xd6>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	227f      	movs	r2, #127	; 0x7f
 80079bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80079c0:	e008      	b.n	80079d4 <HAL_UART_Receive+0xe8>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	223f      	movs	r2, #63	; 0x3f
 80079c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80079ca:	e003      	b.n	80079d4 <HAL_UART_Receive+0xe8>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80079da:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e4:	d108      	bne.n	80079f8 <HAL_UART_Receive+0x10c>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d104      	bne.n	80079f8 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80079ee:	2300      	movs	r3, #0
 80079f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	61bb      	str	r3, [r7, #24]
 80079f6:	e003      	b.n	8007a00 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079fc:	2300      	movs	r3, #0
 80079fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007a08:	e032      	b.n	8007a70 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	2200      	movs	r2, #0
 8007a12:	2120      	movs	r1, #32
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f000 fed6 	bl	80087c6 <UART_WaitOnFlagUntilTimeout>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d001      	beq.n	8007a24 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8007a20:	2303      	movs	r3, #3
 8007a22:	e032      	b.n	8007a8a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10c      	bne.n	8007a44 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	8a7b      	ldrh	r3, [r7, #18]
 8007a34:	4013      	ands	r3, r2
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	3302      	adds	r3, #2
 8007a40:	61bb      	str	r3, [r7, #24]
 8007a42:	e00c      	b.n	8007a5e <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	8a7b      	ldrh	r3, [r7, #18]
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	4013      	ands	r3, r2
 8007a52:	b2da      	uxtb	r2, r3
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	3b01      	subs	r3, #1
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1c6      	bne.n	8007a0a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2220      	movs	r2, #32
 8007a80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	e000      	b.n	8007a8a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8007a88:	2302      	movs	r3, #2
  }
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3720      	adds	r7, #32
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
	...

08007a94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b08a      	sub	sp, #40	; 0x28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aa8:	2b20      	cmp	r3, #32
 8007aaa:	d142      	bne.n	8007b32 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d002      	beq.n	8007ab8 <HAL_UART_Receive_IT+0x24>
 8007ab2:	88fb      	ldrh	r3, [r7, #6]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d101      	bne.n	8007abc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e03b      	b.n	8007b34 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d101      	bne.n	8007aca <HAL_UART_Receive_IT+0x36>
 8007ac6:	2302      	movs	r3, #2
 8007ac8:	e034      	b.n	8007b34 <HAL_UART_Receive_IT+0xa0>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a17      	ldr	r2, [pc, #92]	; (8007b3c <HAL_UART_Receive_IT+0xa8>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d01f      	beq.n	8007b22 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d018      	beq.n	8007b22 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	e853 3f00 	ldrex	r3, [r3]
 8007afc:	613b      	str	r3, [r7, #16]
   return(result);
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b04:	627b      	str	r3, [r7, #36]	; 0x24
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	623b      	str	r3, [r7, #32]
 8007b10:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b12:	69f9      	ldr	r1, [r7, #28]
 8007b14:	6a3a      	ldr	r2, [r7, #32]
 8007b16:	e841 2300 	strex	r3, r2, [r1]
 8007b1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1e6      	bne.n	8007af0 <HAL_UART_Receive_IT+0x5c>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007b22:	88fb      	ldrh	r3, [r7, #6]
 8007b24:	461a      	mov	r2, r3
 8007b26:	68b9      	ldr	r1, [r7, #8]
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 ff15 	bl	8008958 <UART_Start_Receive_IT>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	e000      	b.n	8007b34 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007b32:	2302      	movs	r3, #2
  }
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3728      	adds	r7, #40	; 0x28
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	40008000 	.word	0x40008000

08007b40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b0ba      	sub	sp, #232	; 0xe8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007b66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007b6a:	f640 030f 	movw	r3, #2063	; 0x80f
 8007b6e:	4013      	ands	r3, r2
 8007b70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007b74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d11b      	bne.n	8007bb4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b80:	f003 0320 	and.w	r3, r3, #32
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d015      	beq.n	8007bb4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b8c:	f003 0320 	and.w	r3, r3, #32
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d105      	bne.n	8007ba0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d009      	beq.n	8007bb4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f000 82d6 	beq.w	8008156 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	4798      	blx	r3
      }
      return;
 8007bb2:	e2d0      	b.n	8008156 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007bb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f000 811f 	beq.w	8007dfc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007bbe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007bc2:	4b8b      	ldr	r3, [pc, #556]	; (8007df0 <HAL_UART_IRQHandler+0x2b0>)
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d106      	bne.n	8007bd8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007bca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007bce:	4b89      	ldr	r3, [pc, #548]	; (8007df4 <HAL_UART_IRQHandler+0x2b4>)
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f000 8112 	beq.w	8007dfc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bdc:	f003 0301 	and.w	r3, r3, #1
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d011      	beq.n	8007c08 <HAL_UART_IRQHandler+0xc8>
 8007be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00b      	beq.n	8007c08 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bfe:	f043 0201 	orr.w	r2, r3, #1
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c0c:	f003 0302 	and.w	r3, r3, #2
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d011      	beq.n	8007c38 <HAL_UART_IRQHandler+0xf8>
 8007c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c18:	f003 0301 	and.w	r3, r3, #1
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00b      	beq.n	8007c38 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2202      	movs	r2, #2
 8007c26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c2e:	f043 0204 	orr.w	r2, r3, #4
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c3c:	f003 0304 	and.w	r3, r3, #4
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d011      	beq.n	8007c68 <HAL_UART_IRQHandler+0x128>
 8007c44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00b      	beq.n	8007c68 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2204      	movs	r2, #4
 8007c56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c5e:	f043 0202 	orr.w	r2, r3, #2
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c6c:	f003 0308 	and.w	r3, r3, #8
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d017      	beq.n	8007ca4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c78:	f003 0320 	and.w	r3, r3, #32
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d105      	bne.n	8007c8c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007c80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007c84:	4b5a      	ldr	r3, [pc, #360]	; (8007df0 <HAL_UART_IRQHandler+0x2b0>)
 8007c86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00b      	beq.n	8007ca4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2208      	movs	r2, #8
 8007c92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c9a:	f043 0208 	orr.w	r2, r3, #8
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ca8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d012      	beq.n	8007cd6 <HAL_UART_IRQHandler+0x196>
 8007cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00c      	beq.n	8007cd6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007cc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ccc:	f043 0220 	orr.w	r2, r3, #32
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f000 823c 	beq.w	800815a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ce6:	f003 0320 	and.w	r3, r3, #32
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d013      	beq.n	8007d16 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cf2:	f003 0320 	and.w	r3, r3, #32
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d105      	bne.n	8007d06 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d007      	beq.n	8007d16 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d003      	beq.n	8007d16 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d2a:	2b40      	cmp	r3, #64	; 0x40
 8007d2c:	d005      	beq.n	8007d3a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007d2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d32:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d04f      	beq.n	8007dda <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 ff10 	bl	8008b60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d4a:	2b40      	cmp	r3, #64	; 0x40
 8007d4c:	d141      	bne.n	8007dd2 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	3308      	adds	r3, #8
 8007d54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d5c:	e853 3f00 	ldrex	r3, [r3]
 8007d60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007d64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3308      	adds	r3, #8
 8007d76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007d7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007d86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007d8a:	e841 2300 	strex	r3, r2, [r1]
 8007d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1d9      	bne.n	8007d4e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d013      	beq.n	8007dca <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007da6:	4a14      	ldr	r2, [pc, #80]	; (8007df8 <HAL_UART_IRQHandler+0x2b8>)
 8007da8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7fb fd88 	bl	80038c4 <HAL_DMA_Abort_IT>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d017      	beq.n	8007dea <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dc8:	e00f      	b.n	8007dea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f9d0 	bl	8008170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dd0:	e00b      	b.n	8007dea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f9cc 	bl	8008170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dd8:	e007      	b.n	8007dea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f9c8 	bl	8008170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007de8:	e1b7      	b.n	800815a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dea:	bf00      	nop
    return;
 8007dec:	e1b5      	b.n	800815a <HAL_UART_IRQHandler+0x61a>
 8007dee:	bf00      	nop
 8007df0:	10000001 	.word	0x10000001
 8007df4:	04000120 	.word	0x04000120
 8007df8:	08008c2d 	.word	0x08008c2d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	f040 814a 	bne.w	800809a <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e0a:	f003 0310 	and.w	r3, r3, #16
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 8143 	beq.w	800809a <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e18:	f003 0310 	and.w	r3, r3, #16
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f000 813c 	beq.w	800809a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2210      	movs	r2, #16
 8007e28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e34:	2b40      	cmp	r3, #64	; 0x40
 8007e36:	f040 80b5 	bne.w	8007fa4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8007e46:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	f000 8187 	beq.w	800815e <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	f080 817f 	bcs.w	800815e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e66:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0320 	and.w	r3, r3, #32
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f040 8086 	bne.w	8007f88 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e88:	e853 3f00 	ldrex	r3, [r3]
 8007e8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007e90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ea6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007eaa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007eb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007eb6:	e841 2300 	strex	r3, r2, [r1]
 8007eba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1da      	bne.n	8007e7c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	3308      	adds	r3, #8
 8007ecc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ed0:	e853 3f00 	ldrex	r3, [r3]
 8007ed4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ed6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ed8:	f023 0301 	bic.w	r3, r3, #1
 8007edc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3308      	adds	r3, #8
 8007ee6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007eea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007eee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ef2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ef6:	e841 2300 	strex	r3, r2, [r1]
 8007efa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1e1      	bne.n	8007ec6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3308      	adds	r3, #8
 8007f08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f0c:	e853 3f00 	ldrex	r3, [r3]
 8007f10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	3308      	adds	r3, #8
 8007f22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007f2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f2e:	e841 2300 	strex	r3, r2, [r1]
 8007f32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1e3      	bne.n	8007f02 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2220      	movs	r2, #32
 8007f3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f50:	e853 3f00 	ldrex	r3, [r3]
 8007f54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f58:	f023 0310 	bic.w	r3, r3, #16
 8007f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	461a      	mov	r2, r3
 8007f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f6c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f72:	e841 2300 	strex	r3, r2, [r1]
 8007f76:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1e4      	bne.n	8007f48 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fb fc3f 	bl	8003806 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f8f1 	bl	8008184 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007fa2:	e0dc      	b.n	800815e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	1ad3      	subs	r3, r2, r3
 8007fb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 80ce 	beq.w	8008162 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8007fc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f000 80c9 	beq.w	8008162 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd8:	e853 3f00 	ldrex	r3, [r3]
 8007fdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fe4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	461a      	mov	r2, r3
 8007fee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ff2:	647b      	str	r3, [r7, #68]	; 0x44
 8007ff4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ff8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ffa:	e841 2300 	strex	r3, r2, [r1]
 8007ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1e4      	bne.n	8007fd0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	3308      	adds	r3, #8
 800800c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008010:	e853 3f00 	ldrex	r3, [r3]
 8008014:	623b      	str	r3, [r7, #32]
   return(result);
 8008016:	6a3b      	ldr	r3, [r7, #32]
 8008018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800801c:	f023 0301 	bic.w	r3, r3, #1
 8008020:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	3308      	adds	r3, #8
 800802a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800802e:	633a      	str	r2, [r7, #48]	; 0x30
 8008030:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008032:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008036:	e841 2300 	strex	r3, r2, [r1]
 800803a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800803c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1e1      	bne.n	8008006 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2220      	movs	r2, #32
 8008046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	e853 3f00 	ldrex	r3, [r3]
 8008062:	60fb      	str	r3, [r7, #12]
   return(result);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f023 0310 	bic.w	r3, r3, #16
 800806a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	461a      	mov	r2, r3
 8008074:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008078:	61fb      	str	r3, [r7, #28]
 800807a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807c:	69b9      	ldr	r1, [r7, #24]
 800807e:	69fa      	ldr	r2, [r7, #28]
 8008080:	e841 2300 	strex	r3, r2, [r1]
 8008084:	617b      	str	r3, [r7, #20]
   return(result);
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1e4      	bne.n	8008056 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800808c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008090:	4619      	mov	r1, r3
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f876 	bl	8008184 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008098:	e063      	b.n	8008162 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800809a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800809e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00e      	beq.n	80080c4 <HAL_UART_IRQHandler+0x584>
 80080a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d008      	beq.n	80080c4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80080ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f001 fa53 	bl	8009568 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080c2:	e051      	b.n	8008168 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80080c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d014      	beq.n	80080fa <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80080d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d105      	bne.n	80080e8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80080dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d008      	beq.n	80080fa <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d03a      	beq.n	8008166 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	4798      	blx	r3
    }
    return;
 80080f8:	e035      	b.n	8008166 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80080fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008102:	2b00      	cmp	r3, #0
 8008104:	d009      	beq.n	800811a <HAL_UART_IRQHandler+0x5da>
 8008106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800810a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800810e:	2b00      	cmp	r3, #0
 8008110:	d003      	beq.n	800811a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fda0 	bl	8008c58 <UART_EndTransmit_IT>
    return;
 8008118:	e026      	b.n	8008168 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800811a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800811e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008122:	2b00      	cmp	r3, #0
 8008124:	d009      	beq.n	800813a <HAL_UART_IRQHandler+0x5fa>
 8008126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800812a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f001 fa2c 	bl	8009590 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008138:	e016      	b.n	8008168 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800813a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800813e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d010      	beq.n	8008168 <HAL_UART_IRQHandler+0x628>
 8008146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800814a:	2b00      	cmp	r3, #0
 800814c:	da0c      	bge.n	8008168 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f001 fa14 	bl	800957c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008154:	e008      	b.n	8008168 <HAL_UART_IRQHandler+0x628>
      return;
 8008156:	bf00      	nop
 8008158:	e006      	b.n	8008168 <HAL_UART_IRQHandler+0x628>
    return;
 800815a:	bf00      	nop
 800815c:	e004      	b.n	8008168 <HAL_UART_IRQHandler+0x628>
      return;
 800815e:	bf00      	nop
 8008160:	e002      	b.n	8008168 <HAL_UART_IRQHandler+0x628>
      return;
 8008162:	bf00      	nop
 8008164:	e000      	b.n	8008168 <HAL_UART_IRQHandler+0x628>
    return;
 8008166:	bf00      	nop
  }
}
 8008168:	37e8      	adds	r7, #232	; 0xe8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop

08008170 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008178:	bf00      	nop
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	460b      	mov	r3, r1
 800818e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800819c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081a0:	b08c      	sub	sp, #48	; 0x30
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081a6:	2300      	movs	r3, #0
 80081a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	689a      	ldr	r2, [r3, #8]
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	431a      	orrs	r2, r3
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	431a      	orrs	r2, r3
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	69db      	ldr	r3, [r3, #28]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	4baf      	ldr	r3, [pc, #700]	; (8008488 <UART_SetConfig+0x2ec>)
 80081cc:	4013      	ands	r3, r2
 80081ce:	697a      	ldr	r2, [r7, #20]
 80081d0:	6812      	ldr	r2, [r2, #0]
 80081d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081d4:	430b      	orrs	r3, r1
 80081d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	68da      	ldr	r2, [r3, #12]
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	430a      	orrs	r2, r1
 80081ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4aa4      	ldr	r2, [pc, #656]	; (800848c <UART_SetConfig+0x2f0>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d004      	beq.n	8008208 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	6a1b      	ldr	r3, [r3, #32]
 8008202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008204:	4313      	orrs	r3, r2
 8008206:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008212:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	6812      	ldr	r2, [r2, #0]
 800821a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800821c:	430b      	orrs	r3, r1
 800821e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008226:	f023 010f 	bic.w	r1, r3, #15
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	430a      	orrs	r2, r1
 8008234:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a95      	ldr	r2, [pc, #596]	; (8008490 <UART_SetConfig+0x2f4>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d125      	bne.n	800828c <UART_SetConfig+0xf0>
 8008240:	2003      	movs	r0, #3
 8008242:	f7ff fa4d 	bl	80076e0 <LL_RCC_GetUSARTClockSource>
 8008246:	4603      	mov	r3, r0
 8008248:	2b03      	cmp	r3, #3
 800824a:	d81b      	bhi.n	8008284 <UART_SetConfig+0xe8>
 800824c:	a201      	add	r2, pc, #4	; (adr r2, 8008254 <UART_SetConfig+0xb8>)
 800824e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008252:	bf00      	nop
 8008254:	08008265 	.word	0x08008265
 8008258:	08008275 	.word	0x08008275
 800825c:	0800826d 	.word	0x0800826d
 8008260:	0800827d 	.word	0x0800827d
 8008264:	2301      	movs	r3, #1
 8008266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800826a:	e042      	b.n	80082f2 <UART_SetConfig+0x156>
 800826c:	2302      	movs	r3, #2
 800826e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008272:	e03e      	b.n	80082f2 <UART_SetConfig+0x156>
 8008274:	2304      	movs	r3, #4
 8008276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800827a:	e03a      	b.n	80082f2 <UART_SetConfig+0x156>
 800827c:	2308      	movs	r3, #8
 800827e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008282:	e036      	b.n	80082f2 <UART_SetConfig+0x156>
 8008284:	2310      	movs	r3, #16
 8008286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800828a:	e032      	b.n	80082f2 <UART_SetConfig+0x156>
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a7e      	ldr	r2, [pc, #504]	; (800848c <UART_SetConfig+0x2f0>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d12a      	bne.n	80082ec <UART_SetConfig+0x150>
 8008296:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800829a:	f7ff fa31 	bl	8007700 <LL_RCC_GetLPUARTClockSource>
 800829e:	4603      	mov	r3, r0
 80082a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082a4:	d01a      	beq.n	80082dc <UART_SetConfig+0x140>
 80082a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082aa:	d81b      	bhi.n	80082e4 <UART_SetConfig+0x148>
 80082ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082b0:	d00c      	beq.n	80082cc <UART_SetConfig+0x130>
 80082b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082b6:	d815      	bhi.n	80082e4 <UART_SetConfig+0x148>
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d003      	beq.n	80082c4 <UART_SetConfig+0x128>
 80082bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082c0:	d008      	beq.n	80082d4 <UART_SetConfig+0x138>
 80082c2:	e00f      	b.n	80082e4 <UART_SetConfig+0x148>
 80082c4:	2300      	movs	r3, #0
 80082c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ca:	e012      	b.n	80082f2 <UART_SetConfig+0x156>
 80082cc:	2302      	movs	r3, #2
 80082ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082d2:	e00e      	b.n	80082f2 <UART_SetConfig+0x156>
 80082d4:	2304      	movs	r3, #4
 80082d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082da:	e00a      	b.n	80082f2 <UART_SetConfig+0x156>
 80082dc:	2308      	movs	r3, #8
 80082de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082e2:	e006      	b.n	80082f2 <UART_SetConfig+0x156>
 80082e4:	2310      	movs	r3, #16
 80082e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ea:	e002      	b.n	80082f2 <UART_SetConfig+0x156>
 80082ec:	2310      	movs	r3, #16
 80082ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a65      	ldr	r2, [pc, #404]	; (800848c <UART_SetConfig+0x2f0>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	f040 8097 	bne.w	800842c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80082fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008302:	2b08      	cmp	r3, #8
 8008304:	d823      	bhi.n	800834e <UART_SetConfig+0x1b2>
 8008306:	a201      	add	r2, pc, #4	; (adr r2, 800830c <UART_SetConfig+0x170>)
 8008308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830c:	08008331 	.word	0x08008331
 8008310:	0800834f 	.word	0x0800834f
 8008314:	08008339 	.word	0x08008339
 8008318:	0800834f 	.word	0x0800834f
 800831c:	0800833f 	.word	0x0800833f
 8008320:	0800834f 	.word	0x0800834f
 8008324:	0800834f 	.word	0x0800834f
 8008328:	0800834f 	.word	0x0800834f
 800832c:	08008347 	.word	0x08008347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008330:	f7fc feb8 	bl	80050a4 <HAL_RCC_GetPCLK1Freq>
 8008334:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008336:	e010      	b.n	800835a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008338:	4b56      	ldr	r3, [pc, #344]	; (8008494 <UART_SetConfig+0x2f8>)
 800833a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800833c:	e00d      	b.n	800835a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800833e:	f7fc fe31 	bl	8004fa4 <HAL_RCC_GetSysClockFreq>
 8008342:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008344:	e009      	b.n	800835a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800834a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800834c:	e005      	b.n	800835a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800834e:	2300      	movs	r3, #0
 8008350:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008358:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 812b 	beq.w	80085b8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008366:	4a4c      	ldr	r2, [pc, #304]	; (8008498 <UART_SetConfig+0x2fc>)
 8008368:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800836c:	461a      	mov	r2, r3
 800836e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008370:	fbb3 f3f2 	udiv	r3, r3, r2
 8008374:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	685a      	ldr	r2, [r3, #4]
 800837a:	4613      	mov	r3, r2
 800837c:	005b      	lsls	r3, r3, #1
 800837e:	4413      	add	r3, r2
 8008380:	69ba      	ldr	r2, [r7, #24]
 8008382:	429a      	cmp	r2, r3
 8008384:	d305      	bcc.n	8008392 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800838c:	69ba      	ldr	r2, [r7, #24]
 800838e:	429a      	cmp	r2, r3
 8008390:	d903      	bls.n	800839a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008398:	e10e      	b.n	80085b8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839c:	2200      	movs	r2, #0
 800839e:	60bb      	str	r3, [r7, #8]
 80083a0:	60fa      	str	r2, [r7, #12]
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a6:	4a3c      	ldr	r2, [pc, #240]	; (8008498 <UART_SetConfig+0x2fc>)
 80083a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	2200      	movs	r2, #0
 80083b0:	603b      	str	r3, [r7, #0]
 80083b2:	607a      	str	r2, [r7, #4]
 80083b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80083bc:	f7f8 fbdc 	bl	8000b78 <__aeabi_uldivmod>
 80083c0:	4602      	mov	r2, r0
 80083c2:	460b      	mov	r3, r1
 80083c4:	4610      	mov	r0, r2
 80083c6:	4619      	mov	r1, r3
 80083c8:	f04f 0200 	mov.w	r2, #0
 80083cc:	f04f 0300 	mov.w	r3, #0
 80083d0:	020b      	lsls	r3, r1, #8
 80083d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80083d6:	0202      	lsls	r2, r0, #8
 80083d8:	6979      	ldr	r1, [r7, #20]
 80083da:	6849      	ldr	r1, [r1, #4]
 80083dc:	0849      	lsrs	r1, r1, #1
 80083de:	2000      	movs	r0, #0
 80083e0:	460c      	mov	r4, r1
 80083e2:	4605      	mov	r5, r0
 80083e4:	eb12 0804 	adds.w	r8, r2, r4
 80083e8:	eb43 0905 	adc.w	r9, r3, r5
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	469a      	mov	sl, r3
 80083f4:	4693      	mov	fp, r2
 80083f6:	4652      	mov	r2, sl
 80083f8:	465b      	mov	r3, fp
 80083fa:	4640      	mov	r0, r8
 80083fc:	4649      	mov	r1, r9
 80083fe:	f7f8 fbbb 	bl	8000b78 <__aeabi_uldivmod>
 8008402:	4602      	mov	r2, r0
 8008404:	460b      	mov	r3, r1
 8008406:	4613      	mov	r3, r2
 8008408:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008410:	d308      	bcc.n	8008424 <UART_SetConfig+0x288>
 8008412:	6a3b      	ldr	r3, [r7, #32]
 8008414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008418:	d204      	bcs.n	8008424 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	6a3a      	ldr	r2, [r7, #32]
 8008420:	60da      	str	r2, [r3, #12]
 8008422:	e0c9      	b.n	80085b8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800842a:	e0c5      	b.n	80085b8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008434:	d16e      	bne.n	8008514 <UART_SetConfig+0x378>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008436:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800843a:	3b01      	subs	r3, #1
 800843c:	2b07      	cmp	r3, #7
 800843e:	d82d      	bhi.n	800849c <UART_SetConfig+0x300>
 8008440:	a201      	add	r2, pc, #4	; (adr r2, 8008448 <UART_SetConfig+0x2ac>)
 8008442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008446:	bf00      	nop
 8008448:	08008469 	.word	0x08008469
 800844c:	08008471 	.word	0x08008471
 8008450:	0800849d 	.word	0x0800849d
 8008454:	08008477 	.word	0x08008477
 8008458:	0800849d 	.word	0x0800849d
 800845c:	0800849d 	.word	0x0800849d
 8008460:	0800849d 	.word	0x0800849d
 8008464:	0800847f 	.word	0x0800847f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008468:	f7fc fe32 	bl	80050d0 <HAL_RCC_GetPCLK2Freq>
 800846c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800846e:	e01b      	b.n	80084a8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008470:	4b08      	ldr	r3, [pc, #32]	; (8008494 <UART_SetConfig+0x2f8>)
 8008472:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008474:	e018      	b.n	80084a8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008476:	f7fc fd95 	bl	8004fa4 <HAL_RCC_GetSysClockFreq>
 800847a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800847c:	e014      	b.n	80084a8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800847e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008482:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008484:	e010      	b.n	80084a8 <UART_SetConfig+0x30c>
 8008486:	bf00      	nop
 8008488:	cfff69f3 	.word	0xcfff69f3
 800848c:	40008000 	.word	0x40008000
 8008490:	40013800 	.word	0x40013800
 8008494:	00f42400 	.word	0x00f42400
 8008498:	0800cab8 	.word	0x0800cab8
      default:
        pclk = 0U;
 800849c:	2300      	movs	r3, #0
 800849e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80084a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80084a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f000 8084 	beq.w	80085b8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b4:	4a4b      	ldr	r2, [pc, #300]	; (80085e4 <UART_SetConfig+0x448>)
 80084b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084ba:	461a      	mov	r2, r3
 80084bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084be:	fbb3 f3f2 	udiv	r3, r3, r2
 80084c2:	005a      	lsls	r2, r3, #1
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	085b      	lsrs	r3, r3, #1
 80084ca:	441a      	add	r2, r3
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084d8:	6a3b      	ldr	r3, [r7, #32]
 80084da:	2b0f      	cmp	r3, #15
 80084dc:	d916      	bls.n	800850c <UART_SetConfig+0x370>
 80084de:	6a3b      	ldr	r3, [r7, #32]
 80084e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084e4:	d212      	bcs.n	800850c <UART_SetConfig+0x370>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084e6:	6a3b      	ldr	r3, [r7, #32]
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	f023 030f 	bic.w	r3, r3, #15
 80084ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084f0:	6a3b      	ldr	r3, [r7, #32]
 80084f2:	085b      	lsrs	r3, r3, #1
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	f003 0307 	and.w	r3, r3, #7
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	8bfb      	ldrh	r3, [r7, #30]
 80084fe:	4313      	orrs	r3, r2
 8008500:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	8bfa      	ldrh	r2, [r7, #30]
 8008508:	60da      	str	r2, [r3, #12]
 800850a:	e055      	b.n	80085b8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008512:	e051      	b.n	80085b8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008514:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008518:	3b01      	subs	r3, #1
 800851a:	2b07      	cmp	r3, #7
 800851c:	d821      	bhi.n	8008562 <UART_SetConfig+0x3c6>
 800851e:	a201      	add	r2, pc, #4	; (adr r2, 8008524 <UART_SetConfig+0x388>)
 8008520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008524:	08008545 	.word	0x08008545
 8008528:	0800854d 	.word	0x0800854d
 800852c:	08008563 	.word	0x08008563
 8008530:	08008553 	.word	0x08008553
 8008534:	08008563 	.word	0x08008563
 8008538:	08008563 	.word	0x08008563
 800853c:	08008563 	.word	0x08008563
 8008540:	0800855b 	.word	0x0800855b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008544:	f7fc fdc4 	bl	80050d0 <HAL_RCC_GetPCLK2Freq>
 8008548:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800854a:	e010      	b.n	800856e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800854c:	4b26      	ldr	r3, [pc, #152]	; (80085e8 <UART_SetConfig+0x44c>)
 800854e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008550:	e00d      	b.n	800856e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008552:	f7fc fd27 	bl	8004fa4 <HAL_RCC_GetSysClockFreq>
 8008556:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008558:	e009      	b.n	800856e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800855a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800855e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008560:	e005      	b.n	800856e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008562:	2300      	movs	r3, #0
 8008564:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800856c:	bf00      	nop
    }

    if (pclk != 0U)
 800856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008570:	2b00      	cmp	r3, #0
 8008572:	d021      	beq.n	80085b8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008578:	4a1a      	ldr	r2, [pc, #104]	; (80085e4 <UART_SetConfig+0x448>)
 800857a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800857e:	461a      	mov	r2, r3
 8008580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008582:	fbb3 f2f2 	udiv	r2, r3, r2
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	085b      	lsrs	r3, r3, #1
 800858c:	441a      	add	r2, r3
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	fbb2 f3f3 	udiv	r3, r2, r3
 8008596:	b29b      	uxth	r3, r3
 8008598:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800859a:	6a3b      	ldr	r3, [r7, #32]
 800859c:	2b0f      	cmp	r3, #15
 800859e:	d908      	bls.n	80085b2 <UART_SetConfig+0x416>
 80085a0:	6a3b      	ldr	r3, [r7, #32]
 80085a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085a6:	d204      	bcs.n	80085b2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = usartdiv;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6a3a      	ldr	r2, [r7, #32]
 80085ae:	60da      	str	r2, [r3, #12]
 80085b0:	e002      	b.n	80085b8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	2200      	movs	r2, #0
 80085cc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	2200      	movs	r2, #0
 80085d2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80085d4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3730      	adds	r7, #48	; 0x30
 80085dc:	46bd      	mov	sp, r7
 80085de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085e2:	bf00      	nop
 80085e4:	0800cab8 	.word	0x0800cab8
 80085e8:	00f42400 	.word	0x00f42400

080085ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f8:	f003 0301 	and.w	r3, r3, #1
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00a      	beq.n	8008616 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	430a      	orrs	r2, r1
 8008614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861a:	f003 0302 	and.w	r3, r3, #2
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00a      	beq.n	8008638 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	430a      	orrs	r2, r1
 8008636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863c:	f003 0304 	and.w	r3, r3, #4
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00a      	beq.n	800865a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	430a      	orrs	r2, r1
 8008658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865e:	f003 0308 	and.w	r3, r3, #8
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00a      	beq.n	800867c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	430a      	orrs	r2, r1
 800867a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008680:	f003 0310 	and.w	r3, r3, #16
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00a      	beq.n	800869e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	430a      	orrs	r2, r1
 800869c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a2:	f003 0320 	and.w	r3, r3, #32
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00a      	beq.n	80086c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	430a      	orrs	r2, r1
 80086be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d01a      	beq.n	8008702 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	430a      	orrs	r2, r1
 80086e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086ea:	d10a      	bne.n	8008702 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	430a      	orrs	r2, r1
 8008700:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00a      	beq.n	8008724 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	430a      	orrs	r2, r1
 8008722:	605a      	str	r2, [r3, #4]
  }
}
 8008724:	bf00      	nop
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af02      	add	r7, sp, #8
 8008736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008740:	f7fa ff16 	bl	8003570 <HAL_GetTick>
 8008744:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 0308 	and.w	r3, r3, #8
 8008750:	2b08      	cmp	r3, #8
 8008752:	d10e      	bne.n	8008772 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008754:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f82f 	bl	80087c6 <UART_WaitOnFlagUntilTimeout>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d001      	beq.n	8008772 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800876e:	2303      	movs	r3, #3
 8008770:	e025      	b.n	80087be <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 0304 	and.w	r3, r3, #4
 800877c:	2b04      	cmp	r3, #4
 800877e:	d10e      	bne.n	800879e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008780:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008784:	9300      	str	r3, [sp, #0]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 f819 	bl	80087c6 <UART_WaitOnFlagUntilTimeout>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d001      	beq.n	800879e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800879a:	2303      	movs	r3, #3
 800879c:	e00f      	b.n	80087be <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2220      	movs	r2, #32
 80087a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2220      	movs	r2, #32
 80087aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b09c      	sub	sp, #112	; 0x70
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	60f8      	str	r0, [r7, #12]
 80087ce:	60b9      	str	r1, [r7, #8]
 80087d0:	603b      	str	r3, [r7, #0]
 80087d2:	4613      	mov	r3, r2
 80087d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087d6:	e0a9      	b.n	800892c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087de:	f000 80a5 	beq.w	800892c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087e2:	f7fa fec5 	bl	8003570 <HAL_GetTick>
 80087e6:	4602      	mov	r2, r0
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d302      	bcc.n	80087f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80087f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d140      	bne.n	800887a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008800:	e853 3f00 	ldrex	r3, [r3]
 8008804:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008808:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800880c:	667b      	str	r3, [r7, #100]	; 0x64
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008816:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008818:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800881c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800881e:	e841 2300 	strex	r3, r2, [r1]
 8008822:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1e6      	bne.n	80087f8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3308      	adds	r3, #8
 8008830:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008834:	e853 3f00 	ldrex	r3, [r3]
 8008838:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800883a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883c:	f023 0301 	bic.w	r3, r3, #1
 8008840:	663b      	str	r3, [r7, #96]	; 0x60
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3308      	adds	r3, #8
 8008848:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800884a:	64ba      	str	r2, [r7, #72]	; 0x48
 800884c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008850:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008852:	e841 2300 	strex	r3, r2, [r1]
 8008856:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1e5      	bne.n	800882a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2220      	movs	r2, #32
 8008862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2220      	movs	r2, #32
 800886a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008876:	2303      	movs	r3, #3
 8008878:	e069      	b.n	800894e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 0304 	and.w	r3, r3, #4
 8008884:	2b00      	cmp	r3, #0
 8008886:	d051      	beq.n	800892c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	69db      	ldr	r3, [r3, #28]
 800888e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008896:	d149      	bne.n	800892c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088aa:	e853 3f00 	ldrex	r3, [r3]
 80088ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80088b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	461a      	mov	r2, r3
 80088be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088c0:	637b      	str	r3, [r7, #52]	; 0x34
 80088c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088c8:	e841 2300 	strex	r3, r2, [r1]
 80088cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80088ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1e6      	bne.n	80088a2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	3308      	adds	r3, #8
 80088da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	e853 3f00 	ldrex	r3, [r3]
 80088e2:	613b      	str	r3, [r7, #16]
   return(result);
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	f023 0301 	bic.w	r3, r3, #1
 80088ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3308      	adds	r3, #8
 80088f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80088f4:	623a      	str	r2, [r7, #32]
 80088f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f8:	69f9      	ldr	r1, [r7, #28]
 80088fa:	6a3a      	ldr	r2, [r7, #32]
 80088fc:	e841 2300 	strex	r3, r2, [r1]
 8008900:	61bb      	str	r3, [r7, #24]
   return(result);
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1e5      	bne.n	80088d4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2220      	movs	r2, #32
 800890c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2220      	movs	r2, #32
 8008914:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2220      	movs	r2, #32
 800891c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008928:	2303      	movs	r3, #3
 800892a:	e010      	b.n	800894e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	69da      	ldr	r2, [r3, #28]
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	4013      	ands	r3, r2
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	429a      	cmp	r2, r3
 800893a:	bf0c      	ite	eq
 800893c:	2301      	moveq	r3, #1
 800893e:	2300      	movne	r3, #0
 8008940:	b2db      	uxtb	r3, r3
 8008942:	461a      	mov	r2, r3
 8008944:	79fb      	ldrb	r3, [r7, #7]
 8008946:	429a      	cmp	r2, r3
 8008948:	f43f af46 	beq.w	80087d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3770      	adds	r7, #112	; 0x70
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
	...

08008958 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008958:	b480      	push	{r7}
 800895a:	b09d      	sub	sp, #116	; 0x74
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	4613      	mov	r3, r2
 8008964:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	68ba      	ldr	r2, [r7, #8]
 800896a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	88fa      	ldrh	r2, [r7, #6]
 8008970:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	88fa      	ldrh	r2, [r7, #6]
 8008978:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800898a:	d10e      	bne.n	80089aa <UART_Start_Receive_IT+0x52>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d105      	bne.n	80089a0 <UART_Start_Receive_IT+0x48>
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f240 12ff 	movw	r2, #511	; 0x1ff
 800899a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800899e:	e02d      	b.n	80089fc <UART_Start_Receive_IT+0xa4>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	22ff      	movs	r2, #255	; 0xff
 80089a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089a8:	e028      	b.n	80089fc <UART_Start_Receive_IT+0xa4>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10d      	bne.n	80089ce <UART_Start_Receive_IT+0x76>
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d104      	bne.n	80089c4 <UART_Start_Receive_IT+0x6c>
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	22ff      	movs	r2, #255	; 0xff
 80089be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089c2:	e01b      	b.n	80089fc <UART_Start_Receive_IT+0xa4>
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	227f      	movs	r2, #127	; 0x7f
 80089c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089cc:	e016      	b.n	80089fc <UART_Start_Receive_IT+0xa4>
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089d6:	d10d      	bne.n	80089f4 <UART_Start_Receive_IT+0x9c>
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d104      	bne.n	80089ea <UART_Start_Receive_IT+0x92>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	227f      	movs	r2, #127	; 0x7f
 80089e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089e8:	e008      	b.n	80089fc <UART_Start_Receive_IT+0xa4>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	223f      	movs	r2, #63	; 0x3f
 80089ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089f2:	e003      	b.n	80089fc <UART_Start_Receive_IT+0xa4>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2222      	movs	r2, #34	; 0x22
 8008a08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	3308      	adds	r3, #8
 8008a12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a16:	e853 3f00 	ldrex	r3, [r3]
 8008a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a1e:	f043 0301 	orr.w	r3, r3, #1
 8008a22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	3308      	adds	r3, #8
 8008a2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008a2c:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008a2e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a34:	e841 2300 	strex	r3, r2, [r1]
 8008a38:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1e5      	bne.n	8008a0c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a48:	d14d      	bne.n	8008ae6 <UART_Start_Receive_IT+0x18e>
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a50:	88fa      	ldrh	r2, [r7, #6]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d347      	bcc.n	8008ae6 <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a5e:	d107      	bne.n	8008a70 <UART_Start_Receive_IT+0x118>
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d103      	bne.n	8008a70 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	4a39      	ldr	r2, [pc, #228]	; (8008b50 <UART_Start_Receive_IT+0x1f8>)
 8008a6c:	671a      	str	r2, [r3, #112]	; 0x70
 8008a6e:	e002      	b.n	8008a76 <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	4a38      	ldr	r2, [pc, #224]	; (8008b54 <UART_Start_Receive_IT+0x1fc>)
 8008a74:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a86:	e853 3f00 	ldrex	r3, [r3]
 8008a8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a92:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	461a      	mov	r2, r3
 8008a9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a9e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008aa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008aa4:	e841 2300 	strex	r3, r2, [r1]
 8008aa8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1e6      	bne.n	8008a7e <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	3308      	adds	r3, #8
 8008ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aba:	e853 3f00 	ldrex	r3, [r3]
 8008abe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ac6:	667b      	str	r3, [r7, #100]	; 0x64
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	3308      	adds	r3, #8
 8008ace:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008ad0:	637a      	str	r2, [r7, #52]	; 0x34
 8008ad2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ad6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ad8:	e841 2300 	strex	r3, r2, [r1]
 8008adc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1e5      	bne.n	8008ab0 <UART_Start_Receive_IT+0x158>
 8008ae4:	e02c      	b.n	8008b40 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008aee:	d107      	bne.n	8008b00 <UART_Start_Receive_IT+0x1a8>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d103      	bne.n	8008b00 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	4a17      	ldr	r2, [pc, #92]	; (8008b58 <UART_Start_Receive_IT+0x200>)
 8008afc:	671a      	str	r2, [r3, #112]	; 0x70
 8008afe:	e002      	b.n	8008b06 <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	4a16      	ldr	r2, [pc, #88]	; (8008b5c <UART_Start_Receive_IT+0x204>)
 8008b04:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	e853 3f00 	ldrex	r3, [r3]
 8008b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008b22:	663b      	str	r3, [r7, #96]	; 0x60
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b2c:	623b      	str	r3, [r7, #32]
 8008b2e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b30:	69f9      	ldr	r1, [r7, #28]
 8008b32:	6a3a      	ldr	r2, [r7, #32]
 8008b34:	e841 2300 	strex	r3, r2, [r1]
 8008b38:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d1e6      	bne.n	8008b0e <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3774      	adds	r7, #116	; 0x74
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop
 8008b50:	08009269 	.word	0x08009269
 8008b54:	08008f71 	.word	0x08008f71
 8008b58:	08008e0f 	.word	0x08008e0f
 8008b5c:	08008caf 	.word	0x08008caf

08008b60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b095      	sub	sp, #84	; 0x54
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b70:	e853 3f00 	ldrex	r3, [r3]
 8008b74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	461a      	mov	r2, r3
 8008b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b86:	643b      	str	r3, [r7, #64]	; 0x40
 8008b88:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b8e:	e841 2300 	strex	r3, r2, [r1]
 8008b92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d1e6      	bne.n	8008b68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	3308      	adds	r3, #8
 8008ba0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba2:	6a3b      	ldr	r3, [r7, #32]
 8008ba4:	e853 3f00 	ldrex	r3, [r3]
 8008ba8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bb0:	f023 0301 	bic.w	r3, r3, #1
 8008bb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3308      	adds	r3, #8
 8008bbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bc6:	e841 2300 	strex	r3, r2, [r1]
 8008bca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1e3      	bne.n	8008b9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d118      	bne.n	8008c0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	e853 3f00 	ldrex	r3, [r3]
 8008be6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	f023 0310 	bic.w	r3, r3, #16
 8008bee:	647b      	str	r3, [r7, #68]	; 0x44
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bf8:	61bb      	str	r3, [r7, #24]
 8008bfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfc:	6979      	ldr	r1, [r7, #20]
 8008bfe:	69ba      	ldr	r2, [r7, #24]
 8008c00:	e841 2300 	strex	r3, r2, [r1]
 8008c04:	613b      	str	r3, [r7, #16]
   return(result);
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1e6      	bne.n	8008bda <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2220      	movs	r2, #32
 8008c10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008c20:	bf00      	nop
 8008c22:	3754      	adds	r7, #84	; 0x54
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f7ff fa90 	bl	8008170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c50:	bf00      	nop
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b088      	sub	sp, #32
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	e853 3f00 	ldrex	r3, [r3]
 8008c6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c74:	61fb      	str	r3, [r7, #28]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	61bb      	str	r3, [r7, #24]
 8008c80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c82:	6979      	ldr	r1, [r7, #20]
 8008c84:	69ba      	ldr	r2, [r7, #24]
 8008c86:	e841 2300 	strex	r3, r2, [r1]
 8008c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1e6      	bne.n	8008c60 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2220      	movs	r2, #32
 8008c96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f7f9 f93f 	bl	8001f24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ca6:	bf00      	nop
 8008ca8:	3720      	adds	r7, #32
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b096      	sub	sp, #88	; 0x58
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008cbc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cc6:	2b22      	cmp	r3, #34	; 0x22
 8008cc8:	f040 8095 	bne.w	8008df6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008cd6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008cda:	b2d9      	uxtb	r1, r3
 8008cdc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008ce0:	b2da      	uxtb	r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ce6:	400a      	ands	r2, r1
 8008ce8:	b2d2      	uxtb	r2, r2
 8008cea:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cf0:	1c5a      	adds	r2, r3, #1
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d178      	bne.n	8008e06 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1c:	e853 3f00 	ldrex	r3, [r3]
 8008d20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d28:	653b      	str	r3, [r7, #80]	; 0x50
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d32:	647b      	str	r3, [r7, #68]	; 0x44
 8008d34:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d3a:	e841 2300 	strex	r3, r2, [r1]
 8008d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1e6      	bne.n	8008d14 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	3308      	adds	r3, #8
 8008d4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d50:	e853 3f00 	ldrex	r3, [r3]
 8008d54:	623b      	str	r3, [r7, #32]
   return(result);
 8008d56:	6a3b      	ldr	r3, [r7, #32]
 8008d58:	f023 0301 	bic.w	r3, r3, #1
 8008d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	3308      	adds	r3, #8
 8008d64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d66:	633a      	str	r2, [r7, #48]	; 0x30
 8008d68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d6e:	e841 2300 	strex	r3, r2, [r1]
 8008d72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1e5      	bne.n	8008d46 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2220      	movs	r2, #32
 8008d7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d12e      	bne.n	8008dee <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	e853 3f00 	ldrex	r3, [r3]
 8008da2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f023 0310 	bic.w	r3, r3, #16
 8008daa:	64bb      	str	r3, [r7, #72]	; 0x48
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	461a      	mov	r2, r3
 8008db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008db4:	61fb      	str	r3, [r7, #28]
 8008db6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db8:	69b9      	ldr	r1, [r7, #24]
 8008dba:	69fa      	ldr	r2, [r7, #28]
 8008dbc:	e841 2300 	strex	r3, r2, [r1]
 8008dc0:	617b      	str	r3, [r7, #20]
   return(result);
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d1e6      	bne.n	8008d96 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	69db      	ldr	r3, [r3, #28]
 8008dce:	f003 0310 	and.w	r3, r3, #16
 8008dd2:	2b10      	cmp	r3, #16
 8008dd4:	d103      	bne.n	8008dde <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2210      	movs	r2, #16
 8008ddc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008de4:	4619      	mov	r1, r3
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7ff f9cc 	bl	8008184 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008dec:	e00b      	b.n	8008e06 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f7f9 f8a8 	bl	8001f44 <HAL_UART_RxCpltCallback>
}
 8008df4:	e007      	b.n	8008e06 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	699a      	ldr	r2, [r3, #24]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f042 0208 	orr.w	r2, r2, #8
 8008e04:	619a      	str	r2, [r3, #24]
}
 8008e06:	bf00      	nop
 8008e08:	3758      	adds	r7, #88	; 0x58
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b096      	sub	sp, #88	; 0x58
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e1c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e26:	2b22      	cmp	r3, #34	; 0x22
 8008e28:	f040 8095 	bne.w	8008f56 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e32:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e3a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008e3c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008e40:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008e44:	4013      	ands	r3, r2
 8008e46:	b29a      	uxth	r2, r3
 8008e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e4a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e50:	1c9a      	adds	r2, r3, #2
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	b29a      	uxth	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d178      	bne.n	8008f66 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e7c:	e853 3f00 	ldrex	r3, [r3]
 8008e80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e92:	643b      	str	r3, [r7, #64]	; 0x40
 8008e94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e9a:	e841 2300 	strex	r3, r2, [r1]
 8008e9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1e6      	bne.n	8008e74 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3308      	adds	r3, #8
 8008eac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eae:	6a3b      	ldr	r3, [r7, #32]
 8008eb0:	e853 3f00 	ldrex	r3, [r3]
 8008eb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	f023 0301 	bic.w	r3, r3, #1
 8008ebc:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3308      	adds	r3, #8
 8008ec4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ec6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ec8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ece:	e841 2300 	strex	r3, r2, [r1]
 8008ed2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1e5      	bne.n	8008ea6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2220      	movs	r2, #32
 8008ede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d12e      	bne.n	8008f4e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	e853 3f00 	ldrex	r3, [r3]
 8008f02:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	f023 0310 	bic.w	r3, r3, #16
 8008f0a:	647b      	str	r3, [r7, #68]	; 0x44
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	461a      	mov	r2, r3
 8008f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f14:	61bb      	str	r3, [r7, #24]
 8008f16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f18:	6979      	ldr	r1, [r7, #20]
 8008f1a:	69ba      	ldr	r2, [r7, #24]
 8008f1c:	e841 2300 	strex	r3, r2, [r1]
 8008f20:	613b      	str	r3, [r7, #16]
   return(result);
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d1e6      	bne.n	8008ef6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	69db      	ldr	r3, [r3, #28]
 8008f2e:	f003 0310 	and.w	r3, r3, #16
 8008f32:	2b10      	cmp	r3, #16
 8008f34:	d103      	bne.n	8008f3e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2210      	movs	r2, #16
 8008f3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f44:	4619      	mov	r1, r3
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f7ff f91c 	bl	8008184 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f4c:	e00b      	b.n	8008f66 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7f8 fff8 	bl	8001f44 <HAL_UART_RxCpltCallback>
}
 8008f54:	e007      	b.n	8008f66 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	699a      	ldr	r2, [r3, #24]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f042 0208 	orr.w	r2, r2, #8
 8008f64:	619a      	str	r2, [r3, #24]
}
 8008f66:	bf00      	nop
 8008f68:	3758      	adds	r7, #88	; 0x58
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
	...

08008f70 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b0a6      	sub	sp, #152	; 0x98
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f7e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	69db      	ldr	r3, [r3, #28]
 8008f88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fa6:	2b22      	cmp	r3, #34	; 0x22
 8008fa8:	f040 814f 	bne.w	800924a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008fb2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008fb6:	e0f6      	b.n	80091a6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbe:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008fc2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008fc6:	b2d9      	uxtb	r1, r3
 8008fc8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008fcc:	b2da      	uxtb	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fd2:	400a      	ands	r2, r1
 8008fd4:	b2d2      	uxtb	r2, r2
 8008fd6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fdc:	1c5a      	adds	r2, r3, #1
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	3b01      	subs	r3, #1
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	69db      	ldr	r3, [r3, #28]
 8008ffa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008ffe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009002:	f003 0307 	and.w	r3, r3, #7
 8009006:	2b00      	cmp	r3, #0
 8009008:	d053      	beq.n	80090b2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800900a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800900e:	f003 0301 	and.w	r3, r3, #1
 8009012:	2b00      	cmp	r3, #0
 8009014:	d011      	beq.n	800903a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009016:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800901a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00b      	beq.n	800903a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2201      	movs	r2, #1
 8009028:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009030:	f043 0201 	orr.w	r2, r3, #1
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800903a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800903e:	f003 0302 	and.w	r3, r3, #2
 8009042:	2b00      	cmp	r3, #0
 8009044:	d011      	beq.n	800906a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009046:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800904a:	f003 0301 	and.w	r3, r3, #1
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00b      	beq.n	800906a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2202      	movs	r2, #2
 8009058:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009060:	f043 0204 	orr.w	r2, r3, #4
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800906a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800906e:	f003 0304 	and.w	r3, r3, #4
 8009072:	2b00      	cmp	r3, #0
 8009074:	d011      	beq.n	800909a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009076:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800907a:	f003 0301 	and.w	r3, r3, #1
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00b      	beq.n	800909a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2204      	movs	r2, #4
 8009088:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009090:	f043 0202 	orr.w	r2, r3, #2
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d006      	beq.n	80090b2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f7ff f863 	bl	8008170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d173      	bne.n	80091a6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090c6:	e853 3f00 	ldrex	r3, [r3]
 80090ca:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80090cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	461a      	mov	r2, r3
 80090dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80090e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80090e2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80090e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80090e8:	e841 2300 	strex	r3, r2, [r1]
 80090ec:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80090ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1e4      	bne.n	80090be <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	3308      	adds	r3, #8
 80090fa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090fe:	e853 3f00 	ldrex	r3, [r3]
 8009102:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800910a:	f023 0301 	bic.w	r3, r3, #1
 800910e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	3308      	adds	r3, #8
 8009116:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009118:	657a      	str	r2, [r7, #84]	; 0x54
 800911a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800911e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009120:	e841 2300 	strex	r3, r2, [r1]
 8009124:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1e3      	bne.n	80090f4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2220      	movs	r2, #32
 8009130:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800913e:	2b01      	cmp	r3, #1
 8009140:	d12e      	bne.n	80091a0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009150:	e853 3f00 	ldrex	r3, [r3]
 8009154:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009158:	f023 0310 	bic.w	r3, r3, #16
 800915c:	67bb      	str	r3, [r7, #120]	; 0x78
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	461a      	mov	r2, r3
 8009164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009166:	643b      	str	r3, [r7, #64]	; 0x40
 8009168:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800916c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800916e:	e841 2300 	strex	r3, r2, [r1]
 8009172:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1e6      	bne.n	8009148 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	69db      	ldr	r3, [r3, #28]
 8009180:	f003 0310 	and.w	r3, r3, #16
 8009184:	2b10      	cmp	r3, #16
 8009186:	d103      	bne.n	8009190 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2210      	movs	r2, #16
 800918e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009196:	4619      	mov	r1, r3
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f7fe fff3 	bl	8008184 <HAL_UARTEx_RxEventCallback>
 800919e:	e002      	b.n	80091a6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f7f8 fecf 	bl	8001f44 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d006      	beq.n	80091bc <UART_RxISR_8BIT_FIFOEN+0x24c>
 80091ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80091b2:	f003 0320 	and.w	r3, r3, #32
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f47f aefe 	bne.w	8008fb8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091c2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80091c6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d045      	beq.n	800925a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80091d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80091d8:	429a      	cmp	r2, r3
 80091da:	d23e      	bcs.n	800925a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	3308      	adds	r3, #8
 80091e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e4:	6a3b      	ldr	r3, [r7, #32]
 80091e6:	e853 3f00 	ldrex	r3, [r3]
 80091ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091f2:	673b      	str	r3, [r7, #112]	; 0x70
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	3308      	adds	r3, #8
 80091fa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80091fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009204:	e841 2300 	strex	r3, r2, [r1]
 8009208:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800920a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920c:	2b00      	cmp	r3, #0
 800920e:	d1e5      	bne.n	80091dc <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a14      	ldr	r2, [pc, #80]	; (8009264 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009214:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	e853 3f00 	ldrex	r3, [r3]
 8009222:	60bb      	str	r3, [r7, #8]
   return(result);
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	f043 0320 	orr.w	r3, r3, #32
 800922a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	461a      	mov	r2, r3
 8009232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009234:	61bb      	str	r3, [r7, #24]
 8009236:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009238:	6979      	ldr	r1, [r7, #20]
 800923a:	69ba      	ldr	r2, [r7, #24]
 800923c:	e841 2300 	strex	r3, r2, [r1]
 8009240:	613b      	str	r3, [r7, #16]
   return(result);
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d1e6      	bne.n	8009216 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009248:	e007      	b.n	800925a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	699a      	ldr	r2, [r3, #24]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f042 0208 	orr.w	r2, r2, #8
 8009258:	619a      	str	r2, [r3, #24]
}
 800925a:	bf00      	nop
 800925c:	3798      	adds	r7, #152	; 0x98
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	08008caf 	.word	0x08008caf

08009268 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b0a8      	sub	sp, #160	; 0xa0
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009276:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	69db      	ldr	r3, [r3, #28]
 8009280:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800929e:	2b22      	cmp	r3, #34	; 0x22
 80092a0:	f040 8153 	bne.w	800954a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80092aa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80092ae:	e0fa      	b.n	80094a6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80092c2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80092c6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80092ca:	4013      	ands	r3, r2
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d8:	1c9a      	adds	r2, r3, #2
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	3b01      	subs	r3, #1
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	69db      	ldr	r3, [r3, #28]
 80092f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80092fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092fe:	f003 0307 	and.w	r3, r3, #7
 8009302:	2b00      	cmp	r3, #0
 8009304:	d053      	beq.n	80093ae <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009306:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800930a:	f003 0301 	and.w	r3, r3, #1
 800930e:	2b00      	cmp	r3, #0
 8009310:	d011      	beq.n	8009336 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009312:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00b      	beq.n	8009336 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2201      	movs	r2, #1
 8009324:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800932c:	f043 0201 	orr.w	r2, r3, #1
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009336:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800933a:	f003 0302 	and.w	r3, r3, #2
 800933e:	2b00      	cmp	r3, #0
 8009340:	d011      	beq.n	8009366 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009342:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009346:	f003 0301 	and.w	r3, r3, #1
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00b      	beq.n	8009366 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2202      	movs	r2, #2
 8009354:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800935c:	f043 0204 	orr.w	r2, r3, #4
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009366:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800936a:	f003 0304 	and.w	r3, r3, #4
 800936e:	2b00      	cmp	r3, #0
 8009370:	d011      	beq.n	8009396 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009372:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009376:	f003 0301 	and.w	r3, r3, #1
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00b      	beq.n	8009396 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2204      	movs	r2, #4
 8009384:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800938c:	f043 0202 	orr.w	r2, r3, #2
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800939c:	2b00      	cmp	r3, #0
 800939e:	d006      	beq.n	80093ae <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f7fe fee5 	bl	8008170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d175      	bne.n	80094a6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093c2:	e853 3f00 	ldrex	r3, [r3]
 80093c6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80093c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	461a      	mov	r2, r3
 80093d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80093dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80093de:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80093e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80093e4:	e841 2300 	strex	r3, r2, [r1]
 80093e8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80093ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d1e4      	bne.n	80093ba <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	3308      	adds	r3, #8
 80093f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093fa:	e853 3f00 	ldrex	r3, [r3]
 80093fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009406:	f023 0301 	bic.w	r3, r3, #1
 800940a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	3308      	adds	r3, #8
 8009414:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009418:	65ba      	str	r2, [r7, #88]	; 0x58
 800941a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800941e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009420:	e841 2300 	strex	r3, r2, [r1]
 8009424:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1e1      	bne.n	80093f0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2220      	movs	r2, #32
 8009430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800943e:	2b01      	cmp	r3, #1
 8009440:	d12e      	bne.n	80094a0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009450:	e853 3f00 	ldrex	r3, [r3]
 8009454:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009458:	f023 0310 	bic.w	r3, r3, #16
 800945c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	461a      	mov	r2, r3
 8009464:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009466:	647b      	str	r3, [r7, #68]	; 0x44
 8009468:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800946c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800946e:	e841 2300 	strex	r3, r2, [r1]
 8009472:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1e6      	bne.n	8009448 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	69db      	ldr	r3, [r3, #28]
 8009480:	f003 0310 	and.w	r3, r3, #16
 8009484:	2b10      	cmp	r3, #16
 8009486:	d103      	bne.n	8009490 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2210      	movs	r2, #16
 800948e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009496:	4619      	mov	r1, r3
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f7fe fe73 	bl	8008184 <HAL_UARTEx_RxEventCallback>
 800949e:	e002      	b.n	80094a6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f7f8 fd4f 	bl	8001f44 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094a6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d006      	beq.n	80094bc <UART_RxISR_16BIT_FIFOEN+0x254>
 80094ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80094b2:	f003 0320 	and.w	r3, r3, #32
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f47f aefa 	bne.w	80092b0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094c2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80094c6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d045      	beq.n	800955a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80094d4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80094d8:	429a      	cmp	r2, r3
 80094da:	d23e      	bcs.n	800955a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	3308      	adds	r3, #8
 80094e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e6:	e853 3f00 	ldrex	r3, [r3]
 80094ea:	623b      	str	r3, [r7, #32]
   return(result);
 80094ec:	6a3b      	ldr	r3, [r7, #32]
 80094ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094f2:	677b      	str	r3, [r7, #116]	; 0x74
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	3308      	adds	r3, #8
 80094fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80094fc:	633a      	str	r2, [r7, #48]	; 0x30
 80094fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009500:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009502:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009504:	e841 2300 	strex	r3, r2, [r1]
 8009508:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800950a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950c:	2b00      	cmp	r3, #0
 800950e:	d1e5      	bne.n	80094dc <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a14      	ldr	r2, [pc, #80]	; (8009564 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009514:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	e853 3f00 	ldrex	r3, [r3]
 8009522:	60fb      	str	r3, [r7, #12]
   return(result);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f043 0320 	orr.w	r3, r3, #32
 800952a:	673b      	str	r3, [r7, #112]	; 0x70
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	461a      	mov	r2, r3
 8009532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009534:	61fb      	str	r3, [r7, #28]
 8009536:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009538:	69b9      	ldr	r1, [r7, #24]
 800953a:	69fa      	ldr	r2, [r7, #28]
 800953c:	e841 2300 	strex	r3, r2, [r1]
 8009540:	617b      	str	r3, [r7, #20]
   return(result);
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1e6      	bne.n	8009516 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009548:	e007      	b.n	800955a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	699a      	ldr	r2, [r3, #24]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f042 0208 	orr.w	r2, r2, #8
 8009558:	619a      	str	r2, [r3, #24]
}
 800955a:	bf00      	nop
 800955c:	37a0      	adds	r7, #160	; 0xa0
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	08008e0f 	.word	0x08008e0f

08009568 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009570:	bf00      	nop
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009584:	bf00      	nop
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009598:	bf00      	nop
 800959a:	370c      	adds	r7, #12
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b085      	sub	sp, #20
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d101      	bne.n	80095ba <HAL_UARTEx_DisableFifoMode+0x16>
 80095b6:	2302      	movs	r3, #2
 80095b8:	e027      	b.n	800960a <HAL_UARTEx_DisableFifoMode+0x66>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2224      	movs	r2, #36	; 0x24
 80095c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f022 0201 	bic.w	r2, r2, #1
 80095e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80095e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2220      	movs	r2, #32
 80095fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3714      	adds	r7, #20
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr

08009616 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b084      	sub	sp, #16
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
 800961e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009626:	2b01      	cmp	r3, #1
 8009628:	d101      	bne.n	800962e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800962a:	2302      	movs	r3, #2
 800962c:	e02d      	b.n	800968a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2201      	movs	r2, #1
 8009632:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2224      	movs	r2, #36	; 0x24
 800963a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f022 0201 	bic.w	r2, r2, #1
 8009654:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	683a      	ldr	r2, [r7, #0]
 8009666:	430a      	orrs	r2, r1
 8009668:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f850 	bl	8009710 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2220      	movs	r2, #32
 800967c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009692:	b580      	push	{r7, lr}
 8009694:	b084      	sub	sp, #16
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
 800969a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d101      	bne.n	80096aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80096a6:	2302      	movs	r3, #2
 80096a8:	e02d      	b.n	8009706 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2201      	movs	r2, #1
 80096ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2224      	movs	r2, #36	; 0x24
 80096b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f022 0201 	bic.w	r2, r2, #1
 80096d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	683a      	ldr	r2, [r7, #0]
 80096e2:	430a      	orrs	r2, r1
 80096e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f812 	bl	8009710 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2220      	movs	r2, #32
 80096f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
	...

08009710 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009710:	b480      	push	{r7}
 8009712:	b085      	sub	sp, #20
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800971c:	2b00      	cmp	r3, #0
 800971e:	d108      	bne.n	8009732 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009730:	e031      	b.n	8009796 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009732:	2308      	movs	r3, #8
 8009734:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009736:	2308      	movs	r3, #8
 8009738:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	0e5b      	lsrs	r3, r3, #25
 8009742:	b2db      	uxtb	r3, r3
 8009744:	f003 0307 	and.w	r3, r3, #7
 8009748:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	0f5b      	lsrs	r3, r3, #29
 8009752:	b2db      	uxtb	r3, r3
 8009754:	f003 0307 	and.w	r3, r3, #7
 8009758:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800975a:	7bbb      	ldrb	r3, [r7, #14]
 800975c:	7b3a      	ldrb	r2, [r7, #12]
 800975e:	4911      	ldr	r1, [pc, #68]	; (80097a4 <UARTEx_SetNbDataToProcess+0x94>)
 8009760:	5c8a      	ldrb	r2, [r1, r2]
 8009762:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009766:	7b3a      	ldrb	r2, [r7, #12]
 8009768:	490f      	ldr	r1, [pc, #60]	; (80097a8 <UARTEx_SetNbDataToProcess+0x98>)
 800976a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800976c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009770:	b29a      	uxth	r2, r3
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009778:	7bfb      	ldrb	r3, [r7, #15]
 800977a:	7b7a      	ldrb	r2, [r7, #13]
 800977c:	4909      	ldr	r1, [pc, #36]	; (80097a4 <UARTEx_SetNbDataToProcess+0x94>)
 800977e:	5c8a      	ldrb	r2, [r1, r2]
 8009780:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009784:	7b7a      	ldrb	r2, [r7, #13]
 8009786:	4908      	ldr	r1, [pc, #32]	; (80097a8 <UARTEx_SetNbDataToProcess+0x98>)
 8009788:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800978a:	fb93 f3f2 	sdiv	r3, r3, r2
 800978e:	b29a      	uxth	r2, r3
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009796:	bf00      	nop
 8009798:	3714      	adds	r7, #20
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	0800cad0 	.word	0x0800cad0
 80097a8:	0800cad8 	.word	0x0800cad8

080097ac <__errno>:
 80097ac:	4b01      	ldr	r3, [pc, #4]	; (80097b4 <__errno+0x8>)
 80097ae:	6818      	ldr	r0, [r3, #0]
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop
 80097b4:	20000040 	.word	0x20000040

080097b8 <__libc_init_array>:
 80097b8:	b570      	push	{r4, r5, r6, lr}
 80097ba:	4d0d      	ldr	r5, [pc, #52]	; (80097f0 <__libc_init_array+0x38>)
 80097bc:	4c0d      	ldr	r4, [pc, #52]	; (80097f4 <__libc_init_array+0x3c>)
 80097be:	1b64      	subs	r4, r4, r5
 80097c0:	10a4      	asrs	r4, r4, #2
 80097c2:	2600      	movs	r6, #0
 80097c4:	42a6      	cmp	r6, r4
 80097c6:	d109      	bne.n	80097dc <__libc_init_array+0x24>
 80097c8:	4d0b      	ldr	r5, [pc, #44]	; (80097f8 <__libc_init_array+0x40>)
 80097ca:	4c0c      	ldr	r4, [pc, #48]	; (80097fc <__libc_init_array+0x44>)
 80097cc:	f002 ff04 	bl	800c5d8 <_init>
 80097d0:	1b64      	subs	r4, r4, r5
 80097d2:	10a4      	asrs	r4, r4, #2
 80097d4:	2600      	movs	r6, #0
 80097d6:	42a6      	cmp	r6, r4
 80097d8:	d105      	bne.n	80097e6 <__libc_init_array+0x2e>
 80097da:	bd70      	pop	{r4, r5, r6, pc}
 80097dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80097e0:	4798      	blx	r3
 80097e2:	3601      	adds	r6, #1
 80097e4:	e7ee      	b.n	80097c4 <__libc_init_array+0xc>
 80097e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80097ea:	4798      	blx	r3
 80097ec:	3601      	adds	r6, #1
 80097ee:	e7f2      	b.n	80097d6 <__libc_init_array+0x1e>
 80097f0:	0800cec4 	.word	0x0800cec4
 80097f4:	0800cec4 	.word	0x0800cec4
 80097f8:	0800cec4 	.word	0x0800cec4
 80097fc:	0800cec8 	.word	0x0800cec8

08009800 <memset>:
 8009800:	4402      	add	r2, r0
 8009802:	4603      	mov	r3, r0
 8009804:	4293      	cmp	r3, r2
 8009806:	d100      	bne.n	800980a <memset+0xa>
 8009808:	4770      	bx	lr
 800980a:	f803 1b01 	strb.w	r1, [r3], #1
 800980e:	e7f9      	b.n	8009804 <memset+0x4>

08009810 <__cvt>:
 8009810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009814:	ec55 4b10 	vmov	r4, r5, d0
 8009818:	2d00      	cmp	r5, #0
 800981a:	460e      	mov	r6, r1
 800981c:	4619      	mov	r1, r3
 800981e:	462b      	mov	r3, r5
 8009820:	bfbb      	ittet	lt
 8009822:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009826:	461d      	movlt	r5, r3
 8009828:	2300      	movge	r3, #0
 800982a:	232d      	movlt	r3, #45	; 0x2d
 800982c:	700b      	strb	r3, [r1, #0]
 800982e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009830:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009834:	4691      	mov	r9, r2
 8009836:	f023 0820 	bic.w	r8, r3, #32
 800983a:	bfbc      	itt	lt
 800983c:	4622      	movlt	r2, r4
 800983e:	4614      	movlt	r4, r2
 8009840:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009844:	d005      	beq.n	8009852 <__cvt+0x42>
 8009846:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800984a:	d100      	bne.n	800984e <__cvt+0x3e>
 800984c:	3601      	adds	r6, #1
 800984e:	2102      	movs	r1, #2
 8009850:	e000      	b.n	8009854 <__cvt+0x44>
 8009852:	2103      	movs	r1, #3
 8009854:	ab03      	add	r3, sp, #12
 8009856:	9301      	str	r3, [sp, #4]
 8009858:	ab02      	add	r3, sp, #8
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	ec45 4b10 	vmov	d0, r4, r5
 8009860:	4653      	mov	r3, sl
 8009862:	4632      	mov	r2, r6
 8009864:	f000 fcec 	bl	800a240 <_dtoa_r>
 8009868:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800986c:	4607      	mov	r7, r0
 800986e:	d102      	bne.n	8009876 <__cvt+0x66>
 8009870:	f019 0f01 	tst.w	r9, #1
 8009874:	d022      	beq.n	80098bc <__cvt+0xac>
 8009876:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800987a:	eb07 0906 	add.w	r9, r7, r6
 800987e:	d110      	bne.n	80098a2 <__cvt+0x92>
 8009880:	783b      	ldrb	r3, [r7, #0]
 8009882:	2b30      	cmp	r3, #48	; 0x30
 8009884:	d10a      	bne.n	800989c <__cvt+0x8c>
 8009886:	2200      	movs	r2, #0
 8009888:	2300      	movs	r3, #0
 800988a:	4620      	mov	r0, r4
 800988c:	4629      	mov	r1, r5
 800988e:	f7f7 f903 	bl	8000a98 <__aeabi_dcmpeq>
 8009892:	b918      	cbnz	r0, 800989c <__cvt+0x8c>
 8009894:	f1c6 0601 	rsb	r6, r6, #1
 8009898:	f8ca 6000 	str.w	r6, [sl]
 800989c:	f8da 3000 	ldr.w	r3, [sl]
 80098a0:	4499      	add	r9, r3
 80098a2:	2200      	movs	r2, #0
 80098a4:	2300      	movs	r3, #0
 80098a6:	4620      	mov	r0, r4
 80098a8:	4629      	mov	r1, r5
 80098aa:	f7f7 f8f5 	bl	8000a98 <__aeabi_dcmpeq>
 80098ae:	b108      	cbz	r0, 80098b4 <__cvt+0xa4>
 80098b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80098b4:	2230      	movs	r2, #48	; 0x30
 80098b6:	9b03      	ldr	r3, [sp, #12]
 80098b8:	454b      	cmp	r3, r9
 80098ba:	d307      	bcc.n	80098cc <__cvt+0xbc>
 80098bc:	9b03      	ldr	r3, [sp, #12]
 80098be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098c0:	1bdb      	subs	r3, r3, r7
 80098c2:	4638      	mov	r0, r7
 80098c4:	6013      	str	r3, [r2, #0]
 80098c6:	b004      	add	sp, #16
 80098c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098cc:	1c59      	adds	r1, r3, #1
 80098ce:	9103      	str	r1, [sp, #12]
 80098d0:	701a      	strb	r2, [r3, #0]
 80098d2:	e7f0      	b.n	80098b6 <__cvt+0xa6>

080098d4 <__exponent>:
 80098d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098d6:	4603      	mov	r3, r0
 80098d8:	2900      	cmp	r1, #0
 80098da:	bfb8      	it	lt
 80098dc:	4249      	neglt	r1, r1
 80098de:	f803 2b02 	strb.w	r2, [r3], #2
 80098e2:	bfb4      	ite	lt
 80098e4:	222d      	movlt	r2, #45	; 0x2d
 80098e6:	222b      	movge	r2, #43	; 0x2b
 80098e8:	2909      	cmp	r1, #9
 80098ea:	7042      	strb	r2, [r0, #1]
 80098ec:	dd2a      	ble.n	8009944 <__exponent+0x70>
 80098ee:	f10d 0407 	add.w	r4, sp, #7
 80098f2:	46a4      	mov	ip, r4
 80098f4:	270a      	movs	r7, #10
 80098f6:	46a6      	mov	lr, r4
 80098f8:	460a      	mov	r2, r1
 80098fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80098fe:	fb07 1516 	mls	r5, r7, r6, r1
 8009902:	3530      	adds	r5, #48	; 0x30
 8009904:	2a63      	cmp	r2, #99	; 0x63
 8009906:	f104 34ff 	add.w	r4, r4, #4294967295
 800990a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800990e:	4631      	mov	r1, r6
 8009910:	dcf1      	bgt.n	80098f6 <__exponent+0x22>
 8009912:	3130      	adds	r1, #48	; 0x30
 8009914:	f1ae 0502 	sub.w	r5, lr, #2
 8009918:	f804 1c01 	strb.w	r1, [r4, #-1]
 800991c:	1c44      	adds	r4, r0, #1
 800991e:	4629      	mov	r1, r5
 8009920:	4561      	cmp	r1, ip
 8009922:	d30a      	bcc.n	800993a <__exponent+0x66>
 8009924:	f10d 0209 	add.w	r2, sp, #9
 8009928:	eba2 020e 	sub.w	r2, r2, lr
 800992c:	4565      	cmp	r5, ip
 800992e:	bf88      	it	hi
 8009930:	2200      	movhi	r2, #0
 8009932:	4413      	add	r3, r2
 8009934:	1a18      	subs	r0, r3, r0
 8009936:	b003      	add	sp, #12
 8009938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800993a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800993e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009942:	e7ed      	b.n	8009920 <__exponent+0x4c>
 8009944:	2330      	movs	r3, #48	; 0x30
 8009946:	3130      	adds	r1, #48	; 0x30
 8009948:	7083      	strb	r3, [r0, #2]
 800994a:	70c1      	strb	r1, [r0, #3]
 800994c:	1d03      	adds	r3, r0, #4
 800994e:	e7f1      	b.n	8009934 <__exponent+0x60>

08009950 <_printf_float>:
 8009950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009954:	ed2d 8b02 	vpush	{d8}
 8009958:	b08d      	sub	sp, #52	; 0x34
 800995a:	460c      	mov	r4, r1
 800995c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009960:	4616      	mov	r6, r2
 8009962:	461f      	mov	r7, r3
 8009964:	4605      	mov	r5, r0
 8009966:	f001 fa59 	bl	800ae1c <_localeconv_r>
 800996a:	f8d0 a000 	ldr.w	sl, [r0]
 800996e:	4650      	mov	r0, sl
 8009970:	f7f6 fc10 	bl	8000194 <strlen>
 8009974:	2300      	movs	r3, #0
 8009976:	930a      	str	r3, [sp, #40]	; 0x28
 8009978:	6823      	ldr	r3, [r4, #0]
 800997a:	9305      	str	r3, [sp, #20]
 800997c:	f8d8 3000 	ldr.w	r3, [r8]
 8009980:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009984:	3307      	adds	r3, #7
 8009986:	f023 0307 	bic.w	r3, r3, #7
 800998a:	f103 0208 	add.w	r2, r3, #8
 800998e:	f8c8 2000 	str.w	r2, [r8]
 8009992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009996:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800999a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800999e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80099a2:	9307      	str	r3, [sp, #28]
 80099a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80099a8:	ee08 0a10 	vmov	s16, r0
 80099ac:	4b9f      	ldr	r3, [pc, #636]	; (8009c2c <_printf_float+0x2dc>)
 80099ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099b2:	f04f 32ff 	mov.w	r2, #4294967295
 80099b6:	f7f7 f8a1 	bl	8000afc <__aeabi_dcmpun>
 80099ba:	bb88      	cbnz	r0, 8009a20 <_printf_float+0xd0>
 80099bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099c0:	4b9a      	ldr	r3, [pc, #616]	; (8009c2c <_printf_float+0x2dc>)
 80099c2:	f04f 32ff 	mov.w	r2, #4294967295
 80099c6:	f7f7 f87b 	bl	8000ac0 <__aeabi_dcmple>
 80099ca:	bb48      	cbnz	r0, 8009a20 <_printf_float+0xd0>
 80099cc:	2200      	movs	r2, #0
 80099ce:	2300      	movs	r3, #0
 80099d0:	4640      	mov	r0, r8
 80099d2:	4649      	mov	r1, r9
 80099d4:	f7f7 f86a 	bl	8000aac <__aeabi_dcmplt>
 80099d8:	b110      	cbz	r0, 80099e0 <_printf_float+0x90>
 80099da:	232d      	movs	r3, #45	; 0x2d
 80099dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099e0:	4b93      	ldr	r3, [pc, #588]	; (8009c30 <_printf_float+0x2e0>)
 80099e2:	4894      	ldr	r0, [pc, #592]	; (8009c34 <_printf_float+0x2e4>)
 80099e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80099e8:	bf94      	ite	ls
 80099ea:	4698      	movls	r8, r3
 80099ec:	4680      	movhi	r8, r0
 80099ee:	2303      	movs	r3, #3
 80099f0:	6123      	str	r3, [r4, #16]
 80099f2:	9b05      	ldr	r3, [sp, #20]
 80099f4:	f023 0204 	bic.w	r2, r3, #4
 80099f8:	6022      	str	r2, [r4, #0]
 80099fa:	f04f 0900 	mov.w	r9, #0
 80099fe:	9700      	str	r7, [sp, #0]
 8009a00:	4633      	mov	r3, r6
 8009a02:	aa0b      	add	r2, sp, #44	; 0x2c
 8009a04:	4621      	mov	r1, r4
 8009a06:	4628      	mov	r0, r5
 8009a08:	f000 f9d8 	bl	8009dbc <_printf_common>
 8009a0c:	3001      	adds	r0, #1
 8009a0e:	f040 8090 	bne.w	8009b32 <_printf_float+0x1e2>
 8009a12:	f04f 30ff 	mov.w	r0, #4294967295
 8009a16:	b00d      	add	sp, #52	; 0x34
 8009a18:	ecbd 8b02 	vpop	{d8}
 8009a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a20:	4642      	mov	r2, r8
 8009a22:	464b      	mov	r3, r9
 8009a24:	4640      	mov	r0, r8
 8009a26:	4649      	mov	r1, r9
 8009a28:	f7f7 f868 	bl	8000afc <__aeabi_dcmpun>
 8009a2c:	b140      	cbz	r0, 8009a40 <_printf_float+0xf0>
 8009a2e:	464b      	mov	r3, r9
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	bfbc      	itt	lt
 8009a34:	232d      	movlt	r3, #45	; 0x2d
 8009a36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009a3a:	487f      	ldr	r0, [pc, #508]	; (8009c38 <_printf_float+0x2e8>)
 8009a3c:	4b7f      	ldr	r3, [pc, #508]	; (8009c3c <_printf_float+0x2ec>)
 8009a3e:	e7d1      	b.n	80099e4 <_printf_float+0x94>
 8009a40:	6863      	ldr	r3, [r4, #4]
 8009a42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009a46:	9206      	str	r2, [sp, #24]
 8009a48:	1c5a      	adds	r2, r3, #1
 8009a4a:	d13f      	bne.n	8009acc <_printf_float+0x17c>
 8009a4c:	2306      	movs	r3, #6
 8009a4e:	6063      	str	r3, [r4, #4]
 8009a50:	9b05      	ldr	r3, [sp, #20]
 8009a52:	6861      	ldr	r1, [r4, #4]
 8009a54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009a58:	2300      	movs	r3, #0
 8009a5a:	9303      	str	r3, [sp, #12]
 8009a5c:	ab0a      	add	r3, sp, #40	; 0x28
 8009a5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009a62:	ab09      	add	r3, sp, #36	; 0x24
 8009a64:	ec49 8b10 	vmov	d0, r8, r9
 8009a68:	9300      	str	r3, [sp, #0]
 8009a6a:	6022      	str	r2, [r4, #0]
 8009a6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a70:	4628      	mov	r0, r5
 8009a72:	f7ff fecd 	bl	8009810 <__cvt>
 8009a76:	9b06      	ldr	r3, [sp, #24]
 8009a78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a7a:	2b47      	cmp	r3, #71	; 0x47
 8009a7c:	4680      	mov	r8, r0
 8009a7e:	d108      	bne.n	8009a92 <_printf_float+0x142>
 8009a80:	1cc8      	adds	r0, r1, #3
 8009a82:	db02      	blt.n	8009a8a <_printf_float+0x13a>
 8009a84:	6863      	ldr	r3, [r4, #4]
 8009a86:	4299      	cmp	r1, r3
 8009a88:	dd41      	ble.n	8009b0e <_printf_float+0x1be>
 8009a8a:	f1ab 0b02 	sub.w	fp, fp, #2
 8009a8e:	fa5f fb8b 	uxtb.w	fp, fp
 8009a92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a96:	d820      	bhi.n	8009ada <_printf_float+0x18a>
 8009a98:	3901      	subs	r1, #1
 8009a9a:	465a      	mov	r2, fp
 8009a9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009aa0:	9109      	str	r1, [sp, #36]	; 0x24
 8009aa2:	f7ff ff17 	bl	80098d4 <__exponent>
 8009aa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009aa8:	1813      	adds	r3, r2, r0
 8009aaa:	2a01      	cmp	r2, #1
 8009aac:	4681      	mov	r9, r0
 8009aae:	6123      	str	r3, [r4, #16]
 8009ab0:	dc02      	bgt.n	8009ab8 <_printf_float+0x168>
 8009ab2:	6822      	ldr	r2, [r4, #0]
 8009ab4:	07d2      	lsls	r2, r2, #31
 8009ab6:	d501      	bpl.n	8009abc <_printf_float+0x16c>
 8009ab8:	3301      	adds	r3, #1
 8009aba:	6123      	str	r3, [r4, #16]
 8009abc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d09c      	beq.n	80099fe <_printf_float+0xae>
 8009ac4:	232d      	movs	r3, #45	; 0x2d
 8009ac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009aca:	e798      	b.n	80099fe <_printf_float+0xae>
 8009acc:	9a06      	ldr	r2, [sp, #24]
 8009ace:	2a47      	cmp	r2, #71	; 0x47
 8009ad0:	d1be      	bne.n	8009a50 <_printf_float+0x100>
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d1bc      	bne.n	8009a50 <_printf_float+0x100>
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e7b9      	b.n	8009a4e <_printf_float+0xfe>
 8009ada:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009ade:	d118      	bne.n	8009b12 <_printf_float+0x1c2>
 8009ae0:	2900      	cmp	r1, #0
 8009ae2:	6863      	ldr	r3, [r4, #4]
 8009ae4:	dd0b      	ble.n	8009afe <_printf_float+0x1ae>
 8009ae6:	6121      	str	r1, [r4, #16]
 8009ae8:	b913      	cbnz	r3, 8009af0 <_printf_float+0x1a0>
 8009aea:	6822      	ldr	r2, [r4, #0]
 8009aec:	07d0      	lsls	r0, r2, #31
 8009aee:	d502      	bpl.n	8009af6 <_printf_float+0x1a6>
 8009af0:	3301      	adds	r3, #1
 8009af2:	440b      	add	r3, r1
 8009af4:	6123      	str	r3, [r4, #16]
 8009af6:	65a1      	str	r1, [r4, #88]	; 0x58
 8009af8:	f04f 0900 	mov.w	r9, #0
 8009afc:	e7de      	b.n	8009abc <_printf_float+0x16c>
 8009afe:	b913      	cbnz	r3, 8009b06 <_printf_float+0x1b6>
 8009b00:	6822      	ldr	r2, [r4, #0]
 8009b02:	07d2      	lsls	r2, r2, #31
 8009b04:	d501      	bpl.n	8009b0a <_printf_float+0x1ba>
 8009b06:	3302      	adds	r3, #2
 8009b08:	e7f4      	b.n	8009af4 <_printf_float+0x1a4>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e7f2      	b.n	8009af4 <_printf_float+0x1a4>
 8009b0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b14:	4299      	cmp	r1, r3
 8009b16:	db05      	blt.n	8009b24 <_printf_float+0x1d4>
 8009b18:	6823      	ldr	r3, [r4, #0]
 8009b1a:	6121      	str	r1, [r4, #16]
 8009b1c:	07d8      	lsls	r0, r3, #31
 8009b1e:	d5ea      	bpl.n	8009af6 <_printf_float+0x1a6>
 8009b20:	1c4b      	adds	r3, r1, #1
 8009b22:	e7e7      	b.n	8009af4 <_printf_float+0x1a4>
 8009b24:	2900      	cmp	r1, #0
 8009b26:	bfd4      	ite	le
 8009b28:	f1c1 0202 	rsble	r2, r1, #2
 8009b2c:	2201      	movgt	r2, #1
 8009b2e:	4413      	add	r3, r2
 8009b30:	e7e0      	b.n	8009af4 <_printf_float+0x1a4>
 8009b32:	6823      	ldr	r3, [r4, #0]
 8009b34:	055a      	lsls	r2, r3, #21
 8009b36:	d407      	bmi.n	8009b48 <_printf_float+0x1f8>
 8009b38:	6923      	ldr	r3, [r4, #16]
 8009b3a:	4642      	mov	r2, r8
 8009b3c:	4631      	mov	r1, r6
 8009b3e:	4628      	mov	r0, r5
 8009b40:	47b8      	blx	r7
 8009b42:	3001      	adds	r0, #1
 8009b44:	d12c      	bne.n	8009ba0 <_printf_float+0x250>
 8009b46:	e764      	b.n	8009a12 <_printf_float+0xc2>
 8009b48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b4c:	f240 80e0 	bls.w	8009d10 <_printf_float+0x3c0>
 8009b50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b54:	2200      	movs	r2, #0
 8009b56:	2300      	movs	r3, #0
 8009b58:	f7f6 ff9e 	bl	8000a98 <__aeabi_dcmpeq>
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	d034      	beq.n	8009bca <_printf_float+0x27a>
 8009b60:	4a37      	ldr	r2, [pc, #220]	; (8009c40 <_printf_float+0x2f0>)
 8009b62:	2301      	movs	r3, #1
 8009b64:	4631      	mov	r1, r6
 8009b66:	4628      	mov	r0, r5
 8009b68:	47b8      	blx	r7
 8009b6a:	3001      	adds	r0, #1
 8009b6c:	f43f af51 	beq.w	8009a12 <_printf_float+0xc2>
 8009b70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b74:	429a      	cmp	r2, r3
 8009b76:	db02      	blt.n	8009b7e <_printf_float+0x22e>
 8009b78:	6823      	ldr	r3, [r4, #0]
 8009b7a:	07d8      	lsls	r0, r3, #31
 8009b7c:	d510      	bpl.n	8009ba0 <_printf_float+0x250>
 8009b7e:	ee18 3a10 	vmov	r3, s16
 8009b82:	4652      	mov	r2, sl
 8009b84:	4631      	mov	r1, r6
 8009b86:	4628      	mov	r0, r5
 8009b88:	47b8      	blx	r7
 8009b8a:	3001      	adds	r0, #1
 8009b8c:	f43f af41 	beq.w	8009a12 <_printf_float+0xc2>
 8009b90:	f04f 0800 	mov.w	r8, #0
 8009b94:	f104 091a 	add.w	r9, r4, #26
 8009b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	4543      	cmp	r3, r8
 8009b9e:	dc09      	bgt.n	8009bb4 <_printf_float+0x264>
 8009ba0:	6823      	ldr	r3, [r4, #0]
 8009ba2:	079b      	lsls	r3, r3, #30
 8009ba4:	f100 8105 	bmi.w	8009db2 <_printf_float+0x462>
 8009ba8:	68e0      	ldr	r0, [r4, #12]
 8009baa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bac:	4298      	cmp	r0, r3
 8009bae:	bfb8      	it	lt
 8009bb0:	4618      	movlt	r0, r3
 8009bb2:	e730      	b.n	8009a16 <_printf_float+0xc6>
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	464a      	mov	r2, r9
 8009bb8:	4631      	mov	r1, r6
 8009bba:	4628      	mov	r0, r5
 8009bbc:	47b8      	blx	r7
 8009bbe:	3001      	adds	r0, #1
 8009bc0:	f43f af27 	beq.w	8009a12 <_printf_float+0xc2>
 8009bc4:	f108 0801 	add.w	r8, r8, #1
 8009bc8:	e7e6      	b.n	8009b98 <_printf_float+0x248>
 8009bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	dc39      	bgt.n	8009c44 <_printf_float+0x2f4>
 8009bd0:	4a1b      	ldr	r2, [pc, #108]	; (8009c40 <_printf_float+0x2f0>)
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	4631      	mov	r1, r6
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	47b8      	blx	r7
 8009bda:	3001      	adds	r0, #1
 8009bdc:	f43f af19 	beq.w	8009a12 <_printf_float+0xc2>
 8009be0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009be4:	4313      	orrs	r3, r2
 8009be6:	d102      	bne.n	8009bee <_printf_float+0x29e>
 8009be8:	6823      	ldr	r3, [r4, #0]
 8009bea:	07d9      	lsls	r1, r3, #31
 8009bec:	d5d8      	bpl.n	8009ba0 <_printf_float+0x250>
 8009bee:	ee18 3a10 	vmov	r3, s16
 8009bf2:	4652      	mov	r2, sl
 8009bf4:	4631      	mov	r1, r6
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	47b8      	blx	r7
 8009bfa:	3001      	adds	r0, #1
 8009bfc:	f43f af09 	beq.w	8009a12 <_printf_float+0xc2>
 8009c00:	f04f 0900 	mov.w	r9, #0
 8009c04:	f104 0a1a 	add.w	sl, r4, #26
 8009c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c0a:	425b      	negs	r3, r3
 8009c0c:	454b      	cmp	r3, r9
 8009c0e:	dc01      	bgt.n	8009c14 <_printf_float+0x2c4>
 8009c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c12:	e792      	b.n	8009b3a <_printf_float+0x1ea>
 8009c14:	2301      	movs	r3, #1
 8009c16:	4652      	mov	r2, sl
 8009c18:	4631      	mov	r1, r6
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	47b8      	blx	r7
 8009c1e:	3001      	adds	r0, #1
 8009c20:	f43f aef7 	beq.w	8009a12 <_printf_float+0xc2>
 8009c24:	f109 0901 	add.w	r9, r9, #1
 8009c28:	e7ee      	b.n	8009c08 <_printf_float+0x2b8>
 8009c2a:	bf00      	nop
 8009c2c:	7fefffff 	.word	0x7fefffff
 8009c30:	0800cae4 	.word	0x0800cae4
 8009c34:	0800cae8 	.word	0x0800cae8
 8009c38:	0800caf0 	.word	0x0800caf0
 8009c3c:	0800caec 	.word	0x0800caec
 8009c40:	0800caf4 	.word	0x0800caf4
 8009c44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	bfa8      	it	ge
 8009c4c:	461a      	movge	r2, r3
 8009c4e:	2a00      	cmp	r2, #0
 8009c50:	4691      	mov	r9, r2
 8009c52:	dc37      	bgt.n	8009cc4 <_printf_float+0x374>
 8009c54:	f04f 0b00 	mov.w	fp, #0
 8009c58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c5c:	f104 021a 	add.w	r2, r4, #26
 8009c60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c62:	9305      	str	r3, [sp, #20]
 8009c64:	eba3 0309 	sub.w	r3, r3, r9
 8009c68:	455b      	cmp	r3, fp
 8009c6a:	dc33      	bgt.n	8009cd4 <_printf_float+0x384>
 8009c6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c70:	429a      	cmp	r2, r3
 8009c72:	db3b      	blt.n	8009cec <_printf_float+0x39c>
 8009c74:	6823      	ldr	r3, [r4, #0]
 8009c76:	07da      	lsls	r2, r3, #31
 8009c78:	d438      	bmi.n	8009cec <_printf_float+0x39c>
 8009c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c7c:	9a05      	ldr	r2, [sp, #20]
 8009c7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c80:	1a9a      	subs	r2, r3, r2
 8009c82:	eba3 0901 	sub.w	r9, r3, r1
 8009c86:	4591      	cmp	r9, r2
 8009c88:	bfa8      	it	ge
 8009c8a:	4691      	movge	r9, r2
 8009c8c:	f1b9 0f00 	cmp.w	r9, #0
 8009c90:	dc35      	bgt.n	8009cfe <_printf_float+0x3ae>
 8009c92:	f04f 0800 	mov.w	r8, #0
 8009c96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c9a:	f104 0a1a 	add.w	sl, r4, #26
 8009c9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ca2:	1a9b      	subs	r3, r3, r2
 8009ca4:	eba3 0309 	sub.w	r3, r3, r9
 8009ca8:	4543      	cmp	r3, r8
 8009caa:	f77f af79 	ble.w	8009ba0 <_printf_float+0x250>
 8009cae:	2301      	movs	r3, #1
 8009cb0:	4652      	mov	r2, sl
 8009cb2:	4631      	mov	r1, r6
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	47b8      	blx	r7
 8009cb8:	3001      	adds	r0, #1
 8009cba:	f43f aeaa 	beq.w	8009a12 <_printf_float+0xc2>
 8009cbe:	f108 0801 	add.w	r8, r8, #1
 8009cc2:	e7ec      	b.n	8009c9e <_printf_float+0x34e>
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	4631      	mov	r1, r6
 8009cc8:	4642      	mov	r2, r8
 8009cca:	4628      	mov	r0, r5
 8009ccc:	47b8      	blx	r7
 8009cce:	3001      	adds	r0, #1
 8009cd0:	d1c0      	bne.n	8009c54 <_printf_float+0x304>
 8009cd2:	e69e      	b.n	8009a12 <_printf_float+0xc2>
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	4631      	mov	r1, r6
 8009cd8:	4628      	mov	r0, r5
 8009cda:	9205      	str	r2, [sp, #20]
 8009cdc:	47b8      	blx	r7
 8009cde:	3001      	adds	r0, #1
 8009ce0:	f43f ae97 	beq.w	8009a12 <_printf_float+0xc2>
 8009ce4:	9a05      	ldr	r2, [sp, #20]
 8009ce6:	f10b 0b01 	add.w	fp, fp, #1
 8009cea:	e7b9      	b.n	8009c60 <_printf_float+0x310>
 8009cec:	ee18 3a10 	vmov	r3, s16
 8009cf0:	4652      	mov	r2, sl
 8009cf2:	4631      	mov	r1, r6
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	47b8      	blx	r7
 8009cf8:	3001      	adds	r0, #1
 8009cfa:	d1be      	bne.n	8009c7a <_printf_float+0x32a>
 8009cfc:	e689      	b.n	8009a12 <_printf_float+0xc2>
 8009cfe:	9a05      	ldr	r2, [sp, #20]
 8009d00:	464b      	mov	r3, r9
 8009d02:	4442      	add	r2, r8
 8009d04:	4631      	mov	r1, r6
 8009d06:	4628      	mov	r0, r5
 8009d08:	47b8      	blx	r7
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	d1c1      	bne.n	8009c92 <_printf_float+0x342>
 8009d0e:	e680      	b.n	8009a12 <_printf_float+0xc2>
 8009d10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d12:	2a01      	cmp	r2, #1
 8009d14:	dc01      	bgt.n	8009d1a <_printf_float+0x3ca>
 8009d16:	07db      	lsls	r3, r3, #31
 8009d18:	d538      	bpl.n	8009d8c <_printf_float+0x43c>
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	4642      	mov	r2, r8
 8009d1e:	4631      	mov	r1, r6
 8009d20:	4628      	mov	r0, r5
 8009d22:	47b8      	blx	r7
 8009d24:	3001      	adds	r0, #1
 8009d26:	f43f ae74 	beq.w	8009a12 <_printf_float+0xc2>
 8009d2a:	ee18 3a10 	vmov	r3, s16
 8009d2e:	4652      	mov	r2, sl
 8009d30:	4631      	mov	r1, r6
 8009d32:	4628      	mov	r0, r5
 8009d34:	47b8      	blx	r7
 8009d36:	3001      	adds	r0, #1
 8009d38:	f43f ae6b 	beq.w	8009a12 <_printf_float+0xc2>
 8009d3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d40:	2200      	movs	r2, #0
 8009d42:	2300      	movs	r3, #0
 8009d44:	f7f6 fea8 	bl	8000a98 <__aeabi_dcmpeq>
 8009d48:	b9d8      	cbnz	r0, 8009d82 <_printf_float+0x432>
 8009d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d4c:	f108 0201 	add.w	r2, r8, #1
 8009d50:	3b01      	subs	r3, #1
 8009d52:	4631      	mov	r1, r6
 8009d54:	4628      	mov	r0, r5
 8009d56:	47b8      	blx	r7
 8009d58:	3001      	adds	r0, #1
 8009d5a:	d10e      	bne.n	8009d7a <_printf_float+0x42a>
 8009d5c:	e659      	b.n	8009a12 <_printf_float+0xc2>
 8009d5e:	2301      	movs	r3, #1
 8009d60:	4652      	mov	r2, sl
 8009d62:	4631      	mov	r1, r6
 8009d64:	4628      	mov	r0, r5
 8009d66:	47b8      	blx	r7
 8009d68:	3001      	adds	r0, #1
 8009d6a:	f43f ae52 	beq.w	8009a12 <_printf_float+0xc2>
 8009d6e:	f108 0801 	add.w	r8, r8, #1
 8009d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d74:	3b01      	subs	r3, #1
 8009d76:	4543      	cmp	r3, r8
 8009d78:	dcf1      	bgt.n	8009d5e <_printf_float+0x40e>
 8009d7a:	464b      	mov	r3, r9
 8009d7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d80:	e6dc      	b.n	8009b3c <_printf_float+0x1ec>
 8009d82:	f04f 0800 	mov.w	r8, #0
 8009d86:	f104 0a1a 	add.w	sl, r4, #26
 8009d8a:	e7f2      	b.n	8009d72 <_printf_float+0x422>
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	4642      	mov	r2, r8
 8009d90:	e7df      	b.n	8009d52 <_printf_float+0x402>
 8009d92:	2301      	movs	r3, #1
 8009d94:	464a      	mov	r2, r9
 8009d96:	4631      	mov	r1, r6
 8009d98:	4628      	mov	r0, r5
 8009d9a:	47b8      	blx	r7
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	f43f ae38 	beq.w	8009a12 <_printf_float+0xc2>
 8009da2:	f108 0801 	add.w	r8, r8, #1
 8009da6:	68e3      	ldr	r3, [r4, #12]
 8009da8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009daa:	1a5b      	subs	r3, r3, r1
 8009dac:	4543      	cmp	r3, r8
 8009dae:	dcf0      	bgt.n	8009d92 <_printf_float+0x442>
 8009db0:	e6fa      	b.n	8009ba8 <_printf_float+0x258>
 8009db2:	f04f 0800 	mov.w	r8, #0
 8009db6:	f104 0919 	add.w	r9, r4, #25
 8009dba:	e7f4      	b.n	8009da6 <_printf_float+0x456>

08009dbc <_printf_common>:
 8009dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dc0:	4616      	mov	r6, r2
 8009dc2:	4699      	mov	r9, r3
 8009dc4:	688a      	ldr	r2, [r1, #8]
 8009dc6:	690b      	ldr	r3, [r1, #16]
 8009dc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	bfb8      	it	lt
 8009dd0:	4613      	movlt	r3, r2
 8009dd2:	6033      	str	r3, [r6, #0]
 8009dd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009dd8:	4607      	mov	r7, r0
 8009dda:	460c      	mov	r4, r1
 8009ddc:	b10a      	cbz	r2, 8009de2 <_printf_common+0x26>
 8009dde:	3301      	adds	r3, #1
 8009de0:	6033      	str	r3, [r6, #0]
 8009de2:	6823      	ldr	r3, [r4, #0]
 8009de4:	0699      	lsls	r1, r3, #26
 8009de6:	bf42      	ittt	mi
 8009de8:	6833      	ldrmi	r3, [r6, #0]
 8009dea:	3302      	addmi	r3, #2
 8009dec:	6033      	strmi	r3, [r6, #0]
 8009dee:	6825      	ldr	r5, [r4, #0]
 8009df0:	f015 0506 	ands.w	r5, r5, #6
 8009df4:	d106      	bne.n	8009e04 <_printf_common+0x48>
 8009df6:	f104 0a19 	add.w	sl, r4, #25
 8009dfa:	68e3      	ldr	r3, [r4, #12]
 8009dfc:	6832      	ldr	r2, [r6, #0]
 8009dfe:	1a9b      	subs	r3, r3, r2
 8009e00:	42ab      	cmp	r3, r5
 8009e02:	dc26      	bgt.n	8009e52 <_printf_common+0x96>
 8009e04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e08:	1e13      	subs	r3, r2, #0
 8009e0a:	6822      	ldr	r2, [r4, #0]
 8009e0c:	bf18      	it	ne
 8009e0e:	2301      	movne	r3, #1
 8009e10:	0692      	lsls	r2, r2, #26
 8009e12:	d42b      	bmi.n	8009e6c <_printf_common+0xb0>
 8009e14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e18:	4649      	mov	r1, r9
 8009e1a:	4638      	mov	r0, r7
 8009e1c:	47c0      	blx	r8
 8009e1e:	3001      	adds	r0, #1
 8009e20:	d01e      	beq.n	8009e60 <_printf_common+0xa4>
 8009e22:	6823      	ldr	r3, [r4, #0]
 8009e24:	68e5      	ldr	r5, [r4, #12]
 8009e26:	6832      	ldr	r2, [r6, #0]
 8009e28:	f003 0306 	and.w	r3, r3, #6
 8009e2c:	2b04      	cmp	r3, #4
 8009e2e:	bf08      	it	eq
 8009e30:	1aad      	subeq	r5, r5, r2
 8009e32:	68a3      	ldr	r3, [r4, #8]
 8009e34:	6922      	ldr	r2, [r4, #16]
 8009e36:	bf0c      	ite	eq
 8009e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e3c:	2500      	movne	r5, #0
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	bfc4      	itt	gt
 8009e42:	1a9b      	subgt	r3, r3, r2
 8009e44:	18ed      	addgt	r5, r5, r3
 8009e46:	2600      	movs	r6, #0
 8009e48:	341a      	adds	r4, #26
 8009e4a:	42b5      	cmp	r5, r6
 8009e4c:	d11a      	bne.n	8009e84 <_printf_common+0xc8>
 8009e4e:	2000      	movs	r0, #0
 8009e50:	e008      	b.n	8009e64 <_printf_common+0xa8>
 8009e52:	2301      	movs	r3, #1
 8009e54:	4652      	mov	r2, sl
 8009e56:	4649      	mov	r1, r9
 8009e58:	4638      	mov	r0, r7
 8009e5a:	47c0      	blx	r8
 8009e5c:	3001      	adds	r0, #1
 8009e5e:	d103      	bne.n	8009e68 <_printf_common+0xac>
 8009e60:	f04f 30ff 	mov.w	r0, #4294967295
 8009e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e68:	3501      	adds	r5, #1
 8009e6a:	e7c6      	b.n	8009dfa <_printf_common+0x3e>
 8009e6c:	18e1      	adds	r1, r4, r3
 8009e6e:	1c5a      	adds	r2, r3, #1
 8009e70:	2030      	movs	r0, #48	; 0x30
 8009e72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e76:	4422      	add	r2, r4
 8009e78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e80:	3302      	adds	r3, #2
 8009e82:	e7c7      	b.n	8009e14 <_printf_common+0x58>
 8009e84:	2301      	movs	r3, #1
 8009e86:	4622      	mov	r2, r4
 8009e88:	4649      	mov	r1, r9
 8009e8a:	4638      	mov	r0, r7
 8009e8c:	47c0      	blx	r8
 8009e8e:	3001      	adds	r0, #1
 8009e90:	d0e6      	beq.n	8009e60 <_printf_common+0xa4>
 8009e92:	3601      	adds	r6, #1
 8009e94:	e7d9      	b.n	8009e4a <_printf_common+0x8e>
	...

08009e98 <_printf_i>:
 8009e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e9c:	7e0f      	ldrb	r7, [r1, #24]
 8009e9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ea0:	2f78      	cmp	r7, #120	; 0x78
 8009ea2:	4691      	mov	r9, r2
 8009ea4:	4680      	mov	r8, r0
 8009ea6:	460c      	mov	r4, r1
 8009ea8:	469a      	mov	sl, r3
 8009eaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009eae:	d807      	bhi.n	8009ec0 <_printf_i+0x28>
 8009eb0:	2f62      	cmp	r7, #98	; 0x62
 8009eb2:	d80a      	bhi.n	8009eca <_printf_i+0x32>
 8009eb4:	2f00      	cmp	r7, #0
 8009eb6:	f000 80d8 	beq.w	800a06a <_printf_i+0x1d2>
 8009eba:	2f58      	cmp	r7, #88	; 0x58
 8009ebc:	f000 80a3 	beq.w	800a006 <_printf_i+0x16e>
 8009ec0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ec4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ec8:	e03a      	b.n	8009f40 <_printf_i+0xa8>
 8009eca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ece:	2b15      	cmp	r3, #21
 8009ed0:	d8f6      	bhi.n	8009ec0 <_printf_i+0x28>
 8009ed2:	a101      	add	r1, pc, #4	; (adr r1, 8009ed8 <_printf_i+0x40>)
 8009ed4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ed8:	08009f31 	.word	0x08009f31
 8009edc:	08009f45 	.word	0x08009f45
 8009ee0:	08009ec1 	.word	0x08009ec1
 8009ee4:	08009ec1 	.word	0x08009ec1
 8009ee8:	08009ec1 	.word	0x08009ec1
 8009eec:	08009ec1 	.word	0x08009ec1
 8009ef0:	08009f45 	.word	0x08009f45
 8009ef4:	08009ec1 	.word	0x08009ec1
 8009ef8:	08009ec1 	.word	0x08009ec1
 8009efc:	08009ec1 	.word	0x08009ec1
 8009f00:	08009ec1 	.word	0x08009ec1
 8009f04:	0800a051 	.word	0x0800a051
 8009f08:	08009f75 	.word	0x08009f75
 8009f0c:	0800a033 	.word	0x0800a033
 8009f10:	08009ec1 	.word	0x08009ec1
 8009f14:	08009ec1 	.word	0x08009ec1
 8009f18:	0800a073 	.word	0x0800a073
 8009f1c:	08009ec1 	.word	0x08009ec1
 8009f20:	08009f75 	.word	0x08009f75
 8009f24:	08009ec1 	.word	0x08009ec1
 8009f28:	08009ec1 	.word	0x08009ec1
 8009f2c:	0800a03b 	.word	0x0800a03b
 8009f30:	682b      	ldr	r3, [r5, #0]
 8009f32:	1d1a      	adds	r2, r3, #4
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	602a      	str	r2, [r5, #0]
 8009f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f40:	2301      	movs	r3, #1
 8009f42:	e0a3      	b.n	800a08c <_printf_i+0x1f4>
 8009f44:	6820      	ldr	r0, [r4, #0]
 8009f46:	6829      	ldr	r1, [r5, #0]
 8009f48:	0606      	lsls	r6, r0, #24
 8009f4a:	f101 0304 	add.w	r3, r1, #4
 8009f4e:	d50a      	bpl.n	8009f66 <_printf_i+0xce>
 8009f50:	680e      	ldr	r6, [r1, #0]
 8009f52:	602b      	str	r3, [r5, #0]
 8009f54:	2e00      	cmp	r6, #0
 8009f56:	da03      	bge.n	8009f60 <_printf_i+0xc8>
 8009f58:	232d      	movs	r3, #45	; 0x2d
 8009f5a:	4276      	negs	r6, r6
 8009f5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f60:	485e      	ldr	r0, [pc, #376]	; (800a0dc <_printf_i+0x244>)
 8009f62:	230a      	movs	r3, #10
 8009f64:	e019      	b.n	8009f9a <_printf_i+0x102>
 8009f66:	680e      	ldr	r6, [r1, #0]
 8009f68:	602b      	str	r3, [r5, #0]
 8009f6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f6e:	bf18      	it	ne
 8009f70:	b236      	sxthne	r6, r6
 8009f72:	e7ef      	b.n	8009f54 <_printf_i+0xbc>
 8009f74:	682b      	ldr	r3, [r5, #0]
 8009f76:	6820      	ldr	r0, [r4, #0]
 8009f78:	1d19      	adds	r1, r3, #4
 8009f7a:	6029      	str	r1, [r5, #0]
 8009f7c:	0601      	lsls	r1, r0, #24
 8009f7e:	d501      	bpl.n	8009f84 <_printf_i+0xec>
 8009f80:	681e      	ldr	r6, [r3, #0]
 8009f82:	e002      	b.n	8009f8a <_printf_i+0xf2>
 8009f84:	0646      	lsls	r6, r0, #25
 8009f86:	d5fb      	bpl.n	8009f80 <_printf_i+0xe8>
 8009f88:	881e      	ldrh	r6, [r3, #0]
 8009f8a:	4854      	ldr	r0, [pc, #336]	; (800a0dc <_printf_i+0x244>)
 8009f8c:	2f6f      	cmp	r7, #111	; 0x6f
 8009f8e:	bf0c      	ite	eq
 8009f90:	2308      	moveq	r3, #8
 8009f92:	230a      	movne	r3, #10
 8009f94:	2100      	movs	r1, #0
 8009f96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f9a:	6865      	ldr	r5, [r4, #4]
 8009f9c:	60a5      	str	r5, [r4, #8]
 8009f9e:	2d00      	cmp	r5, #0
 8009fa0:	bfa2      	ittt	ge
 8009fa2:	6821      	ldrge	r1, [r4, #0]
 8009fa4:	f021 0104 	bicge.w	r1, r1, #4
 8009fa8:	6021      	strge	r1, [r4, #0]
 8009faa:	b90e      	cbnz	r6, 8009fb0 <_printf_i+0x118>
 8009fac:	2d00      	cmp	r5, #0
 8009fae:	d04d      	beq.n	800a04c <_printf_i+0x1b4>
 8009fb0:	4615      	mov	r5, r2
 8009fb2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009fb6:	fb03 6711 	mls	r7, r3, r1, r6
 8009fba:	5dc7      	ldrb	r7, [r0, r7]
 8009fbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009fc0:	4637      	mov	r7, r6
 8009fc2:	42bb      	cmp	r3, r7
 8009fc4:	460e      	mov	r6, r1
 8009fc6:	d9f4      	bls.n	8009fb2 <_printf_i+0x11a>
 8009fc8:	2b08      	cmp	r3, #8
 8009fca:	d10b      	bne.n	8009fe4 <_printf_i+0x14c>
 8009fcc:	6823      	ldr	r3, [r4, #0]
 8009fce:	07de      	lsls	r6, r3, #31
 8009fd0:	d508      	bpl.n	8009fe4 <_printf_i+0x14c>
 8009fd2:	6923      	ldr	r3, [r4, #16]
 8009fd4:	6861      	ldr	r1, [r4, #4]
 8009fd6:	4299      	cmp	r1, r3
 8009fd8:	bfde      	ittt	le
 8009fda:	2330      	movle	r3, #48	; 0x30
 8009fdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009fe0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009fe4:	1b52      	subs	r2, r2, r5
 8009fe6:	6122      	str	r2, [r4, #16]
 8009fe8:	f8cd a000 	str.w	sl, [sp]
 8009fec:	464b      	mov	r3, r9
 8009fee:	aa03      	add	r2, sp, #12
 8009ff0:	4621      	mov	r1, r4
 8009ff2:	4640      	mov	r0, r8
 8009ff4:	f7ff fee2 	bl	8009dbc <_printf_common>
 8009ff8:	3001      	adds	r0, #1
 8009ffa:	d14c      	bne.n	800a096 <_printf_i+0x1fe>
 8009ffc:	f04f 30ff 	mov.w	r0, #4294967295
 800a000:	b004      	add	sp, #16
 800a002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a006:	4835      	ldr	r0, [pc, #212]	; (800a0dc <_printf_i+0x244>)
 800a008:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a00c:	6829      	ldr	r1, [r5, #0]
 800a00e:	6823      	ldr	r3, [r4, #0]
 800a010:	f851 6b04 	ldr.w	r6, [r1], #4
 800a014:	6029      	str	r1, [r5, #0]
 800a016:	061d      	lsls	r5, r3, #24
 800a018:	d514      	bpl.n	800a044 <_printf_i+0x1ac>
 800a01a:	07df      	lsls	r7, r3, #31
 800a01c:	bf44      	itt	mi
 800a01e:	f043 0320 	orrmi.w	r3, r3, #32
 800a022:	6023      	strmi	r3, [r4, #0]
 800a024:	b91e      	cbnz	r6, 800a02e <_printf_i+0x196>
 800a026:	6823      	ldr	r3, [r4, #0]
 800a028:	f023 0320 	bic.w	r3, r3, #32
 800a02c:	6023      	str	r3, [r4, #0]
 800a02e:	2310      	movs	r3, #16
 800a030:	e7b0      	b.n	8009f94 <_printf_i+0xfc>
 800a032:	6823      	ldr	r3, [r4, #0]
 800a034:	f043 0320 	orr.w	r3, r3, #32
 800a038:	6023      	str	r3, [r4, #0]
 800a03a:	2378      	movs	r3, #120	; 0x78
 800a03c:	4828      	ldr	r0, [pc, #160]	; (800a0e0 <_printf_i+0x248>)
 800a03e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a042:	e7e3      	b.n	800a00c <_printf_i+0x174>
 800a044:	0659      	lsls	r1, r3, #25
 800a046:	bf48      	it	mi
 800a048:	b2b6      	uxthmi	r6, r6
 800a04a:	e7e6      	b.n	800a01a <_printf_i+0x182>
 800a04c:	4615      	mov	r5, r2
 800a04e:	e7bb      	b.n	8009fc8 <_printf_i+0x130>
 800a050:	682b      	ldr	r3, [r5, #0]
 800a052:	6826      	ldr	r6, [r4, #0]
 800a054:	6961      	ldr	r1, [r4, #20]
 800a056:	1d18      	adds	r0, r3, #4
 800a058:	6028      	str	r0, [r5, #0]
 800a05a:	0635      	lsls	r5, r6, #24
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	d501      	bpl.n	800a064 <_printf_i+0x1cc>
 800a060:	6019      	str	r1, [r3, #0]
 800a062:	e002      	b.n	800a06a <_printf_i+0x1d2>
 800a064:	0670      	lsls	r0, r6, #25
 800a066:	d5fb      	bpl.n	800a060 <_printf_i+0x1c8>
 800a068:	8019      	strh	r1, [r3, #0]
 800a06a:	2300      	movs	r3, #0
 800a06c:	6123      	str	r3, [r4, #16]
 800a06e:	4615      	mov	r5, r2
 800a070:	e7ba      	b.n	8009fe8 <_printf_i+0x150>
 800a072:	682b      	ldr	r3, [r5, #0]
 800a074:	1d1a      	adds	r2, r3, #4
 800a076:	602a      	str	r2, [r5, #0]
 800a078:	681d      	ldr	r5, [r3, #0]
 800a07a:	6862      	ldr	r2, [r4, #4]
 800a07c:	2100      	movs	r1, #0
 800a07e:	4628      	mov	r0, r5
 800a080:	f7f6 f896 	bl	80001b0 <memchr>
 800a084:	b108      	cbz	r0, 800a08a <_printf_i+0x1f2>
 800a086:	1b40      	subs	r0, r0, r5
 800a088:	6060      	str	r0, [r4, #4]
 800a08a:	6863      	ldr	r3, [r4, #4]
 800a08c:	6123      	str	r3, [r4, #16]
 800a08e:	2300      	movs	r3, #0
 800a090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a094:	e7a8      	b.n	8009fe8 <_printf_i+0x150>
 800a096:	6923      	ldr	r3, [r4, #16]
 800a098:	462a      	mov	r2, r5
 800a09a:	4649      	mov	r1, r9
 800a09c:	4640      	mov	r0, r8
 800a09e:	47d0      	blx	sl
 800a0a0:	3001      	adds	r0, #1
 800a0a2:	d0ab      	beq.n	8009ffc <_printf_i+0x164>
 800a0a4:	6823      	ldr	r3, [r4, #0]
 800a0a6:	079b      	lsls	r3, r3, #30
 800a0a8:	d413      	bmi.n	800a0d2 <_printf_i+0x23a>
 800a0aa:	68e0      	ldr	r0, [r4, #12]
 800a0ac:	9b03      	ldr	r3, [sp, #12]
 800a0ae:	4298      	cmp	r0, r3
 800a0b0:	bfb8      	it	lt
 800a0b2:	4618      	movlt	r0, r3
 800a0b4:	e7a4      	b.n	800a000 <_printf_i+0x168>
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	4632      	mov	r2, r6
 800a0ba:	4649      	mov	r1, r9
 800a0bc:	4640      	mov	r0, r8
 800a0be:	47d0      	blx	sl
 800a0c0:	3001      	adds	r0, #1
 800a0c2:	d09b      	beq.n	8009ffc <_printf_i+0x164>
 800a0c4:	3501      	adds	r5, #1
 800a0c6:	68e3      	ldr	r3, [r4, #12]
 800a0c8:	9903      	ldr	r1, [sp, #12]
 800a0ca:	1a5b      	subs	r3, r3, r1
 800a0cc:	42ab      	cmp	r3, r5
 800a0ce:	dcf2      	bgt.n	800a0b6 <_printf_i+0x21e>
 800a0d0:	e7eb      	b.n	800a0aa <_printf_i+0x212>
 800a0d2:	2500      	movs	r5, #0
 800a0d4:	f104 0619 	add.w	r6, r4, #25
 800a0d8:	e7f5      	b.n	800a0c6 <_printf_i+0x22e>
 800a0da:	bf00      	nop
 800a0dc:	0800caf6 	.word	0x0800caf6
 800a0e0:	0800cb07 	.word	0x0800cb07

0800a0e4 <siprintf>:
 800a0e4:	b40e      	push	{r1, r2, r3}
 800a0e6:	b500      	push	{lr}
 800a0e8:	b09c      	sub	sp, #112	; 0x70
 800a0ea:	ab1d      	add	r3, sp, #116	; 0x74
 800a0ec:	9002      	str	r0, [sp, #8]
 800a0ee:	9006      	str	r0, [sp, #24]
 800a0f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a0f4:	4809      	ldr	r0, [pc, #36]	; (800a11c <siprintf+0x38>)
 800a0f6:	9107      	str	r1, [sp, #28]
 800a0f8:	9104      	str	r1, [sp, #16]
 800a0fa:	4909      	ldr	r1, [pc, #36]	; (800a120 <siprintf+0x3c>)
 800a0fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a100:	9105      	str	r1, [sp, #20]
 800a102:	6800      	ldr	r0, [r0, #0]
 800a104:	9301      	str	r3, [sp, #4]
 800a106:	a902      	add	r1, sp, #8
 800a108:	f001 fb78 	bl	800b7fc <_svfiprintf_r>
 800a10c:	9b02      	ldr	r3, [sp, #8]
 800a10e:	2200      	movs	r2, #0
 800a110:	701a      	strb	r2, [r3, #0]
 800a112:	b01c      	add	sp, #112	; 0x70
 800a114:	f85d eb04 	ldr.w	lr, [sp], #4
 800a118:	b003      	add	sp, #12
 800a11a:	4770      	bx	lr
 800a11c:	20000040 	.word	0x20000040
 800a120:	ffff0208 	.word	0xffff0208

0800a124 <quorem>:
 800a124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a128:	6903      	ldr	r3, [r0, #16]
 800a12a:	690c      	ldr	r4, [r1, #16]
 800a12c:	42a3      	cmp	r3, r4
 800a12e:	4607      	mov	r7, r0
 800a130:	f2c0 8081 	blt.w	800a236 <quorem+0x112>
 800a134:	3c01      	subs	r4, #1
 800a136:	f101 0814 	add.w	r8, r1, #20
 800a13a:	f100 0514 	add.w	r5, r0, #20
 800a13e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a142:	9301      	str	r3, [sp, #4]
 800a144:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a148:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a14c:	3301      	adds	r3, #1
 800a14e:	429a      	cmp	r2, r3
 800a150:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a154:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a158:	fbb2 f6f3 	udiv	r6, r2, r3
 800a15c:	d331      	bcc.n	800a1c2 <quorem+0x9e>
 800a15e:	f04f 0e00 	mov.w	lr, #0
 800a162:	4640      	mov	r0, r8
 800a164:	46ac      	mov	ip, r5
 800a166:	46f2      	mov	sl, lr
 800a168:	f850 2b04 	ldr.w	r2, [r0], #4
 800a16c:	b293      	uxth	r3, r2
 800a16e:	fb06 e303 	mla	r3, r6, r3, lr
 800a172:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a176:	b29b      	uxth	r3, r3
 800a178:	ebaa 0303 	sub.w	r3, sl, r3
 800a17c:	f8dc a000 	ldr.w	sl, [ip]
 800a180:	0c12      	lsrs	r2, r2, #16
 800a182:	fa13 f38a 	uxtah	r3, r3, sl
 800a186:	fb06 e202 	mla	r2, r6, r2, lr
 800a18a:	9300      	str	r3, [sp, #0]
 800a18c:	9b00      	ldr	r3, [sp, #0]
 800a18e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a192:	b292      	uxth	r2, r2
 800a194:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a198:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a19c:	f8bd 3000 	ldrh.w	r3, [sp]
 800a1a0:	4581      	cmp	r9, r0
 800a1a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1a6:	f84c 3b04 	str.w	r3, [ip], #4
 800a1aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a1ae:	d2db      	bcs.n	800a168 <quorem+0x44>
 800a1b0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a1b4:	b92b      	cbnz	r3, 800a1c2 <quorem+0x9e>
 800a1b6:	9b01      	ldr	r3, [sp, #4]
 800a1b8:	3b04      	subs	r3, #4
 800a1ba:	429d      	cmp	r5, r3
 800a1bc:	461a      	mov	r2, r3
 800a1be:	d32e      	bcc.n	800a21e <quorem+0xfa>
 800a1c0:	613c      	str	r4, [r7, #16]
 800a1c2:	4638      	mov	r0, r7
 800a1c4:	f001 f8c6 	bl	800b354 <__mcmp>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	db24      	blt.n	800a216 <quorem+0xf2>
 800a1cc:	3601      	adds	r6, #1
 800a1ce:	4628      	mov	r0, r5
 800a1d0:	f04f 0c00 	mov.w	ip, #0
 800a1d4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1d8:	f8d0 e000 	ldr.w	lr, [r0]
 800a1dc:	b293      	uxth	r3, r2
 800a1de:	ebac 0303 	sub.w	r3, ip, r3
 800a1e2:	0c12      	lsrs	r2, r2, #16
 800a1e4:	fa13 f38e 	uxtah	r3, r3, lr
 800a1e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a1ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1f6:	45c1      	cmp	r9, r8
 800a1f8:	f840 3b04 	str.w	r3, [r0], #4
 800a1fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a200:	d2e8      	bcs.n	800a1d4 <quorem+0xb0>
 800a202:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a206:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a20a:	b922      	cbnz	r2, 800a216 <quorem+0xf2>
 800a20c:	3b04      	subs	r3, #4
 800a20e:	429d      	cmp	r5, r3
 800a210:	461a      	mov	r2, r3
 800a212:	d30a      	bcc.n	800a22a <quorem+0x106>
 800a214:	613c      	str	r4, [r7, #16]
 800a216:	4630      	mov	r0, r6
 800a218:	b003      	add	sp, #12
 800a21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a21e:	6812      	ldr	r2, [r2, #0]
 800a220:	3b04      	subs	r3, #4
 800a222:	2a00      	cmp	r2, #0
 800a224:	d1cc      	bne.n	800a1c0 <quorem+0x9c>
 800a226:	3c01      	subs	r4, #1
 800a228:	e7c7      	b.n	800a1ba <quorem+0x96>
 800a22a:	6812      	ldr	r2, [r2, #0]
 800a22c:	3b04      	subs	r3, #4
 800a22e:	2a00      	cmp	r2, #0
 800a230:	d1f0      	bne.n	800a214 <quorem+0xf0>
 800a232:	3c01      	subs	r4, #1
 800a234:	e7eb      	b.n	800a20e <quorem+0xea>
 800a236:	2000      	movs	r0, #0
 800a238:	e7ee      	b.n	800a218 <quorem+0xf4>
 800a23a:	0000      	movs	r0, r0
 800a23c:	0000      	movs	r0, r0
	...

0800a240 <_dtoa_r>:
 800a240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a244:	ed2d 8b04 	vpush	{d8-d9}
 800a248:	ec57 6b10 	vmov	r6, r7, d0
 800a24c:	b093      	sub	sp, #76	; 0x4c
 800a24e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a250:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a254:	9106      	str	r1, [sp, #24]
 800a256:	ee10 aa10 	vmov	sl, s0
 800a25a:	4604      	mov	r4, r0
 800a25c:	9209      	str	r2, [sp, #36]	; 0x24
 800a25e:	930c      	str	r3, [sp, #48]	; 0x30
 800a260:	46bb      	mov	fp, r7
 800a262:	b975      	cbnz	r5, 800a282 <_dtoa_r+0x42>
 800a264:	2010      	movs	r0, #16
 800a266:	f000 fddd 	bl	800ae24 <malloc>
 800a26a:	4602      	mov	r2, r0
 800a26c:	6260      	str	r0, [r4, #36]	; 0x24
 800a26e:	b920      	cbnz	r0, 800a27a <_dtoa_r+0x3a>
 800a270:	4ba7      	ldr	r3, [pc, #668]	; (800a510 <_dtoa_r+0x2d0>)
 800a272:	21ea      	movs	r1, #234	; 0xea
 800a274:	48a7      	ldr	r0, [pc, #668]	; (800a514 <_dtoa_r+0x2d4>)
 800a276:	f001 fbd1 	bl	800ba1c <__assert_func>
 800a27a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a27e:	6005      	str	r5, [r0, #0]
 800a280:	60c5      	str	r5, [r0, #12]
 800a282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a284:	6819      	ldr	r1, [r3, #0]
 800a286:	b151      	cbz	r1, 800a29e <_dtoa_r+0x5e>
 800a288:	685a      	ldr	r2, [r3, #4]
 800a28a:	604a      	str	r2, [r1, #4]
 800a28c:	2301      	movs	r3, #1
 800a28e:	4093      	lsls	r3, r2
 800a290:	608b      	str	r3, [r1, #8]
 800a292:	4620      	mov	r0, r4
 800a294:	f000 fe1c 	bl	800aed0 <_Bfree>
 800a298:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a29a:	2200      	movs	r2, #0
 800a29c:	601a      	str	r2, [r3, #0]
 800a29e:	1e3b      	subs	r3, r7, #0
 800a2a0:	bfaa      	itet	ge
 800a2a2:	2300      	movge	r3, #0
 800a2a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a2a8:	f8c8 3000 	strge.w	r3, [r8]
 800a2ac:	4b9a      	ldr	r3, [pc, #616]	; (800a518 <_dtoa_r+0x2d8>)
 800a2ae:	bfbc      	itt	lt
 800a2b0:	2201      	movlt	r2, #1
 800a2b2:	f8c8 2000 	strlt.w	r2, [r8]
 800a2b6:	ea33 030b 	bics.w	r3, r3, fp
 800a2ba:	d11b      	bne.n	800a2f4 <_dtoa_r+0xb4>
 800a2bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2be:	f242 730f 	movw	r3, #9999	; 0x270f
 800a2c2:	6013      	str	r3, [r2, #0]
 800a2c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2c8:	4333      	orrs	r3, r6
 800a2ca:	f000 8592 	beq.w	800adf2 <_dtoa_r+0xbb2>
 800a2ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2d0:	b963      	cbnz	r3, 800a2ec <_dtoa_r+0xac>
 800a2d2:	4b92      	ldr	r3, [pc, #584]	; (800a51c <_dtoa_r+0x2dc>)
 800a2d4:	e022      	b.n	800a31c <_dtoa_r+0xdc>
 800a2d6:	4b92      	ldr	r3, [pc, #584]	; (800a520 <_dtoa_r+0x2e0>)
 800a2d8:	9301      	str	r3, [sp, #4]
 800a2da:	3308      	adds	r3, #8
 800a2dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2de:	6013      	str	r3, [r2, #0]
 800a2e0:	9801      	ldr	r0, [sp, #4]
 800a2e2:	b013      	add	sp, #76	; 0x4c
 800a2e4:	ecbd 8b04 	vpop	{d8-d9}
 800a2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ec:	4b8b      	ldr	r3, [pc, #556]	; (800a51c <_dtoa_r+0x2dc>)
 800a2ee:	9301      	str	r3, [sp, #4]
 800a2f0:	3303      	adds	r3, #3
 800a2f2:	e7f3      	b.n	800a2dc <_dtoa_r+0x9c>
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	4650      	mov	r0, sl
 800a2fa:	4659      	mov	r1, fp
 800a2fc:	f7f6 fbcc 	bl	8000a98 <__aeabi_dcmpeq>
 800a300:	ec4b ab19 	vmov	d9, sl, fp
 800a304:	4680      	mov	r8, r0
 800a306:	b158      	cbz	r0, 800a320 <_dtoa_r+0xe0>
 800a308:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a30a:	2301      	movs	r3, #1
 800a30c:	6013      	str	r3, [r2, #0]
 800a30e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a310:	2b00      	cmp	r3, #0
 800a312:	f000 856b 	beq.w	800adec <_dtoa_r+0xbac>
 800a316:	4883      	ldr	r0, [pc, #524]	; (800a524 <_dtoa_r+0x2e4>)
 800a318:	6018      	str	r0, [r3, #0]
 800a31a:	1e43      	subs	r3, r0, #1
 800a31c:	9301      	str	r3, [sp, #4]
 800a31e:	e7df      	b.n	800a2e0 <_dtoa_r+0xa0>
 800a320:	ec4b ab10 	vmov	d0, sl, fp
 800a324:	aa10      	add	r2, sp, #64	; 0x40
 800a326:	a911      	add	r1, sp, #68	; 0x44
 800a328:	4620      	mov	r0, r4
 800a32a:	f001 f8b9 	bl	800b4a0 <__d2b>
 800a32e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a332:	ee08 0a10 	vmov	s16, r0
 800a336:	2d00      	cmp	r5, #0
 800a338:	f000 8084 	beq.w	800a444 <_dtoa_r+0x204>
 800a33c:	ee19 3a90 	vmov	r3, s19
 800a340:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a344:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a348:	4656      	mov	r6, sl
 800a34a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a34e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a352:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a356:	4b74      	ldr	r3, [pc, #464]	; (800a528 <_dtoa_r+0x2e8>)
 800a358:	2200      	movs	r2, #0
 800a35a:	4630      	mov	r0, r6
 800a35c:	4639      	mov	r1, r7
 800a35e:	f7f5 ff7b 	bl	8000258 <__aeabi_dsub>
 800a362:	a365      	add	r3, pc, #404	; (adr r3, 800a4f8 <_dtoa_r+0x2b8>)
 800a364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a368:	f7f6 f92e 	bl	80005c8 <__aeabi_dmul>
 800a36c:	a364      	add	r3, pc, #400	; (adr r3, 800a500 <_dtoa_r+0x2c0>)
 800a36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a372:	f7f5 ff73 	bl	800025c <__adddf3>
 800a376:	4606      	mov	r6, r0
 800a378:	4628      	mov	r0, r5
 800a37a:	460f      	mov	r7, r1
 800a37c:	f7f6 f8ba 	bl	80004f4 <__aeabi_i2d>
 800a380:	a361      	add	r3, pc, #388	; (adr r3, 800a508 <_dtoa_r+0x2c8>)
 800a382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a386:	f7f6 f91f 	bl	80005c8 <__aeabi_dmul>
 800a38a:	4602      	mov	r2, r0
 800a38c:	460b      	mov	r3, r1
 800a38e:	4630      	mov	r0, r6
 800a390:	4639      	mov	r1, r7
 800a392:	f7f5 ff63 	bl	800025c <__adddf3>
 800a396:	4606      	mov	r6, r0
 800a398:	460f      	mov	r7, r1
 800a39a:	f7f6 fbc5 	bl	8000b28 <__aeabi_d2iz>
 800a39e:	2200      	movs	r2, #0
 800a3a0:	9000      	str	r0, [sp, #0]
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	4639      	mov	r1, r7
 800a3a8:	f7f6 fb80 	bl	8000aac <__aeabi_dcmplt>
 800a3ac:	b150      	cbz	r0, 800a3c4 <_dtoa_r+0x184>
 800a3ae:	9800      	ldr	r0, [sp, #0]
 800a3b0:	f7f6 f8a0 	bl	80004f4 <__aeabi_i2d>
 800a3b4:	4632      	mov	r2, r6
 800a3b6:	463b      	mov	r3, r7
 800a3b8:	f7f6 fb6e 	bl	8000a98 <__aeabi_dcmpeq>
 800a3bc:	b910      	cbnz	r0, 800a3c4 <_dtoa_r+0x184>
 800a3be:	9b00      	ldr	r3, [sp, #0]
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	9300      	str	r3, [sp, #0]
 800a3c4:	9b00      	ldr	r3, [sp, #0]
 800a3c6:	2b16      	cmp	r3, #22
 800a3c8:	d85a      	bhi.n	800a480 <_dtoa_r+0x240>
 800a3ca:	9a00      	ldr	r2, [sp, #0]
 800a3cc:	4b57      	ldr	r3, [pc, #348]	; (800a52c <_dtoa_r+0x2ec>)
 800a3ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d6:	ec51 0b19 	vmov	r0, r1, d9
 800a3da:	f7f6 fb67 	bl	8000aac <__aeabi_dcmplt>
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	d050      	beq.n	800a484 <_dtoa_r+0x244>
 800a3e2:	9b00      	ldr	r3, [sp, #0]
 800a3e4:	3b01      	subs	r3, #1
 800a3e6:	9300      	str	r3, [sp, #0]
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3ee:	1b5d      	subs	r5, r3, r5
 800a3f0:	1e6b      	subs	r3, r5, #1
 800a3f2:	9305      	str	r3, [sp, #20]
 800a3f4:	bf45      	ittet	mi
 800a3f6:	f1c5 0301 	rsbmi	r3, r5, #1
 800a3fa:	9304      	strmi	r3, [sp, #16]
 800a3fc:	2300      	movpl	r3, #0
 800a3fe:	2300      	movmi	r3, #0
 800a400:	bf4c      	ite	mi
 800a402:	9305      	strmi	r3, [sp, #20]
 800a404:	9304      	strpl	r3, [sp, #16]
 800a406:	9b00      	ldr	r3, [sp, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	db3d      	blt.n	800a488 <_dtoa_r+0x248>
 800a40c:	9b05      	ldr	r3, [sp, #20]
 800a40e:	9a00      	ldr	r2, [sp, #0]
 800a410:	920a      	str	r2, [sp, #40]	; 0x28
 800a412:	4413      	add	r3, r2
 800a414:	9305      	str	r3, [sp, #20]
 800a416:	2300      	movs	r3, #0
 800a418:	9307      	str	r3, [sp, #28]
 800a41a:	9b06      	ldr	r3, [sp, #24]
 800a41c:	2b09      	cmp	r3, #9
 800a41e:	f200 8089 	bhi.w	800a534 <_dtoa_r+0x2f4>
 800a422:	2b05      	cmp	r3, #5
 800a424:	bfc4      	itt	gt
 800a426:	3b04      	subgt	r3, #4
 800a428:	9306      	strgt	r3, [sp, #24]
 800a42a:	9b06      	ldr	r3, [sp, #24]
 800a42c:	f1a3 0302 	sub.w	r3, r3, #2
 800a430:	bfcc      	ite	gt
 800a432:	2500      	movgt	r5, #0
 800a434:	2501      	movle	r5, #1
 800a436:	2b03      	cmp	r3, #3
 800a438:	f200 8087 	bhi.w	800a54a <_dtoa_r+0x30a>
 800a43c:	e8df f003 	tbb	[pc, r3]
 800a440:	59383a2d 	.word	0x59383a2d
 800a444:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a448:	441d      	add	r5, r3
 800a44a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a44e:	2b20      	cmp	r3, #32
 800a450:	bfc1      	itttt	gt
 800a452:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a456:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a45a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a45e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a462:	bfda      	itte	le
 800a464:	f1c3 0320 	rsble	r3, r3, #32
 800a468:	fa06 f003 	lslle.w	r0, r6, r3
 800a46c:	4318      	orrgt	r0, r3
 800a46e:	f7f6 f831 	bl	80004d4 <__aeabi_ui2d>
 800a472:	2301      	movs	r3, #1
 800a474:	4606      	mov	r6, r0
 800a476:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a47a:	3d01      	subs	r5, #1
 800a47c:	930e      	str	r3, [sp, #56]	; 0x38
 800a47e:	e76a      	b.n	800a356 <_dtoa_r+0x116>
 800a480:	2301      	movs	r3, #1
 800a482:	e7b2      	b.n	800a3ea <_dtoa_r+0x1aa>
 800a484:	900b      	str	r0, [sp, #44]	; 0x2c
 800a486:	e7b1      	b.n	800a3ec <_dtoa_r+0x1ac>
 800a488:	9b04      	ldr	r3, [sp, #16]
 800a48a:	9a00      	ldr	r2, [sp, #0]
 800a48c:	1a9b      	subs	r3, r3, r2
 800a48e:	9304      	str	r3, [sp, #16]
 800a490:	4253      	negs	r3, r2
 800a492:	9307      	str	r3, [sp, #28]
 800a494:	2300      	movs	r3, #0
 800a496:	930a      	str	r3, [sp, #40]	; 0x28
 800a498:	e7bf      	b.n	800a41a <_dtoa_r+0x1da>
 800a49a:	2300      	movs	r3, #0
 800a49c:	9308      	str	r3, [sp, #32]
 800a49e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	dc55      	bgt.n	800a550 <_dtoa_r+0x310>
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	9209      	str	r2, [sp, #36]	; 0x24
 800a4ae:	e00c      	b.n	800a4ca <_dtoa_r+0x28a>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e7f3      	b.n	800a49c <_dtoa_r+0x25c>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4b8:	9308      	str	r3, [sp, #32]
 800a4ba:	9b00      	ldr	r3, [sp, #0]
 800a4bc:	4413      	add	r3, r2
 800a4be:	9302      	str	r3, [sp, #8]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	9303      	str	r3, [sp, #12]
 800a4c6:	bfb8      	it	lt
 800a4c8:	2301      	movlt	r3, #1
 800a4ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	6042      	str	r2, [r0, #4]
 800a4d0:	2204      	movs	r2, #4
 800a4d2:	f102 0614 	add.w	r6, r2, #20
 800a4d6:	429e      	cmp	r6, r3
 800a4d8:	6841      	ldr	r1, [r0, #4]
 800a4da:	d93d      	bls.n	800a558 <_dtoa_r+0x318>
 800a4dc:	4620      	mov	r0, r4
 800a4de:	f000 fcb7 	bl	800ae50 <_Balloc>
 800a4e2:	9001      	str	r0, [sp, #4]
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	d13b      	bne.n	800a560 <_dtoa_r+0x320>
 800a4e8:	4b11      	ldr	r3, [pc, #68]	; (800a530 <_dtoa_r+0x2f0>)
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a4f0:	e6c0      	b.n	800a274 <_dtoa_r+0x34>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e7df      	b.n	800a4b6 <_dtoa_r+0x276>
 800a4f6:	bf00      	nop
 800a4f8:	636f4361 	.word	0x636f4361
 800a4fc:	3fd287a7 	.word	0x3fd287a7
 800a500:	8b60c8b3 	.word	0x8b60c8b3
 800a504:	3fc68a28 	.word	0x3fc68a28
 800a508:	509f79fb 	.word	0x509f79fb
 800a50c:	3fd34413 	.word	0x3fd34413
 800a510:	0800cb25 	.word	0x0800cb25
 800a514:	0800cb3c 	.word	0x0800cb3c
 800a518:	7ff00000 	.word	0x7ff00000
 800a51c:	0800cb21 	.word	0x0800cb21
 800a520:	0800cb18 	.word	0x0800cb18
 800a524:	0800caf5 	.word	0x0800caf5
 800a528:	3ff80000 	.word	0x3ff80000
 800a52c:	0800cc30 	.word	0x0800cc30
 800a530:	0800cb97 	.word	0x0800cb97
 800a534:	2501      	movs	r5, #1
 800a536:	2300      	movs	r3, #0
 800a538:	9306      	str	r3, [sp, #24]
 800a53a:	9508      	str	r5, [sp, #32]
 800a53c:	f04f 33ff 	mov.w	r3, #4294967295
 800a540:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a544:	2200      	movs	r2, #0
 800a546:	2312      	movs	r3, #18
 800a548:	e7b0      	b.n	800a4ac <_dtoa_r+0x26c>
 800a54a:	2301      	movs	r3, #1
 800a54c:	9308      	str	r3, [sp, #32]
 800a54e:	e7f5      	b.n	800a53c <_dtoa_r+0x2fc>
 800a550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a552:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a556:	e7b8      	b.n	800a4ca <_dtoa_r+0x28a>
 800a558:	3101      	adds	r1, #1
 800a55a:	6041      	str	r1, [r0, #4]
 800a55c:	0052      	lsls	r2, r2, #1
 800a55e:	e7b8      	b.n	800a4d2 <_dtoa_r+0x292>
 800a560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a562:	9a01      	ldr	r2, [sp, #4]
 800a564:	601a      	str	r2, [r3, #0]
 800a566:	9b03      	ldr	r3, [sp, #12]
 800a568:	2b0e      	cmp	r3, #14
 800a56a:	f200 809d 	bhi.w	800a6a8 <_dtoa_r+0x468>
 800a56e:	2d00      	cmp	r5, #0
 800a570:	f000 809a 	beq.w	800a6a8 <_dtoa_r+0x468>
 800a574:	9b00      	ldr	r3, [sp, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	dd32      	ble.n	800a5e0 <_dtoa_r+0x3a0>
 800a57a:	4ab7      	ldr	r2, [pc, #732]	; (800a858 <_dtoa_r+0x618>)
 800a57c:	f003 030f 	and.w	r3, r3, #15
 800a580:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a584:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a588:	9b00      	ldr	r3, [sp, #0]
 800a58a:	05d8      	lsls	r0, r3, #23
 800a58c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a590:	d516      	bpl.n	800a5c0 <_dtoa_r+0x380>
 800a592:	4bb2      	ldr	r3, [pc, #712]	; (800a85c <_dtoa_r+0x61c>)
 800a594:	ec51 0b19 	vmov	r0, r1, d9
 800a598:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a59c:	f7f6 f93e 	bl	800081c <__aeabi_ddiv>
 800a5a0:	f007 070f 	and.w	r7, r7, #15
 800a5a4:	4682      	mov	sl, r0
 800a5a6:	468b      	mov	fp, r1
 800a5a8:	2503      	movs	r5, #3
 800a5aa:	4eac      	ldr	r6, [pc, #688]	; (800a85c <_dtoa_r+0x61c>)
 800a5ac:	b957      	cbnz	r7, 800a5c4 <_dtoa_r+0x384>
 800a5ae:	4642      	mov	r2, r8
 800a5b0:	464b      	mov	r3, r9
 800a5b2:	4650      	mov	r0, sl
 800a5b4:	4659      	mov	r1, fp
 800a5b6:	f7f6 f931 	bl	800081c <__aeabi_ddiv>
 800a5ba:	4682      	mov	sl, r0
 800a5bc:	468b      	mov	fp, r1
 800a5be:	e028      	b.n	800a612 <_dtoa_r+0x3d2>
 800a5c0:	2502      	movs	r5, #2
 800a5c2:	e7f2      	b.n	800a5aa <_dtoa_r+0x36a>
 800a5c4:	07f9      	lsls	r1, r7, #31
 800a5c6:	d508      	bpl.n	800a5da <_dtoa_r+0x39a>
 800a5c8:	4640      	mov	r0, r8
 800a5ca:	4649      	mov	r1, r9
 800a5cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a5d0:	f7f5 fffa 	bl	80005c8 <__aeabi_dmul>
 800a5d4:	3501      	adds	r5, #1
 800a5d6:	4680      	mov	r8, r0
 800a5d8:	4689      	mov	r9, r1
 800a5da:	107f      	asrs	r7, r7, #1
 800a5dc:	3608      	adds	r6, #8
 800a5de:	e7e5      	b.n	800a5ac <_dtoa_r+0x36c>
 800a5e0:	f000 809b 	beq.w	800a71a <_dtoa_r+0x4da>
 800a5e4:	9b00      	ldr	r3, [sp, #0]
 800a5e6:	4f9d      	ldr	r7, [pc, #628]	; (800a85c <_dtoa_r+0x61c>)
 800a5e8:	425e      	negs	r6, r3
 800a5ea:	4b9b      	ldr	r3, [pc, #620]	; (800a858 <_dtoa_r+0x618>)
 800a5ec:	f006 020f 	and.w	r2, r6, #15
 800a5f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f8:	ec51 0b19 	vmov	r0, r1, d9
 800a5fc:	f7f5 ffe4 	bl	80005c8 <__aeabi_dmul>
 800a600:	1136      	asrs	r6, r6, #4
 800a602:	4682      	mov	sl, r0
 800a604:	468b      	mov	fp, r1
 800a606:	2300      	movs	r3, #0
 800a608:	2502      	movs	r5, #2
 800a60a:	2e00      	cmp	r6, #0
 800a60c:	d17a      	bne.n	800a704 <_dtoa_r+0x4c4>
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d1d3      	bne.n	800a5ba <_dtoa_r+0x37a>
 800a612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a614:	2b00      	cmp	r3, #0
 800a616:	f000 8082 	beq.w	800a71e <_dtoa_r+0x4de>
 800a61a:	4b91      	ldr	r3, [pc, #580]	; (800a860 <_dtoa_r+0x620>)
 800a61c:	2200      	movs	r2, #0
 800a61e:	4650      	mov	r0, sl
 800a620:	4659      	mov	r1, fp
 800a622:	f7f6 fa43 	bl	8000aac <__aeabi_dcmplt>
 800a626:	2800      	cmp	r0, #0
 800a628:	d079      	beq.n	800a71e <_dtoa_r+0x4de>
 800a62a:	9b03      	ldr	r3, [sp, #12]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d076      	beq.n	800a71e <_dtoa_r+0x4de>
 800a630:	9b02      	ldr	r3, [sp, #8]
 800a632:	2b00      	cmp	r3, #0
 800a634:	dd36      	ble.n	800a6a4 <_dtoa_r+0x464>
 800a636:	9b00      	ldr	r3, [sp, #0]
 800a638:	4650      	mov	r0, sl
 800a63a:	4659      	mov	r1, fp
 800a63c:	1e5f      	subs	r7, r3, #1
 800a63e:	2200      	movs	r2, #0
 800a640:	4b88      	ldr	r3, [pc, #544]	; (800a864 <_dtoa_r+0x624>)
 800a642:	f7f5 ffc1 	bl	80005c8 <__aeabi_dmul>
 800a646:	9e02      	ldr	r6, [sp, #8]
 800a648:	4682      	mov	sl, r0
 800a64a:	468b      	mov	fp, r1
 800a64c:	3501      	adds	r5, #1
 800a64e:	4628      	mov	r0, r5
 800a650:	f7f5 ff50 	bl	80004f4 <__aeabi_i2d>
 800a654:	4652      	mov	r2, sl
 800a656:	465b      	mov	r3, fp
 800a658:	f7f5 ffb6 	bl	80005c8 <__aeabi_dmul>
 800a65c:	4b82      	ldr	r3, [pc, #520]	; (800a868 <_dtoa_r+0x628>)
 800a65e:	2200      	movs	r2, #0
 800a660:	f7f5 fdfc 	bl	800025c <__adddf3>
 800a664:	46d0      	mov	r8, sl
 800a666:	46d9      	mov	r9, fp
 800a668:	4682      	mov	sl, r0
 800a66a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a66e:	2e00      	cmp	r6, #0
 800a670:	d158      	bne.n	800a724 <_dtoa_r+0x4e4>
 800a672:	4b7e      	ldr	r3, [pc, #504]	; (800a86c <_dtoa_r+0x62c>)
 800a674:	2200      	movs	r2, #0
 800a676:	4640      	mov	r0, r8
 800a678:	4649      	mov	r1, r9
 800a67a:	f7f5 fded 	bl	8000258 <__aeabi_dsub>
 800a67e:	4652      	mov	r2, sl
 800a680:	465b      	mov	r3, fp
 800a682:	4680      	mov	r8, r0
 800a684:	4689      	mov	r9, r1
 800a686:	f7f6 fa2f 	bl	8000ae8 <__aeabi_dcmpgt>
 800a68a:	2800      	cmp	r0, #0
 800a68c:	f040 8295 	bne.w	800abba <_dtoa_r+0x97a>
 800a690:	4652      	mov	r2, sl
 800a692:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a696:	4640      	mov	r0, r8
 800a698:	4649      	mov	r1, r9
 800a69a:	f7f6 fa07 	bl	8000aac <__aeabi_dcmplt>
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	f040 8289 	bne.w	800abb6 <_dtoa_r+0x976>
 800a6a4:	ec5b ab19 	vmov	sl, fp, d9
 800a6a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f2c0 8148 	blt.w	800a940 <_dtoa_r+0x700>
 800a6b0:	9a00      	ldr	r2, [sp, #0]
 800a6b2:	2a0e      	cmp	r2, #14
 800a6b4:	f300 8144 	bgt.w	800a940 <_dtoa_r+0x700>
 800a6b8:	4b67      	ldr	r3, [pc, #412]	; (800a858 <_dtoa_r+0x618>)
 800a6ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6be:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f280 80d5 	bge.w	800a874 <_dtoa_r+0x634>
 800a6ca:	9b03      	ldr	r3, [sp, #12]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	f300 80d1 	bgt.w	800a874 <_dtoa_r+0x634>
 800a6d2:	f040 826f 	bne.w	800abb4 <_dtoa_r+0x974>
 800a6d6:	4b65      	ldr	r3, [pc, #404]	; (800a86c <_dtoa_r+0x62c>)
 800a6d8:	2200      	movs	r2, #0
 800a6da:	4640      	mov	r0, r8
 800a6dc:	4649      	mov	r1, r9
 800a6de:	f7f5 ff73 	bl	80005c8 <__aeabi_dmul>
 800a6e2:	4652      	mov	r2, sl
 800a6e4:	465b      	mov	r3, fp
 800a6e6:	f7f6 f9f5 	bl	8000ad4 <__aeabi_dcmpge>
 800a6ea:	9e03      	ldr	r6, [sp, #12]
 800a6ec:	4637      	mov	r7, r6
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	f040 8245 	bne.w	800ab7e <_dtoa_r+0x93e>
 800a6f4:	9d01      	ldr	r5, [sp, #4]
 800a6f6:	2331      	movs	r3, #49	; 0x31
 800a6f8:	f805 3b01 	strb.w	r3, [r5], #1
 800a6fc:	9b00      	ldr	r3, [sp, #0]
 800a6fe:	3301      	adds	r3, #1
 800a700:	9300      	str	r3, [sp, #0]
 800a702:	e240      	b.n	800ab86 <_dtoa_r+0x946>
 800a704:	07f2      	lsls	r2, r6, #31
 800a706:	d505      	bpl.n	800a714 <_dtoa_r+0x4d4>
 800a708:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a70c:	f7f5 ff5c 	bl	80005c8 <__aeabi_dmul>
 800a710:	3501      	adds	r5, #1
 800a712:	2301      	movs	r3, #1
 800a714:	1076      	asrs	r6, r6, #1
 800a716:	3708      	adds	r7, #8
 800a718:	e777      	b.n	800a60a <_dtoa_r+0x3ca>
 800a71a:	2502      	movs	r5, #2
 800a71c:	e779      	b.n	800a612 <_dtoa_r+0x3d2>
 800a71e:	9f00      	ldr	r7, [sp, #0]
 800a720:	9e03      	ldr	r6, [sp, #12]
 800a722:	e794      	b.n	800a64e <_dtoa_r+0x40e>
 800a724:	9901      	ldr	r1, [sp, #4]
 800a726:	4b4c      	ldr	r3, [pc, #304]	; (800a858 <_dtoa_r+0x618>)
 800a728:	4431      	add	r1, r6
 800a72a:	910d      	str	r1, [sp, #52]	; 0x34
 800a72c:	9908      	ldr	r1, [sp, #32]
 800a72e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a732:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a736:	2900      	cmp	r1, #0
 800a738:	d043      	beq.n	800a7c2 <_dtoa_r+0x582>
 800a73a:	494d      	ldr	r1, [pc, #308]	; (800a870 <_dtoa_r+0x630>)
 800a73c:	2000      	movs	r0, #0
 800a73e:	f7f6 f86d 	bl	800081c <__aeabi_ddiv>
 800a742:	4652      	mov	r2, sl
 800a744:	465b      	mov	r3, fp
 800a746:	f7f5 fd87 	bl	8000258 <__aeabi_dsub>
 800a74a:	9d01      	ldr	r5, [sp, #4]
 800a74c:	4682      	mov	sl, r0
 800a74e:	468b      	mov	fp, r1
 800a750:	4649      	mov	r1, r9
 800a752:	4640      	mov	r0, r8
 800a754:	f7f6 f9e8 	bl	8000b28 <__aeabi_d2iz>
 800a758:	4606      	mov	r6, r0
 800a75a:	f7f5 fecb 	bl	80004f4 <__aeabi_i2d>
 800a75e:	4602      	mov	r2, r0
 800a760:	460b      	mov	r3, r1
 800a762:	4640      	mov	r0, r8
 800a764:	4649      	mov	r1, r9
 800a766:	f7f5 fd77 	bl	8000258 <__aeabi_dsub>
 800a76a:	3630      	adds	r6, #48	; 0x30
 800a76c:	f805 6b01 	strb.w	r6, [r5], #1
 800a770:	4652      	mov	r2, sl
 800a772:	465b      	mov	r3, fp
 800a774:	4680      	mov	r8, r0
 800a776:	4689      	mov	r9, r1
 800a778:	f7f6 f998 	bl	8000aac <__aeabi_dcmplt>
 800a77c:	2800      	cmp	r0, #0
 800a77e:	d163      	bne.n	800a848 <_dtoa_r+0x608>
 800a780:	4642      	mov	r2, r8
 800a782:	464b      	mov	r3, r9
 800a784:	4936      	ldr	r1, [pc, #216]	; (800a860 <_dtoa_r+0x620>)
 800a786:	2000      	movs	r0, #0
 800a788:	f7f5 fd66 	bl	8000258 <__aeabi_dsub>
 800a78c:	4652      	mov	r2, sl
 800a78e:	465b      	mov	r3, fp
 800a790:	f7f6 f98c 	bl	8000aac <__aeabi_dcmplt>
 800a794:	2800      	cmp	r0, #0
 800a796:	f040 80b5 	bne.w	800a904 <_dtoa_r+0x6c4>
 800a79a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a79c:	429d      	cmp	r5, r3
 800a79e:	d081      	beq.n	800a6a4 <_dtoa_r+0x464>
 800a7a0:	4b30      	ldr	r3, [pc, #192]	; (800a864 <_dtoa_r+0x624>)
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	4650      	mov	r0, sl
 800a7a6:	4659      	mov	r1, fp
 800a7a8:	f7f5 ff0e 	bl	80005c8 <__aeabi_dmul>
 800a7ac:	4b2d      	ldr	r3, [pc, #180]	; (800a864 <_dtoa_r+0x624>)
 800a7ae:	4682      	mov	sl, r0
 800a7b0:	468b      	mov	fp, r1
 800a7b2:	4640      	mov	r0, r8
 800a7b4:	4649      	mov	r1, r9
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f7f5 ff06 	bl	80005c8 <__aeabi_dmul>
 800a7bc:	4680      	mov	r8, r0
 800a7be:	4689      	mov	r9, r1
 800a7c0:	e7c6      	b.n	800a750 <_dtoa_r+0x510>
 800a7c2:	4650      	mov	r0, sl
 800a7c4:	4659      	mov	r1, fp
 800a7c6:	f7f5 feff 	bl	80005c8 <__aeabi_dmul>
 800a7ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7cc:	9d01      	ldr	r5, [sp, #4]
 800a7ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7d0:	4682      	mov	sl, r0
 800a7d2:	468b      	mov	fp, r1
 800a7d4:	4649      	mov	r1, r9
 800a7d6:	4640      	mov	r0, r8
 800a7d8:	f7f6 f9a6 	bl	8000b28 <__aeabi_d2iz>
 800a7dc:	4606      	mov	r6, r0
 800a7de:	f7f5 fe89 	bl	80004f4 <__aeabi_i2d>
 800a7e2:	3630      	adds	r6, #48	; 0x30
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	4640      	mov	r0, r8
 800a7ea:	4649      	mov	r1, r9
 800a7ec:	f7f5 fd34 	bl	8000258 <__aeabi_dsub>
 800a7f0:	f805 6b01 	strb.w	r6, [r5], #1
 800a7f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7f6:	429d      	cmp	r5, r3
 800a7f8:	4680      	mov	r8, r0
 800a7fa:	4689      	mov	r9, r1
 800a7fc:	f04f 0200 	mov.w	r2, #0
 800a800:	d124      	bne.n	800a84c <_dtoa_r+0x60c>
 800a802:	4b1b      	ldr	r3, [pc, #108]	; (800a870 <_dtoa_r+0x630>)
 800a804:	4650      	mov	r0, sl
 800a806:	4659      	mov	r1, fp
 800a808:	f7f5 fd28 	bl	800025c <__adddf3>
 800a80c:	4602      	mov	r2, r0
 800a80e:	460b      	mov	r3, r1
 800a810:	4640      	mov	r0, r8
 800a812:	4649      	mov	r1, r9
 800a814:	f7f6 f968 	bl	8000ae8 <__aeabi_dcmpgt>
 800a818:	2800      	cmp	r0, #0
 800a81a:	d173      	bne.n	800a904 <_dtoa_r+0x6c4>
 800a81c:	4652      	mov	r2, sl
 800a81e:	465b      	mov	r3, fp
 800a820:	4913      	ldr	r1, [pc, #76]	; (800a870 <_dtoa_r+0x630>)
 800a822:	2000      	movs	r0, #0
 800a824:	f7f5 fd18 	bl	8000258 <__aeabi_dsub>
 800a828:	4602      	mov	r2, r0
 800a82a:	460b      	mov	r3, r1
 800a82c:	4640      	mov	r0, r8
 800a82e:	4649      	mov	r1, r9
 800a830:	f7f6 f93c 	bl	8000aac <__aeabi_dcmplt>
 800a834:	2800      	cmp	r0, #0
 800a836:	f43f af35 	beq.w	800a6a4 <_dtoa_r+0x464>
 800a83a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a83c:	1e6b      	subs	r3, r5, #1
 800a83e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a840:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a844:	2b30      	cmp	r3, #48	; 0x30
 800a846:	d0f8      	beq.n	800a83a <_dtoa_r+0x5fa>
 800a848:	9700      	str	r7, [sp, #0]
 800a84a:	e049      	b.n	800a8e0 <_dtoa_r+0x6a0>
 800a84c:	4b05      	ldr	r3, [pc, #20]	; (800a864 <_dtoa_r+0x624>)
 800a84e:	f7f5 febb 	bl	80005c8 <__aeabi_dmul>
 800a852:	4680      	mov	r8, r0
 800a854:	4689      	mov	r9, r1
 800a856:	e7bd      	b.n	800a7d4 <_dtoa_r+0x594>
 800a858:	0800cc30 	.word	0x0800cc30
 800a85c:	0800cc08 	.word	0x0800cc08
 800a860:	3ff00000 	.word	0x3ff00000
 800a864:	40240000 	.word	0x40240000
 800a868:	401c0000 	.word	0x401c0000
 800a86c:	40140000 	.word	0x40140000
 800a870:	3fe00000 	.word	0x3fe00000
 800a874:	9d01      	ldr	r5, [sp, #4]
 800a876:	4656      	mov	r6, sl
 800a878:	465f      	mov	r7, fp
 800a87a:	4642      	mov	r2, r8
 800a87c:	464b      	mov	r3, r9
 800a87e:	4630      	mov	r0, r6
 800a880:	4639      	mov	r1, r7
 800a882:	f7f5 ffcb 	bl	800081c <__aeabi_ddiv>
 800a886:	f7f6 f94f 	bl	8000b28 <__aeabi_d2iz>
 800a88a:	4682      	mov	sl, r0
 800a88c:	f7f5 fe32 	bl	80004f4 <__aeabi_i2d>
 800a890:	4642      	mov	r2, r8
 800a892:	464b      	mov	r3, r9
 800a894:	f7f5 fe98 	bl	80005c8 <__aeabi_dmul>
 800a898:	4602      	mov	r2, r0
 800a89a:	460b      	mov	r3, r1
 800a89c:	4630      	mov	r0, r6
 800a89e:	4639      	mov	r1, r7
 800a8a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a8a4:	f7f5 fcd8 	bl	8000258 <__aeabi_dsub>
 800a8a8:	f805 6b01 	strb.w	r6, [r5], #1
 800a8ac:	9e01      	ldr	r6, [sp, #4]
 800a8ae:	9f03      	ldr	r7, [sp, #12]
 800a8b0:	1bae      	subs	r6, r5, r6
 800a8b2:	42b7      	cmp	r7, r6
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	d135      	bne.n	800a926 <_dtoa_r+0x6e6>
 800a8ba:	f7f5 fccf 	bl	800025c <__adddf3>
 800a8be:	4642      	mov	r2, r8
 800a8c0:	464b      	mov	r3, r9
 800a8c2:	4606      	mov	r6, r0
 800a8c4:	460f      	mov	r7, r1
 800a8c6:	f7f6 f90f 	bl	8000ae8 <__aeabi_dcmpgt>
 800a8ca:	b9d0      	cbnz	r0, 800a902 <_dtoa_r+0x6c2>
 800a8cc:	4642      	mov	r2, r8
 800a8ce:	464b      	mov	r3, r9
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	4639      	mov	r1, r7
 800a8d4:	f7f6 f8e0 	bl	8000a98 <__aeabi_dcmpeq>
 800a8d8:	b110      	cbz	r0, 800a8e0 <_dtoa_r+0x6a0>
 800a8da:	f01a 0f01 	tst.w	sl, #1
 800a8de:	d110      	bne.n	800a902 <_dtoa_r+0x6c2>
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	ee18 1a10 	vmov	r1, s16
 800a8e6:	f000 faf3 	bl	800aed0 <_Bfree>
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	9800      	ldr	r0, [sp, #0]
 800a8ee:	702b      	strb	r3, [r5, #0]
 800a8f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8f2:	3001      	adds	r0, #1
 800a8f4:	6018      	str	r0, [r3, #0]
 800a8f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f43f acf1 	beq.w	800a2e0 <_dtoa_r+0xa0>
 800a8fe:	601d      	str	r5, [r3, #0]
 800a900:	e4ee      	b.n	800a2e0 <_dtoa_r+0xa0>
 800a902:	9f00      	ldr	r7, [sp, #0]
 800a904:	462b      	mov	r3, r5
 800a906:	461d      	mov	r5, r3
 800a908:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a90c:	2a39      	cmp	r2, #57	; 0x39
 800a90e:	d106      	bne.n	800a91e <_dtoa_r+0x6de>
 800a910:	9a01      	ldr	r2, [sp, #4]
 800a912:	429a      	cmp	r2, r3
 800a914:	d1f7      	bne.n	800a906 <_dtoa_r+0x6c6>
 800a916:	9901      	ldr	r1, [sp, #4]
 800a918:	2230      	movs	r2, #48	; 0x30
 800a91a:	3701      	adds	r7, #1
 800a91c:	700a      	strb	r2, [r1, #0]
 800a91e:	781a      	ldrb	r2, [r3, #0]
 800a920:	3201      	adds	r2, #1
 800a922:	701a      	strb	r2, [r3, #0]
 800a924:	e790      	b.n	800a848 <_dtoa_r+0x608>
 800a926:	4ba6      	ldr	r3, [pc, #664]	; (800abc0 <_dtoa_r+0x980>)
 800a928:	2200      	movs	r2, #0
 800a92a:	f7f5 fe4d 	bl	80005c8 <__aeabi_dmul>
 800a92e:	2200      	movs	r2, #0
 800a930:	2300      	movs	r3, #0
 800a932:	4606      	mov	r6, r0
 800a934:	460f      	mov	r7, r1
 800a936:	f7f6 f8af 	bl	8000a98 <__aeabi_dcmpeq>
 800a93a:	2800      	cmp	r0, #0
 800a93c:	d09d      	beq.n	800a87a <_dtoa_r+0x63a>
 800a93e:	e7cf      	b.n	800a8e0 <_dtoa_r+0x6a0>
 800a940:	9a08      	ldr	r2, [sp, #32]
 800a942:	2a00      	cmp	r2, #0
 800a944:	f000 80d7 	beq.w	800aaf6 <_dtoa_r+0x8b6>
 800a948:	9a06      	ldr	r2, [sp, #24]
 800a94a:	2a01      	cmp	r2, #1
 800a94c:	f300 80ba 	bgt.w	800aac4 <_dtoa_r+0x884>
 800a950:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a952:	2a00      	cmp	r2, #0
 800a954:	f000 80b2 	beq.w	800aabc <_dtoa_r+0x87c>
 800a958:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a95c:	9e07      	ldr	r6, [sp, #28]
 800a95e:	9d04      	ldr	r5, [sp, #16]
 800a960:	9a04      	ldr	r2, [sp, #16]
 800a962:	441a      	add	r2, r3
 800a964:	9204      	str	r2, [sp, #16]
 800a966:	9a05      	ldr	r2, [sp, #20]
 800a968:	2101      	movs	r1, #1
 800a96a:	441a      	add	r2, r3
 800a96c:	4620      	mov	r0, r4
 800a96e:	9205      	str	r2, [sp, #20]
 800a970:	f000 fb66 	bl	800b040 <__i2b>
 800a974:	4607      	mov	r7, r0
 800a976:	2d00      	cmp	r5, #0
 800a978:	dd0c      	ble.n	800a994 <_dtoa_r+0x754>
 800a97a:	9b05      	ldr	r3, [sp, #20]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	dd09      	ble.n	800a994 <_dtoa_r+0x754>
 800a980:	42ab      	cmp	r3, r5
 800a982:	9a04      	ldr	r2, [sp, #16]
 800a984:	bfa8      	it	ge
 800a986:	462b      	movge	r3, r5
 800a988:	1ad2      	subs	r2, r2, r3
 800a98a:	9204      	str	r2, [sp, #16]
 800a98c:	9a05      	ldr	r2, [sp, #20]
 800a98e:	1aed      	subs	r5, r5, r3
 800a990:	1ad3      	subs	r3, r2, r3
 800a992:	9305      	str	r3, [sp, #20]
 800a994:	9b07      	ldr	r3, [sp, #28]
 800a996:	b31b      	cbz	r3, 800a9e0 <_dtoa_r+0x7a0>
 800a998:	9b08      	ldr	r3, [sp, #32]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f000 80af 	beq.w	800aafe <_dtoa_r+0x8be>
 800a9a0:	2e00      	cmp	r6, #0
 800a9a2:	dd13      	ble.n	800a9cc <_dtoa_r+0x78c>
 800a9a4:	4639      	mov	r1, r7
 800a9a6:	4632      	mov	r2, r6
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	f000 fc09 	bl	800b1c0 <__pow5mult>
 800a9ae:	ee18 2a10 	vmov	r2, s16
 800a9b2:	4601      	mov	r1, r0
 800a9b4:	4607      	mov	r7, r0
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f000 fb58 	bl	800b06c <__multiply>
 800a9bc:	ee18 1a10 	vmov	r1, s16
 800a9c0:	4680      	mov	r8, r0
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f000 fa84 	bl	800aed0 <_Bfree>
 800a9c8:	ee08 8a10 	vmov	s16, r8
 800a9cc:	9b07      	ldr	r3, [sp, #28]
 800a9ce:	1b9a      	subs	r2, r3, r6
 800a9d0:	d006      	beq.n	800a9e0 <_dtoa_r+0x7a0>
 800a9d2:	ee18 1a10 	vmov	r1, s16
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	f000 fbf2 	bl	800b1c0 <__pow5mult>
 800a9dc:	ee08 0a10 	vmov	s16, r0
 800a9e0:	2101      	movs	r1, #1
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	f000 fb2c 	bl	800b040 <__i2b>
 800a9e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	4606      	mov	r6, r0
 800a9ee:	f340 8088 	ble.w	800ab02 <_dtoa_r+0x8c2>
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	4601      	mov	r1, r0
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	f000 fbe2 	bl	800b1c0 <__pow5mult>
 800a9fc:	9b06      	ldr	r3, [sp, #24]
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	4606      	mov	r6, r0
 800aa02:	f340 8081 	ble.w	800ab08 <_dtoa_r+0x8c8>
 800aa06:	f04f 0800 	mov.w	r8, #0
 800aa0a:	6933      	ldr	r3, [r6, #16]
 800aa0c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa10:	6918      	ldr	r0, [r3, #16]
 800aa12:	f000 fac5 	bl	800afa0 <__hi0bits>
 800aa16:	f1c0 0020 	rsb	r0, r0, #32
 800aa1a:	9b05      	ldr	r3, [sp, #20]
 800aa1c:	4418      	add	r0, r3
 800aa1e:	f010 001f 	ands.w	r0, r0, #31
 800aa22:	f000 8092 	beq.w	800ab4a <_dtoa_r+0x90a>
 800aa26:	f1c0 0320 	rsb	r3, r0, #32
 800aa2a:	2b04      	cmp	r3, #4
 800aa2c:	f340 808a 	ble.w	800ab44 <_dtoa_r+0x904>
 800aa30:	f1c0 001c 	rsb	r0, r0, #28
 800aa34:	9b04      	ldr	r3, [sp, #16]
 800aa36:	4403      	add	r3, r0
 800aa38:	9304      	str	r3, [sp, #16]
 800aa3a:	9b05      	ldr	r3, [sp, #20]
 800aa3c:	4403      	add	r3, r0
 800aa3e:	4405      	add	r5, r0
 800aa40:	9305      	str	r3, [sp, #20]
 800aa42:	9b04      	ldr	r3, [sp, #16]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	dd07      	ble.n	800aa58 <_dtoa_r+0x818>
 800aa48:	ee18 1a10 	vmov	r1, s16
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f000 fc10 	bl	800b274 <__lshift>
 800aa54:	ee08 0a10 	vmov	s16, r0
 800aa58:	9b05      	ldr	r3, [sp, #20]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	dd05      	ble.n	800aa6a <_dtoa_r+0x82a>
 800aa5e:	4631      	mov	r1, r6
 800aa60:	461a      	mov	r2, r3
 800aa62:	4620      	mov	r0, r4
 800aa64:	f000 fc06 	bl	800b274 <__lshift>
 800aa68:	4606      	mov	r6, r0
 800aa6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d06e      	beq.n	800ab4e <_dtoa_r+0x90e>
 800aa70:	ee18 0a10 	vmov	r0, s16
 800aa74:	4631      	mov	r1, r6
 800aa76:	f000 fc6d 	bl	800b354 <__mcmp>
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	da67      	bge.n	800ab4e <_dtoa_r+0x90e>
 800aa7e:	9b00      	ldr	r3, [sp, #0]
 800aa80:	3b01      	subs	r3, #1
 800aa82:	ee18 1a10 	vmov	r1, s16
 800aa86:	9300      	str	r3, [sp, #0]
 800aa88:	220a      	movs	r2, #10
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	f000 fa41 	bl	800af14 <__multadd>
 800aa92:	9b08      	ldr	r3, [sp, #32]
 800aa94:	ee08 0a10 	vmov	s16, r0
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	f000 81b1 	beq.w	800ae00 <_dtoa_r+0xbc0>
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	4639      	mov	r1, r7
 800aaa2:	220a      	movs	r2, #10
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	f000 fa35 	bl	800af14 <__multadd>
 800aaaa:	9b02      	ldr	r3, [sp, #8]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	4607      	mov	r7, r0
 800aab0:	f300 808e 	bgt.w	800abd0 <_dtoa_r+0x990>
 800aab4:	9b06      	ldr	r3, [sp, #24]
 800aab6:	2b02      	cmp	r3, #2
 800aab8:	dc51      	bgt.n	800ab5e <_dtoa_r+0x91e>
 800aaba:	e089      	b.n	800abd0 <_dtoa_r+0x990>
 800aabc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aabe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aac2:	e74b      	b.n	800a95c <_dtoa_r+0x71c>
 800aac4:	9b03      	ldr	r3, [sp, #12]
 800aac6:	1e5e      	subs	r6, r3, #1
 800aac8:	9b07      	ldr	r3, [sp, #28]
 800aaca:	42b3      	cmp	r3, r6
 800aacc:	bfbf      	itttt	lt
 800aace:	9b07      	ldrlt	r3, [sp, #28]
 800aad0:	9607      	strlt	r6, [sp, #28]
 800aad2:	1af2      	sublt	r2, r6, r3
 800aad4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aad6:	bfb6      	itet	lt
 800aad8:	189b      	addlt	r3, r3, r2
 800aada:	1b9e      	subge	r6, r3, r6
 800aadc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800aade:	9b03      	ldr	r3, [sp, #12]
 800aae0:	bfb8      	it	lt
 800aae2:	2600      	movlt	r6, #0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	bfb7      	itett	lt
 800aae8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800aaec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800aaf0:	1a9d      	sublt	r5, r3, r2
 800aaf2:	2300      	movlt	r3, #0
 800aaf4:	e734      	b.n	800a960 <_dtoa_r+0x720>
 800aaf6:	9e07      	ldr	r6, [sp, #28]
 800aaf8:	9d04      	ldr	r5, [sp, #16]
 800aafa:	9f08      	ldr	r7, [sp, #32]
 800aafc:	e73b      	b.n	800a976 <_dtoa_r+0x736>
 800aafe:	9a07      	ldr	r2, [sp, #28]
 800ab00:	e767      	b.n	800a9d2 <_dtoa_r+0x792>
 800ab02:	9b06      	ldr	r3, [sp, #24]
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	dc18      	bgt.n	800ab3a <_dtoa_r+0x8fa>
 800ab08:	f1ba 0f00 	cmp.w	sl, #0
 800ab0c:	d115      	bne.n	800ab3a <_dtoa_r+0x8fa>
 800ab0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab12:	b993      	cbnz	r3, 800ab3a <_dtoa_r+0x8fa>
 800ab14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ab18:	0d1b      	lsrs	r3, r3, #20
 800ab1a:	051b      	lsls	r3, r3, #20
 800ab1c:	b183      	cbz	r3, 800ab40 <_dtoa_r+0x900>
 800ab1e:	9b04      	ldr	r3, [sp, #16]
 800ab20:	3301      	adds	r3, #1
 800ab22:	9304      	str	r3, [sp, #16]
 800ab24:	9b05      	ldr	r3, [sp, #20]
 800ab26:	3301      	adds	r3, #1
 800ab28:	9305      	str	r3, [sp, #20]
 800ab2a:	f04f 0801 	mov.w	r8, #1
 800ab2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	f47f af6a 	bne.w	800aa0a <_dtoa_r+0x7ca>
 800ab36:	2001      	movs	r0, #1
 800ab38:	e76f      	b.n	800aa1a <_dtoa_r+0x7da>
 800ab3a:	f04f 0800 	mov.w	r8, #0
 800ab3e:	e7f6      	b.n	800ab2e <_dtoa_r+0x8ee>
 800ab40:	4698      	mov	r8, r3
 800ab42:	e7f4      	b.n	800ab2e <_dtoa_r+0x8ee>
 800ab44:	f43f af7d 	beq.w	800aa42 <_dtoa_r+0x802>
 800ab48:	4618      	mov	r0, r3
 800ab4a:	301c      	adds	r0, #28
 800ab4c:	e772      	b.n	800aa34 <_dtoa_r+0x7f4>
 800ab4e:	9b03      	ldr	r3, [sp, #12]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	dc37      	bgt.n	800abc4 <_dtoa_r+0x984>
 800ab54:	9b06      	ldr	r3, [sp, #24]
 800ab56:	2b02      	cmp	r3, #2
 800ab58:	dd34      	ble.n	800abc4 <_dtoa_r+0x984>
 800ab5a:	9b03      	ldr	r3, [sp, #12]
 800ab5c:	9302      	str	r3, [sp, #8]
 800ab5e:	9b02      	ldr	r3, [sp, #8]
 800ab60:	b96b      	cbnz	r3, 800ab7e <_dtoa_r+0x93e>
 800ab62:	4631      	mov	r1, r6
 800ab64:	2205      	movs	r2, #5
 800ab66:	4620      	mov	r0, r4
 800ab68:	f000 f9d4 	bl	800af14 <__multadd>
 800ab6c:	4601      	mov	r1, r0
 800ab6e:	4606      	mov	r6, r0
 800ab70:	ee18 0a10 	vmov	r0, s16
 800ab74:	f000 fbee 	bl	800b354 <__mcmp>
 800ab78:	2800      	cmp	r0, #0
 800ab7a:	f73f adbb 	bgt.w	800a6f4 <_dtoa_r+0x4b4>
 800ab7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab80:	9d01      	ldr	r5, [sp, #4]
 800ab82:	43db      	mvns	r3, r3
 800ab84:	9300      	str	r3, [sp, #0]
 800ab86:	f04f 0800 	mov.w	r8, #0
 800ab8a:	4631      	mov	r1, r6
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	f000 f99f 	bl	800aed0 <_Bfree>
 800ab92:	2f00      	cmp	r7, #0
 800ab94:	f43f aea4 	beq.w	800a8e0 <_dtoa_r+0x6a0>
 800ab98:	f1b8 0f00 	cmp.w	r8, #0
 800ab9c:	d005      	beq.n	800abaa <_dtoa_r+0x96a>
 800ab9e:	45b8      	cmp	r8, r7
 800aba0:	d003      	beq.n	800abaa <_dtoa_r+0x96a>
 800aba2:	4641      	mov	r1, r8
 800aba4:	4620      	mov	r0, r4
 800aba6:	f000 f993 	bl	800aed0 <_Bfree>
 800abaa:	4639      	mov	r1, r7
 800abac:	4620      	mov	r0, r4
 800abae:	f000 f98f 	bl	800aed0 <_Bfree>
 800abb2:	e695      	b.n	800a8e0 <_dtoa_r+0x6a0>
 800abb4:	2600      	movs	r6, #0
 800abb6:	4637      	mov	r7, r6
 800abb8:	e7e1      	b.n	800ab7e <_dtoa_r+0x93e>
 800abba:	9700      	str	r7, [sp, #0]
 800abbc:	4637      	mov	r7, r6
 800abbe:	e599      	b.n	800a6f4 <_dtoa_r+0x4b4>
 800abc0:	40240000 	.word	0x40240000
 800abc4:	9b08      	ldr	r3, [sp, #32]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	f000 80ca 	beq.w	800ad60 <_dtoa_r+0xb20>
 800abcc:	9b03      	ldr	r3, [sp, #12]
 800abce:	9302      	str	r3, [sp, #8]
 800abd0:	2d00      	cmp	r5, #0
 800abd2:	dd05      	ble.n	800abe0 <_dtoa_r+0x9a0>
 800abd4:	4639      	mov	r1, r7
 800abd6:	462a      	mov	r2, r5
 800abd8:	4620      	mov	r0, r4
 800abda:	f000 fb4b 	bl	800b274 <__lshift>
 800abde:	4607      	mov	r7, r0
 800abe0:	f1b8 0f00 	cmp.w	r8, #0
 800abe4:	d05b      	beq.n	800ac9e <_dtoa_r+0xa5e>
 800abe6:	6879      	ldr	r1, [r7, #4]
 800abe8:	4620      	mov	r0, r4
 800abea:	f000 f931 	bl	800ae50 <_Balloc>
 800abee:	4605      	mov	r5, r0
 800abf0:	b928      	cbnz	r0, 800abfe <_dtoa_r+0x9be>
 800abf2:	4b87      	ldr	r3, [pc, #540]	; (800ae10 <_dtoa_r+0xbd0>)
 800abf4:	4602      	mov	r2, r0
 800abf6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800abfa:	f7ff bb3b 	b.w	800a274 <_dtoa_r+0x34>
 800abfe:	693a      	ldr	r2, [r7, #16]
 800ac00:	3202      	adds	r2, #2
 800ac02:	0092      	lsls	r2, r2, #2
 800ac04:	f107 010c 	add.w	r1, r7, #12
 800ac08:	300c      	adds	r0, #12
 800ac0a:	f000 f913 	bl	800ae34 <memcpy>
 800ac0e:	2201      	movs	r2, #1
 800ac10:	4629      	mov	r1, r5
 800ac12:	4620      	mov	r0, r4
 800ac14:	f000 fb2e 	bl	800b274 <__lshift>
 800ac18:	9b01      	ldr	r3, [sp, #4]
 800ac1a:	f103 0901 	add.w	r9, r3, #1
 800ac1e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ac22:	4413      	add	r3, r2
 800ac24:	9305      	str	r3, [sp, #20]
 800ac26:	f00a 0301 	and.w	r3, sl, #1
 800ac2a:	46b8      	mov	r8, r7
 800ac2c:	9304      	str	r3, [sp, #16]
 800ac2e:	4607      	mov	r7, r0
 800ac30:	4631      	mov	r1, r6
 800ac32:	ee18 0a10 	vmov	r0, s16
 800ac36:	f7ff fa75 	bl	800a124 <quorem>
 800ac3a:	4641      	mov	r1, r8
 800ac3c:	9002      	str	r0, [sp, #8]
 800ac3e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ac42:	ee18 0a10 	vmov	r0, s16
 800ac46:	f000 fb85 	bl	800b354 <__mcmp>
 800ac4a:	463a      	mov	r2, r7
 800ac4c:	9003      	str	r0, [sp, #12]
 800ac4e:	4631      	mov	r1, r6
 800ac50:	4620      	mov	r0, r4
 800ac52:	f000 fb9b 	bl	800b38c <__mdiff>
 800ac56:	68c2      	ldr	r2, [r0, #12]
 800ac58:	f109 3bff 	add.w	fp, r9, #4294967295
 800ac5c:	4605      	mov	r5, r0
 800ac5e:	bb02      	cbnz	r2, 800aca2 <_dtoa_r+0xa62>
 800ac60:	4601      	mov	r1, r0
 800ac62:	ee18 0a10 	vmov	r0, s16
 800ac66:	f000 fb75 	bl	800b354 <__mcmp>
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	4629      	mov	r1, r5
 800ac6e:	4620      	mov	r0, r4
 800ac70:	9207      	str	r2, [sp, #28]
 800ac72:	f000 f92d 	bl	800aed0 <_Bfree>
 800ac76:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ac7a:	ea43 0102 	orr.w	r1, r3, r2
 800ac7e:	9b04      	ldr	r3, [sp, #16]
 800ac80:	430b      	orrs	r3, r1
 800ac82:	464d      	mov	r5, r9
 800ac84:	d10f      	bne.n	800aca6 <_dtoa_r+0xa66>
 800ac86:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ac8a:	d02a      	beq.n	800ace2 <_dtoa_r+0xaa2>
 800ac8c:	9b03      	ldr	r3, [sp, #12]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	dd02      	ble.n	800ac98 <_dtoa_r+0xa58>
 800ac92:	9b02      	ldr	r3, [sp, #8]
 800ac94:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ac98:	f88b a000 	strb.w	sl, [fp]
 800ac9c:	e775      	b.n	800ab8a <_dtoa_r+0x94a>
 800ac9e:	4638      	mov	r0, r7
 800aca0:	e7ba      	b.n	800ac18 <_dtoa_r+0x9d8>
 800aca2:	2201      	movs	r2, #1
 800aca4:	e7e2      	b.n	800ac6c <_dtoa_r+0xa2c>
 800aca6:	9b03      	ldr	r3, [sp, #12]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	db04      	blt.n	800acb6 <_dtoa_r+0xa76>
 800acac:	9906      	ldr	r1, [sp, #24]
 800acae:	430b      	orrs	r3, r1
 800acb0:	9904      	ldr	r1, [sp, #16]
 800acb2:	430b      	orrs	r3, r1
 800acb4:	d122      	bne.n	800acfc <_dtoa_r+0xabc>
 800acb6:	2a00      	cmp	r2, #0
 800acb8:	ddee      	ble.n	800ac98 <_dtoa_r+0xa58>
 800acba:	ee18 1a10 	vmov	r1, s16
 800acbe:	2201      	movs	r2, #1
 800acc0:	4620      	mov	r0, r4
 800acc2:	f000 fad7 	bl	800b274 <__lshift>
 800acc6:	4631      	mov	r1, r6
 800acc8:	ee08 0a10 	vmov	s16, r0
 800accc:	f000 fb42 	bl	800b354 <__mcmp>
 800acd0:	2800      	cmp	r0, #0
 800acd2:	dc03      	bgt.n	800acdc <_dtoa_r+0xa9c>
 800acd4:	d1e0      	bne.n	800ac98 <_dtoa_r+0xa58>
 800acd6:	f01a 0f01 	tst.w	sl, #1
 800acda:	d0dd      	beq.n	800ac98 <_dtoa_r+0xa58>
 800acdc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ace0:	d1d7      	bne.n	800ac92 <_dtoa_r+0xa52>
 800ace2:	2339      	movs	r3, #57	; 0x39
 800ace4:	f88b 3000 	strb.w	r3, [fp]
 800ace8:	462b      	mov	r3, r5
 800acea:	461d      	mov	r5, r3
 800acec:	3b01      	subs	r3, #1
 800acee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800acf2:	2a39      	cmp	r2, #57	; 0x39
 800acf4:	d071      	beq.n	800adda <_dtoa_r+0xb9a>
 800acf6:	3201      	adds	r2, #1
 800acf8:	701a      	strb	r2, [r3, #0]
 800acfa:	e746      	b.n	800ab8a <_dtoa_r+0x94a>
 800acfc:	2a00      	cmp	r2, #0
 800acfe:	dd07      	ble.n	800ad10 <_dtoa_r+0xad0>
 800ad00:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad04:	d0ed      	beq.n	800ace2 <_dtoa_r+0xaa2>
 800ad06:	f10a 0301 	add.w	r3, sl, #1
 800ad0a:	f88b 3000 	strb.w	r3, [fp]
 800ad0e:	e73c      	b.n	800ab8a <_dtoa_r+0x94a>
 800ad10:	9b05      	ldr	r3, [sp, #20]
 800ad12:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ad16:	4599      	cmp	r9, r3
 800ad18:	d047      	beq.n	800adaa <_dtoa_r+0xb6a>
 800ad1a:	ee18 1a10 	vmov	r1, s16
 800ad1e:	2300      	movs	r3, #0
 800ad20:	220a      	movs	r2, #10
 800ad22:	4620      	mov	r0, r4
 800ad24:	f000 f8f6 	bl	800af14 <__multadd>
 800ad28:	45b8      	cmp	r8, r7
 800ad2a:	ee08 0a10 	vmov	s16, r0
 800ad2e:	f04f 0300 	mov.w	r3, #0
 800ad32:	f04f 020a 	mov.w	r2, #10
 800ad36:	4641      	mov	r1, r8
 800ad38:	4620      	mov	r0, r4
 800ad3a:	d106      	bne.n	800ad4a <_dtoa_r+0xb0a>
 800ad3c:	f000 f8ea 	bl	800af14 <__multadd>
 800ad40:	4680      	mov	r8, r0
 800ad42:	4607      	mov	r7, r0
 800ad44:	f109 0901 	add.w	r9, r9, #1
 800ad48:	e772      	b.n	800ac30 <_dtoa_r+0x9f0>
 800ad4a:	f000 f8e3 	bl	800af14 <__multadd>
 800ad4e:	4639      	mov	r1, r7
 800ad50:	4680      	mov	r8, r0
 800ad52:	2300      	movs	r3, #0
 800ad54:	220a      	movs	r2, #10
 800ad56:	4620      	mov	r0, r4
 800ad58:	f000 f8dc 	bl	800af14 <__multadd>
 800ad5c:	4607      	mov	r7, r0
 800ad5e:	e7f1      	b.n	800ad44 <_dtoa_r+0xb04>
 800ad60:	9b03      	ldr	r3, [sp, #12]
 800ad62:	9302      	str	r3, [sp, #8]
 800ad64:	9d01      	ldr	r5, [sp, #4]
 800ad66:	ee18 0a10 	vmov	r0, s16
 800ad6a:	4631      	mov	r1, r6
 800ad6c:	f7ff f9da 	bl	800a124 <quorem>
 800ad70:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ad74:	9b01      	ldr	r3, [sp, #4]
 800ad76:	f805 ab01 	strb.w	sl, [r5], #1
 800ad7a:	1aea      	subs	r2, r5, r3
 800ad7c:	9b02      	ldr	r3, [sp, #8]
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	dd09      	ble.n	800ad96 <_dtoa_r+0xb56>
 800ad82:	ee18 1a10 	vmov	r1, s16
 800ad86:	2300      	movs	r3, #0
 800ad88:	220a      	movs	r2, #10
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f000 f8c2 	bl	800af14 <__multadd>
 800ad90:	ee08 0a10 	vmov	s16, r0
 800ad94:	e7e7      	b.n	800ad66 <_dtoa_r+0xb26>
 800ad96:	9b02      	ldr	r3, [sp, #8]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	bfc8      	it	gt
 800ad9c:	461d      	movgt	r5, r3
 800ad9e:	9b01      	ldr	r3, [sp, #4]
 800ada0:	bfd8      	it	le
 800ada2:	2501      	movle	r5, #1
 800ada4:	441d      	add	r5, r3
 800ada6:	f04f 0800 	mov.w	r8, #0
 800adaa:	ee18 1a10 	vmov	r1, s16
 800adae:	2201      	movs	r2, #1
 800adb0:	4620      	mov	r0, r4
 800adb2:	f000 fa5f 	bl	800b274 <__lshift>
 800adb6:	4631      	mov	r1, r6
 800adb8:	ee08 0a10 	vmov	s16, r0
 800adbc:	f000 faca 	bl	800b354 <__mcmp>
 800adc0:	2800      	cmp	r0, #0
 800adc2:	dc91      	bgt.n	800ace8 <_dtoa_r+0xaa8>
 800adc4:	d102      	bne.n	800adcc <_dtoa_r+0xb8c>
 800adc6:	f01a 0f01 	tst.w	sl, #1
 800adca:	d18d      	bne.n	800ace8 <_dtoa_r+0xaa8>
 800adcc:	462b      	mov	r3, r5
 800adce:	461d      	mov	r5, r3
 800add0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800add4:	2a30      	cmp	r2, #48	; 0x30
 800add6:	d0fa      	beq.n	800adce <_dtoa_r+0xb8e>
 800add8:	e6d7      	b.n	800ab8a <_dtoa_r+0x94a>
 800adda:	9a01      	ldr	r2, [sp, #4]
 800addc:	429a      	cmp	r2, r3
 800adde:	d184      	bne.n	800acea <_dtoa_r+0xaaa>
 800ade0:	9b00      	ldr	r3, [sp, #0]
 800ade2:	3301      	adds	r3, #1
 800ade4:	9300      	str	r3, [sp, #0]
 800ade6:	2331      	movs	r3, #49	; 0x31
 800ade8:	7013      	strb	r3, [r2, #0]
 800adea:	e6ce      	b.n	800ab8a <_dtoa_r+0x94a>
 800adec:	4b09      	ldr	r3, [pc, #36]	; (800ae14 <_dtoa_r+0xbd4>)
 800adee:	f7ff ba95 	b.w	800a31c <_dtoa_r+0xdc>
 800adf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	f47f aa6e 	bne.w	800a2d6 <_dtoa_r+0x96>
 800adfa:	4b07      	ldr	r3, [pc, #28]	; (800ae18 <_dtoa_r+0xbd8>)
 800adfc:	f7ff ba8e 	b.w	800a31c <_dtoa_r+0xdc>
 800ae00:	9b02      	ldr	r3, [sp, #8]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	dcae      	bgt.n	800ad64 <_dtoa_r+0xb24>
 800ae06:	9b06      	ldr	r3, [sp, #24]
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	f73f aea8 	bgt.w	800ab5e <_dtoa_r+0x91e>
 800ae0e:	e7a9      	b.n	800ad64 <_dtoa_r+0xb24>
 800ae10:	0800cb97 	.word	0x0800cb97
 800ae14:	0800caf4 	.word	0x0800caf4
 800ae18:	0800cb18 	.word	0x0800cb18

0800ae1c <_localeconv_r>:
 800ae1c:	4800      	ldr	r0, [pc, #0]	; (800ae20 <_localeconv_r+0x4>)
 800ae1e:	4770      	bx	lr
 800ae20:	20000194 	.word	0x20000194

0800ae24 <malloc>:
 800ae24:	4b02      	ldr	r3, [pc, #8]	; (800ae30 <malloc+0xc>)
 800ae26:	4601      	mov	r1, r0
 800ae28:	6818      	ldr	r0, [r3, #0]
 800ae2a:	f000 bc17 	b.w	800b65c <_malloc_r>
 800ae2e:	bf00      	nop
 800ae30:	20000040 	.word	0x20000040

0800ae34 <memcpy>:
 800ae34:	440a      	add	r2, r1
 800ae36:	4291      	cmp	r1, r2
 800ae38:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae3c:	d100      	bne.n	800ae40 <memcpy+0xc>
 800ae3e:	4770      	bx	lr
 800ae40:	b510      	push	{r4, lr}
 800ae42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae4a:	4291      	cmp	r1, r2
 800ae4c:	d1f9      	bne.n	800ae42 <memcpy+0xe>
 800ae4e:	bd10      	pop	{r4, pc}

0800ae50 <_Balloc>:
 800ae50:	b570      	push	{r4, r5, r6, lr}
 800ae52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae54:	4604      	mov	r4, r0
 800ae56:	460d      	mov	r5, r1
 800ae58:	b976      	cbnz	r6, 800ae78 <_Balloc+0x28>
 800ae5a:	2010      	movs	r0, #16
 800ae5c:	f7ff ffe2 	bl	800ae24 <malloc>
 800ae60:	4602      	mov	r2, r0
 800ae62:	6260      	str	r0, [r4, #36]	; 0x24
 800ae64:	b920      	cbnz	r0, 800ae70 <_Balloc+0x20>
 800ae66:	4b18      	ldr	r3, [pc, #96]	; (800aec8 <_Balloc+0x78>)
 800ae68:	4818      	ldr	r0, [pc, #96]	; (800aecc <_Balloc+0x7c>)
 800ae6a:	2166      	movs	r1, #102	; 0x66
 800ae6c:	f000 fdd6 	bl	800ba1c <__assert_func>
 800ae70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae74:	6006      	str	r6, [r0, #0]
 800ae76:	60c6      	str	r6, [r0, #12]
 800ae78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ae7a:	68f3      	ldr	r3, [r6, #12]
 800ae7c:	b183      	cbz	r3, 800aea0 <_Balloc+0x50>
 800ae7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae86:	b9b8      	cbnz	r0, 800aeb8 <_Balloc+0x68>
 800ae88:	2101      	movs	r1, #1
 800ae8a:	fa01 f605 	lsl.w	r6, r1, r5
 800ae8e:	1d72      	adds	r2, r6, #5
 800ae90:	0092      	lsls	r2, r2, #2
 800ae92:	4620      	mov	r0, r4
 800ae94:	f000 fb60 	bl	800b558 <_calloc_r>
 800ae98:	b160      	cbz	r0, 800aeb4 <_Balloc+0x64>
 800ae9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae9e:	e00e      	b.n	800aebe <_Balloc+0x6e>
 800aea0:	2221      	movs	r2, #33	; 0x21
 800aea2:	2104      	movs	r1, #4
 800aea4:	4620      	mov	r0, r4
 800aea6:	f000 fb57 	bl	800b558 <_calloc_r>
 800aeaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aeac:	60f0      	str	r0, [r6, #12]
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d1e4      	bne.n	800ae7e <_Balloc+0x2e>
 800aeb4:	2000      	movs	r0, #0
 800aeb6:	bd70      	pop	{r4, r5, r6, pc}
 800aeb8:	6802      	ldr	r2, [r0, #0]
 800aeba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aebe:	2300      	movs	r3, #0
 800aec0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aec4:	e7f7      	b.n	800aeb6 <_Balloc+0x66>
 800aec6:	bf00      	nop
 800aec8:	0800cb25 	.word	0x0800cb25
 800aecc:	0800cba8 	.word	0x0800cba8

0800aed0 <_Bfree>:
 800aed0:	b570      	push	{r4, r5, r6, lr}
 800aed2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aed4:	4605      	mov	r5, r0
 800aed6:	460c      	mov	r4, r1
 800aed8:	b976      	cbnz	r6, 800aef8 <_Bfree+0x28>
 800aeda:	2010      	movs	r0, #16
 800aedc:	f7ff ffa2 	bl	800ae24 <malloc>
 800aee0:	4602      	mov	r2, r0
 800aee2:	6268      	str	r0, [r5, #36]	; 0x24
 800aee4:	b920      	cbnz	r0, 800aef0 <_Bfree+0x20>
 800aee6:	4b09      	ldr	r3, [pc, #36]	; (800af0c <_Bfree+0x3c>)
 800aee8:	4809      	ldr	r0, [pc, #36]	; (800af10 <_Bfree+0x40>)
 800aeea:	218a      	movs	r1, #138	; 0x8a
 800aeec:	f000 fd96 	bl	800ba1c <__assert_func>
 800aef0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aef4:	6006      	str	r6, [r0, #0]
 800aef6:	60c6      	str	r6, [r0, #12]
 800aef8:	b13c      	cbz	r4, 800af0a <_Bfree+0x3a>
 800aefa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aefc:	6862      	ldr	r2, [r4, #4]
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af04:	6021      	str	r1, [r4, #0]
 800af06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af0a:	bd70      	pop	{r4, r5, r6, pc}
 800af0c:	0800cb25 	.word	0x0800cb25
 800af10:	0800cba8 	.word	0x0800cba8

0800af14 <__multadd>:
 800af14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af18:	690d      	ldr	r5, [r1, #16]
 800af1a:	4607      	mov	r7, r0
 800af1c:	460c      	mov	r4, r1
 800af1e:	461e      	mov	r6, r3
 800af20:	f101 0c14 	add.w	ip, r1, #20
 800af24:	2000      	movs	r0, #0
 800af26:	f8dc 3000 	ldr.w	r3, [ip]
 800af2a:	b299      	uxth	r1, r3
 800af2c:	fb02 6101 	mla	r1, r2, r1, r6
 800af30:	0c1e      	lsrs	r6, r3, #16
 800af32:	0c0b      	lsrs	r3, r1, #16
 800af34:	fb02 3306 	mla	r3, r2, r6, r3
 800af38:	b289      	uxth	r1, r1
 800af3a:	3001      	adds	r0, #1
 800af3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af40:	4285      	cmp	r5, r0
 800af42:	f84c 1b04 	str.w	r1, [ip], #4
 800af46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af4a:	dcec      	bgt.n	800af26 <__multadd+0x12>
 800af4c:	b30e      	cbz	r6, 800af92 <__multadd+0x7e>
 800af4e:	68a3      	ldr	r3, [r4, #8]
 800af50:	42ab      	cmp	r3, r5
 800af52:	dc19      	bgt.n	800af88 <__multadd+0x74>
 800af54:	6861      	ldr	r1, [r4, #4]
 800af56:	4638      	mov	r0, r7
 800af58:	3101      	adds	r1, #1
 800af5a:	f7ff ff79 	bl	800ae50 <_Balloc>
 800af5e:	4680      	mov	r8, r0
 800af60:	b928      	cbnz	r0, 800af6e <__multadd+0x5a>
 800af62:	4602      	mov	r2, r0
 800af64:	4b0c      	ldr	r3, [pc, #48]	; (800af98 <__multadd+0x84>)
 800af66:	480d      	ldr	r0, [pc, #52]	; (800af9c <__multadd+0x88>)
 800af68:	21b5      	movs	r1, #181	; 0xb5
 800af6a:	f000 fd57 	bl	800ba1c <__assert_func>
 800af6e:	6922      	ldr	r2, [r4, #16]
 800af70:	3202      	adds	r2, #2
 800af72:	f104 010c 	add.w	r1, r4, #12
 800af76:	0092      	lsls	r2, r2, #2
 800af78:	300c      	adds	r0, #12
 800af7a:	f7ff ff5b 	bl	800ae34 <memcpy>
 800af7e:	4621      	mov	r1, r4
 800af80:	4638      	mov	r0, r7
 800af82:	f7ff ffa5 	bl	800aed0 <_Bfree>
 800af86:	4644      	mov	r4, r8
 800af88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af8c:	3501      	adds	r5, #1
 800af8e:	615e      	str	r6, [r3, #20]
 800af90:	6125      	str	r5, [r4, #16]
 800af92:	4620      	mov	r0, r4
 800af94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af98:	0800cb97 	.word	0x0800cb97
 800af9c:	0800cba8 	.word	0x0800cba8

0800afa0 <__hi0bits>:
 800afa0:	0c03      	lsrs	r3, r0, #16
 800afa2:	041b      	lsls	r3, r3, #16
 800afa4:	b9d3      	cbnz	r3, 800afdc <__hi0bits+0x3c>
 800afa6:	0400      	lsls	r0, r0, #16
 800afa8:	2310      	movs	r3, #16
 800afaa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800afae:	bf04      	itt	eq
 800afb0:	0200      	lsleq	r0, r0, #8
 800afb2:	3308      	addeq	r3, #8
 800afb4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800afb8:	bf04      	itt	eq
 800afba:	0100      	lsleq	r0, r0, #4
 800afbc:	3304      	addeq	r3, #4
 800afbe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800afc2:	bf04      	itt	eq
 800afc4:	0080      	lsleq	r0, r0, #2
 800afc6:	3302      	addeq	r3, #2
 800afc8:	2800      	cmp	r0, #0
 800afca:	db05      	blt.n	800afd8 <__hi0bits+0x38>
 800afcc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800afd0:	f103 0301 	add.w	r3, r3, #1
 800afd4:	bf08      	it	eq
 800afd6:	2320      	moveq	r3, #32
 800afd8:	4618      	mov	r0, r3
 800afda:	4770      	bx	lr
 800afdc:	2300      	movs	r3, #0
 800afde:	e7e4      	b.n	800afaa <__hi0bits+0xa>

0800afe0 <__lo0bits>:
 800afe0:	6803      	ldr	r3, [r0, #0]
 800afe2:	f013 0207 	ands.w	r2, r3, #7
 800afe6:	4601      	mov	r1, r0
 800afe8:	d00b      	beq.n	800b002 <__lo0bits+0x22>
 800afea:	07da      	lsls	r2, r3, #31
 800afec:	d423      	bmi.n	800b036 <__lo0bits+0x56>
 800afee:	0798      	lsls	r0, r3, #30
 800aff0:	bf49      	itett	mi
 800aff2:	085b      	lsrmi	r3, r3, #1
 800aff4:	089b      	lsrpl	r3, r3, #2
 800aff6:	2001      	movmi	r0, #1
 800aff8:	600b      	strmi	r3, [r1, #0]
 800affa:	bf5c      	itt	pl
 800affc:	600b      	strpl	r3, [r1, #0]
 800affe:	2002      	movpl	r0, #2
 800b000:	4770      	bx	lr
 800b002:	b298      	uxth	r0, r3
 800b004:	b9a8      	cbnz	r0, 800b032 <__lo0bits+0x52>
 800b006:	0c1b      	lsrs	r3, r3, #16
 800b008:	2010      	movs	r0, #16
 800b00a:	b2da      	uxtb	r2, r3
 800b00c:	b90a      	cbnz	r2, 800b012 <__lo0bits+0x32>
 800b00e:	3008      	adds	r0, #8
 800b010:	0a1b      	lsrs	r3, r3, #8
 800b012:	071a      	lsls	r2, r3, #28
 800b014:	bf04      	itt	eq
 800b016:	091b      	lsreq	r3, r3, #4
 800b018:	3004      	addeq	r0, #4
 800b01a:	079a      	lsls	r2, r3, #30
 800b01c:	bf04      	itt	eq
 800b01e:	089b      	lsreq	r3, r3, #2
 800b020:	3002      	addeq	r0, #2
 800b022:	07da      	lsls	r2, r3, #31
 800b024:	d403      	bmi.n	800b02e <__lo0bits+0x4e>
 800b026:	085b      	lsrs	r3, r3, #1
 800b028:	f100 0001 	add.w	r0, r0, #1
 800b02c:	d005      	beq.n	800b03a <__lo0bits+0x5a>
 800b02e:	600b      	str	r3, [r1, #0]
 800b030:	4770      	bx	lr
 800b032:	4610      	mov	r0, r2
 800b034:	e7e9      	b.n	800b00a <__lo0bits+0x2a>
 800b036:	2000      	movs	r0, #0
 800b038:	4770      	bx	lr
 800b03a:	2020      	movs	r0, #32
 800b03c:	4770      	bx	lr
	...

0800b040 <__i2b>:
 800b040:	b510      	push	{r4, lr}
 800b042:	460c      	mov	r4, r1
 800b044:	2101      	movs	r1, #1
 800b046:	f7ff ff03 	bl	800ae50 <_Balloc>
 800b04a:	4602      	mov	r2, r0
 800b04c:	b928      	cbnz	r0, 800b05a <__i2b+0x1a>
 800b04e:	4b05      	ldr	r3, [pc, #20]	; (800b064 <__i2b+0x24>)
 800b050:	4805      	ldr	r0, [pc, #20]	; (800b068 <__i2b+0x28>)
 800b052:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b056:	f000 fce1 	bl	800ba1c <__assert_func>
 800b05a:	2301      	movs	r3, #1
 800b05c:	6144      	str	r4, [r0, #20]
 800b05e:	6103      	str	r3, [r0, #16]
 800b060:	bd10      	pop	{r4, pc}
 800b062:	bf00      	nop
 800b064:	0800cb97 	.word	0x0800cb97
 800b068:	0800cba8 	.word	0x0800cba8

0800b06c <__multiply>:
 800b06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b070:	4691      	mov	r9, r2
 800b072:	690a      	ldr	r2, [r1, #16]
 800b074:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b078:	429a      	cmp	r2, r3
 800b07a:	bfb8      	it	lt
 800b07c:	460b      	movlt	r3, r1
 800b07e:	460c      	mov	r4, r1
 800b080:	bfbc      	itt	lt
 800b082:	464c      	movlt	r4, r9
 800b084:	4699      	movlt	r9, r3
 800b086:	6927      	ldr	r7, [r4, #16]
 800b088:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b08c:	68a3      	ldr	r3, [r4, #8]
 800b08e:	6861      	ldr	r1, [r4, #4]
 800b090:	eb07 060a 	add.w	r6, r7, sl
 800b094:	42b3      	cmp	r3, r6
 800b096:	b085      	sub	sp, #20
 800b098:	bfb8      	it	lt
 800b09a:	3101      	addlt	r1, #1
 800b09c:	f7ff fed8 	bl	800ae50 <_Balloc>
 800b0a0:	b930      	cbnz	r0, 800b0b0 <__multiply+0x44>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	4b44      	ldr	r3, [pc, #272]	; (800b1b8 <__multiply+0x14c>)
 800b0a6:	4845      	ldr	r0, [pc, #276]	; (800b1bc <__multiply+0x150>)
 800b0a8:	f240 115d 	movw	r1, #349	; 0x15d
 800b0ac:	f000 fcb6 	bl	800ba1c <__assert_func>
 800b0b0:	f100 0514 	add.w	r5, r0, #20
 800b0b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b0b8:	462b      	mov	r3, r5
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	4543      	cmp	r3, r8
 800b0be:	d321      	bcc.n	800b104 <__multiply+0x98>
 800b0c0:	f104 0314 	add.w	r3, r4, #20
 800b0c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b0c8:	f109 0314 	add.w	r3, r9, #20
 800b0cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b0d0:	9202      	str	r2, [sp, #8]
 800b0d2:	1b3a      	subs	r2, r7, r4
 800b0d4:	3a15      	subs	r2, #21
 800b0d6:	f022 0203 	bic.w	r2, r2, #3
 800b0da:	3204      	adds	r2, #4
 800b0dc:	f104 0115 	add.w	r1, r4, #21
 800b0e0:	428f      	cmp	r7, r1
 800b0e2:	bf38      	it	cc
 800b0e4:	2204      	movcc	r2, #4
 800b0e6:	9201      	str	r2, [sp, #4]
 800b0e8:	9a02      	ldr	r2, [sp, #8]
 800b0ea:	9303      	str	r3, [sp, #12]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d80c      	bhi.n	800b10a <__multiply+0x9e>
 800b0f0:	2e00      	cmp	r6, #0
 800b0f2:	dd03      	ble.n	800b0fc <__multiply+0x90>
 800b0f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d05a      	beq.n	800b1b2 <__multiply+0x146>
 800b0fc:	6106      	str	r6, [r0, #16]
 800b0fe:	b005      	add	sp, #20
 800b100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b104:	f843 2b04 	str.w	r2, [r3], #4
 800b108:	e7d8      	b.n	800b0bc <__multiply+0x50>
 800b10a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b10e:	f1ba 0f00 	cmp.w	sl, #0
 800b112:	d024      	beq.n	800b15e <__multiply+0xf2>
 800b114:	f104 0e14 	add.w	lr, r4, #20
 800b118:	46a9      	mov	r9, r5
 800b11a:	f04f 0c00 	mov.w	ip, #0
 800b11e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b122:	f8d9 1000 	ldr.w	r1, [r9]
 800b126:	fa1f fb82 	uxth.w	fp, r2
 800b12a:	b289      	uxth	r1, r1
 800b12c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b130:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b134:	f8d9 2000 	ldr.w	r2, [r9]
 800b138:	4461      	add	r1, ip
 800b13a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b13e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b142:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b146:	b289      	uxth	r1, r1
 800b148:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b14c:	4577      	cmp	r7, lr
 800b14e:	f849 1b04 	str.w	r1, [r9], #4
 800b152:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b156:	d8e2      	bhi.n	800b11e <__multiply+0xb2>
 800b158:	9a01      	ldr	r2, [sp, #4]
 800b15a:	f845 c002 	str.w	ip, [r5, r2]
 800b15e:	9a03      	ldr	r2, [sp, #12]
 800b160:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b164:	3304      	adds	r3, #4
 800b166:	f1b9 0f00 	cmp.w	r9, #0
 800b16a:	d020      	beq.n	800b1ae <__multiply+0x142>
 800b16c:	6829      	ldr	r1, [r5, #0]
 800b16e:	f104 0c14 	add.w	ip, r4, #20
 800b172:	46ae      	mov	lr, r5
 800b174:	f04f 0a00 	mov.w	sl, #0
 800b178:	f8bc b000 	ldrh.w	fp, [ip]
 800b17c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b180:	fb09 220b 	mla	r2, r9, fp, r2
 800b184:	4492      	add	sl, r2
 800b186:	b289      	uxth	r1, r1
 800b188:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b18c:	f84e 1b04 	str.w	r1, [lr], #4
 800b190:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b194:	f8be 1000 	ldrh.w	r1, [lr]
 800b198:	0c12      	lsrs	r2, r2, #16
 800b19a:	fb09 1102 	mla	r1, r9, r2, r1
 800b19e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b1a2:	4567      	cmp	r7, ip
 800b1a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b1a8:	d8e6      	bhi.n	800b178 <__multiply+0x10c>
 800b1aa:	9a01      	ldr	r2, [sp, #4]
 800b1ac:	50a9      	str	r1, [r5, r2]
 800b1ae:	3504      	adds	r5, #4
 800b1b0:	e79a      	b.n	800b0e8 <__multiply+0x7c>
 800b1b2:	3e01      	subs	r6, #1
 800b1b4:	e79c      	b.n	800b0f0 <__multiply+0x84>
 800b1b6:	bf00      	nop
 800b1b8:	0800cb97 	.word	0x0800cb97
 800b1bc:	0800cba8 	.word	0x0800cba8

0800b1c0 <__pow5mult>:
 800b1c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1c4:	4615      	mov	r5, r2
 800b1c6:	f012 0203 	ands.w	r2, r2, #3
 800b1ca:	4606      	mov	r6, r0
 800b1cc:	460f      	mov	r7, r1
 800b1ce:	d007      	beq.n	800b1e0 <__pow5mult+0x20>
 800b1d0:	4c25      	ldr	r4, [pc, #148]	; (800b268 <__pow5mult+0xa8>)
 800b1d2:	3a01      	subs	r2, #1
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1da:	f7ff fe9b 	bl	800af14 <__multadd>
 800b1de:	4607      	mov	r7, r0
 800b1e0:	10ad      	asrs	r5, r5, #2
 800b1e2:	d03d      	beq.n	800b260 <__pow5mult+0xa0>
 800b1e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b1e6:	b97c      	cbnz	r4, 800b208 <__pow5mult+0x48>
 800b1e8:	2010      	movs	r0, #16
 800b1ea:	f7ff fe1b 	bl	800ae24 <malloc>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	6270      	str	r0, [r6, #36]	; 0x24
 800b1f2:	b928      	cbnz	r0, 800b200 <__pow5mult+0x40>
 800b1f4:	4b1d      	ldr	r3, [pc, #116]	; (800b26c <__pow5mult+0xac>)
 800b1f6:	481e      	ldr	r0, [pc, #120]	; (800b270 <__pow5mult+0xb0>)
 800b1f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b1fc:	f000 fc0e 	bl	800ba1c <__assert_func>
 800b200:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b204:	6004      	str	r4, [r0, #0]
 800b206:	60c4      	str	r4, [r0, #12]
 800b208:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b20c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b210:	b94c      	cbnz	r4, 800b226 <__pow5mult+0x66>
 800b212:	f240 2171 	movw	r1, #625	; 0x271
 800b216:	4630      	mov	r0, r6
 800b218:	f7ff ff12 	bl	800b040 <__i2b>
 800b21c:	2300      	movs	r3, #0
 800b21e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b222:	4604      	mov	r4, r0
 800b224:	6003      	str	r3, [r0, #0]
 800b226:	f04f 0900 	mov.w	r9, #0
 800b22a:	07eb      	lsls	r3, r5, #31
 800b22c:	d50a      	bpl.n	800b244 <__pow5mult+0x84>
 800b22e:	4639      	mov	r1, r7
 800b230:	4622      	mov	r2, r4
 800b232:	4630      	mov	r0, r6
 800b234:	f7ff ff1a 	bl	800b06c <__multiply>
 800b238:	4639      	mov	r1, r7
 800b23a:	4680      	mov	r8, r0
 800b23c:	4630      	mov	r0, r6
 800b23e:	f7ff fe47 	bl	800aed0 <_Bfree>
 800b242:	4647      	mov	r7, r8
 800b244:	106d      	asrs	r5, r5, #1
 800b246:	d00b      	beq.n	800b260 <__pow5mult+0xa0>
 800b248:	6820      	ldr	r0, [r4, #0]
 800b24a:	b938      	cbnz	r0, 800b25c <__pow5mult+0x9c>
 800b24c:	4622      	mov	r2, r4
 800b24e:	4621      	mov	r1, r4
 800b250:	4630      	mov	r0, r6
 800b252:	f7ff ff0b 	bl	800b06c <__multiply>
 800b256:	6020      	str	r0, [r4, #0]
 800b258:	f8c0 9000 	str.w	r9, [r0]
 800b25c:	4604      	mov	r4, r0
 800b25e:	e7e4      	b.n	800b22a <__pow5mult+0x6a>
 800b260:	4638      	mov	r0, r7
 800b262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b266:	bf00      	nop
 800b268:	0800ccf8 	.word	0x0800ccf8
 800b26c:	0800cb25 	.word	0x0800cb25
 800b270:	0800cba8 	.word	0x0800cba8

0800b274 <__lshift>:
 800b274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b278:	460c      	mov	r4, r1
 800b27a:	6849      	ldr	r1, [r1, #4]
 800b27c:	6923      	ldr	r3, [r4, #16]
 800b27e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b282:	68a3      	ldr	r3, [r4, #8]
 800b284:	4607      	mov	r7, r0
 800b286:	4691      	mov	r9, r2
 800b288:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b28c:	f108 0601 	add.w	r6, r8, #1
 800b290:	42b3      	cmp	r3, r6
 800b292:	db0b      	blt.n	800b2ac <__lshift+0x38>
 800b294:	4638      	mov	r0, r7
 800b296:	f7ff fddb 	bl	800ae50 <_Balloc>
 800b29a:	4605      	mov	r5, r0
 800b29c:	b948      	cbnz	r0, 800b2b2 <__lshift+0x3e>
 800b29e:	4602      	mov	r2, r0
 800b2a0:	4b2a      	ldr	r3, [pc, #168]	; (800b34c <__lshift+0xd8>)
 800b2a2:	482b      	ldr	r0, [pc, #172]	; (800b350 <__lshift+0xdc>)
 800b2a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b2a8:	f000 fbb8 	bl	800ba1c <__assert_func>
 800b2ac:	3101      	adds	r1, #1
 800b2ae:	005b      	lsls	r3, r3, #1
 800b2b0:	e7ee      	b.n	800b290 <__lshift+0x1c>
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	f100 0114 	add.w	r1, r0, #20
 800b2b8:	f100 0210 	add.w	r2, r0, #16
 800b2bc:	4618      	mov	r0, r3
 800b2be:	4553      	cmp	r3, sl
 800b2c0:	db37      	blt.n	800b332 <__lshift+0xbe>
 800b2c2:	6920      	ldr	r0, [r4, #16]
 800b2c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b2c8:	f104 0314 	add.w	r3, r4, #20
 800b2cc:	f019 091f 	ands.w	r9, r9, #31
 800b2d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b2d8:	d02f      	beq.n	800b33a <__lshift+0xc6>
 800b2da:	f1c9 0e20 	rsb	lr, r9, #32
 800b2de:	468a      	mov	sl, r1
 800b2e0:	f04f 0c00 	mov.w	ip, #0
 800b2e4:	681a      	ldr	r2, [r3, #0]
 800b2e6:	fa02 f209 	lsl.w	r2, r2, r9
 800b2ea:	ea42 020c 	orr.w	r2, r2, ip
 800b2ee:	f84a 2b04 	str.w	r2, [sl], #4
 800b2f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2f6:	4298      	cmp	r0, r3
 800b2f8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b2fc:	d8f2      	bhi.n	800b2e4 <__lshift+0x70>
 800b2fe:	1b03      	subs	r3, r0, r4
 800b300:	3b15      	subs	r3, #21
 800b302:	f023 0303 	bic.w	r3, r3, #3
 800b306:	3304      	adds	r3, #4
 800b308:	f104 0215 	add.w	r2, r4, #21
 800b30c:	4290      	cmp	r0, r2
 800b30e:	bf38      	it	cc
 800b310:	2304      	movcc	r3, #4
 800b312:	f841 c003 	str.w	ip, [r1, r3]
 800b316:	f1bc 0f00 	cmp.w	ip, #0
 800b31a:	d001      	beq.n	800b320 <__lshift+0xac>
 800b31c:	f108 0602 	add.w	r6, r8, #2
 800b320:	3e01      	subs	r6, #1
 800b322:	4638      	mov	r0, r7
 800b324:	612e      	str	r6, [r5, #16]
 800b326:	4621      	mov	r1, r4
 800b328:	f7ff fdd2 	bl	800aed0 <_Bfree>
 800b32c:	4628      	mov	r0, r5
 800b32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b332:	f842 0f04 	str.w	r0, [r2, #4]!
 800b336:	3301      	adds	r3, #1
 800b338:	e7c1      	b.n	800b2be <__lshift+0x4a>
 800b33a:	3904      	subs	r1, #4
 800b33c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b340:	f841 2f04 	str.w	r2, [r1, #4]!
 800b344:	4298      	cmp	r0, r3
 800b346:	d8f9      	bhi.n	800b33c <__lshift+0xc8>
 800b348:	e7ea      	b.n	800b320 <__lshift+0xac>
 800b34a:	bf00      	nop
 800b34c:	0800cb97 	.word	0x0800cb97
 800b350:	0800cba8 	.word	0x0800cba8

0800b354 <__mcmp>:
 800b354:	b530      	push	{r4, r5, lr}
 800b356:	6902      	ldr	r2, [r0, #16]
 800b358:	690c      	ldr	r4, [r1, #16]
 800b35a:	1b12      	subs	r2, r2, r4
 800b35c:	d10e      	bne.n	800b37c <__mcmp+0x28>
 800b35e:	f100 0314 	add.w	r3, r0, #20
 800b362:	3114      	adds	r1, #20
 800b364:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b368:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b36c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b370:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b374:	42a5      	cmp	r5, r4
 800b376:	d003      	beq.n	800b380 <__mcmp+0x2c>
 800b378:	d305      	bcc.n	800b386 <__mcmp+0x32>
 800b37a:	2201      	movs	r2, #1
 800b37c:	4610      	mov	r0, r2
 800b37e:	bd30      	pop	{r4, r5, pc}
 800b380:	4283      	cmp	r3, r0
 800b382:	d3f3      	bcc.n	800b36c <__mcmp+0x18>
 800b384:	e7fa      	b.n	800b37c <__mcmp+0x28>
 800b386:	f04f 32ff 	mov.w	r2, #4294967295
 800b38a:	e7f7      	b.n	800b37c <__mcmp+0x28>

0800b38c <__mdiff>:
 800b38c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b390:	460c      	mov	r4, r1
 800b392:	4606      	mov	r6, r0
 800b394:	4611      	mov	r1, r2
 800b396:	4620      	mov	r0, r4
 800b398:	4690      	mov	r8, r2
 800b39a:	f7ff ffdb 	bl	800b354 <__mcmp>
 800b39e:	1e05      	subs	r5, r0, #0
 800b3a0:	d110      	bne.n	800b3c4 <__mdiff+0x38>
 800b3a2:	4629      	mov	r1, r5
 800b3a4:	4630      	mov	r0, r6
 800b3a6:	f7ff fd53 	bl	800ae50 <_Balloc>
 800b3aa:	b930      	cbnz	r0, 800b3ba <__mdiff+0x2e>
 800b3ac:	4b3a      	ldr	r3, [pc, #232]	; (800b498 <__mdiff+0x10c>)
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	f240 2132 	movw	r1, #562	; 0x232
 800b3b4:	4839      	ldr	r0, [pc, #228]	; (800b49c <__mdiff+0x110>)
 800b3b6:	f000 fb31 	bl	800ba1c <__assert_func>
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b3c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3c4:	bfa4      	itt	ge
 800b3c6:	4643      	movge	r3, r8
 800b3c8:	46a0      	movge	r8, r4
 800b3ca:	4630      	mov	r0, r6
 800b3cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b3d0:	bfa6      	itte	ge
 800b3d2:	461c      	movge	r4, r3
 800b3d4:	2500      	movge	r5, #0
 800b3d6:	2501      	movlt	r5, #1
 800b3d8:	f7ff fd3a 	bl	800ae50 <_Balloc>
 800b3dc:	b920      	cbnz	r0, 800b3e8 <__mdiff+0x5c>
 800b3de:	4b2e      	ldr	r3, [pc, #184]	; (800b498 <__mdiff+0x10c>)
 800b3e0:	4602      	mov	r2, r0
 800b3e2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b3e6:	e7e5      	b.n	800b3b4 <__mdiff+0x28>
 800b3e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b3ec:	6926      	ldr	r6, [r4, #16]
 800b3ee:	60c5      	str	r5, [r0, #12]
 800b3f0:	f104 0914 	add.w	r9, r4, #20
 800b3f4:	f108 0514 	add.w	r5, r8, #20
 800b3f8:	f100 0e14 	add.w	lr, r0, #20
 800b3fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b400:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b404:	f108 0210 	add.w	r2, r8, #16
 800b408:	46f2      	mov	sl, lr
 800b40a:	2100      	movs	r1, #0
 800b40c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b410:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b414:	fa1f f883 	uxth.w	r8, r3
 800b418:	fa11 f18b 	uxtah	r1, r1, fp
 800b41c:	0c1b      	lsrs	r3, r3, #16
 800b41e:	eba1 0808 	sub.w	r8, r1, r8
 800b422:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b426:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b42a:	fa1f f888 	uxth.w	r8, r8
 800b42e:	1419      	asrs	r1, r3, #16
 800b430:	454e      	cmp	r6, r9
 800b432:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b436:	f84a 3b04 	str.w	r3, [sl], #4
 800b43a:	d8e7      	bhi.n	800b40c <__mdiff+0x80>
 800b43c:	1b33      	subs	r3, r6, r4
 800b43e:	3b15      	subs	r3, #21
 800b440:	f023 0303 	bic.w	r3, r3, #3
 800b444:	3304      	adds	r3, #4
 800b446:	3415      	adds	r4, #21
 800b448:	42a6      	cmp	r6, r4
 800b44a:	bf38      	it	cc
 800b44c:	2304      	movcc	r3, #4
 800b44e:	441d      	add	r5, r3
 800b450:	4473      	add	r3, lr
 800b452:	469e      	mov	lr, r3
 800b454:	462e      	mov	r6, r5
 800b456:	4566      	cmp	r6, ip
 800b458:	d30e      	bcc.n	800b478 <__mdiff+0xec>
 800b45a:	f10c 0203 	add.w	r2, ip, #3
 800b45e:	1b52      	subs	r2, r2, r5
 800b460:	f022 0203 	bic.w	r2, r2, #3
 800b464:	3d03      	subs	r5, #3
 800b466:	45ac      	cmp	ip, r5
 800b468:	bf38      	it	cc
 800b46a:	2200      	movcc	r2, #0
 800b46c:	441a      	add	r2, r3
 800b46e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b472:	b17b      	cbz	r3, 800b494 <__mdiff+0x108>
 800b474:	6107      	str	r7, [r0, #16]
 800b476:	e7a3      	b.n	800b3c0 <__mdiff+0x34>
 800b478:	f856 8b04 	ldr.w	r8, [r6], #4
 800b47c:	fa11 f288 	uxtah	r2, r1, r8
 800b480:	1414      	asrs	r4, r2, #16
 800b482:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b486:	b292      	uxth	r2, r2
 800b488:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b48c:	f84e 2b04 	str.w	r2, [lr], #4
 800b490:	1421      	asrs	r1, r4, #16
 800b492:	e7e0      	b.n	800b456 <__mdiff+0xca>
 800b494:	3f01      	subs	r7, #1
 800b496:	e7ea      	b.n	800b46e <__mdiff+0xe2>
 800b498:	0800cb97 	.word	0x0800cb97
 800b49c:	0800cba8 	.word	0x0800cba8

0800b4a0 <__d2b>:
 800b4a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b4a4:	4689      	mov	r9, r1
 800b4a6:	2101      	movs	r1, #1
 800b4a8:	ec57 6b10 	vmov	r6, r7, d0
 800b4ac:	4690      	mov	r8, r2
 800b4ae:	f7ff fccf 	bl	800ae50 <_Balloc>
 800b4b2:	4604      	mov	r4, r0
 800b4b4:	b930      	cbnz	r0, 800b4c4 <__d2b+0x24>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	4b25      	ldr	r3, [pc, #148]	; (800b550 <__d2b+0xb0>)
 800b4ba:	4826      	ldr	r0, [pc, #152]	; (800b554 <__d2b+0xb4>)
 800b4bc:	f240 310a 	movw	r1, #778	; 0x30a
 800b4c0:	f000 faac 	bl	800ba1c <__assert_func>
 800b4c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b4c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b4cc:	bb35      	cbnz	r5, 800b51c <__d2b+0x7c>
 800b4ce:	2e00      	cmp	r6, #0
 800b4d0:	9301      	str	r3, [sp, #4]
 800b4d2:	d028      	beq.n	800b526 <__d2b+0x86>
 800b4d4:	4668      	mov	r0, sp
 800b4d6:	9600      	str	r6, [sp, #0]
 800b4d8:	f7ff fd82 	bl	800afe0 <__lo0bits>
 800b4dc:	9900      	ldr	r1, [sp, #0]
 800b4de:	b300      	cbz	r0, 800b522 <__d2b+0x82>
 800b4e0:	9a01      	ldr	r2, [sp, #4]
 800b4e2:	f1c0 0320 	rsb	r3, r0, #32
 800b4e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b4ea:	430b      	orrs	r3, r1
 800b4ec:	40c2      	lsrs	r2, r0
 800b4ee:	6163      	str	r3, [r4, #20]
 800b4f0:	9201      	str	r2, [sp, #4]
 800b4f2:	9b01      	ldr	r3, [sp, #4]
 800b4f4:	61a3      	str	r3, [r4, #24]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	bf14      	ite	ne
 800b4fa:	2202      	movne	r2, #2
 800b4fc:	2201      	moveq	r2, #1
 800b4fe:	6122      	str	r2, [r4, #16]
 800b500:	b1d5      	cbz	r5, 800b538 <__d2b+0x98>
 800b502:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b506:	4405      	add	r5, r0
 800b508:	f8c9 5000 	str.w	r5, [r9]
 800b50c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b510:	f8c8 0000 	str.w	r0, [r8]
 800b514:	4620      	mov	r0, r4
 800b516:	b003      	add	sp, #12
 800b518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b51c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b520:	e7d5      	b.n	800b4ce <__d2b+0x2e>
 800b522:	6161      	str	r1, [r4, #20]
 800b524:	e7e5      	b.n	800b4f2 <__d2b+0x52>
 800b526:	a801      	add	r0, sp, #4
 800b528:	f7ff fd5a 	bl	800afe0 <__lo0bits>
 800b52c:	9b01      	ldr	r3, [sp, #4]
 800b52e:	6163      	str	r3, [r4, #20]
 800b530:	2201      	movs	r2, #1
 800b532:	6122      	str	r2, [r4, #16]
 800b534:	3020      	adds	r0, #32
 800b536:	e7e3      	b.n	800b500 <__d2b+0x60>
 800b538:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b53c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b540:	f8c9 0000 	str.w	r0, [r9]
 800b544:	6918      	ldr	r0, [r3, #16]
 800b546:	f7ff fd2b 	bl	800afa0 <__hi0bits>
 800b54a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b54e:	e7df      	b.n	800b510 <__d2b+0x70>
 800b550:	0800cb97 	.word	0x0800cb97
 800b554:	0800cba8 	.word	0x0800cba8

0800b558 <_calloc_r>:
 800b558:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b55a:	fba1 2402 	umull	r2, r4, r1, r2
 800b55e:	b94c      	cbnz	r4, 800b574 <_calloc_r+0x1c>
 800b560:	4611      	mov	r1, r2
 800b562:	9201      	str	r2, [sp, #4]
 800b564:	f000 f87a 	bl	800b65c <_malloc_r>
 800b568:	9a01      	ldr	r2, [sp, #4]
 800b56a:	4605      	mov	r5, r0
 800b56c:	b930      	cbnz	r0, 800b57c <_calloc_r+0x24>
 800b56e:	4628      	mov	r0, r5
 800b570:	b003      	add	sp, #12
 800b572:	bd30      	pop	{r4, r5, pc}
 800b574:	220c      	movs	r2, #12
 800b576:	6002      	str	r2, [r0, #0]
 800b578:	2500      	movs	r5, #0
 800b57a:	e7f8      	b.n	800b56e <_calloc_r+0x16>
 800b57c:	4621      	mov	r1, r4
 800b57e:	f7fe f93f 	bl	8009800 <memset>
 800b582:	e7f4      	b.n	800b56e <_calloc_r+0x16>

0800b584 <_free_r>:
 800b584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b586:	2900      	cmp	r1, #0
 800b588:	d044      	beq.n	800b614 <_free_r+0x90>
 800b58a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b58e:	9001      	str	r0, [sp, #4]
 800b590:	2b00      	cmp	r3, #0
 800b592:	f1a1 0404 	sub.w	r4, r1, #4
 800b596:	bfb8      	it	lt
 800b598:	18e4      	addlt	r4, r4, r3
 800b59a:	f000 fa9b 	bl	800bad4 <__malloc_lock>
 800b59e:	4a1e      	ldr	r2, [pc, #120]	; (800b618 <_free_r+0x94>)
 800b5a0:	9801      	ldr	r0, [sp, #4]
 800b5a2:	6813      	ldr	r3, [r2, #0]
 800b5a4:	b933      	cbnz	r3, 800b5b4 <_free_r+0x30>
 800b5a6:	6063      	str	r3, [r4, #4]
 800b5a8:	6014      	str	r4, [r2, #0]
 800b5aa:	b003      	add	sp, #12
 800b5ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5b0:	f000 ba96 	b.w	800bae0 <__malloc_unlock>
 800b5b4:	42a3      	cmp	r3, r4
 800b5b6:	d908      	bls.n	800b5ca <_free_r+0x46>
 800b5b8:	6825      	ldr	r5, [r4, #0]
 800b5ba:	1961      	adds	r1, r4, r5
 800b5bc:	428b      	cmp	r3, r1
 800b5be:	bf01      	itttt	eq
 800b5c0:	6819      	ldreq	r1, [r3, #0]
 800b5c2:	685b      	ldreq	r3, [r3, #4]
 800b5c4:	1949      	addeq	r1, r1, r5
 800b5c6:	6021      	streq	r1, [r4, #0]
 800b5c8:	e7ed      	b.n	800b5a6 <_free_r+0x22>
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	b10b      	cbz	r3, 800b5d4 <_free_r+0x50>
 800b5d0:	42a3      	cmp	r3, r4
 800b5d2:	d9fa      	bls.n	800b5ca <_free_r+0x46>
 800b5d4:	6811      	ldr	r1, [r2, #0]
 800b5d6:	1855      	adds	r5, r2, r1
 800b5d8:	42a5      	cmp	r5, r4
 800b5da:	d10b      	bne.n	800b5f4 <_free_r+0x70>
 800b5dc:	6824      	ldr	r4, [r4, #0]
 800b5de:	4421      	add	r1, r4
 800b5e0:	1854      	adds	r4, r2, r1
 800b5e2:	42a3      	cmp	r3, r4
 800b5e4:	6011      	str	r1, [r2, #0]
 800b5e6:	d1e0      	bne.n	800b5aa <_free_r+0x26>
 800b5e8:	681c      	ldr	r4, [r3, #0]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	6053      	str	r3, [r2, #4]
 800b5ee:	4421      	add	r1, r4
 800b5f0:	6011      	str	r1, [r2, #0]
 800b5f2:	e7da      	b.n	800b5aa <_free_r+0x26>
 800b5f4:	d902      	bls.n	800b5fc <_free_r+0x78>
 800b5f6:	230c      	movs	r3, #12
 800b5f8:	6003      	str	r3, [r0, #0]
 800b5fa:	e7d6      	b.n	800b5aa <_free_r+0x26>
 800b5fc:	6825      	ldr	r5, [r4, #0]
 800b5fe:	1961      	adds	r1, r4, r5
 800b600:	428b      	cmp	r3, r1
 800b602:	bf04      	itt	eq
 800b604:	6819      	ldreq	r1, [r3, #0]
 800b606:	685b      	ldreq	r3, [r3, #4]
 800b608:	6063      	str	r3, [r4, #4]
 800b60a:	bf04      	itt	eq
 800b60c:	1949      	addeq	r1, r1, r5
 800b60e:	6021      	streq	r1, [r4, #0]
 800b610:	6054      	str	r4, [r2, #4]
 800b612:	e7ca      	b.n	800b5aa <_free_r+0x26>
 800b614:	b003      	add	sp, #12
 800b616:	bd30      	pop	{r4, r5, pc}
 800b618:	20000670 	.word	0x20000670

0800b61c <sbrk_aligned>:
 800b61c:	b570      	push	{r4, r5, r6, lr}
 800b61e:	4e0e      	ldr	r6, [pc, #56]	; (800b658 <sbrk_aligned+0x3c>)
 800b620:	460c      	mov	r4, r1
 800b622:	6831      	ldr	r1, [r6, #0]
 800b624:	4605      	mov	r5, r0
 800b626:	b911      	cbnz	r1, 800b62e <sbrk_aligned+0x12>
 800b628:	f000 f9e8 	bl	800b9fc <_sbrk_r>
 800b62c:	6030      	str	r0, [r6, #0]
 800b62e:	4621      	mov	r1, r4
 800b630:	4628      	mov	r0, r5
 800b632:	f000 f9e3 	bl	800b9fc <_sbrk_r>
 800b636:	1c43      	adds	r3, r0, #1
 800b638:	d00a      	beq.n	800b650 <sbrk_aligned+0x34>
 800b63a:	1cc4      	adds	r4, r0, #3
 800b63c:	f024 0403 	bic.w	r4, r4, #3
 800b640:	42a0      	cmp	r0, r4
 800b642:	d007      	beq.n	800b654 <sbrk_aligned+0x38>
 800b644:	1a21      	subs	r1, r4, r0
 800b646:	4628      	mov	r0, r5
 800b648:	f000 f9d8 	bl	800b9fc <_sbrk_r>
 800b64c:	3001      	adds	r0, #1
 800b64e:	d101      	bne.n	800b654 <sbrk_aligned+0x38>
 800b650:	f04f 34ff 	mov.w	r4, #4294967295
 800b654:	4620      	mov	r0, r4
 800b656:	bd70      	pop	{r4, r5, r6, pc}
 800b658:	20000674 	.word	0x20000674

0800b65c <_malloc_r>:
 800b65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b660:	1ccd      	adds	r5, r1, #3
 800b662:	f025 0503 	bic.w	r5, r5, #3
 800b666:	3508      	adds	r5, #8
 800b668:	2d0c      	cmp	r5, #12
 800b66a:	bf38      	it	cc
 800b66c:	250c      	movcc	r5, #12
 800b66e:	2d00      	cmp	r5, #0
 800b670:	4607      	mov	r7, r0
 800b672:	db01      	blt.n	800b678 <_malloc_r+0x1c>
 800b674:	42a9      	cmp	r1, r5
 800b676:	d905      	bls.n	800b684 <_malloc_r+0x28>
 800b678:	230c      	movs	r3, #12
 800b67a:	603b      	str	r3, [r7, #0]
 800b67c:	2600      	movs	r6, #0
 800b67e:	4630      	mov	r0, r6
 800b680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b684:	4e2e      	ldr	r6, [pc, #184]	; (800b740 <_malloc_r+0xe4>)
 800b686:	f000 fa25 	bl	800bad4 <__malloc_lock>
 800b68a:	6833      	ldr	r3, [r6, #0]
 800b68c:	461c      	mov	r4, r3
 800b68e:	bb34      	cbnz	r4, 800b6de <_malloc_r+0x82>
 800b690:	4629      	mov	r1, r5
 800b692:	4638      	mov	r0, r7
 800b694:	f7ff ffc2 	bl	800b61c <sbrk_aligned>
 800b698:	1c43      	adds	r3, r0, #1
 800b69a:	4604      	mov	r4, r0
 800b69c:	d14d      	bne.n	800b73a <_malloc_r+0xde>
 800b69e:	6834      	ldr	r4, [r6, #0]
 800b6a0:	4626      	mov	r6, r4
 800b6a2:	2e00      	cmp	r6, #0
 800b6a4:	d140      	bne.n	800b728 <_malloc_r+0xcc>
 800b6a6:	6823      	ldr	r3, [r4, #0]
 800b6a8:	4631      	mov	r1, r6
 800b6aa:	4638      	mov	r0, r7
 800b6ac:	eb04 0803 	add.w	r8, r4, r3
 800b6b0:	f000 f9a4 	bl	800b9fc <_sbrk_r>
 800b6b4:	4580      	cmp	r8, r0
 800b6b6:	d13a      	bne.n	800b72e <_malloc_r+0xd2>
 800b6b8:	6821      	ldr	r1, [r4, #0]
 800b6ba:	3503      	adds	r5, #3
 800b6bc:	1a6d      	subs	r5, r5, r1
 800b6be:	f025 0503 	bic.w	r5, r5, #3
 800b6c2:	3508      	adds	r5, #8
 800b6c4:	2d0c      	cmp	r5, #12
 800b6c6:	bf38      	it	cc
 800b6c8:	250c      	movcc	r5, #12
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	4638      	mov	r0, r7
 800b6ce:	f7ff ffa5 	bl	800b61c <sbrk_aligned>
 800b6d2:	3001      	adds	r0, #1
 800b6d4:	d02b      	beq.n	800b72e <_malloc_r+0xd2>
 800b6d6:	6823      	ldr	r3, [r4, #0]
 800b6d8:	442b      	add	r3, r5
 800b6da:	6023      	str	r3, [r4, #0]
 800b6dc:	e00e      	b.n	800b6fc <_malloc_r+0xa0>
 800b6de:	6822      	ldr	r2, [r4, #0]
 800b6e0:	1b52      	subs	r2, r2, r5
 800b6e2:	d41e      	bmi.n	800b722 <_malloc_r+0xc6>
 800b6e4:	2a0b      	cmp	r2, #11
 800b6e6:	d916      	bls.n	800b716 <_malloc_r+0xba>
 800b6e8:	1961      	adds	r1, r4, r5
 800b6ea:	42a3      	cmp	r3, r4
 800b6ec:	6025      	str	r5, [r4, #0]
 800b6ee:	bf18      	it	ne
 800b6f0:	6059      	strne	r1, [r3, #4]
 800b6f2:	6863      	ldr	r3, [r4, #4]
 800b6f4:	bf08      	it	eq
 800b6f6:	6031      	streq	r1, [r6, #0]
 800b6f8:	5162      	str	r2, [r4, r5]
 800b6fa:	604b      	str	r3, [r1, #4]
 800b6fc:	4638      	mov	r0, r7
 800b6fe:	f104 060b 	add.w	r6, r4, #11
 800b702:	f000 f9ed 	bl	800bae0 <__malloc_unlock>
 800b706:	f026 0607 	bic.w	r6, r6, #7
 800b70a:	1d23      	adds	r3, r4, #4
 800b70c:	1af2      	subs	r2, r6, r3
 800b70e:	d0b6      	beq.n	800b67e <_malloc_r+0x22>
 800b710:	1b9b      	subs	r3, r3, r6
 800b712:	50a3      	str	r3, [r4, r2]
 800b714:	e7b3      	b.n	800b67e <_malloc_r+0x22>
 800b716:	6862      	ldr	r2, [r4, #4]
 800b718:	42a3      	cmp	r3, r4
 800b71a:	bf0c      	ite	eq
 800b71c:	6032      	streq	r2, [r6, #0]
 800b71e:	605a      	strne	r2, [r3, #4]
 800b720:	e7ec      	b.n	800b6fc <_malloc_r+0xa0>
 800b722:	4623      	mov	r3, r4
 800b724:	6864      	ldr	r4, [r4, #4]
 800b726:	e7b2      	b.n	800b68e <_malloc_r+0x32>
 800b728:	4634      	mov	r4, r6
 800b72a:	6876      	ldr	r6, [r6, #4]
 800b72c:	e7b9      	b.n	800b6a2 <_malloc_r+0x46>
 800b72e:	230c      	movs	r3, #12
 800b730:	603b      	str	r3, [r7, #0]
 800b732:	4638      	mov	r0, r7
 800b734:	f000 f9d4 	bl	800bae0 <__malloc_unlock>
 800b738:	e7a1      	b.n	800b67e <_malloc_r+0x22>
 800b73a:	6025      	str	r5, [r4, #0]
 800b73c:	e7de      	b.n	800b6fc <_malloc_r+0xa0>
 800b73e:	bf00      	nop
 800b740:	20000670 	.word	0x20000670

0800b744 <__ssputs_r>:
 800b744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b748:	688e      	ldr	r6, [r1, #8]
 800b74a:	429e      	cmp	r6, r3
 800b74c:	4682      	mov	sl, r0
 800b74e:	460c      	mov	r4, r1
 800b750:	4690      	mov	r8, r2
 800b752:	461f      	mov	r7, r3
 800b754:	d838      	bhi.n	800b7c8 <__ssputs_r+0x84>
 800b756:	898a      	ldrh	r2, [r1, #12]
 800b758:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b75c:	d032      	beq.n	800b7c4 <__ssputs_r+0x80>
 800b75e:	6825      	ldr	r5, [r4, #0]
 800b760:	6909      	ldr	r1, [r1, #16]
 800b762:	eba5 0901 	sub.w	r9, r5, r1
 800b766:	6965      	ldr	r5, [r4, #20]
 800b768:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b76c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b770:	3301      	adds	r3, #1
 800b772:	444b      	add	r3, r9
 800b774:	106d      	asrs	r5, r5, #1
 800b776:	429d      	cmp	r5, r3
 800b778:	bf38      	it	cc
 800b77a:	461d      	movcc	r5, r3
 800b77c:	0553      	lsls	r3, r2, #21
 800b77e:	d531      	bpl.n	800b7e4 <__ssputs_r+0xa0>
 800b780:	4629      	mov	r1, r5
 800b782:	f7ff ff6b 	bl	800b65c <_malloc_r>
 800b786:	4606      	mov	r6, r0
 800b788:	b950      	cbnz	r0, 800b7a0 <__ssputs_r+0x5c>
 800b78a:	230c      	movs	r3, #12
 800b78c:	f8ca 3000 	str.w	r3, [sl]
 800b790:	89a3      	ldrh	r3, [r4, #12]
 800b792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b796:	81a3      	strh	r3, [r4, #12]
 800b798:	f04f 30ff 	mov.w	r0, #4294967295
 800b79c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7a0:	6921      	ldr	r1, [r4, #16]
 800b7a2:	464a      	mov	r2, r9
 800b7a4:	f7ff fb46 	bl	800ae34 <memcpy>
 800b7a8:	89a3      	ldrh	r3, [r4, #12]
 800b7aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b7ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7b2:	81a3      	strh	r3, [r4, #12]
 800b7b4:	6126      	str	r6, [r4, #16]
 800b7b6:	6165      	str	r5, [r4, #20]
 800b7b8:	444e      	add	r6, r9
 800b7ba:	eba5 0509 	sub.w	r5, r5, r9
 800b7be:	6026      	str	r6, [r4, #0]
 800b7c0:	60a5      	str	r5, [r4, #8]
 800b7c2:	463e      	mov	r6, r7
 800b7c4:	42be      	cmp	r6, r7
 800b7c6:	d900      	bls.n	800b7ca <__ssputs_r+0x86>
 800b7c8:	463e      	mov	r6, r7
 800b7ca:	6820      	ldr	r0, [r4, #0]
 800b7cc:	4632      	mov	r2, r6
 800b7ce:	4641      	mov	r1, r8
 800b7d0:	f000 f966 	bl	800baa0 <memmove>
 800b7d4:	68a3      	ldr	r3, [r4, #8]
 800b7d6:	1b9b      	subs	r3, r3, r6
 800b7d8:	60a3      	str	r3, [r4, #8]
 800b7da:	6823      	ldr	r3, [r4, #0]
 800b7dc:	4433      	add	r3, r6
 800b7de:	6023      	str	r3, [r4, #0]
 800b7e0:	2000      	movs	r0, #0
 800b7e2:	e7db      	b.n	800b79c <__ssputs_r+0x58>
 800b7e4:	462a      	mov	r2, r5
 800b7e6:	f000 f981 	bl	800baec <_realloc_r>
 800b7ea:	4606      	mov	r6, r0
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	d1e1      	bne.n	800b7b4 <__ssputs_r+0x70>
 800b7f0:	6921      	ldr	r1, [r4, #16]
 800b7f2:	4650      	mov	r0, sl
 800b7f4:	f7ff fec6 	bl	800b584 <_free_r>
 800b7f8:	e7c7      	b.n	800b78a <__ssputs_r+0x46>
	...

0800b7fc <_svfiprintf_r>:
 800b7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b800:	4698      	mov	r8, r3
 800b802:	898b      	ldrh	r3, [r1, #12]
 800b804:	061b      	lsls	r3, r3, #24
 800b806:	b09d      	sub	sp, #116	; 0x74
 800b808:	4607      	mov	r7, r0
 800b80a:	460d      	mov	r5, r1
 800b80c:	4614      	mov	r4, r2
 800b80e:	d50e      	bpl.n	800b82e <_svfiprintf_r+0x32>
 800b810:	690b      	ldr	r3, [r1, #16]
 800b812:	b963      	cbnz	r3, 800b82e <_svfiprintf_r+0x32>
 800b814:	2140      	movs	r1, #64	; 0x40
 800b816:	f7ff ff21 	bl	800b65c <_malloc_r>
 800b81a:	6028      	str	r0, [r5, #0]
 800b81c:	6128      	str	r0, [r5, #16]
 800b81e:	b920      	cbnz	r0, 800b82a <_svfiprintf_r+0x2e>
 800b820:	230c      	movs	r3, #12
 800b822:	603b      	str	r3, [r7, #0]
 800b824:	f04f 30ff 	mov.w	r0, #4294967295
 800b828:	e0d1      	b.n	800b9ce <_svfiprintf_r+0x1d2>
 800b82a:	2340      	movs	r3, #64	; 0x40
 800b82c:	616b      	str	r3, [r5, #20]
 800b82e:	2300      	movs	r3, #0
 800b830:	9309      	str	r3, [sp, #36]	; 0x24
 800b832:	2320      	movs	r3, #32
 800b834:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b838:	f8cd 800c 	str.w	r8, [sp, #12]
 800b83c:	2330      	movs	r3, #48	; 0x30
 800b83e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b9e8 <_svfiprintf_r+0x1ec>
 800b842:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b846:	f04f 0901 	mov.w	r9, #1
 800b84a:	4623      	mov	r3, r4
 800b84c:	469a      	mov	sl, r3
 800b84e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b852:	b10a      	cbz	r2, 800b858 <_svfiprintf_r+0x5c>
 800b854:	2a25      	cmp	r2, #37	; 0x25
 800b856:	d1f9      	bne.n	800b84c <_svfiprintf_r+0x50>
 800b858:	ebba 0b04 	subs.w	fp, sl, r4
 800b85c:	d00b      	beq.n	800b876 <_svfiprintf_r+0x7a>
 800b85e:	465b      	mov	r3, fp
 800b860:	4622      	mov	r2, r4
 800b862:	4629      	mov	r1, r5
 800b864:	4638      	mov	r0, r7
 800b866:	f7ff ff6d 	bl	800b744 <__ssputs_r>
 800b86a:	3001      	adds	r0, #1
 800b86c:	f000 80aa 	beq.w	800b9c4 <_svfiprintf_r+0x1c8>
 800b870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b872:	445a      	add	r2, fp
 800b874:	9209      	str	r2, [sp, #36]	; 0x24
 800b876:	f89a 3000 	ldrb.w	r3, [sl]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	f000 80a2 	beq.w	800b9c4 <_svfiprintf_r+0x1c8>
 800b880:	2300      	movs	r3, #0
 800b882:	f04f 32ff 	mov.w	r2, #4294967295
 800b886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b88a:	f10a 0a01 	add.w	sl, sl, #1
 800b88e:	9304      	str	r3, [sp, #16]
 800b890:	9307      	str	r3, [sp, #28]
 800b892:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b896:	931a      	str	r3, [sp, #104]	; 0x68
 800b898:	4654      	mov	r4, sl
 800b89a:	2205      	movs	r2, #5
 800b89c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8a0:	4851      	ldr	r0, [pc, #324]	; (800b9e8 <_svfiprintf_r+0x1ec>)
 800b8a2:	f7f4 fc85 	bl	80001b0 <memchr>
 800b8a6:	9a04      	ldr	r2, [sp, #16]
 800b8a8:	b9d8      	cbnz	r0, 800b8e2 <_svfiprintf_r+0xe6>
 800b8aa:	06d0      	lsls	r0, r2, #27
 800b8ac:	bf44      	itt	mi
 800b8ae:	2320      	movmi	r3, #32
 800b8b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8b4:	0711      	lsls	r1, r2, #28
 800b8b6:	bf44      	itt	mi
 800b8b8:	232b      	movmi	r3, #43	; 0x2b
 800b8ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8be:	f89a 3000 	ldrb.w	r3, [sl]
 800b8c2:	2b2a      	cmp	r3, #42	; 0x2a
 800b8c4:	d015      	beq.n	800b8f2 <_svfiprintf_r+0xf6>
 800b8c6:	9a07      	ldr	r2, [sp, #28]
 800b8c8:	4654      	mov	r4, sl
 800b8ca:	2000      	movs	r0, #0
 800b8cc:	f04f 0c0a 	mov.w	ip, #10
 800b8d0:	4621      	mov	r1, r4
 800b8d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8d6:	3b30      	subs	r3, #48	; 0x30
 800b8d8:	2b09      	cmp	r3, #9
 800b8da:	d94e      	bls.n	800b97a <_svfiprintf_r+0x17e>
 800b8dc:	b1b0      	cbz	r0, 800b90c <_svfiprintf_r+0x110>
 800b8de:	9207      	str	r2, [sp, #28]
 800b8e0:	e014      	b.n	800b90c <_svfiprintf_r+0x110>
 800b8e2:	eba0 0308 	sub.w	r3, r0, r8
 800b8e6:	fa09 f303 	lsl.w	r3, r9, r3
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	9304      	str	r3, [sp, #16]
 800b8ee:	46a2      	mov	sl, r4
 800b8f0:	e7d2      	b.n	800b898 <_svfiprintf_r+0x9c>
 800b8f2:	9b03      	ldr	r3, [sp, #12]
 800b8f4:	1d19      	adds	r1, r3, #4
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	9103      	str	r1, [sp, #12]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	bfbb      	ittet	lt
 800b8fe:	425b      	neglt	r3, r3
 800b900:	f042 0202 	orrlt.w	r2, r2, #2
 800b904:	9307      	strge	r3, [sp, #28]
 800b906:	9307      	strlt	r3, [sp, #28]
 800b908:	bfb8      	it	lt
 800b90a:	9204      	strlt	r2, [sp, #16]
 800b90c:	7823      	ldrb	r3, [r4, #0]
 800b90e:	2b2e      	cmp	r3, #46	; 0x2e
 800b910:	d10c      	bne.n	800b92c <_svfiprintf_r+0x130>
 800b912:	7863      	ldrb	r3, [r4, #1]
 800b914:	2b2a      	cmp	r3, #42	; 0x2a
 800b916:	d135      	bne.n	800b984 <_svfiprintf_r+0x188>
 800b918:	9b03      	ldr	r3, [sp, #12]
 800b91a:	1d1a      	adds	r2, r3, #4
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	9203      	str	r2, [sp, #12]
 800b920:	2b00      	cmp	r3, #0
 800b922:	bfb8      	it	lt
 800b924:	f04f 33ff 	movlt.w	r3, #4294967295
 800b928:	3402      	adds	r4, #2
 800b92a:	9305      	str	r3, [sp, #20]
 800b92c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b9f8 <_svfiprintf_r+0x1fc>
 800b930:	7821      	ldrb	r1, [r4, #0]
 800b932:	2203      	movs	r2, #3
 800b934:	4650      	mov	r0, sl
 800b936:	f7f4 fc3b 	bl	80001b0 <memchr>
 800b93a:	b140      	cbz	r0, 800b94e <_svfiprintf_r+0x152>
 800b93c:	2340      	movs	r3, #64	; 0x40
 800b93e:	eba0 000a 	sub.w	r0, r0, sl
 800b942:	fa03 f000 	lsl.w	r0, r3, r0
 800b946:	9b04      	ldr	r3, [sp, #16]
 800b948:	4303      	orrs	r3, r0
 800b94a:	3401      	adds	r4, #1
 800b94c:	9304      	str	r3, [sp, #16]
 800b94e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b952:	4826      	ldr	r0, [pc, #152]	; (800b9ec <_svfiprintf_r+0x1f0>)
 800b954:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b958:	2206      	movs	r2, #6
 800b95a:	f7f4 fc29 	bl	80001b0 <memchr>
 800b95e:	2800      	cmp	r0, #0
 800b960:	d038      	beq.n	800b9d4 <_svfiprintf_r+0x1d8>
 800b962:	4b23      	ldr	r3, [pc, #140]	; (800b9f0 <_svfiprintf_r+0x1f4>)
 800b964:	bb1b      	cbnz	r3, 800b9ae <_svfiprintf_r+0x1b2>
 800b966:	9b03      	ldr	r3, [sp, #12]
 800b968:	3307      	adds	r3, #7
 800b96a:	f023 0307 	bic.w	r3, r3, #7
 800b96e:	3308      	adds	r3, #8
 800b970:	9303      	str	r3, [sp, #12]
 800b972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b974:	4433      	add	r3, r6
 800b976:	9309      	str	r3, [sp, #36]	; 0x24
 800b978:	e767      	b.n	800b84a <_svfiprintf_r+0x4e>
 800b97a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b97e:	460c      	mov	r4, r1
 800b980:	2001      	movs	r0, #1
 800b982:	e7a5      	b.n	800b8d0 <_svfiprintf_r+0xd4>
 800b984:	2300      	movs	r3, #0
 800b986:	3401      	adds	r4, #1
 800b988:	9305      	str	r3, [sp, #20]
 800b98a:	4619      	mov	r1, r3
 800b98c:	f04f 0c0a 	mov.w	ip, #10
 800b990:	4620      	mov	r0, r4
 800b992:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b996:	3a30      	subs	r2, #48	; 0x30
 800b998:	2a09      	cmp	r2, #9
 800b99a:	d903      	bls.n	800b9a4 <_svfiprintf_r+0x1a8>
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d0c5      	beq.n	800b92c <_svfiprintf_r+0x130>
 800b9a0:	9105      	str	r1, [sp, #20]
 800b9a2:	e7c3      	b.n	800b92c <_svfiprintf_r+0x130>
 800b9a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9a8:	4604      	mov	r4, r0
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	e7f0      	b.n	800b990 <_svfiprintf_r+0x194>
 800b9ae:	ab03      	add	r3, sp, #12
 800b9b0:	9300      	str	r3, [sp, #0]
 800b9b2:	462a      	mov	r2, r5
 800b9b4:	4b0f      	ldr	r3, [pc, #60]	; (800b9f4 <_svfiprintf_r+0x1f8>)
 800b9b6:	a904      	add	r1, sp, #16
 800b9b8:	4638      	mov	r0, r7
 800b9ba:	f7fd ffc9 	bl	8009950 <_printf_float>
 800b9be:	1c42      	adds	r2, r0, #1
 800b9c0:	4606      	mov	r6, r0
 800b9c2:	d1d6      	bne.n	800b972 <_svfiprintf_r+0x176>
 800b9c4:	89ab      	ldrh	r3, [r5, #12]
 800b9c6:	065b      	lsls	r3, r3, #25
 800b9c8:	f53f af2c 	bmi.w	800b824 <_svfiprintf_r+0x28>
 800b9cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9ce:	b01d      	add	sp, #116	; 0x74
 800b9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9d4:	ab03      	add	r3, sp, #12
 800b9d6:	9300      	str	r3, [sp, #0]
 800b9d8:	462a      	mov	r2, r5
 800b9da:	4b06      	ldr	r3, [pc, #24]	; (800b9f4 <_svfiprintf_r+0x1f8>)
 800b9dc:	a904      	add	r1, sp, #16
 800b9de:	4638      	mov	r0, r7
 800b9e0:	f7fe fa5a 	bl	8009e98 <_printf_i>
 800b9e4:	e7eb      	b.n	800b9be <_svfiprintf_r+0x1c2>
 800b9e6:	bf00      	nop
 800b9e8:	0800cd04 	.word	0x0800cd04
 800b9ec:	0800cd0e 	.word	0x0800cd0e
 800b9f0:	08009951 	.word	0x08009951
 800b9f4:	0800b745 	.word	0x0800b745
 800b9f8:	0800cd0a 	.word	0x0800cd0a

0800b9fc <_sbrk_r>:
 800b9fc:	b538      	push	{r3, r4, r5, lr}
 800b9fe:	4d06      	ldr	r5, [pc, #24]	; (800ba18 <_sbrk_r+0x1c>)
 800ba00:	2300      	movs	r3, #0
 800ba02:	4604      	mov	r4, r0
 800ba04:	4608      	mov	r0, r1
 800ba06:	602b      	str	r3, [r5, #0]
 800ba08:	f7f7 fc84 	bl	8003314 <_sbrk>
 800ba0c:	1c43      	adds	r3, r0, #1
 800ba0e:	d102      	bne.n	800ba16 <_sbrk_r+0x1a>
 800ba10:	682b      	ldr	r3, [r5, #0]
 800ba12:	b103      	cbz	r3, 800ba16 <_sbrk_r+0x1a>
 800ba14:	6023      	str	r3, [r4, #0]
 800ba16:	bd38      	pop	{r3, r4, r5, pc}
 800ba18:	20000678 	.word	0x20000678

0800ba1c <__assert_func>:
 800ba1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba1e:	4614      	mov	r4, r2
 800ba20:	461a      	mov	r2, r3
 800ba22:	4b09      	ldr	r3, [pc, #36]	; (800ba48 <__assert_func+0x2c>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4605      	mov	r5, r0
 800ba28:	68d8      	ldr	r0, [r3, #12]
 800ba2a:	b14c      	cbz	r4, 800ba40 <__assert_func+0x24>
 800ba2c:	4b07      	ldr	r3, [pc, #28]	; (800ba4c <__assert_func+0x30>)
 800ba2e:	9100      	str	r1, [sp, #0]
 800ba30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba34:	4906      	ldr	r1, [pc, #24]	; (800ba50 <__assert_func+0x34>)
 800ba36:	462b      	mov	r3, r5
 800ba38:	f000 f80e 	bl	800ba58 <fiprintf>
 800ba3c:	f000 faac 	bl	800bf98 <abort>
 800ba40:	4b04      	ldr	r3, [pc, #16]	; (800ba54 <__assert_func+0x38>)
 800ba42:	461c      	mov	r4, r3
 800ba44:	e7f3      	b.n	800ba2e <__assert_func+0x12>
 800ba46:	bf00      	nop
 800ba48:	20000040 	.word	0x20000040
 800ba4c:	0800cd15 	.word	0x0800cd15
 800ba50:	0800cd22 	.word	0x0800cd22
 800ba54:	0800cd50 	.word	0x0800cd50

0800ba58 <fiprintf>:
 800ba58:	b40e      	push	{r1, r2, r3}
 800ba5a:	b503      	push	{r0, r1, lr}
 800ba5c:	4601      	mov	r1, r0
 800ba5e:	ab03      	add	r3, sp, #12
 800ba60:	4805      	ldr	r0, [pc, #20]	; (800ba78 <fiprintf+0x20>)
 800ba62:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba66:	6800      	ldr	r0, [r0, #0]
 800ba68:	9301      	str	r3, [sp, #4]
 800ba6a:	f000 f897 	bl	800bb9c <_vfiprintf_r>
 800ba6e:	b002      	add	sp, #8
 800ba70:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba74:	b003      	add	sp, #12
 800ba76:	4770      	bx	lr
 800ba78:	20000040 	.word	0x20000040

0800ba7c <__ascii_mbtowc>:
 800ba7c:	b082      	sub	sp, #8
 800ba7e:	b901      	cbnz	r1, 800ba82 <__ascii_mbtowc+0x6>
 800ba80:	a901      	add	r1, sp, #4
 800ba82:	b142      	cbz	r2, 800ba96 <__ascii_mbtowc+0x1a>
 800ba84:	b14b      	cbz	r3, 800ba9a <__ascii_mbtowc+0x1e>
 800ba86:	7813      	ldrb	r3, [r2, #0]
 800ba88:	600b      	str	r3, [r1, #0]
 800ba8a:	7812      	ldrb	r2, [r2, #0]
 800ba8c:	1e10      	subs	r0, r2, #0
 800ba8e:	bf18      	it	ne
 800ba90:	2001      	movne	r0, #1
 800ba92:	b002      	add	sp, #8
 800ba94:	4770      	bx	lr
 800ba96:	4610      	mov	r0, r2
 800ba98:	e7fb      	b.n	800ba92 <__ascii_mbtowc+0x16>
 800ba9a:	f06f 0001 	mvn.w	r0, #1
 800ba9e:	e7f8      	b.n	800ba92 <__ascii_mbtowc+0x16>

0800baa0 <memmove>:
 800baa0:	4288      	cmp	r0, r1
 800baa2:	b510      	push	{r4, lr}
 800baa4:	eb01 0402 	add.w	r4, r1, r2
 800baa8:	d902      	bls.n	800bab0 <memmove+0x10>
 800baaa:	4284      	cmp	r4, r0
 800baac:	4623      	mov	r3, r4
 800baae:	d807      	bhi.n	800bac0 <memmove+0x20>
 800bab0:	1e43      	subs	r3, r0, #1
 800bab2:	42a1      	cmp	r1, r4
 800bab4:	d008      	beq.n	800bac8 <memmove+0x28>
 800bab6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800baba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800babe:	e7f8      	b.n	800bab2 <memmove+0x12>
 800bac0:	4402      	add	r2, r0
 800bac2:	4601      	mov	r1, r0
 800bac4:	428a      	cmp	r2, r1
 800bac6:	d100      	bne.n	800baca <memmove+0x2a>
 800bac8:	bd10      	pop	{r4, pc}
 800baca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bace:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bad2:	e7f7      	b.n	800bac4 <memmove+0x24>

0800bad4 <__malloc_lock>:
 800bad4:	4801      	ldr	r0, [pc, #4]	; (800badc <__malloc_lock+0x8>)
 800bad6:	f000 bc1f 	b.w	800c318 <__retarget_lock_acquire_recursive>
 800bada:	bf00      	nop
 800badc:	2000067c 	.word	0x2000067c

0800bae0 <__malloc_unlock>:
 800bae0:	4801      	ldr	r0, [pc, #4]	; (800bae8 <__malloc_unlock+0x8>)
 800bae2:	f000 bc1a 	b.w	800c31a <__retarget_lock_release_recursive>
 800bae6:	bf00      	nop
 800bae8:	2000067c 	.word	0x2000067c

0800baec <_realloc_r>:
 800baec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baf0:	4680      	mov	r8, r0
 800baf2:	4614      	mov	r4, r2
 800baf4:	460e      	mov	r6, r1
 800baf6:	b921      	cbnz	r1, 800bb02 <_realloc_r+0x16>
 800baf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bafc:	4611      	mov	r1, r2
 800bafe:	f7ff bdad 	b.w	800b65c <_malloc_r>
 800bb02:	b92a      	cbnz	r2, 800bb10 <_realloc_r+0x24>
 800bb04:	f7ff fd3e 	bl	800b584 <_free_r>
 800bb08:	4625      	mov	r5, r4
 800bb0a:	4628      	mov	r0, r5
 800bb0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb10:	f000 fc6a 	bl	800c3e8 <_malloc_usable_size_r>
 800bb14:	4284      	cmp	r4, r0
 800bb16:	4607      	mov	r7, r0
 800bb18:	d802      	bhi.n	800bb20 <_realloc_r+0x34>
 800bb1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb1e:	d812      	bhi.n	800bb46 <_realloc_r+0x5a>
 800bb20:	4621      	mov	r1, r4
 800bb22:	4640      	mov	r0, r8
 800bb24:	f7ff fd9a 	bl	800b65c <_malloc_r>
 800bb28:	4605      	mov	r5, r0
 800bb2a:	2800      	cmp	r0, #0
 800bb2c:	d0ed      	beq.n	800bb0a <_realloc_r+0x1e>
 800bb2e:	42bc      	cmp	r4, r7
 800bb30:	4622      	mov	r2, r4
 800bb32:	4631      	mov	r1, r6
 800bb34:	bf28      	it	cs
 800bb36:	463a      	movcs	r2, r7
 800bb38:	f7ff f97c 	bl	800ae34 <memcpy>
 800bb3c:	4631      	mov	r1, r6
 800bb3e:	4640      	mov	r0, r8
 800bb40:	f7ff fd20 	bl	800b584 <_free_r>
 800bb44:	e7e1      	b.n	800bb0a <_realloc_r+0x1e>
 800bb46:	4635      	mov	r5, r6
 800bb48:	e7df      	b.n	800bb0a <_realloc_r+0x1e>

0800bb4a <__sfputc_r>:
 800bb4a:	6893      	ldr	r3, [r2, #8]
 800bb4c:	3b01      	subs	r3, #1
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	b410      	push	{r4}
 800bb52:	6093      	str	r3, [r2, #8]
 800bb54:	da08      	bge.n	800bb68 <__sfputc_r+0x1e>
 800bb56:	6994      	ldr	r4, [r2, #24]
 800bb58:	42a3      	cmp	r3, r4
 800bb5a:	db01      	blt.n	800bb60 <__sfputc_r+0x16>
 800bb5c:	290a      	cmp	r1, #10
 800bb5e:	d103      	bne.n	800bb68 <__sfputc_r+0x1e>
 800bb60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb64:	f000 b94a 	b.w	800bdfc <__swbuf_r>
 800bb68:	6813      	ldr	r3, [r2, #0]
 800bb6a:	1c58      	adds	r0, r3, #1
 800bb6c:	6010      	str	r0, [r2, #0]
 800bb6e:	7019      	strb	r1, [r3, #0]
 800bb70:	4608      	mov	r0, r1
 800bb72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb76:	4770      	bx	lr

0800bb78 <__sfputs_r>:
 800bb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb7a:	4606      	mov	r6, r0
 800bb7c:	460f      	mov	r7, r1
 800bb7e:	4614      	mov	r4, r2
 800bb80:	18d5      	adds	r5, r2, r3
 800bb82:	42ac      	cmp	r4, r5
 800bb84:	d101      	bne.n	800bb8a <__sfputs_r+0x12>
 800bb86:	2000      	movs	r0, #0
 800bb88:	e007      	b.n	800bb9a <__sfputs_r+0x22>
 800bb8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb8e:	463a      	mov	r2, r7
 800bb90:	4630      	mov	r0, r6
 800bb92:	f7ff ffda 	bl	800bb4a <__sfputc_r>
 800bb96:	1c43      	adds	r3, r0, #1
 800bb98:	d1f3      	bne.n	800bb82 <__sfputs_r+0xa>
 800bb9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bb9c <_vfiprintf_r>:
 800bb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba0:	460d      	mov	r5, r1
 800bba2:	b09d      	sub	sp, #116	; 0x74
 800bba4:	4614      	mov	r4, r2
 800bba6:	4698      	mov	r8, r3
 800bba8:	4606      	mov	r6, r0
 800bbaa:	b118      	cbz	r0, 800bbb4 <_vfiprintf_r+0x18>
 800bbac:	6983      	ldr	r3, [r0, #24]
 800bbae:	b90b      	cbnz	r3, 800bbb4 <_vfiprintf_r+0x18>
 800bbb0:	f000 fb14 	bl	800c1dc <__sinit>
 800bbb4:	4b89      	ldr	r3, [pc, #548]	; (800bddc <_vfiprintf_r+0x240>)
 800bbb6:	429d      	cmp	r5, r3
 800bbb8:	d11b      	bne.n	800bbf2 <_vfiprintf_r+0x56>
 800bbba:	6875      	ldr	r5, [r6, #4]
 800bbbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbbe:	07d9      	lsls	r1, r3, #31
 800bbc0:	d405      	bmi.n	800bbce <_vfiprintf_r+0x32>
 800bbc2:	89ab      	ldrh	r3, [r5, #12]
 800bbc4:	059a      	lsls	r2, r3, #22
 800bbc6:	d402      	bmi.n	800bbce <_vfiprintf_r+0x32>
 800bbc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbca:	f000 fba5 	bl	800c318 <__retarget_lock_acquire_recursive>
 800bbce:	89ab      	ldrh	r3, [r5, #12]
 800bbd0:	071b      	lsls	r3, r3, #28
 800bbd2:	d501      	bpl.n	800bbd8 <_vfiprintf_r+0x3c>
 800bbd4:	692b      	ldr	r3, [r5, #16]
 800bbd6:	b9eb      	cbnz	r3, 800bc14 <_vfiprintf_r+0x78>
 800bbd8:	4629      	mov	r1, r5
 800bbda:	4630      	mov	r0, r6
 800bbdc:	f000 f96e 	bl	800bebc <__swsetup_r>
 800bbe0:	b1c0      	cbz	r0, 800bc14 <_vfiprintf_r+0x78>
 800bbe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbe4:	07dc      	lsls	r4, r3, #31
 800bbe6:	d50e      	bpl.n	800bc06 <_vfiprintf_r+0x6a>
 800bbe8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbec:	b01d      	add	sp, #116	; 0x74
 800bbee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbf2:	4b7b      	ldr	r3, [pc, #492]	; (800bde0 <_vfiprintf_r+0x244>)
 800bbf4:	429d      	cmp	r5, r3
 800bbf6:	d101      	bne.n	800bbfc <_vfiprintf_r+0x60>
 800bbf8:	68b5      	ldr	r5, [r6, #8]
 800bbfa:	e7df      	b.n	800bbbc <_vfiprintf_r+0x20>
 800bbfc:	4b79      	ldr	r3, [pc, #484]	; (800bde4 <_vfiprintf_r+0x248>)
 800bbfe:	429d      	cmp	r5, r3
 800bc00:	bf08      	it	eq
 800bc02:	68f5      	ldreq	r5, [r6, #12]
 800bc04:	e7da      	b.n	800bbbc <_vfiprintf_r+0x20>
 800bc06:	89ab      	ldrh	r3, [r5, #12]
 800bc08:	0598      	lsls	r0, r3, #22
 800bc0a:	d4ed      	bmi.n	800bbe8 <_vfiprintf_r+0x4c>
 800bc0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc0e:	f000 fb84 	bl	800c31a <__retarget_lock_release_recursive>
 800bc12:	e7e9      	b.n	800bbe8 <_vfiprintf_r+0x4c>
 800bc14:	2300      	movs	r3, #0
 800bc16:	9309      	str	r3, [sp, #36]	; 0x24
 800bc18:	2320      	movs	r3, #32
 800bc1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc22:	2330      	movs	r3, #48	; 0x30
 800bc24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bde8 <_vfiprintf_r+0x24c>
 800bc28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc2c:	f04f 0901 	mov.w	r9, #1
 800bc30:	4623      	mov	r3, r4
 800bc32:	469a      	mov	sl, r3
 800bc34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc38:	b10a      	cbz	r2, 800bc3e <_vfiprintf_r+0xa2>
 800bc3a:	2a25      	cmp	r2, #37	; 0x25
 800bc3c:	d1f9      	bne.n	800bc32 <_vfiprintf_r+0x96>
 800bc3e:	ebba 0b04 	subs.w	fp, sl, r4
 800bc42:	d00b      	beq.n	800bc5c <_vfiprintf_r+0xc0>
 800bc44:	465b      	mov	r3, fp
 800bc46:	4622      	mov	r2, r4
 800bc48:	4629      	mov	r1, r5
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	f7ff ff94 	bl	800bb78 <__sfputs_r>
 800bc50:	3001      	adds	r0, #1
 800bc52:	f000 80aa 	beq.w	800bdaa <_vfiprintf_r+0x20e>
 800bc56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc58:	445a      	add	r2, fp
 800bc5a:	9209      	str	r2, [sp, #36]	; 0x24
 800bc5c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	f000 80a2 	beq.w	800bdaa <_vfiprintf_r+0x20e>
 800bc66:	2300      	movs	r3, #0
 800bc68:	f04f 32ff 	mov.w	r2, #4294967295
 800bc6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc70:	f10a 0a01 	add.w	sl, sl, #1
 800bc74:	9304      	str	r3, [sp, #16]
 800bc76:	9307      	str	r3, [sp, #28]
 800bc78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc7c:	931a      	str	r3, [sp, #104]	; 0x68
 800bc7e:	4654      	mov	r4, sl
 800bc80:	2205      	movs	r2, #5
 800bc82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc86:	4858      	ldr	r0, [pc, #352]	; (800bde8 <_vfiprintf_r+0x24c>)
 800bc88:	f7f4 fa92 	bl	80001b0 <memchr>
 800bc8c:	9a04      	ldr	r2, [sp, #16]
 800bc8e:	b9d8      	cbnz	r0, 800bcc8 <_vfiprintf_r+0x12c>
 800bc90:	06d1      	lsls	r1, r2, #27
 800bc92:	bf44      	itt	mi
 800bc94:	2320      	movmi	r3, #32
 800bc96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc9a:	0713      	lsls	r3, r2, #28
 800bc9c:	bf44      	itt	mi
 800bc9e:	232b      	movmi	r3, #43	; 0x2b
 800bca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bca4:	f89a 3000 	ldrb.w	r3, [sl]
 800bca8:	2b2a      	cmp	r3, #42	; 0x2a
 800bcaa:	d015      	beq.n	800bcd8 <_vfiprintf_r+0x13c>
 800bcac:	9a07      	ldr	r2, [sp, #28]
 800bcae:	4654      	mov	r4, sl
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	f04f 0c0a 	mov.w	ip, #10
 800bcb6:	4621      	mov	r1, r4
 800bcb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcbc:	3b30      	subs	r3, #48	; 0x30
 800bcbe:	2b09      	cmp	r3, #9
 800bcc0:	d94e      	bls.n	800bd60 <_vfiprintf_r+0x1c4>
 800bcc2:	b1b0      	cbz	r0, 800bcf2 <_vfiprintf_r+0x156>
 800bcc4:	9207      	str	r2, [sp, #28]
 800bcc6:	e014      	b.n	800bcf2 <_vfiprintf_r+0x156>
 800bcc8:	eba0 0308 	sub.w	r3, r0, r8
 800bccc:	fa09 f303 	lsl.w	r3, r9, r3
 800bcd0:	4313      	orrs	r3, r2
 800bcd2:	9304      	str	r3, [sp, #16]
 800bcd4:	46a2      	mov	sl, r4
 800bcd6:	e7d2      	b.n	800bc7e <_vfiprintf_r+0xe2>
 800bcd8:	9b03      	ldr	r3, [sp, #12]
 800bcda:	1d19      	adds	r1, r3, #4
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	9103      	str	r1, [sp, #12]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	bfbb      	ittet	lt
 800bce4:	425b      	neglt	r3, r3
 800bce6:	f042 0202 	orrlt.w	r2, r2, #2
 800bcea:	9307      	strge	r3, [sp, #28]
 800bcec:	9307      	strlt	r3, [sp, #28]
 800bcee:	bfb8      	it	lt
 800bcf0:	9204      	strlt	r2, [sp, #16]
 800bcf2:	7823      	ldrb	r3, [r4, #0]
 800bcf4:	2b2e      	cmp	r3, #46	; 0x2e
 800bcf6:	d10c      	bne.n	800bd12 <_vfiprintf_r+0x176>
 800bcf8:	7863      	ldrb	r3, [r4, #1]
 800bcfa:	2b2a      	cmp	r3, #42	; 0x2a
 800bcfc:	d135      	bne.n	800bd6a <_vfiprintf_r+0x1ce>
 800bcfe:	9b03      	ldr	r3, [sp, #12]
 800bd00:	1d1a      	adds	r2, r3, #4
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	9203      	str	r2, [sp, #12]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	bfb8      	it	lt
 800bd0a:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd0e:	3402      	adds	r4, #2
 800bd10:	9305      	str	r3, [sp, #20]
 800bd12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bdf8 <_vfiprintf_r+0x25c>
 800bd16:	7821      	ldrb	r1, [r4, #0]
 800bd18:	2203      	movs	r2, #3
 800bd1a:	4650      	mov	r0, sl
 800bd1c:	f7f4 fa48 	bl	80001b0 <memchr>
 800bd20:	b140      	cbz	r0, 800bd34 <_vfiprintf_r+0x198>
 800bd22:	2340      	movs	r3, #64	; 0x40
 800bd24:	eba0 000a 	sub.w	r0, r0, sl
 800bd28:	fa03 f000 	lsl.w	r0, r3, r0
 800bd2c:	9b04      	ldr	r3, [sp, #16]
 800bd2e:	4303      	orrs	r3, r0
 800bd30:	3401      	adds	r4, #1
 800bd32:	9304      	str	r3, [sp, #16]
 800bd34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd38:	482c      	ldr	r0, [pc, #176]	; (800bdec <_vfiprintf_r+0x250>)
 800bd3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd3e:	2206      	movs	r2, #6
 800bd40:	f7f4 fa36 	bl	80001b0 <memchr>
 800bd44:	2800      	cmp	r0, #0
 800bd46:	d03f      	beq.n	800bdc8 <_vfiprintf_r+0x22c>
 800bd48:	4b29      	ldr	r3, [pc, #164]	; (800bdf0 <_vfiprintf_r+0x254>)
 800bd4a:	bb1b      	cbnz	r3, 800bd94 <_vfiprintf_r+0x1f8>
 800bd4c:	9b03      	ldr	r3, [sp, #12]
 800bd4e:	3307      	adds	r3, #7
 800bd50:	f023 0307 	bic.w	r3, r3, #7
 800bd54:	3308      	adds	r3, #8
 800bd56:	9303      	str	r3, [sp, #12]
 800bd58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd5a:	443b      	add	r3, r7
 800bd5c:	9309      	str	r3, [sp, #36]	; 0x24
 800bd5e:	e767      	b.n	800bc30 <_vfiprintf_r+0x94>
 800bd60:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd64:	460c      	mov	r4, r1
 800bd66:	2001      	movs	r0, #1
 800bd68:	e7a5      	b.n	800bcb6 <_vfiprintf_r+0x11a>
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	3401      	adds	r4, #1
 800bd6e:	9305      	str	r3, [sp, #20]
 800bd70:	4619      	mov	r1, r3
 800bd72:	f04f 0c0a 	mov.w	ip, #10
 800bd76:	4620      	mov	r0, r4
 800bd78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd7c:	3a30      	subs	r2, #48	; 0x30
 800bd7e:	2a09      	cmp	r2, #9
 800bd80:	d903      	bls.n	800bd8a <_vfiprintf_r+0x1ee>
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d0c5      	beq.n	800bd12 <_vfiprintf_r+0x176>
 800bd86:	9105      	str	r1, [sp, #20]
 800bd88:	e7c3      	b.n	800bd12 <_vfiprintf_r+0x176>
 800bd8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd8e:	4604      	mov	r4, r0
 800bd90:	2301      	movs	r3, #1
 800bd92:	e7f0      	b.n	800bd76 <_vfiprintf_r+0x1da>
 800bd94:	ab03      	add	r3, sp, #12
 800bd96:	9300      	str	r3, [sp, #0]
 800bd98:	462a      	mov	r2, r5
 800bd9a:	4b16      	ldr	r3, [pc, #88]	; (800bdf4 <_vfiprintf_r+0x258>)
 800bd9c:	a904      	add	r1, sp, #16
 800bd9e:	4630      	mov	r0, r6
 800bda0:	f7fd fdd6 	bl	8009950 <_printf_float>
 800bda4:	4607      	mov	r7, r0
 800bda6:	1c78      	adds	r0, r7, #1
 800bda8:	d1d6      	bne.n	800bd58 <_vfiprintf_r+0x1bc>
 800bdaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdac:	07d9      	lsls	r1, r3, #31
 800bdae:	d405      	bmi.n	800bdbc <_vfiprintf_r+0x220>
 800bdb0:	89ab      	ldrh	r3, [r5, #12]
 800bdb2:	059a      	lsls	r2, r3, #22
 800bdb4:	d402      	bmi.n	800bdbc <_vfiprintf_r+0x220>
 800bdb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdb8:	f000 faaf 	bl	800c31a <__retarget_lock_release_recursive>
 800bdbc:	89ab      	ldrh	r3, [r5, #12]
 800bdbe:	065b      	lsls	r3, r3, #25
 800bdc0:	f53f af12 	bmi.w	800bbe8 <_vfiprintf_r+0x4c>
 800bdc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdc6:	e711      	b.n	800bbec <_vfiprintf_r+0x50>
 800bdc8:	ab03      	add	r3, sp, #12
 800bdca:	9300      	str	r3, [sp, #0]
 800bdcc:	462a      	mov	r2, r5
 800bdce:	4b09      	ldr	r3, [pc, #36]	; (800bdf4 <_vfiprintf_r+0x258>)
 800bdd0:	a904      	add	r1, sp, #16
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	f7fe f860 	bl	8009e98 <_printf_i>
 800bdd8:	e7e4      	b.n	800bda4 <_vfiprintf_r+0x208>
 800bdda:	bf00      	nop
 800bddc:	0800ce7c 	.word	0x0800ce7c
 800bde0:	0800ce9c 	.word	0x0800ce9c
 800bde4:	0800ce5c 	.word	0x0800ce5c
 800bde8:	0800cd04 	.word	0x0800cd04
 800bdec:	0800cd0e 	.word	0x0800cd0e
 800bdf0:	08009951 	.word	0x08009951
 800bdf4:	0800bb79 	.word	0x0800bb79
 800bdf8:	0800cd0a 	.word	0x0800cd0a

0800bdfc <__swbuf_r>:
 800bdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdfe:	460e      	mov	r6, r1
 800be00:	4614      	mov	r4, r2
 800be02:	4605      	mov	r5, r0
 800be04:	b118      	cbz	r0, 800be0e <__swbuf_r+0x12>
 800be06:	6983      	ldr	r3, [r0, #24]
 800be08:	b90b      	cbnz	r3, 800be0e <__swbuf_r+0x12>
 800be0a:	f000 f9e7 	bl	800c1dc <__sinit>
 800be0e:	4b21      	ldr	r3, [pc, #132]	; (800be94 <__swbuf_r+0x98>)
 800be10:	429c      	cmp	r4, r3
 800be12:	d12b      	bne.n	800be6c <__swbuf_r+0x70>
 800be14:	686c      	ldr	r4, [r5, #4]
 800be16:	69a3      	ldr	r3, [r4, #24]
 800be18:	60a3      	str	r3, [r4, #8]
 800be1a:	89a3      	ldrh	r3, [r4, #12]
 800be1c:	071a      	lsls	r2, r3, #28
 800be1e:	d52f      	bpl.n	800be80 <__swbuf_r+0x84>
 800be20:	6923      	ldr	r3, [r4, #16]
 800be22:	b36b      	cbz	r3, 800be80 <__swbuf_r+0x84>
 800be24:	6923      	ldr	r3, [r4, #16]
 800be26:	6820      	ldr	r0, [r4, #0]
 800be28:	1ac0      	subs	r0, r0, r3
 800be2a:	6963      	ldr	r3, [r4, #20]
 800be2c:	b2f6      	uxtb	r6, r6
 800be2e:	4283      	cmp	r3, r0
 800be30:	4637      	mov	r7, r6
 800be32:	dc04      	bgt.n	800be3e <__swbuf_r+0x42>
 800be34:	4621      	mov	r1, r4
 800be36:	4628      	mov	r0, r5
 800be38:	f000 f93c 	bl	800c0b4 <_fflush_r>
 800be3c:	bb30      	cbnz	r0, 800be8c <__swbuf_r+0x90>
 800be3e:	68a3      	ldr	r3, [r4, #8]
 800be40:	3b01      	subs	r3, #1
 800be42:	60a3      	str	r3, [r4, #8]
 800be44:	6823      	ldr	r3, [r4, #0]
 800be46:	1c5a      	adds	r2, r3, #1
 800be48:	6022      	str	r2, [r4, #0]
 800be4a:	701e      	strb	r6, [r3, #0]
 800be4c:	6963      	ldr	r3, [r4, #20]
 800be4e:	3001      	adds	r0, #1
 800be50:	4283      	cmp	r3, r0
 800be52:	d004      	beq.n	800be5e <__swbuf_r+0x62>
 800be54:	89a3      	ldrh	r3, [r4, #12]
 800be56:	07db      	lsls	r3, r3, #31
 800be58:	d506      	bpl.n	800be68 <__swbuf_r+0x6c>
 800be5a:	2e0a      	cmp	r6, #10
 800be5c:	d104      	bne.n	800be68 <__swbuf_r+0x6c>
 800be5e:	4621      	mov	r1, r4
 800be60:	4628      	mov	r0, r5
 800be62:	f000 f927 	bl	800c0b4 <_fflush_r>
 800be66:	b988      	cbnz	r0, 800be8c <__swbuf_r+0x90>
 800be68:	4638      	mov	r0, r7
 800be6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be6c:	4b0a      	ldr	r3, [pc, #40]	; (800be98 <__swbuf_r+0x9c>)
 800be6e:	429c      	cmp	r4, r3
 800be70:	d101      	bne.n	800be76 <__swbuf_r+0x7a>
 800be72:	68ac      	ldr	r4, [r5, #8]
 800be74:	e7cf      	b.n	800be16 <__swbuf_r+0x1a>
 800be76:	4b09      	ldr	r3, [pc, #36]	; (800be9c <__swbuf_r+0xa0>)
 800be78:	429c      	cmp	r4, r3
 800be7a:	bf08      	it	eq
 800be7c:	68ec      	ldreq	r4, [r5, #12]
 800be7e:	e7ca      	b.n	800be16 <__swbuf_r+0x1a>
 800be80:	4621      	mov	r1, r4
 800be82:	4628      	mov	r0, r5
 800be84:	f000 f81a 	bl	800bebc <__swsetup_r>
 800be88:	2800      	cmp	r0, #0
 800be8a:	d0cb      	beq.n	800be24 <__swbuf_r+0x28>
 800be8c:	f04f 37ff 	mov.w	r7, #4294967295
 800be90:	e7ea      	b.n	800be68 <__swbuf_r+0x6c>
 800be92:	bf00      	nop
 800be94:	0800ce7c 	.word	0x0800ce7c
 800be98:	0800ce9c 	.word	0x0800ce9c
 800be9c:	0800ce5c 	.word	0x0800ce5c

0800bea0 <__ascii_wctomb>:
 800bea0:	b149      	cbz	r1, 800beb6 <__ascii_wctomb+0x16>
 800bea2:	2aff      	cmp	r2, #255	; 0xff
 800bea4:	bf85      	ittet	hi
 800bea6:	238a      	movhi	r3, #138	; 0x8a
 800bea8:	6003      	strhi	r3, [r0, #0]
 800beaa:	700a      	strbls	r2, [r1, #0]
 800beac:	f04f 30ff 	movhi.w	r0, #4294967295
 800beb0:	bf98      	it	ls
 800beb2:	2001      	movls	r0, #1
 800beb4:	4770      	bx	lr
 800beb6:	4608      	mov	r0, r1
 800beb8:	4770      	bx	lr
	...

0800bebc <__swsetup_r>:
 800bebc:	4b32      	ldr	r3, [pc, #200]	; (800bf88 <__swsetup_r+0xcc>)
 800bebe:	b570      	push	{r4, r5, r6, lr}
 800bec0:	681d      	ldr	r5, [r3, #0]
 800bec2:	4606      	mov	r6, r0
 800bec4:	460c      	mov	r4, r1
 800bec6:	b125      	cbz	r5, 800bed2 <__swsetup_r+0x16>
 800bec8:	69ab      	ldr	r3, [r5, #24]
 800beca:	b913      	cbnz	r3, 800bed2 <__swsetup_r+0x16>
 800becc:	4628      	mov	r0, r5
 800bece:	f000 f985 	bl	800c1dc <__sinit>
 800bed2:	4b2e      	ldr	r3, [pc, #184]	; (800bf8c <__swsetup_r+0xd0>)
 800bed4:	429c      	cmp	r4, r3
 800bed6:	d10f      	bne.n	800bef8 <__swsetup_r+0x3c>
 800bed8:	686c      	ldr	r4, [r5, #4]
 800beda:	89a3      	ldrh	r3, [r4, #12]
 800bedc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bee0:	0719      	lsls	r1, r3, #28
 800bee2:	d42c      	bmi.n	800bf3e <__swsetup_r+0x82>
 800bee4:	06dd      	lsls	r5, r3, #27
 800bee6:	d411      	bmi.n	800bf0c <__swsetup_r+0x50>
 800bee8:	2309      	movs	r3, #9
 800beea:	6033      	str	r3, [r6, #0]
 800beec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bef0:	81a3      	strh	r3, [r4, #12]
 800bef2:	f04f 30ff 	mov.w	r0, #4294967295
 800bef6:	e03e      	b.n	800bf76 <__swsetup_r+0xba>
 800bef8:	4b25      	ldr	r3, [pc, #148]	; (800bf90 <__swsetup_r+0xd4>)
 800befa:	429c      	cmp	r4, r3
 800befc:	d101      	bne.n	800bf02 <__swsetup_r+0x46>
 800befe:	68ac      	ldr	r4, [r5, #8]
 800bf00:	e7eb      	b.n	800beda <__swsetup_r+0x1e>
 800bf02:	4b24      	ldr	r3, [pc, #144]	; (800bf94 <__swsetup_r+0xd8>)
 800bf04:	429c      	cmp	r4, r3
 800bf06:	bf08      	it	eq
 800bf08:	68ec      	ldreq	r4, [r5, #12]
 800bf0a:	e7e6      	b.n	800beda <__swsetup_r+0x1e>
 800bf0c:	0758      	lsls	r0, r3, #29
 800bf0e:	d512      	bpl.n	800bf36 <__swsetup_r+0x7a>
 800bf10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf12:	b141      	cbz	r1, 800bf26 <__swsetup_r+0x6a>
 800bf14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf18:	4299      	cmp	r1, r3
 800bf1a:	d002      	beq.n	800bf22 <__swsetup_r+0x66>
 800bf1c:	4630      	mov	r0, r6
 800bf1e:	f7ff fb31 	bl	800b584 <_free_r>
 800bf22:	2300      	movs	r3, #0
 800bf24:	6363      	str	r3, [r4, #52]	; 0x34
 800bf26:	89a3      	ldrh	r3, [r4, #12]
 800bf28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf2c:	81a3      	strh	r3, [r4, #12]
 800bf2e:	2300      	movs	r3, #0
 800bf30:	6063      	str	r3, [r4, #4]
 800bf32:	6923      	ldr	r3, [r4, #16]
 800bf34:	6023      	str	r3, [r4, #0]
 800bf36:	89a3      	ldrh	r3, [r4, #12]
 800bf38:	f043 0308 	orr.w	r3, r3, #8
 800bf3c:	81a3      	strh	r3, [r4, #12]
 800bf3e:	6923      	ldr	r3, [r4, #16]
 800bf40:	b94b      	cbnz	r3, 800bf56 <__swsetup_r+0x9a>
 800bf42:	89a3      	ldrh	r3, [r4, #12]
 800bf44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf4c:	d003      	beq.n	800bf56 <__swsetup_r+0x9a>
 800bf4e:	4621      	mov	r1, r4
 800bf50:	4630      	mov	r0, r6
 800bf52:	f000 fa09 	bl	800c368 <__smakebuf_r>
 800bf56:	89a0      	ldrh	r0, [r4, #12]
 800bf58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf5c:	f010 0301 	ands.w	r3, r0, #1
 800bf60:	d00a      	beq.n	800bf78 <__swsetup_r+0xbc>
 800bf62:	2300      	movs	r3, #0
 800bf64:	60a3      	str	r3, [r4, #8]
 800bf66:	6963      	ldr	r3, [r4, #20]
 800bf68:	425b      	negs	r3, r3
 800bf6a:	61a3      	str	r3, [r4, #24]
 800bf6c:	6923      	ldr	r3, [r4, #16]
 800bf6e:	b943      	cbnz	r3, 800bf82 <__swsetup_r+0xc6>
 800bf70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf74:	d1ba      	bne.n	800beec <__swsetup_r+0x30>
 800bf76:	bd70      	pop	{r4, r5, r6, pc}
 800bf78:	0781      	lsls	r1, r0, #30
 800bf7a:	bf58      	it	pl
 800bf7c:	6963      	ldrpl	r3, [r4, #20]
 800bf7e:	60a3      	str	r3, [r4, #8]
 800bf80:	e7f4      	b.n	800bf6c <__swsetup_r+0xb0>
 800bf82:	2000      	movs	r0, #0
 800bf84:	e7f7      	b.n	800bf76 <__swsetup_r+0xba>
 800bf86:	bf00      	nop
 800bf88:	20000040 	.word	0x20000040
 800bf8c:	0800ce7c 	.word	0x0800ce7c
 800bf90:	0800ce9c 	.word	0x0800ce9c
 800bf94:	0800ce5c 	.word	0x0800ce5c

0800bf98 <abort>:
 800bf98:	b508      	push	{r3, lr}
 800bf9a:	2006      	movs	r0, #6
 800bf9c:	f000 fa54 	bl	800c448 <raise>
 800bfa0:	2001      	movs	r0, #1
 800bfa2:	f7f7 f93f 	bl	8003224 <_exit>
	...

0800bfa8 <__sflush_r>:
 800bfa8:	898a      	ldrh	r2, [r1, #12]
 800bfaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfae:	4605      	mov	r5, r0
 800bfb0:	0710      	lsls	r0, r2, #28
 800bfb2:	460c      	mov	r4, r1
 800bfb4:	d458      	bmi.n	800c068 <__sflush_r+0xc0>
 800bfb6:	684b      	ldr	r3, [r1, #4]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	dc05      	bgt.n	800bfc8 <__sflush_r+0x20>
 800bfbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	dc02      	bgt.n	800bfc8 <__sflush_r+0x20>
 800bfc2:	2000      	movs	r0, #0
 800bfc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfca:	2e00      	cmp	r6, #0
 800bfcc:	d0f9      	beq.n	800bfc2 <__sflush_r+0x1a>
 800bfce:	2300      	movs	r3, #0
 800bfd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bfd4:	682f      	ldr	r7, [r5, #0]
 800bfd6:	602b      	str	r3, [r5, #0]
 800bfd8:	d032      	beq.n	800c040 <__sflush_r+0x98>
 800bfda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bfdc:	89a3      	ldrh	r3, [r4, #12]
 800bfde:	075a      	lsls	r2, r3, #29
 800bfe0:	d505      	bpl.n	800bfee <__sflush_r+0x46>
 800bfe2:	6863      	ldr	r3, [r4, #4]
 800bfe4:	1ac0      	subs	r0, r0, r3
 800bfe6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bfe8:	b10b      	cbz	r3, 800bfee <__sflush_r+0x46>
 800bfea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bfec:	1ac0      	subs	r0, r0, r3
 800bfee:	2300      	movs	r3, #0
 800bff0:	4602      	mov	r2, r0
 800bff2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bff4:	6a21      	ldr	r1, [r4, #32]
 800bff6:	4628      	mov	r0, r5
 800bff8:	47b0      	blx	r6
 800bffa:	1c43      	adds	r3, r0, #1
 800bffc:	89a3      	ldrh	r3, [r4, #12]
 800bffe:	d106      	bne.n	800c00e <__sflush_r+0x66>
 800c000:	6829      	ldr	r1, [r5, #0]
 800c002:	291d      	cmp	r1, #29
 800c004:	d82c      	bhi.n	800c060 <__sflush_r+0xb8>
 800c006:	4a2a      	ldr	r2, [pc, #168]	; (800c0b0 <__sflush_r+0x108>)
 800c008:	40ca      	lsrs	r2, r1
 800c00a:	07d6      	lsls	r6, r2, #31
 800c00c:	d528      	bpl.n	800c060 <__sflush_r+0xb8>
 800c00e:	2200      	movs	r2, #0
 800c010:	6062      	str	r2, [r4, #4]
 800c012:	04d9      	lsls	r1, r3, #19
 800c014:	6922      	ldr	r2, [r4, #16]
 800c016:	6022      	str	r2, [r4, #0]
 800c018:	d504      	bpl.n	800c024 <__sflush_r+0x7c>
 800c01a:	1c42      	adds	r2, r0, #1
 800c01c:	d101      	bne.n	800c022 <__sflush_r+0x7a>
 800c01e:	682b      	ldr	r3, [r5, #0]
 800c020:	b903      	cbnz	r3, 800c024 <__sflush_r+0x7c>
 800c022:	6560      	str	r0, [r4, #84]	; 0x54
 800c024:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c026:	602f      	str	r7, [r5, #0]
 800c028:	2900      	cmp	r1, #0
 800c02a:	d0ca      	beq.n	800bfc2 <__sflush_r+0x1a>
 800c02c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c030:	4299      	cmp	r1, r3
 800c032:	d002      	beq.n	800c03a <__sflush_r+0x92>
 800c034:	4628      	mov	r0, r5
 800c036:	f7ff faa5 	bl	800b584 <_free_r>
 800c03a:	2000      	movs	r0, #0
 800c03c:	6360      	str	r0, [r4, #52]	; 0x34
 800c03e:	e7c1      	b.n	800bfc4 <__sflush_r+0x1c>
 800c040:	6a21      	ldr	r1, [r4, #32]
 800c042:	2301      	movs	r3, #1
 800c044:	4628      	mov	r0, r5
 800c046:	47b0      	blx	r6
 800c048:	1c41      	adds	r1, r0, #1
 800c04a:	d1c7      	bne.n	800bfdc <__sflush_r+0x34>
 800c04c:	682b      	ldr	r3, [r5, #0]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d0c4      	beq.n	800bfdc <__sflush_r+0x34>
 800c052:	2b1d      	cmp	r3, #29
 800c054:	d001      	beq.n	800c05a <__sflush_r+0xb2>
 800c056:	2b16      	cmp	r3, #22
 800c058:	d101      	bne.n	800c05e <__sflush_r+0xb6>
 800c05a:	602f      	str	r7, [r5, #0]
 800c05c:	e7b1      	b.n	800bfc2 <__sflush_r+0x1a>
 800c05e:	89a3      	ldrh	r3, [r4, #12]
 800c060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c064:	81a3      	strh	r3, [r4, #12]
 800c066:	e7ad      	b.n	800bfc4 <__sflush_r+0x1c>
 800c068:	690f      	ldr	r7, [r1, #16]
 800c06a:	2f00      	cmp	r7, #0
 800c06c:	d0a9      	beq.n	800bfc2 <__sflush_r+0x1a>
 800c06e:	0793      	lsls	r3, r2, #30
 800c070:	680e      	ldr	r6, [r1, #0]
 800c072:	bf08      	it	eq
 800c074:	694b      	ldreq	r3, [r1, #20]
 800c076:	600f      	str	r7, [r1, #0]
 800c078:	bf18      	it	ne
 800c07a:	2300      	movne	r3, #0
 800c07c:	eba6 0807 	sub.w	r8, r6, r7
 800c080:	608b      	str	r3, [r1, #8]
 800c082:	f1b8 0f00 	cmp.w	r8, #0
 800c086:	dd9c      	ble.n	800bfc2 <__sflush_r+0x1a>
 800c088:	6a21      	ldr	r1, [r4, #32]
 800c08a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c08c:	4643      	mov	r3, r8
 800c08e:	463a      	mov	r2, r7
 800c090:	4628      	mov	r0, r5
 800c092:	47b0      	blx	r6
 800c094:	2800      	cmp	r0, #0
 800c096:	dc06      	bgt.n	800c0a6 <__sflush_r+0xfe>
 800c098:	89a3      	ldrh	r3, [r4, #12]
 800c09a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c09e:	81a3      	strh	r3, [r4, #12]
 800c0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0a4:	e78e      	b.n	800bfc4 <__sflush_r+0x1c>
 800c0a6:	4407      	add	r7, r0
 800c0a8:	eba8 0800 	sub.w	r8, r8, r0
 800c0ac:	e7e9      	b.n	800c082 <__sflush_r+0xda>
 800c0ae:	bf00      	nop
 800c0b0:	20400001 	.word	0x20400001

0800c0b4 <_fflush_r>:
 800c0b4:	b538      	push	{r3, r4, r5, lr}
 800c0b6:	690b      	ldr	r3, [r1, #16]
 800c0b8:	4605      	mov	r5, r0
 800c0ba:	460c      	mov	r4, r1
 800c0bc:	b913      	cbnz	r3, 800c0c4 <_fflush_r+0x10>
 800c0be:	2500      	movs	r5, #0
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	bd38      	pop	{r3, r4, r5, pc}
 800c0c4:	b118      	cbz	r0, 800c0ce <_fflush_r+0x1a>
 800c0c6:	6983      	ldr	r3, [r0, #24]
 800c0c8:	b90b      	cbnz	r3, 800c0ce <_fflush_r+0x1a>
 800c0ca:	f000 f887 	bl	800c1dc <__sinit>
 800c0ce:	4b14      	ldr	r3, [pc, #80]	; (800c120 <_fflush_r+0x6c>)
 800c0d0:	429c      	cmp	r4, r3
 800c0d2:	d11b      	bne.n	800c10c <_fflush_r+0x58>
 800c0d4:	686c      	ldr	r4, [r5, #4]
 800c0d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d0ef      	beq.n	800c0be <_fflush_r+0xa>
 800c0de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c0e0:	07d0      	lsls	r0, r2, #31
 800c0e2:	d404      	bmi.n	800c0ee <_fflush_r+0x3a>
 800c0e4:	0599      	lsls	r1, r3, #22
 800c0e6:	d402      	bmi.n	800c0ee <_fflush_r+0x3a>
 800c0e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0ea:	f000 f915 	bl	800c318 <__retarget_lock_acquire_recursive>
 800c0ee:	4628      	mov	r0, r5
 800c0f0:	4621      	mov	r1, r4
 800c0f2:	f7ff ff59 	bl	800bfa8 <__sflush_r>
 800c0f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0f8:	07da      	lsls	r2, r3, #31
 800c0fa:	4605      	mov	r5, r0
 800c0fc:	d4e0      	bmi.n	800c0c0 <_fflush_r+0xc>
 800c0fe:	89a3      	ldrh	r3, [r4, #12]
 800c100:	059b      	lsls	r3, r3, #22
 800c102:	d4dd      	bmi.n	800c0c0 <_fflush_r+0xc>
 800c104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c106:	f000 f908 	bl	800c31a <__retarget_lock_release_recursive>
 800c10a:	e7d9      	b.n	800c0c0 <_fflush_r+0xc>
 800c10c:	4b05      	ldr	r3, [pc, #20]	; (800c124 <_fflush_r+0x70>)
 800c10e:	429c      	cmp	r4, r3
 800c110:	d101      	bne.n	800c116 <_fflush_r+0x62>
 800c112:	68ac      	ldr	r4, [r5, #8]
 800c114:	e7df      	b.n	800c0d6 <_fflush_r+0x22>
 800c116:	4b04      	ldr	r3, [pc, #16]	; (800c128 <_fflush_r+0x74>)
 800c118:	429c      	cmp	r4, r3
 800c11a:	bf08      	it	eq
 800c11c:	68ec      	ldreq	r4, [r5, #12]
 800c11e:	e7da      	b.n	800c0d6 <_fflush_r+0x22>
 800c120:	0800ce7c 	.word	0x0800ce7c
 800c124:	0800ce9c 	.word	0x0800ce9c
 800c128:	0800ce5c 	.word	0x0800ce5c

0800c12c <std>:
 800c12c:	2300      	movs	r3, #0
 800c12e:	b510      	push	{r4, lr}
 800c130:	4604      	mov	r4, r0
 800c132:	e9c0 3300 	strd	r3, r3, [r0]
 800c136:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c13a:	6083      	str	r3, [r0, #8]
 800c13c:	8181      	strh	r1, [r0, #12]
 800c13e:	6643      	str	r3, [r0, #100]	; 0x64
 800c140:	81c2      	strh	r2, [r0, #14]
 800c142:	6183      	str	r3, [r0, #24]
 800c144:	4619      	mov	r1, r3
 800c146:	2208      	movs	r2, #8
 800c148:	305c      	adds	r0, #92	; 0x5c
 800c14a:	f7fd fb59 	bl	8009800 <memset>
 800c14e:	4b05      	ldr	r3, [pc, #20]	; (800c164 <std+0x38>)
 800c150:	6263      	str	r3, [r4, #36]	; 0x24
 800c152:	4b05      	ldr	r3, [pc, #20]	; (800c168 <std+0x3c>)
 800c154:	62a3      	str	r3, [r4, #40]	; 0x28
 800c156:	4b05      	ldr	r3, [pc, #20]	; (800c16c <std+0x40>)
 800c158:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c15a:	4b05      	ldr	r3, [pc, #20]	; (800c170 <std+0x44>)
 800c15c:	6224      	str	r4, [r4, #32]
 800c15e:	6323      	str	r3, [r4, #48]	; 0x30
 800c160:	bd10      	pop	{r4, pc}
 800c162:	bf00      	nop
 800c164:	0800c481 	.word	0x0800c481
 800c168:	0800c4a3 	.word	0x0800c4a3
 800c16c:	0800c4db 	.word	0x0800c4db
 800c170:	0800c4ff 	.word	0x0800c4ff

0800c174 <_cleanup_r>:
 800c174:	4901      	ldr	r1, [pc, #4]	; (800c17c <_cleanup_r+0x8>)
 800c176:	f000 b8af 	b.w	800c2d8 <_fwalk_reent>
 800c17a:	bf00      	nop
 800c17c:	0800c0b5 	.word	0x0800c0b5

0800c180 <__sfmoreglue>:
 800c180:	b570      	push	{r4, r5, r6, lr}
 800c182:	2268      	movs	r2, #104	; 0x68
 800c184:	1e4d      	subs	r5, r1, #1
 800c186:	4355      	muls	r5, r2
 800c188:	460e      	mov	r6, r1
 800c18a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c18e:	f7ff fa65 	bl	800b65c <_malloc_r>
 800c192:	4604      	mov	r4, r0
 800c194:	b140      	cbz	r0, 800c1a8 <__sfmoreglue+0x28>
 800c196:	2100      	movs	r1, #0
 800c198:	e9c0 1600 	strd	r1, r6, [r0]
 800c19c:	300c      	adds	r0, #12
 800c19e:	60a0      	str	r0, [r4, #8]
 800c1a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c1a4:	f7fd fb2c 	bl	8009800 <memset>
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	bd70      	pop	{r4, r5, r6, pc}

0800c1ac <__sfp_lock_acquire>:
 800c1ac:	4801      	ldr	r0, [pc, #4]	; (800c1b4 <__sfp_lock_acquire+0x8>)
 800c1ae:	f000 b8b3 	b.w	800c318 <__retarget_lock_acquire_recursive>
 800c1b2:	bf00      	nop
 800c1b4:	2000067d 	.word	0x2000067d

0800c1b8 <__sfp_lock_release>:
 800c1b8:	4801      	ldr	r0, [pc, #4]	; (800c1c0 <__sfp_lock_release+0x8>)
 800c1ba:	f000 b8ae 	b.w	800c31a <__retarget_lock_release_recursive>
 800c1be:	bf00      	nop
 800c1c0:	2000067d 	.word	0x2000067d

0800c1c4 <__sinit_lock_acquire>:
 800c1c4:	4801      	ldr	r0, [pc, #4]	; (800c1cc <__sinit_lock_acquire+0x8>)
 800c1c6:	f000 b8a7 	b.w	800c318 <__retarget_lock_acquire_recursive>
 800c1ca:	bf00      	nop
 800c1cc:	2000067e 	.word	0x2000067e

0800c1d0 <__sinit_lock_release>:
 800c1d0:	4801      	ldr	r0, [pc, #4]	; (800c1d8 <__sinit_lock_release+0x8>)
 800c1d2:	f000 b8a2 	b.w	800c31a <__retarget_lock_release_recursive>
 800c1d6:	bf00      	nop
 800c1d8:	2000067e 	.word	0x2000067e

0800c1dc <__sinit>:
 800c1dc:	b510      	push	{r4, lr}
 800c1de:	4604      	mov	r4, r0
 800c1e0:	f7ff fff0 	bl	800c1c4 <__sinit_lock_acquire>
 800c1e4:	69a3      	ldr	r3, [r4, #24]
 800c1e6:	b11b      	cbz	r3, 800c1f0 <__sinit+0x14>
 800c1e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1ec:	f7ff bff0 	b.w	800c1d0 <__sinit_lock_release>
 800c1f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c1f4:	6523      	str	r3, [r4, #80]	; 0x50
 800c1f6:	4b13      	ldr	r3, [pc, #76]	; (800c244 <__sinit+0x68>)
 800c1f8:	4a13      	ldr	r2, [pc, #76]	; (800c248 <__sinit+0x6c>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800c1fe:	42a3      	cmp	r3, r4
 800c200:	bf04      	itt	eq
 800c202:	2301      	moveq	r3, #1
 800c204:	61a3      	streq	r3, [r4, #24]
 800c206:	4620      	mov	r0, r4
 800c208:	f000 f820 	bl	800c24c <__sfp>
 800c20c:	6060      	str	r0, [r4, #4]
 800c20e:	4620      	mov	r0, r4
 800c210:	f000 f81c 	bl	800c24c <__sfp>
 800c214:	60a0      	str	r0, [r4, #8]
 800c216:	4620      	mov	r0, r4
 800c218:	f000 f818 	bl	800c24c <__sfp>
 800c21c:	2200      	movs	r2, #0
 800c21e:	60e0      	str	r0, [r4, #12]
 800c220:	2104      	movs	r1, #4
 800c222:	6860      	ldr	r0, [r4, #4]
 800c224:	f7ff ff82 	bl	800c12c <std>
 800c228:	68a0      	ldr	r0, [r4, #8]
 800c22a:	2201      	movs	r2, #1
 800c22c:	2109      	movs	r1, #9
 800c22e:	f7ff ff7d 	bl	800c12c <std>
 800c232:	68e0      	ldr	r0, [r4, #12]
 800c234:	2202      	movs	r2, #2
 800c236:	2112      	movs	r1, #18
 800c238:	f7ff ff78 	bl	800c12c <std>
 800c23c:	2301      	movs	r3, #1
 800c23e:	61a3      	str	r3, [r4, #24]
 800c240:	e7d2      	b.n	800c1e8 <__sinit+0xc>
 800c242:	bf00      	nop
 800c244:	0800cae0 	.word	0x0800cae0
 800c248:	0800c175 	.word	0x0800c175

0800c24c <__sfp>:
 800c24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c24e:	4607      	mov	r7, r0
 800c250:	f7ff ffac 	bl	800c1ac <__sfp_lock_acquire>
 800c254:	4b1e      	ldr	r3, [pc, #120]	; (800c2d0 <__sfp+0x84>)
 800c256:	681e      	ldr	r6, [r3, #0]
 800c258:	69b3      	ldr	r3, [r6, #24]
 800c25a:	b913      	cbnz	r3, 800c262 <__sfp+0x16>
 800c25c:	4630      	mov	r0, r6
 800c25e:	f7ff ffbd 	bl	800c1dc <__sinit>
 800c262:	3648      	adds	r6, #72	; 0x48
 800c264:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c268:	3b01      	subs	r3, #1
 800c26a:	d503      	bpl.n	800c274 <__sfp+0x28>
 800c26c:	6833      	ldr	r3, [r6, #0]
 800c26e:	b30b      	cbz	r3, 800c2b4 <__sfp+0x68>
 800c270:	6836      	ldr	r6, [r6, #0]
 800c272:	e7f7      	b.n	800c264 <__sfp+0x18>
 800c274:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c278:	b9d5      	cbnz	r5, 800c2b0 <__sfp+0x64>
 800c27a:	4b16      	ldr	r3, [pc, #88]	; (800c2d4 <__sfp+0x88>)
 800c27c:	60e3      	str	r3, [r4, #12]
 800c27e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c282:	6665      	str	r5, [r4, #100]	; 0x64
 800c284:	f000 f847 	bl	800c316 <__retarget_lock_init_recursive>
 800c288:	f7ff ff96 	bl	800c1b8 <__sfp_lock_release>
 800c28c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c290:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c294:	6025      	str	r5, [r4, #0]
 800c296:	61a5      	str	r5, [r4, #24]
 800c298:	2208      	movs	r2, #8
 800c29a:	4629      	mov	r1, r5
 800c29c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c2a0:	f7fd faae 	bl	8009800 <memset>
 800c2a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c2a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c2ac:	4620      	mov	r0, r4
 800c2ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2b0:	3468      	adds	r4, #104	; 0x68
 800c2b2:	e7d9      	b.n	800c268 <__sfp+0x1c>
 800c2b4:	2104      	movs	r1, #4
 800c2b6:	4638      	mov	r0, r7
 800c2b8:	f7ff ff62 	bl	800c180 <__sfmoreglue>
 800c2bc:	4604      	mov	r4, r0
 800c2be:	6030      	str	r0, [r6, #0]
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	d1d5      	bne.n	800c270 <__sfp+0x24>
 800c2c4:	f7ff ff78 	bl	800c1b8 <__sfp_lock_release>
 800c2c8:	230c      	movs	r3, #12
 800c2ca:	603b      	str	r3, [r7, #0]
 800c2cc:	e7ee      	b.n	800c2ac <__sfp+0x60>
 800c2ce:	bf00      	nop
 800c2d0:	0800cae0 	.word	0x0800cae0
 800c2d4:	ffff0001 	.word	0xffff0001

0800c2d8 <_fwalk_reent>:
 800c2d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2dc:	4606      	mov	r6, r0
 800c2de:	4688      	mov	r8, r1
 800c2e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c2e4:	2700      	movs	r7, #0
 800c2e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c2ea:	f1b9 0901 	subs.w	r9, r9, #1
 800c2ee:	d505      	bpl.n	800c2fc <_fwalk_reent+0x24>
 800c2f0:	6824      	ldr	r4, [r4, #0]
 800c2f2:	2c00      	cmp	r4, #0
 800c2f4:	d1f7      	bne.n	800c2e6 <_fwalk_reent+0xe>
 800c2f6:	4638      	mov	r0, r7
 800c2f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2fc:	89ab      	ldrh	r3, [r5, #12]
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	d907      	bls.n	800c312 <_fwalk_reent+0x3a>
 800c302:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c306:	3301      	adds	r3, #1
 800c308:	d003      	beq.n	800c312 <_fwalk_reent+0x3a>
 800c30a:	4629      	mov	r1, r5
 800c30c:	4630      	mov	r0, r6
 800c30e:	47c0      	blx	r8
 800c310:	4307      	orrs	r7, r0
 800c312:	3568      	adds	r5, #104	; 0x68
 800c314:	e7e9      	b.n	800c2ea <_fwalk_reent+0x12>

0800c316 <__retarget_lock_init_recursive>:
 800c316:	4770      	bx	lr

0800c318 <__retarget_lock_acquire_recursive>:
 800c318:	4770      	bx	lr

0800c31a <__retarget_lock_release_recursive>:
 800c31a:	4770      	bx	lr

0800c31c <__swhatbuf_r>:
 800c31c:	b570      	push	{r4, r5, r6, lr}
 800c31e:	460e      	mov	r6, r1
 800c320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c324:	2900      	cmp	r1, #0
 800c326:	b096      	sub	sp, #88	; 0x58
 800c328:	4614      	mov	r4, r2
 800c32a:	461d      	mov	r5, r3
 800c32c:	da08      	bge.n	800c340 <__swhatbuf_r+0x24>
 800c32e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c332:	2200      	movs	r2, #0
 800c334:	602a      	str	r2, [r5, #0]
 800c336:	061a      	lsls	r2, r3, #24
 800c338:	d410      	bmi.n	800c35c <__swhatbuf_r+0x40>
 800c33a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c33e:	e00e      	b.n	800c35e <__swhatbuf_r+0x42>
 800c340:	466a      	mov	r2, sp
 800c342:	f000 f903 	bl	800c54c <_fstat_r>
 800c346:	2800      	cmp	r0, #0
 800c348:	dbf1      	blt.n	800c32e <__swhatbuf_r+0x12>
 800c34a:	9a01      	ldr	r2, [sp, #4]
 800c34c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c350:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c354:	425a      	negs	r2, r3
 800c356:	415a      	adcs	r2, r3
 800c358:	602a      	str	r2, [r5, #0]
 800c35a:	e7ee      	b.n	800c33a <__swhatbuf_r+0x1e>
 800c35c:	2340      	movs	r3, #64	; 0x40
 800c35e:	2000      	movs	r0, #0
 800c360:	6023      	str	r3, [r4, #0]
 800c362:	b016      	add	sp, #88	; 0x58
 800c364:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c368 <__smakebuf_r>:
 800c368:	898b      	ldrh	r3, [r1, #12]
 800c36a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c36c:	079d      	lsls	r5, r3, #30
 800c36e:	4606      	mov	r6, r0
 800c370:	460c      	mov	r4, r1
 800c372:	d507      	bpl.n	800c384 <__smakebuf_r+0x1c>
 800c374:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c378:	6023      	str	r3, [r4, #0]
 800c37a:	6123      	str	r3, [r4, #16]
 800c37c:	2301      	movs	r3, #1
 800c37e:	6163      	str	r3, [r4, #20]
 800c380:	b002      	add	sp, #8
 800c382:	bd70      	pop	{r4, r5, r6, pc}
 800c384:	ab01      	add	r3, sp, #4
 800c386:	466a      	mov	r2, sp
 800c388:	f7ff ffc8 	bl	800c31c <__swhatbuf_r>
 800c38c:	9900      	ldr	r1, [sp, #0]
 800c38e:	4605      	mov	r5, r0
 800c390:	4630      	mov	r0, r6
 800c392:	f7ff f963 	bl	800b65c <_malloc_r>
 800c396:	b948      	cbnz	r0, 800c3ac <__smakebuf_r+0x44>
 800c398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c39c:	059a      	lsls	r2, r3, #22
 800c39e:	d4ef      	bmi.n	800c380 <__smakebuf_r+0x18>
 800c3a0:	f023 0303 	bic.w	r3, r3, #3
 800c3a4:	f043 0302 	orr.w	r3, r3, #2
 800c3a8:	81a3      	strh	r3, [r4, #12]
 800c3aa:	e7e3      	b.n	800c374 <__smakebuf_r+0xc>
 800c3ac:	4b0d      	ldr	r3, [pc, #52]	; (800c3e4 <__smakebuf_r+0x7c>)
 800c3ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800c3b0:	89a3      	ldrh	r3, [r4, #12]
 800c3b2:	6020      	str	r0, [r4, #0]
 800c3b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3b8:	81a3      	strh	r3, [r4, #12]
 800c3ba:	9b00      	ldr	r3, [sp, #0]
 800c3bc:	6163      	str	r3, [r4, #20]
 800c3be:	9b01      	ldr	r3, [sp, #4]
 800c3c0:	6120      	str	r0, [r4, #16]
 800c3c2:	b15b      	cbz	r3, 800c3dc <__smakebuf_r+0x74>
 800c3c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	f000 f8d1 	bl	800c570 <_isatty_r>
 800c3ce:	b128      	cbz	r0, 800c3dc <__smakebuf_r+0x74>
 800c3d0:	89a3      	ldrh	r3, [r4, #12]
 800c3d2:	f023 0303 	bic.w	r3, r3, #3
 800c3d6:	f043 0301 	orr.w	r3, r3, #1
 800c3da:	81a3      	strh	r3, [r4, #12]
 800c3dc:	89a0      	ldrh	r0, [r4, #12]
 800c3de:	4305      	orrs	r5, r0
 800c3e0:	81a5      	strh	r5, [r4, #12]
 800c3e2:	e7cd      	b.n	800c380 <__smakebuf_r+0x18>
 800c3e4:	0800c175 	.word	0x0800c175

0800c3e8 <_malloc_usable_size_r>:
 800c3e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3ec:	1f18      	subs	r0, r3, #4
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	bfbc      	itt	lt
 800c3f2:	580b      	ldrlt	r3, [r1, r0]
 800c3f4:	18c0      	addlt	r0, r0, r3
 800c3f6:	4770      	bx	lr

0800c3f8 <_raise_r>:
 800c3f8:	291f      	cmp	r1, #31
 800c3fa:	b538      	push	{r3, r4, r5, lr}
 800c3fc:	4604      	mov	r4, r0
 800c3fe:	460d      	mov	r5, r1
 800c400:	d904      	bls.n	800c40c <_raise_r+0x14>
 800c402:	2316      	movs	r3, #22
 800c404:	6003      	str	r3, [r0, #0]
 800c406:	f04f 30ff 	mov.w	r0, #4294967295
 800c40a:	bd38      	pop	{r3, r4, r5, pc}
 800c40c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c40e:	b112      	cbz	r2, 800c416 <_raise_r+0x1e>
 800c410:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c414:	b94b      	cbnz	r3, 800c42a <_raise_r+0x32>
 800c416:	4620      	mov	r0, r4
 800c418:	f000 f830 	bl	800c47c <_getpid_r>
 800c41c:	462a      	mov	r2, r5
 800c41e:	4601      	mov	r1, r0
 800c420:	4620      	mov	r0, r4
 800c422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c426:	f000 b817 	b.w	800c458 <_kill_r>
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d00a      	beq.n	800c444 <_raise_r+0x4c>
 800c42e:	1c59      	adds	r1, r3, #1
 800c430:	d103      	bne.n	800c43a <_raise_r+0x42>
 800c432:	2316      	movs	r3, #22
 800c434:	6003      	str	r3, [r0, #0]
 800c436:	2001      	movs	r0, #1
 800c438:	e7e7      	b.n	800c40a <_raise_r+0x12>
 800c43a:	2400      	movs	r4, #0
 800c43c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c440:	4628      	mov	r0, r5
 800c442:	4798      	blx	r3
 800c444:	2000      	movs	r0, #0
 800c446:	e7e0      	b.n	800c40a <_raise_r+0x12>

0800c448 <raise>:
 800c448:	4b02      	ldr	r3, [pc, #8]	; (800c454 <raise+0xc>)
 800c44a:	4601      	mov	r1, r0
 800c44c:	6818      	ldr	r0, [r3, #0]
 800c44e:	f7ff bfd3 	b.w	800c3f8 <_raise_r>
 800c452:	bf00      	nop
 800c454:	20000040 	.word	0x20000040

0800c458 <_kill_r>:
 800c458:	b538      	push	{r3, r4, r5, lr}
 800c45a:	4d07      	ldr	r5, [pc, #28]	; (800c478 <_kill_r+0x20>)
 800c45c:	2300      	movs	r3, #0
 800c45e:	4604      	mov	r4, r0
 800c460:	4608      	mov	r0, r1
 800c462:	4611      	mov	r1, r2
 800c464:	602b      	str	r3, [r5, #0]
 800c466:	f7f6 fecd 	bl	8003204 <_kill>
 800c46a:	1c43      	adds	r3, r0, #1
 800c46c:	d102      	bne.n	800c474 <_kill_r+0x1c>
 800c46e:	682b      	ldr	r3, [r5, #0]
 800c470:	b103      	cbz	r3, 800c474 <_kill_r+0x1c>
 800c472:	6023      	str	r3, [r4, #0]
 800c474:	bd38      	pop	{r3, r4, r5, pc}
 800c476:	bf00      	nop
 800c478:	20000678 	.word	0x20000678

0800c47c <_getpid_r>:
 800c47c:	f7f6 beba 	b.w	80031f4 <_getpid>

0800c480 <__sread>:
 800c480:	b510      	push	{r4, lr}
 800c482:	460c      	mov	r4, r1
 800c484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c488:	f000 f894 	bl	800c5b4 <_read_r>
 800c48c:	2800      	cmp	r0, #0
 800c48e:	bfab      	itete	ge
 800c490:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c492:	89a3      	ldrhlt	r3, [r4, #12]
 800c494:	181b      	addge	r3, r3, r0
 800c496:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c49a:	bfac      	ite	ge
 800c49c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c49e:	81a3      	strhlt	r3, [r4, #12]
 800c4a0:	bd10      	pop	{r4, pc}

0800c4a2 <__swrite>:
 800c4a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a6:	461f      	mov	r7, r3
 800c4a8:	898b      	ldrh	r3, [r1, #12]
 800c4aa:	05db      	lsls	r3, r3, #23
 800c4ac:	4605      	mov	r5, r0
 800c4ae:	460c      	mov	r4, r1
 800c4b0:	4616      	mov	r6, r2
 800c4b2:	d505      	bpl.n	800c4c0 <__swrite+0x1e>
 800c4b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4b8:	2302      	movs	r3, #2
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f000 f868 	bl	800c590 <_lseek_r>
 800c4c0:	89a3      	ldrh	r3, [r4, #12]
 800c4c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c4ca:	81a3      	strh	r3, [r4, #12]
 800c4cc:	4632      	mov	r2, r6
 800c4ce:	463b      	mov	r3, r7
 800c4d0:	4628      	mov	r0, r5
 800c4d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4d6:	f000 b817 	b.w	800c508 <_write_r>

0800c4da <__sseek>:
 800c4da:	b510      	push	{r4, lr}
 800c4dc:	460c      	mov	r4, r1
 800c4de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4e2:	f000 f855 	bl	800c590 <_lseek_r>
 800c4e6:	1c43      	adds	r3, r0, #1
 800c4e8:	89a3      	ldrh	r3, [r4, #12]
 800c4ea:	bf15      	itete	ne
 800c4ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800c4ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c4f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c4f6:	81a3      	strheq	r3, [r4, #12]
 800c4f8:	bf18      	it	ne
 800c4fa:	81a3      	strhne	r3, [r4, #12]
 800c4fc:	bd10      	pop	{r4, pc}

0800c4fe <__sclose>:
 800c4fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c502:	f000 b813 	b.w	800c52c <_close_r>
	...

0800c508 <_write_r>:
 800c508:	b538      	push	{r3, r4, r5, lr}
 800c50a:	4d07      	ldr	r5, [pc, #28]	; (800c528 <_write_r+0x20>)
 800c50c:	4604      	mov	r4, r0
 800c50e:	4608      	mov	r0, r1
 800c510:	4611      	mov	r1, r2
 800c512:	2200      	movs	r2, #0
 800c514:	602a      	str	r2, [r5, #0]
 800c516:	461a      	mov	r2, r3
 800c518:	f7f6 feab 	bl	8003272 <_write>
 800c51c:	1c43      	adds	r3, r0, #1
 800c51e:	d102      	bne.n	800c526 <_write_r+0x1e>
 800c520:	682b      	ldr	r3, [r5, #0]
 800c522:	b103      	cbz	r3, 800c526 <_write_r+0x1e>
 800c524:	6023      	str	r3, [r4, #0]
 800c526:	bd38      	pop	{r3, r4, r5, pc}
 800c528:	20000678 	.word	0x20000678

0800c52c <_close_r>:
 800c52c:	b538      	push	{r3, r4, r5, lr}
 800c52e:	4d06      	ldr	r5, [pc, #24]	; (800c548 <_close_r+0x1c>)
 800c530:	2300      	movs	r3, #0
 800c532:	4604      	mov	r4, r0
 800c534:	4608      	mov	r0, r1
 800c536:	602b      	str	r3, [r5, #0]
 800c538:	f7f6 feb7 	bl	80032aa <_close>
 800c53c:	1c43      	adds	r3, r0, #1
 800c53e:	d102      	bne.n	800c546 <_close_r+0x1a>
 800c540:	682b      	ldr	r3, [r5, #0]
 800c542:	b103      	cbz	r3, 800c546 <_close_r+0x1a>
 800c544:	6023      	str	r3, [r4, #0]
 800c546:	bd38      	pop	{r3, r4, r5, pc}
 800c548:	20000678 	.word	0x20000678

0800c54c <_fstat_r>:
 800c54c:	b538      	push	{r3, r4, r5, lr}
 800c54e:	4d07      	ldr	r5, [pc, #28]	; (800c56c <_fstat_r+0x20>)
 800c550:	2300      	movs	r3, #0
 800c552:	4604      	mov	r4, r0
 800c554:	4608      	mov	r0, r1
 800c556:	4611      	mov	r1, r2
 800c558:	602b      	str	r3, [r5, #0]
 800c55a:	f7f6 feb2 	bl	80032c2 <_fstat>
 800c55e:	1c43      	adds	r3, r0, #1
 800c560:	d102      	bne.n	800c568 <_fstat_r+0x1c>
 800c562:	682b      	ldr	r3, [r5, #0]
 800c564:	b103      	cbz	r3, 800c568 <_fstat_r+0x1c>
 800c566:	6023      	str	r3, [r4, #0]
 800c568:	bd38      	pop	{r3, r4, r5, pc}
 800c56a:	bf00      	nop
 800c56c:	20000678 	.word	0x20000678

0800c570 <_isatty_r>:
 800c570:	b538      	push	{r3, r4, r5, lr}
 800c572:	4d06      	ldr	r5, [pc, #24]	; (800c58c <_isatty_r+0x1c>)
 800c574:	2300      	movs	r3, #0
 800c576:	4604      	mov	r4, r0
 800c578:	4608      	mov	r0, r1
 800c57a:	602b      	str	r3, [r5, #0]
 800c57c:	f7f6 feb1 	bl	80032e2 <_isatty>
 800c580:	1c43      	adds	r3, r0, #1
 800c582:	d102      	bne.n	800c58a <_isatty_r+0x1a>
 800c584:	682b      	ldr	r3, [r5, #0]
 800c586:	b103      	cbz	r3, 800c58a <_isatty_r+0x1a>
 800c588:	6023      	str	r3, [r4, #0]
 800c58a:	bd38      	pop	{r3, r4, r5, pc}
 800c58c:	20000678 	.word	0x20000678

0800c590 <_lseek_r>:
 800c590:	b538      	push	{r3, r4, r5, lr}
 800c592:	4d07      	ldr	r5, [pc, #28]	; (800c5b0 <_lseek_r+0x20>)
 800c594:	4604      	mov	r4, r0
 800c596:	4608      	mov	r0, r1
 800c598:	4611      	mov	r1, r2
 800c59a:	2200      	movs	r2, #0
 800c59c:	602a      	str	r2, [r5, #0]
 800c59e:	461a      	mov	r2, r3
 800c5a0:	f7f6 feaa 	bl	80032f8 <_lseek>
 800c5a4:	1c43      	adds	r3, r0, #1
 800c5a6:	d102      	bne.n	800c5ae <_lseek_r+0x1e>
 800c5a8:	682b      	ldr	r3, [r5, #0]
 800c5aa:	b103      	cbz	r3, 800c5ae <_lseek_r+0x1e>
 800c5ac:	6023      	str	r3, [r4, #0]
 800c5ae:	bd38      	pop	{r3, r4, r5, pc}
 800c5b0:	20000678 	.word	0x20000678

0800c5b4 <_read_r>:
 800c5b4:	b538      	push	{r3, r4, r5, lr}
 800c5b6:	4d07      	ldr	r5, [pc, #28]	; (800c5d4 <_read_r+0x20>)
 800c5b8:	4604      	mov	r4, r0
 800c5ba:	4608      	mov	r0, r1
 800c5bc:	4611      	mov	r1, r2
 800c5be:	2200      	movs	r2, #0
 800c5c0:	602a      	str	r2, [r5, #0]
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	f7f6 fe38 	bl	8003238 <_read>
 800c5c8:	1c43      	adds	r3, r0, #1
 800c5ca:	d102      	bne.n	800c5d2 <_read_r+0x1e>
 800c5cc:	682b      	ldr	r3, [r5, #0]
 800c5ce:	b103      	cbz	r3, 800c5d2 <_read_r+0x1e>
 800c5d0:	6023      	str	r3, [r4, #0]
 800c5d2:	bd38      	pop	{r3, r4, r5, pc}
 800c5d4:	20000678 	.word	0x20000678

0800c5d8 <_init>:
 800c5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5da:	bf00      	nop
 800c5dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5de:	bc08      	pop	{r3}
 800c5e0:	469e      	mov	lr, r3
 800c5e2:	4770      	bx	lr

0800c5e4 <_fini>:
 800c5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5e6:	bf00      	nop
 800c5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5ea:	bc08      	pop	{r3}
 800c5ec:	469e      	mov	lr, r3
 800c5ee:	4770      	bx	lr
