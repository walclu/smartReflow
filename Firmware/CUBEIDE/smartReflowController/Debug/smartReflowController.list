
smartReflowController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca38  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000914  0800cb78  0800cb78  0001cb78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d48c  0800d48c  0001d48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d494  0800d494  0001d494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d498  0800d498  0001d498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000020c  20000004  0800d49c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000470  20000210  0800d6a8  00020210  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000680  0800d6a8  00020680  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e522  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003610  00000000  00000000  0003e762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001eb8  00000000  00000000  00041d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001d60  00000000  00000000  00043c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000249ad  00000000  00000000  00045990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001de5f  00000000  00000000  0006a33d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e7f4c  00000000  00000000  0008819c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001700e8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000094e0  00000000  00000000  00170138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000210 	.word	0x20000210
 800015c:	00000000 	.word	0x00000000
 8000160:	0800cb60 	.word	0x0800cb60

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000214 	.word	0x20000214
 800017c:	0800cb60 	.word	0x0800cb60

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b974 	b.w	8000e78 <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9d08      	ldr	r5, [sp, #32]
 8000bae:	4604      	mov	r4, r0
 8000bb0:	468e      	mov	lr, r1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d14d      	bne.n	8000c52 <__udivmoddi4+0xaa>
 8000bb6:	428a      	cmp	r2, r1
 8000bb8:	4694      	mov	ip, r2
 8000bba:	d969      	bls.n	8000c90 <__udivmoddi4+0xe8>
 8000bbc:	fab2 f282 	clz	r2, r2
 8000bc0:	b152      	cbz	r2, 8000bd8 <__udivmoddi4+0x30>
 8000bc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bc6:	f1c2 0120 	rsb	r1, r2, #32
 8000bca:	fa20 f101 	lsr.w	r1, r0, r1
 8000bce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bd6:	4094      	lsls	r4, r2
 8000bd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bdc:	0c21      	lsrs	r1, r4, #16
 8000bde:	fbbe f6f8 	udiv	r6, lr, r8
 8000be2:	fa1f f78c 	uxth.w	r7, ip
 8000be6:	fb08 e316 	mls	r3, r8, r6, lr
 8000bea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bee:	fb06 f107 	mul.w	r1, r6, r7
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	d90a      	bls.n	8000c0c <__udivmoddi4+0x64>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bfe:	f080 811f 	bcs.w	8000e40 <__udivmoddi4+0x298>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 811c 	bls.w	8000e40 <__udivmoddi4+0x298>
 8000c08:	3e02      	subs	r6, #2
 8000c0a:	4463      	add	r3, ip
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1c:	fb00 f707 	mul.w	r7, r0, r7
 8000c20:	42a7      	cmp	r7, r4
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x92>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2c:	f080 810a 	bcs.w	8000e44 <__udivmoddi4+0x29c>
 8000c30:	42a7      	cmp	r7, r4
 8000c32:	f240 8107 	bls.w	8000e44 <__udivmoddi4+0x29c>
 8000c36:	4464      	add	r4, ip
 8000c38:	3802      	subs	r0, #2
 8000c3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3e:	1be4      	subs	r4, r4, r7
 8000c40:	2600      	movs	r6, #0
 8000c42:	b11d      	cbz	r5, 8000c4c <__udivmoddi4+0xa4>
 8000c44:	40d4      	lsrs	r4, r2
 8000c46:	2300      	movs	r3, #0
 8000c48:	e9c5 4300 	strd	r4, r3, [r5]
 8000c4c:	4631      	mov	r1, r6
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0xc2>
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	f000 80ef 	beq.w	8000e3a <__udivmoddi4+0x292>
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c62:	4630      	mov	r0, r6
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	fab3 f683 	clz	r6, r3
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d14a      	bne.n	8000d08 <__udivmoddi4+0x160>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d302      	bcc.n	8000c7c <__udivmoddi4+0xd4>
 8000c76:	4282      	cmp	r2, r0
 8000c78:	f200 80f9 	bhi.w	8000e6e <__udivmoddi4+0x2c6>
 8000c7c:	1a84      	subs	r4, r0, r2
 8000c7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c82:	2001      	movs	r0, #1
 8000c84:	469e      	mov	lr, r3
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	d0e0      	beq.n	8000c4c <__udivmoddi4+0xa4>
 8000c8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c8e:	e7dd      	b.n	8000c4c <__udivmoddi4+0xa4>
 8000c90:	b902      	cbnz	r2, 8000c94 <__udivmoddi4+0xec>
 8000c92:	deff      	udf	#255	; 0xff
 8000c94:	fab2 f282 	clz	r2, r2
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	f040 8092 	bne.w	8000dc2 <__udivmoddi4+0x21a>
 8000c9e:	eba1 010c 	sub.w	r1, r1, ip
 8000ca2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca6:	fa1f fe8c 	uxth.w	lr, ip
 8000caa:	2601      	movs	r6, #1
 8000cac:	0c20      	lsrs	r0, r4, #16
 8000cae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cb2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cb6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cba:	fb0e f003 	mul.w	r0, lr, r3
 8000cbe:	4288      	cmp	r0, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x12c>
 8000cc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x12a>
 8000ccc:	4288      	cmp	r0, r1
 8000cce:	f200 80cb 	bhi.w	8000e68 <__udivmoddi4+0x2c0>
 8000cd2:	4643      	mov	r3, r8
 8000cd4:	1a09      	subs	r1, r1, r0
 8000cd6:	b2a4      	uxth	r4, r4
 8000cd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cdc:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce8:	45a6      	cmp	lr, r4
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x156>
 8000cec:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf4:	d202      	bcs.n	8000cfc <__udivmoddi4+0x154>
 8000cf6:	45a6      	cmp	lr, r4
 8000cf8:	f200 80bb 	bhi.w	8000e72 <__udivmoddi4+0x2ca>
 8000cfc:	4608      	mov	r0, r1
 8000cfe:	eba4 040e 	sub.w	r4, r4, lr
 8000d02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d06:	e79c      	b.n	8000c42 <__udivmoddi4+0x9a>
 8000d08:	f1c6 0720 	rsb	r7, r6, #32
 8000d0c:	40b3      	lsls	r3, r6
 8000d0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d16:	fa20 f407 	lsr.w	r4, r0, r7
 8000d1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d1e:	431c      	orrs	r4, r3
 8000d20:	40f9      	lsrs	r1, r7
 8000d22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d26:	fa00 f306 	lsl.w	r3, r0, r6
 8000d2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d2e:	0c20      	lsrs	r0, r4, #16
 8000d30:	fa1f fe8c 	uxth.w	lr, ip
 8000d34:	fb09 1118 	mls	r1, r9, r8, r1
 8000d38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d40:	4288      	cmp	r0, r1
 8000d42:	fa02 f206 	lsl.w	r2, r2, r6
 8000d46:	d90b      	bls.n	8000d60 <__udivmoddi4+0x1b8>
 8000d48:	eb1c 0101 	adds.w	r1, ip, r1
 8000d4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d50:	f080 8088 	bcs.w	8000e64 <__udivmoddi4+0x2bc>
 8000d54:	4288      	cmp	r0, r1
 8000d56:	f240 8085 	bls.w	8000e64 <__udivmoddi4+0x2bc>
 8000d5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	1a09      	subs	r1, r1, r0
 8000d62:	b2a4      	uxth	r4, r4
 8000d64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d68:	fb09 1110 	mls	r1, r9, r0, r1
 8000d6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d74:	458e      	cmp	lr, r1
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x1e2>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d80:	d26c      	bcs.n	8000e5c <__udivmoddi4+0x2b4>
 8000d82:	458e      	cmp	lr, r1
 8000d84:	d96a      	bls.n	8000e5c <__udivmoddi4+0x2b4>
 8000d86:	3802      	subs	r0, #2
 8000d88:	4461      	add	r1, ip
 8000d8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d92:	eba1 010e 	sub.w	r1, r1, lr
 8000d96:	42a1      	cmp	r1, r4
 8000d98:	46c8      	mov	r8, r9
 8000d9a:	46a6      	mov	lr, r4
 8000d9c:	d356      	bcc.n	8000e4c <__udivmoddi4+0x2a4>
 8000d9e:	d053      	beq.n	8000e48 <__udivmoddi4+0x2a0>
 8000da0:	b15d      	cbz	r5, 8000dba <__udivmoddi4+0x212>
 8000da2:	ebb3 0208 	subs.w	r2, r3, r8
 8000da6:	eb61 010e 	sbc.w	r1, r1, lr
 8000daa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dae:	fa22 f306 	lsr.w	r3, r2, r6
 8000db2:	40f1      	lsrs	r1, r6
 8000db4:	431f      	orrs	r7, r3
 8000db6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dba:	2600      	movs	r6, #0
 8000dbc:	4631      	mov	r1, r6
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	f1c2 0320 	rsb	r3, r2, #32
 8000dc6:	40d8      	lsrs	r0, r3
 8000dc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dcc:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd0:	4091      	lsls	r1, r2
 8000dd2:	4301      	orrs	r1, r0
 8000dd4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd8:	fa1f fe8c 	uxth.w	lr, ip
 8000ddc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de0:	fb07 3610 	mls	r6, r7, r0, r3
 8000de4:	0c0b      	lsrs	r3, r1, #16
 8000de6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dea:	fb00 f60e 	mul.w	r6, r0, lr
 8000dee:	429e      	cmp	r6, r3
 8000df0:	fa04 f402 	lsl.w	r4, r4, r2
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x260>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dfe:	d22f      	bcs.n	8000e60 <__udivmoddi4+0x2b8>
 8000e00:	429e      	cmp	r6, r3
 8000e02:	d92d      	bls.n	8000e60 <__udivmoddi4+0x2b8>
 8000e04:	3802      	subs	r0, #2
 8000e06:	4463      	add	r3, ip
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	b289      	uxth	r1, r1
 8000e0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e10:	fb07 3316 	mls	r3, r7, r6, r3
 8000e14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e18:	fb06 f30e 	mul.w	r3, r6, lr
 8000e1c:	428b      	cmp	r3, r1
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x28a>
 8000e20:	eb1c 0101 	adds.w	r1, ip, r1
 8000e24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e28:	d216      	bcs.n	8000e58 <__udivmoddi4+0x2b0>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d914      	bls.n	8000e58 <__udivmoddi4+0x2b0>
 8000e2e:	3e02      	subs	r6, #2
 8000e30:	4461      	add	r1, ip
 8000e32:	1ac9      	subs	r1, r1, r3
 8000e34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e38:	e738      	b.n	8000cac <__udivmoddi4+0x104>
 8000e3a:	462e      	mov	r6, r5
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	e705      	b.n	8000c4c <__udivmoddi4+0xa4>
 8000e40:	4606      	mov	r6, r0
 8000e42:	e6e3      	b.n	8000c0c <__udivmoddi4+0x64>
 8000e44:	4618      	mov	r0, r3
 8000e46:	e6f8      	b.n	8000c3a <__udivmoddi4+0x92>
 8000e48:	454b      	cmp	r3, r9
 8000e4a:	d2a9      	bcs.n	8000da0 <__udivmoddi4+0x1f8>
 8000e4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e54:	3801      	subs	r0, #1
 8000e56:	e7a3      	b.n	8000da0 <__udivmoddi4+0x1f8>
 8000e58:	4646      	mov	r6, r8
 8000e5a:	e7ea      	b.n	8000e32 <__udivmoddi4+0x28a>
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	e794      	b.n	8000d8a <__udivmoddi4+0x1e2>
 8000e60:	4640      	mov	r0, r8
 8000e62:	e7d1      	b.n	8000e08 <__udivmoddi4+0x260>
 8000e64:	46d0      	mov	r8, sl
 8000e66:	e77b      	b.n	8000d60 <__udivmoddi4+0x1b8>
 8000e68:	3b02      	subs	r3, #2
 8000e6a:	4461      	add	r1, ip
 8000e6c:	e732      	b.n	8000cd4 <__udivmoddi4+0x12c>
 8000e6e:	4630      	mov	r0, r6
 8000e70:	e709      	b.n	8000c86 <__udivmoddi4+0xde>
 8000e72:	4464      	add	r4, ip
 8000e74:	3802      	subs	r0, #2
 8000e76:	e742      	b.n	8000cfe <__udivmoddi4+0x156>

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <MAX31855_init>:
 */

#include "main.h"
#include "MAX31855.h"

void MAX31855_init(max31855_t* dev, GPIO_TypeDef* gpio, uint16_t pin, SPI_HandleTypeDef* spi) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	80fb      	strh	r3, [r7, #6]
	dev->gpio = T1_CS_GPIO_Port;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e92:	60da      	str	r2, [r3, #12]
	dev->pin = T1_CS_Pin;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2210      	movs	r2, #16
 8000e98:	821a      	strh	r2, [r3, #16]
	dev->spi = spi;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	683a      	ldr	r2, [r7, #0]
 8000e9e:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(dev->gpio, dev->pin, GPIO_PIN_SET);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	68d8      	ldr	r0, [r3, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	8a1b      	ldrh	r3, [r3, #16]
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f003 f99e 	bl	80041ec <HAL_GPIO_WritePin>

}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <MAX31855_read_celsius>:


float MAX31855_read_celsius(max31855_t* dev) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(dev->gpio, dev->pin, GPIO_PIN_RESET);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68d8      	ldr	r0, [r3, #12]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	8a1b      	ldrh	r3, [r3, #16]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f003 f98e 	bl	80041ec <HAL_GPIO_WritePin>
	HAL_SPI_Receive(dev->spi, dev->buf, 4, 1000);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6818      	ldr	r0, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	1d19      	adds	r1, r3, #4
 8000ed8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000edc:	2204      	movs	r2, #4
 8000ede:	f005 f94c 	bl	800617a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(dev->gpio, dev->pin, GPIO_PIN_SET);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	68d8      	ldr	r0, [r3, #12]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	8a1b      	ldrh	r3, [r3, #16]
 8000eea:	2201      	movs	r2, #1
 8000eec:	4619      	mov	r1, r3
 8000eee:	f003 f97d 	bl	80041ec <HAL_GPIO_WritePin>

	dev->rawData = dev->buf[3] | ( dev->buf[2] << 8 ) | ( dev->buf[1] << 16 ) | ( dev->buf[0] << 24 );
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	79db      	ldrb	r3, [r3, #7]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	799b      	ldrb	r3, [r3, #6]
 8000efc:	021b      	lsls	r3, r3, #8
 8000efe:	431a      	orrs	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	795b      	ldrb	r3, [r3, #5]
 8000f04:	041b      	lsls	r3, r3, #16
 8000f06:	431a      	orrs	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	791b      	ldrb	r3, [r3, #4]
 8000f0c:	061b      	lsls	r3, r3, #24
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	615a      	str	r2, [r3, #20]

	if (dev->rawData & 0x80000000) {
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	da0a      	bge.n	8000f32 <MAX31855_read_celsius+0x7a>
		// Negative value, drop the lower 18 bits and explicitly extend sign bits.
		dev->rawData = 0xFFFFC000 | ((dev->rawData >> 18) & 0x00003FFF);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	0c9b      	lsrs	r3, r3, #18
 8000f22:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8000f26:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	615a      	str	r2, [r3, #20]
 8000f30:	e004      	b.n	8000f3c <MAX31855_read_celsius+0x84>
	} else {
		dev->rawData >>= 18;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	149a      	asrs	r2, r3, #18
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	615a      	str	r2, [r3, #20]
	}

	dev->temp = dev->rawData;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	ee07 3a90 	vmov	s15, r3
 8000f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	edc3 7a06 	vstr	s15, [r3, #24]
	// LSB = 0.25 degrees C
	dev->temp *= 0.25;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f54:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000f58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	edc3 7a06 	vstr	s15, [r3, #24]
	return dev->temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	ee07 3a90 	vmov	s15, r3
}
 8000f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4013      	ands	r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f98:	68fb      	ldr	r3, [r7, #12]
}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <clear_buffer>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void clear_buffer(uint8_t* buf, uint32_t len)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b085      	sub	sp, #20
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
	for(int z = 0; z < len; z++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	e007      	b.n	8000fc6 <clear_buffer+0x20>
	{
		buf[z] = '\0';
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	4413      	add	r3, r2
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
	for(int z = 0; z < len; z++)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d8f3      	bhi.n	8000fb6 <clear_buffer+0x10>
	}
}
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <beep_IT>:

void beep_IT(rfo_t* dev, uint8_t numBeeps) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	70fb      	strb	r3, [r7, #3]
	dev->numBeeps = numBeeps;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	78fa      	ldrb	r2, [r7, #3]
 8000fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	dev->cntBeeps = 0;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	__HAL_TIM_SET_COMPARE(dev->buzPwmTim, TIM_CHANNEL_1, 2);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2202      	movs	r2, #2
 8001000:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_CLEAR_FLAG(dev->buzElapsTim, TIM_SR_UIF);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f06f 0201 	mvn.w	r2, #1
 800100c:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(dev->buzElapsTim);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001012:	4618      	mov	r0, r3
 8001014:	f005 fe08 	bl	8006c28 <HAL_TIM_Base_Start_IT>

}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b09b      	sub	sp, #108	; 0x6c
 8001024:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001026:	f002 fd1d 	bl	8003a64 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800102a:	f000 fc83 	bl	8001934 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 800102e:	f000 fce5 	bl	80019fc <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001032:	f000 ff7b 	bl	8001f2c <MX_GPIO_Init>
	MX_I2C1_Init();
 8001036:	f000 fd1b 	bl	8001a70 <MX_I2C1_Init>
	MX_LPUART1_UART_Init();
 800103a:	f000 fd59 	bl	8001af0 <MX_LPUART1_UART_Init>
	MX_USART1_UART_Init();
 800103e:	f000 fda3 	bl	8001b88 <MX_USART1_UART_Init>
	MX_SPI1_Init();
 8001042:	f000 fded 	bl	8001c20 <MX_SPI1_Init>
	MX_TIM1_Init();
 8001046:	f000 fe29 	bl	8001c9c <MX_TIM1_Init>
	MX_TIM2_Init();
 800104a:	f000 fec7 	bl	8001ddc <MX_TIM2_Init>
	MX_TIM16_Init();
 800104e:	f000 ff1f 	bl	8001e90 <MX_TIM16_Init>
	MX_TIM17_Init();
 8001052:	f000 ff45 	bl	8001ee0 <MX_TIM17_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8001056:	f000 fcee 	bl	8001a36 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	_RFO_INIT(dev, &hlpuart1, &hspi1 ,&htim2, &htim17, &htim2, RFO_DEFAULT_DUTY, RFO_DEFAULT_PWM_FREQ_KHZ);
 800105a:	4bae      	ldr	r3, [pc, #696]	; (8001314 <main+0x2f4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4aae      	ldr	r2, [pc, #696]	; (8001318 <main+0x2f8>)
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	4bac      	ldr	r3, [pc, #688]	; (8001314 <main+0x2f4>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4aad      	ldr	r2, [pc, #692]	; (800131c <main+0x2fc>)
 8001068:	62da      	str	r2, [r3, #44]	; 0x2c
 800106a:	4baa      	ldr	r3, [pc, #680]	; (8001314 <main+0x2f4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4aac      	ldr	r2, [pc, #688]	; (8001320 <main+0x300>)
 8001070:	635a      	str	r2, [r3, #52]	; 0x34
 8001072:	4ba8      	ldr	r3, [pc, #672]	; (8001314 <main+0x2f4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4aab      	ldr	r2, [pc, #684]	; (8001324 <main+0x304>)
 8001078:	639a      	str	r2, [r3, #56]	; 0x38
 800107a:	4ba6      	ldr	r3, [pc, #664]	; (8001314 <main+0x2f4>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4aa8      	ldr	r2, [pc, #672]	; (8001320 <main+0x300>)
 8001080:	63da      	str	r2, [r3, #60]	; 0x3c
 8001082:	4ba4      	ldr	r3, [pc, #656]	; (8001314 <main+0x2f4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800108c:	4ba1      	ldr	r3, [pc, #644]	; (8001314 <main+0x2f4>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001096:	4b9f      	ldr	r3, [pc, #636]	; (8001314 <main+0x2f4>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	861a      	strh	r2, [r3, #48]	; 0x30
 800109e:	4b9d      	ldr	r3, [pc, #628]	; (8001314 <main+0x2f4>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80010a8:	4b9a      	ldr	r3, [pc, #616]	; (8001314 <main+0x2f4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2200      	movs	r2, #0
 80010ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80010b0:	4b98      	ldr	r3, [pc, #608]	; (8001314 <main+0x2f4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f04f 0200 	mov.w	r2, #0
 80010b8:	649a      	str	r2, [r3, #72]	; 0x48
 80010ba:	4b96      	ldr	r3, [pc, #600]	; (8001314 <main+0x2f4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80010c4:	4b93      	ldr	r3, [pc, #588]	; (8001314 <main+0x2f4>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80010ce:	4b91      	ldr	r3, [pc, #580]	; (8001314 <main+0x2f4>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	655a      	str	r2, [r3, #84]	; 0x54
 80010d8:	4b8e      	ldr	r3, [pc, #568]	; (8001314 <main+0x2f4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2232      	movs	r2, #50	; 0x32
 80010de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80010e2:	4b8c      	ldr	r3, [pc, #560]	; (8001314 <main+0x2f4>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	220a      	movs	r2, #10
 80010e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80010ec:	4b89      	ldr	r3, [pc, #548]	; (8001314 <main+0x2f4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80010f6:	4b87      	ldr	r3, [pc, #540]	; (8001314 <main+0x2f4>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	_RFO_FSM_INIT(fsm);
 8001100:	4b89      	ldr	r3, [pc, #548]	; (8001328 <main+0x308>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2200      	movs	r2, #0
 8001106:	709a      	strb	r2, [r3, #2]
 8001108:	4b87      	ldr	r3, [pc, #540]	; (8001328 <main+0x308>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
 8001110:	4b85      	ldr	r3, [pc, #532]	; (8001328 <main+0x308>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2200      	movs	r2, #0
 8001116:	705a      	strb	r2, [r3, #1]

	HAL_UART_Receive(&huart1, dp->rcv, 50, 1000); // Resets UART buffers, so isr is not fired on boot
 8001118:	4b84      	ldr	r3, [pc, #528]	; (800132c <main+0x30c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f103 0108 	add.w	r1, r3, #8
 8001120:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001124:	2232      	movs	r2, #50	; 0x32
 8001126:	4882      	ldr	r0, [pc, #520]	; (8001330 <main+0x310>)
 8001128:	f006 fea4 	bl	8007e74 <HAL_UART_Receive>
	HAL_UART_Receive_IT(&huart1, dp->rcv, 4);
 800112c:	4b7f      	ldr	r3, [pc, #508]	; (800132c <main+0x30c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	3308      	adds	r3, #8
 8001132:	2204      	movs	r2, #4
 8001134:	4619      	mov	r1, r3
 8001136:	487e      	ldr	r0, [pc, #504]	; (8001330 <main+0x310>)
 8001138:	f006 ff70 	bl	800801c <HAL_UART_Receive_IT>
	nextion_init(dp, &huart1);
 800113c:	4b7b      	ldr	r3, [pc, #492]	; (800132c <main+0x30c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	497b      	ldr	r1, [pc, #492]	; (8001330 <main+0x310>)
 8001142:	4618      	mov	r0, r3
 8001144:	f001 ff9a 	bl	800307c <nextion_init>
	char buf[100];

	dp->write_id_val(dp, "j0", 0);
 8001148:	4b78      	ldr	r3, [pc, #480]	; (800132c <main+0x30c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800114e:	4a77      	ldr	r2, [pc, #476]	; (800132c <main+0x30c>)
 8001150:	6810      	ldr	r0, [r2, #0]
 8001152:	2200      	movs	r2, #0
 8001154:	4977      	ldr	r1, [pc, #476]	; (8001334 <main+0x314>)
 8001156:	4798      	blx	r3

	_RFO_PERIPHERAL_INIT();
 8001158:	4b6e      	ldr	r3, [pc, #440]	; (8001314 <main+0x2f4>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	3304      	adds	r3, #4
 800115e:	2201      	movs	r2, #1
 8001160:	4619      	mov	r1, r3
 8001162:	486d      	ldr	r0, [pc, #436]	; (8001318 <main+0x2f8>)
 8001164:	f006 ff5a 	bl	800801c <HAL_UART_Receive_IT>
 8001168:	4b6d      	ldr	r3, [pc, #436]	; (8001320 <main+0x300>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2200      	movs	r2, #0
 800116e:	635a      	str	r2, [r3, #52]	; 0x34
 8001170:	2100      	movs	r1, #0
 8001172:	486b      	ldr	r0, [pc, #428]	; (8001320 <main+0x300>)
 8001174:	f005 fe2c 	bl	8006dd0 <HAL_TIM_PWM_Start>
 8001178:	4b6f      	ldr	r3, [pc, #444]	; (8001338 <main+0x318>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2200      	movs	r2, #0
 800117e:	635a      	str	r2, [r3, #52]	; 0x34
 8001180:	4b6d      	ldr	r3, [pc, #436]	; (8001338 <main+0x318>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2200      	movs	r2, #0
 8001186:	639a      	str	r2, [r3, #56]	; 0x38
 8001188:	2100      	movs	r1, #0
 800118a:	486b      	ldr	r0, [pc, #428]	; (8001338 <main+0x318>)
 800118c:	f005 fe20 	bl	8006dd0 <HAL_TIM_PWM_Start>
 8001190:	2104      	movs	r1, #4
 8001192:	4869      	ldr	r0, [pc, #420]	; (8001338 <main+0x318>)
 8001194:	f005 fe1c 	bl	8006dd0 <HAL_TIM_PWM_Start>

	MAX31855_init(tempSens, T1_CS_GPIO_Port, T1_CS_Pin, &hspi1);
 8001198:	4b68      	ldr	r3, [pc, #416]	; (800133c <main+0x31c>)
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	4b5f      	ldr	r3, [pc, #380]	; (800131c <main+0x2fc>)
 800119e:	2210      	movs	r2, #16
 80011a0:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80011a4:	f7ff fe6a 	bl	8000e7c <MAX31855_init>

	PIDController_Init(pid, kP, kI, kD, SAMPLE_TIME, tau, limMin, limMax, limMinInt, limMaxInt);
 80011a8:	4b65      	ldr	r3, [pc, #404]	; (8001340 <main+0x320>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	eddf 7a65 	vldr	s15, [pc, #404]	; 8001344 <main+0x324>
 80011b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011b4:	eef3 6a0f 	vmov.f32	s13, #63	; 0x41f80000  31.0
 80011b8:	ed9f 6a63 	vldr	s12, [pc, #396]	; 8001348 <main+0x328>
 80011bc:	eddf 5a63 	vldr	s11, [pc, #396]	; 800134c <main+0x32c>
 80011c0:	ed9f 5a63 	vldr	s10, [pc, #396]	; 8001350 <main+0x330>
 80011c4:	eddf 4a63 	vldr	s9, [pc, #396]	; 8001354 <main+0x334>
 80011c8:	ed9f 4a63 	vldr	s8, [pc, #396]	; 8001358 <main+0x338>
 80011cc:	eef0 3a64 	vmov.f32	s7, s9
 80011d0:	eeb0 3a45 	vmov.f32	s6, s10
 80011d4:	eef0 2a65 	vmov.f32	s5, s11
 80011d8:	eeb0 2a46 	vmov.f32	s4, s12
 80011dc:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 80011e0:	eeb0 1a66 	vmov.f32	s2, s13
 80011e4:	eef0 0a47 	vmov.f32	s1, s14
 80011e8:	eeb0 0a67 	vmov.f32	s0, s15
 80011ec:	4618      	mov	r0, r3
 80011ee:	f001 ff69 	bl	80030c4 <PIDController_Init>

	dp->write_id_val(dp, "j0", 100);
 80011f2:	4b4e      	ldr	r3, [pc, #312]	; (800132c <main+0x30c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011f8:	4a4c      	ldr	r2, [pc, #304]	; (800132c <main+0x30c>)
 80011fa:	6810      	ldr	r0, [r2, #0]
 80011fc:	2264      	movs	r2, #100	; 0x64
 80011fe:	494d      	ldr	r1, [pc, #308]	; (8001334 <main+0x314>)
 8001200:	4798      	blx	r3

	dp->write(dp, "page main");
 8001202:	4b4a      	ldr	r3, [pc, #296]	; (800132c <main+0x30c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001208:	4a48      	ldr	r2, [pc, #288]	; (800132c <main+0x30c>)
 800120a:	6812      	ldr	r2, [r2, #0]
 800120c:	4953      	ldr	r1, [pc, #332]	; (800135c <main+0x33c>)
 800120e:	4610      	mov	r0, r2
 8001210:	4798      	blx	r3
	dev->currentPage = DP_MAIN;
 8001212:	4b40      	ldr	r3, [pc, #256]	; (8001314 <main+0x2f4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	nextion_print_page(dp);
 800121c:	4b43      	ldr	r3, [pc, #268]	; (800132c <main+0x30c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f001 fe69 	bl	8002ef8 <nextion_print_page>
	beep_IT(dev,2);
 8001226:	4b3b      	ldr	r3, [pc, #236]	; (8001314 <main+0x2f4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2102      	movs	r1, #2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fed5 	bl	8000fdc <beep_IT>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		switch(fsm->state)
 8001232:	4b3d      	ldr	r3, [pc, #244]	; (8001328 <main+0x308>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	789b      	ldrb	r3, [r3, #2]
 8001238:	2b0a      	cmp	r3, #10
 800123a:	d8fa      	bhi.n	8001232 <main+0x212>
 800123c:	a201      	add	r2, pc, #4	; (adr r2, 8001244 <main+0x224>)
 800123e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001242:	bf00      	nop
 8001244:	08001233 	.word	0x08001233
 8001248:	08001271 	.word	0x08001271
 800124c:	08001511 	.word	0x08001511
 8001250:	0800150d 	.word	0x0800150d
 8001254:	08001515 	.word	0x08001515
 8001258:	08001571 	.word	0x08001571
 800125c:	08001233 	.word	0x08001233
 8001260:	08001677 	.word	0x08001677
 8001264:	08001233 	.word	0x08001233
 8001268:	08001233 	.word	0x08001233
 800126c:	080016d9 	.word	0x080016d9

		case RFO_IDLE:
			break;

		case RFO_PROCESS_CMD:
			if(dev->rcv[0] == '\r') {
 8001270:	4b28      	ldr	r3, [pc, #160]	; (8001314 <main+0x2f4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	791b      	ldrb	r3, [r3, #4]
 8001276:	2b0d      	cmp	r3, #13
 8001278:	f040 8107 	bne.w	800148a <main+0x46a>
				HAL_UART_Transmit(dev->uart, (uint8_t*)"\r\n", 2 , 100);
 800127c:	4b25      	ldr	r3, [pc, #148]	; (8001314 <main+0x2f4>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6818      	ldr	r0, [r3, #0]
 8001282:	2364      	movs	r3, #100	; 0x64
 8001284:	2202      	movs	r2, #2
 8001286:	4936      	ldr	r1, [pc, #216]	; (8001360 <main+0x340>)
 8001288:	f006 fd5e 	bl	8007d48 <HAL_UART_Transmit>
				buf[dev->idx] = '\0';
 800128c:	4b21      	ldr	r3, [pc, #132]	; (8001314 <main+0x2f4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001292:	3368      	adds	r3, #104	; 0x68
 8001294:	443b      	add	r3, r7
 8001296:	2200      	movs	r2, #0
 8001298:	f803 2c68 	strb.w	r2, [r3, #-104]
				for(int i = 0; i < 7; i++) {
 800129c:	2300      	movs	r3, #0
 800129e:	667b      	str	r3, [r7, #100]	; 0x64
 80012a0:	e0dc      	b.n	800145c <main+0x43c>
					if(!strcmp(buf, rfoCmdLut[i]))
 80012a2:	4a30      	ldr	r2, [pc, #192]	; (8001364 <main+0x344>)
 80012a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012aa:	463b      	mov	r3, r7
 80012ac:	4611      	mov	r1, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7fe ff66 	bl	8000180 <strcmp>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f040 80cd 	bne.w	8001456 <main+0x436>
 80012bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012be:	2b06      	cmp	r3, #6
 80012c0:	f200 80c3 	bhi.w	800144a <main+0x42a>
 80012c4:	a201      	add	r2, pc, #4	; (adr r2, 80012cc <main+0x2ac>)
 80012c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ca:	bf00      	nop
 80012cc:	080012e9 	.word	0x080012e9
 80012d0:	080012f3 	.word	0x080012f3
 80012d4:	080012fd 	.word	0x080012fd
 80012d8:	08001369 	.word	0x08001369
 80012dc:	0800142d 	.word	0x0800142d
 80012e0:	08001437 	.word	0x08001437
 80012e4:	08001441 	.word	0x08001441
					{
						switch(i)
						{
						case 0:
							fsm->state = RFO_PWM_SET_DUTY;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <main+0x308>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2203      	movs	r2, #3
 80012ee:	709a      	strb	r2, [r3, #2]
							break;
 80012f0:	e0ac      	b.n	800144c <main+0x42c>
						case 1:
							fsm->state = RFO_PWM_SET_FREQ;
 80012f2:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <main+0x308>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2202      	movs	r2, #2
 80012f8:	709a      	strb	r2, [r3, #2]
							break;
 80012fa:	e0a7      	b.n	800144c <main+0x42c>
						case 2:
							fsm->state = RFO_GET_TEMP;
 80012fc:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <main+0x308>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2204      	movs	r2, #4
 8001302:	709a      	strb	r2, [r3, #2]
							beep_IT(dev, 2);
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <main+0x2f4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2102      	movs	r1, #2
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fe66 	bl	8000fdc <beep_IT>
							break;
 8001310:	e09c      	b.n	800144c <main+0x42c>
 8001312:	bf00      	nop
 8001314:	20000020 	.word	0x20000020
 8001318:	20000278 	.word	0x20000278
 800131c:	20000398 	.word	0x20000398
 8001320:	20000448 	.word	0x20000448
 8001324:	200004e0 	.word	0x200004e0
 8001328:	20000024 	.word	0x20000024
 800132c:	20000030 	.word	0x20000030
 8001330:	20000308 	.word	0x20000308
 8001334:	0800cbdc 	.word	0x0800cbdc
 8001338:	200003fc 	.word	0x200003fc
 800133c:	20000028 	.word	0x20000028
 8001340:	2000002c 	.word	0x2000002c
 8001344:	421c0000 	.word	0x421c0000
 8001348:	3e4ccccd 	.word	0x3e4ccccd
 800134c:	00000000 	.word	0x00000000
 8001350:	43800000 	.word	0x43800000
 8001354:	c2700000 	.word	0xc2700000
 8001358:	42700000 	.word	0x42700000
 800135c:	0800cbe0 	.word	0x0800cbe0
 8001360:	0800cbec 	.word	0x0800cbec
 8001364:	20000004 	.word	0x20000004
						case 3:
							beep_IT(dev, 3);
 8001368:	4b6f      	ldr	r3, [pc, #444]	; (8001528 <main+0x508>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2103      	movs	r1, #3
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fe34 	bl	8000fdc <beep_IT>
							PIDController_Init(pid, kP, kI, kD, SAMPLE_TIME, tau, limMin, limMax, limMinInt, limMaxInt);
 8001374:	4b6d      	ldr	r3, [pc, #436]	; (800152c <main+0x50c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8001530 <main+0x510>
 800137c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001380:	eef3 6a0f 	vmov.f32	s13, #63	; 0x41f80000  31.0
 8001384:	ed9f 6a6b 	vldr	s12, [pc, #428]	; 8001534 <main+0x514>
 8001388:	eddf 5a6b 	vldr	s11, [pc, #428]	; 8001538 <main+0x518>
 800138c:	ed9f 5a6b 	vldr	s10, [pc, #428]	; 800153c <main+0x51c>
 8001390:	eddf 4a6b 	vldr	s9, [pc, #428]	; 8001540 <main+0x520>
 8001394:	ed9f 4a6b 	vldr	s8, [pc, #428]	; 8001544 <main+0x524>
 8001398:	eef0 3a64 	vmov.f32	s7, s9
 800139c:	eeb0 3a45 	vmov.f32	s6, s10
 80013a0:	eef0 2a65 	vmov.f32	s5, s11
 80013a4:	eeb0 2a46 	vmov.f32	s4, s12
 80013a8:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 80013ac:	eeb0 1a66 	vmov.f32	s2, s13
 80013b0:	eef0 0a47 	vmov.f32	s1, s14
 80013b4:	eeb0 0a67 	vmov.f32	s0, s15
 80013b8:	4618      	mov	r0, r3
 80013ba:	f001 fe83 	bl	80030c4 <PIDController_Init>
							__HAL_TIM_SET_AUTORELOAD(&htim1, reflowARR);
 80013be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013c2:	4b61      	ldr	r3, [pc, #388]	; (8001548 <main+0x528>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80013c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b5e      	ldr	r3, [pc, #376]	; (8001548 <main+0x528>)
 80013d0:	60da      	str	r2, [r3, #12]
							fsm->state = RFO_START;
 80013d2:	4b5e      	ldr	r3, [pc, #376]	; (800154c <main+0x52c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2205      	movs	r2, #5
 80013d8:	709a      	strb	r2, [r3, #2]
							dp->write(dp, "page reflow");
 80013da:	4b5d      	ldr	r3, [pc, #372]	; (8001550 <main+0x530>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80013e0:	4a5b      	ldr	r2, [pc, #364]	; (8001550 <main+0x530>)
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	495b      	ldr	r1, [pc, #364]	; (8001554 <main+0x534>)
 80013e6:	4610      	mov	r0, r2
 80013e8:	4798      	blx	r3
							dp->write_id_str(dp, "conState", "Connected");
 80013ea:	4b59      	ldr	r3, [pc, #356]	; (8001550 <main+0x530>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f0:	4a57      	ldr	r2, [pc, #348]	; (8001550 <main+0x530>)
 80013f2:	6810      	ldr	r0, [r2, #0]
 80013f4:	4a58      	ldr	r2, [pc, #352]	; (8001558 <main+0x538>)
 80013f6:	4959      	ldr	r1, [pc, #356]	; (800155c <main+0x53c>)
 80013f8:	4798      	blx	r3
							dp->write_id_str(dp, "reflowState", "Prepare");
 80013fa:	4b55      	ldr	r3, [pc, #340]	; (8001550 <main+0x530>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001400:	4a53      	ldr	r2, [pc, #332]	; (8001550 <main+0x530>)
 8001402:	6810      	ldr	r0, [r2, #0]
 8001404:	4a56      	ldr	r2, [pc, #344]	; (8001560 <main+0x540>)
 8001406:	4957      	ldr	r1, [pc, #348]	; (8001564 <main+0x544>)
 8001408:	4798      	blx	r3
							dp->write_id_val(dp, "reflowProgress", 0);
 800140a:	4b51      	ldr	r3, [pc, #324]	; (8001550 <main+0x530>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001410:	4a4f      	ldr	r2, [pc, #316]	; (8001550 <main+0x530>)
 8001412:	6810      	ldr	r0, [r2, #0]
 8001414:	2200      	movs	r2, #0
 8001416:	4954      	ldr	r1, [pc, #336]	; (8001568 <main+0x548>)
 8001418:	4798      	blx	r3
							dev->currentReflowState = REFLOW_STATE_PREPARE;
 800141a:	4b43      	ldr	r3, [pc, #268]	; (8001528 <main+0x508>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2202      	movs	r2, #2
 8001420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
							HAL_TIM_Base_Start_IT(&htim16);
 8001424:	4851      	ldr	r0, [pc, #324]	; (800156c <main+0x54c>)
 8001426:	f005 fbff 	bl	8006c28 <HAL_TIM_Base_Start_IT>
							break;
 800142a:	e00f      	b.n	800144c <main+0x42c>
						case 4:
							fsm->state = RFO_STOP;
 800142c:	4b47      	ldr	r3, [pc, #284]	; (800154c <main+0x52c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2206      	movs	r2, #6
 8001432:	709a      	strb	r2, [r3, #2]
							break;
 8001434:	e00a      	b.n	800144c <main+0x42c>
						case 5:
							fsm->state = RFO_CALIBRATE;
 8001436:	4b45      	ldr	r3, [pc, #276]	; (800154c <main+0x52c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2208      	movs	r2, #8
 800143c:	709a      	strb	r2, [r3, #2]
							break;
 800143e:	e005      	b.n	800144c <main+0x42c>
						case 6:
							fsm->state = RFO_HELP;
 8001440:	4b42      	ldr	r3, [pc, #264]	; (800154c <main+0x52c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	220a      	movs	r2, #10
 8001446:	709a      	strb	r2, [r3, #2]
							break;
 8001448:	e000      	b.n	800144c <main+0x42c>
						default:
							break;
 800144a:	bf00      	nop
						}
						dev->idx = 0;
 800144c:	4b36      	ldr	r3, [pc, #216]	; (8001528 <main+0x508>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2200      	movs	r2, #0
 8001452:	861a      	strh	r2, [r3, #48]	; 0x30
						break;
 8001454:	e006      	b.n	8001464 <main+0x444>
				for(int i = 0; i < 7; i++) {
 8001456:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001458:	3301      	adds	r3, #1
 800145a:	667b      	str	r3, [r7, #100]	; 0x64
 800145c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800145e:	2b06      	cmp	r3, #6
 8001460:	f77f af1f 	ble.w	80012a2 <main+0x282>
					}

				}

				if(fsm->state == RFO_PROCESS_CMD) {
 8001464:	4b39      	ldr	r3, [pc, #228]	; (800154c <main+0x52c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	789b      	ldrb	r3, [r3, #2]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d103      	bne.n	8001476 <main+0x456>

					fsm->state = RFO_IDLE;
 800146e:	4b37      	ldr	r3, [pc, #220]	; (800154c <main+0x52c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2200      	movs	r2, #0
 8001474:	709a      	strb	r2, [r3, #2]

				}
				dev->idx = 0;
 8001476:	4b2c      	ldr	r3, [pc, #176]	; (8001528 <main+0x508>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2200      	movs	r2, #0
 800147c:	861a      	strh	r2, [r3, #48]	; 0x30
				clear_buffer((uint8_t*)buf, 100);
 800147e:	463b      	mov	r3, r7
 8001480:	2164      	movs	r1, #100	; 0x64
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fd8f 	bl	8000fa6 <clear_buffer>
				dev->idx += 1;
				clear_buffer((dev->rcv), 20);
				fsm->state = RFO_IDLE;
			}

			break;
 8001488:	e231      	b.n	80018ee <main+0x8ce>
			else if(dev->rcv[0] == '\177') {
 800148a:	4b27      	ldr	r3, [pc, #156]	; (8001528 <main+0x508>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	791b      	ldrb	r3, [r3, #4]
 8001490:	2b7f      	cmp	r3, #127	; 0x7f
 8001492:	d11b      	bne.n	80014cc <main+0x4ac>
				if(dev->idx > 0)
 8001494:	4b24      	ldr	r3, [pc, #144]	; (8001528 <main+0x508>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 8227 	beq.w	80018ee <main+0x8ce>
					buf[dev->idx-1] = '\0';
 80014a0:	4b21      	ldr	r3, [pc, #132]	; (8001528 <main+0x508>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80014a6:	3b01      	subs	r3, #1
 80014a8:	3368      	adds	r3, #104	; 0x68
 80014aa:	443b      	add	r3, r7
 80014ac:	2200      	movs	r2, #0
 80014ae:	f803 2c68 	strb.w	r2, [r3, #-104]
					dev->idx -= 1;
 80014b2:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <main+0x508>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <main+0x508>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	3a01      	subs	r2, #1
 80014be:	b292      	uxth	r2, r2
 80014c0:	861a      	strh	r2, [r3, #48]	; 0x30
					fsm->state = RFO_IDLE;
 80014c2:	4b22      	ldr	r3, [pc, #136]	; (800154c <main+0x52c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2200      	movs	r2, #0
 80014c8:	709a      	strb	r2, [r3, #2]
			break;
 80014ca:	e210      	b.n	80018ee <main+0x8ce>
				buf[dev->idx] = dev->rcv[0];
 80014cc:	4b16      	ldr	r3, [pc, #88]	; (8001528 <main+0x508>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a15      	ldr	r2, [pc, #84]	; (8001528 <main+0x508>)
 80014d2:	6812      	ldr	r2, [r2, #0]
 80014d4:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 80014d6:	4611      	mov	r1, r2
 80014d8:	791a      	ldrb	r2, [r3, #4]
 80014da:	f101 0368 	add.w	r3, r1, #104	; 0x68
 80014de:	443b      	add	r3, r7
 80014e0:	f803 2c68 	strb.w	r2, [r3, #-104]
				dev->idx += 1;
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <main+0x508>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80014ea:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <main+0x508>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	3201      	adds	r2, #1
 80014f0:	b292      	uxth	r2, r2
 80014f2:	861a      	strh	r2, [r3, #48]	; 0x30
				clear_buffer((dev->rcv), 20);
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <main+0x508>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	3304      	adds	r3, #4
 80014fa:	2114      	movs	r1, #20
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fd52 	bl	8000fa6 <clear_buffer>
				fsm->state = RFO_IDLE;
 8001502:	4b12      	ldr	r3, [pc, #72]	; (800154c <main+0x52c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2200      	movs	r2, #0
 8001508:	709a      	strb	r2, [r3, #2]
			break;
 800150a:	e1f0      	b.n	80018ee <main+0x8ce>


		case RFO_PWM_SET_DUTY:
			__NOP();
 800150c:	bf00      	nop
			break;
 800150e:	e1f3      	b.n	80018f8 <main+0x8d8>

		case RFO_PWM_SET_FREQ:
			__NOP();
 8001510:	bf00      	nop
			break;
 8001512:	e1f1      	b.n	80018f8 <main+0x8d8>

		case RFO_GET_TEMP:
			__NOP();
 8001514:	bf00      	nop
			HAL_TIM_Base_Start_IT(&htim16);
 8001516:	4815      	ldr	r0, [pc, #84]	; (800156c <main+0x54c>)
 8001518:	f005 fb86 	bl	8006c28 <HAL_TIM_Base_Start_IT>
			fsm->state = RFO_TRANSMIT;
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <main+0x52c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2207      	movs	r2, #7
 8001522:	709a      	strb	r2, [r3, #2]
			break;
 8001524:	e1e8      	b.n	80018f8 <main+0x8d8>
 8001526:	bf00      	nop
 8001528:	20000020 	.word	0x20000020
 800152c:	2000002c 	.word	0x2000002c
 8001530:	421c0000 	.word	0x421c0000
 8001534:	3e4ccccd 	.word	0x3e4ccccd
 8001538:	00000000 	.word	0x00000000
 800153c:	43800000 	.word	0x43800000
 8001540:	c2700000 	.word	0xc2700000
 8001544:	42700000 	.word	0x42700000
 8001548:	200003fc 	.word	0x200003fc
 800154c:	20000024 	.word	0x20000024
 8001550:	20000030 	.word	0x20000030
 8001554:	0800cbf0 	.word	0x0800cbf0
 8001558:	0800cbfc 	.word	0x0800cbfc
 800155c:	0800cc08 	.word	0x0800cc08
 8001560:	0800cc14 	.word	0x0800cc14
 8001564:	0800cc1c 	.word	0x0800cc1c
 8001568:	0800cc28 	.word	0x0800cc28
 800156c:	20000494 	.word	0x20000494

		case RFO_START:
			__NOP();
 8001570:	bf00      	nop
			if(dev->dataRdy) {
 8001572:	4b54      	ldr	r3, [pc, #336]	; (80016c4 <main+0x6a4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 81b9 	beq.w	80018f2 <main+0x8d2>
				dev->dataRdy = false;
 8001580:	4b50      	ldr	r3, [pc, #320]	; (80016c4 <main+0x6a4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				PIDController_Update(pid, dev->targetTemp, dev->temp);
 800158a:	4b4f      	ldr	r3, [pc, #316]	; (80016c8 <main+0x6a8>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4b4d      	ldr	r3, [pc, #308]	; (80016c4 <main+0x6a4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001596:	4b4b      	ldr	r3, [pc, #300]	; (80016c4 <main+0x6a4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800159e:	eef0 0a47 	vmov.f32	s1, s14
 80015a2:	eeb0 0a67 	vmov.f32	s0, s15
 80015a6:	4610      	mov	r0, r2
 80015a8:	f001 fdd7 	bl	800315a <PIDController_Update>

				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pid->out);
 80015ac:	4b46      	ldr	r3, [pc, #280]	; (80016c8 <main+0x6a8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80015b4:	4b45      	ldr	r3, [pc, #276]	; (80016cc <main+0x6ac>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015bc:	ee17 2a90 	vmov	r2, s15
 80015c0:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pid->out);
 80015c2:	4b41      	ldr	r3, [pc, #260]	; (80016c8 <main+0x6a8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80015ca:	4b40      	ldr	r3, [pc, #256]	; (80016cc <main+0x6ac>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015d2:	ee17 2a90 	vmov	r2, s15
 80015d6:	639a      	str	r2, [r3, #56]	; 0x38

				sprintf(buf, "%.2f\n", dev->temp);
 80015d8:	4b3a      	ldr	r3, [pc, #232]	; (80016c4 <main+0x6a4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ff9a 	bl	8000518 <__aeabi_f2d>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4638      	mov	r0, r7
 80015ea:	4939      	ldr	r1, [pc, #228]	; (80016d0 <main+0x6b0>)
 80015ec:	f009 f83e 	bl	800a66c <siprintf>
				HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 80015f0:	4b34      	ldr	r3, [pc, #208]	; (80016c4 <main+0x6a4>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681c      	ldr	r4, [r3, #0]
 80015f6:	463b      	mov	r3, r7
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe fdcb 	bl	8000194 <strlen>
 80015fe:	4603      	mov	r3, r0
 8001600:	b29a      	uxth	r2, r3
 8001602:	4639      	mov	r1, r7
 8001604:	2364      	movs	r3, #100	; 0x64
 8001606:	4620      	mov	r0, r4
 8001608:	f006 fb9e 	bl	8007d48 <HAL_UART_Transmit>

				sprintf(buf, "%.2f\n", dev->targetTemp);
 800160c:	4b2d      	ldr	r3, [pc, #180]	; (80016c4 <main+0x6a4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ff80 	bl	8000518 <__aeabi_f2d>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4638      	mov	r0, r7
 800161e:	492c      	ldr	r1, [pc, #176]	; (80016d0 <main+0x6b0>)
 8001620:	f009 f824 	bl	800a66c <siprintf>
				HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 8001624:	4b27      	ldr	r3, [pc, #156]	; (80016c4 <main+0x6a4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681c      	ldr	r4, [r3, #0]
 800162a:	463b      	mov	r3, r7
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe fdb1 	bl	8000194 <strlen>
 8001632:	4603      	mov	r3, r0
 8001634:	b29a      	uxth	r2, r3
 8001636:	4639      	mov	r1, r7
 8001638:	2364      	movs	r3, #100	; 0x64
 800163a:	4620      	mov	r0, r4
 800163c:	f006 fb84 	bl	8007d48 <HAL_UART_Transmit>

				sprintf(buf, "%.2f\n", pid->out);
 8001640:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <main+0x6a8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe ff66 	bl	8000518 <__aeabi_f2d>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4638      	mov	r0, r7
 8001652:	491f      	ldr	r1, [pc, #124]	; (80016d0 <main+0x6b0>)
 8001654:	f009 f80a 	bl	800a66c <siprintf>
				HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 8001658:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <main+0x6a4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681c      	ldr	r4, [r3, #0]
 800165e:	463b      	mov	r3, r7
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe fd97 	bl	8000194 <strlen>
 8001666:	4603      	mov	r3, r0
 8001668:	b29a      	uxth	r2, r3
 800166a:	4639      	mov	r1, r7
 800166c:	2364      	movs	r3, #100	; 0x64
 800166e:	4620      	mov	r0, r4
 8001670:	f006 fb6a 	bl	8007d48 <HAL_UART_Transmit>

			}
			break;
 8001674:	e13d      	b.n	80018f2 <main+0x8d2>

		case RFO_TRANSMIT:
			if(dev->dataRdy) {
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <main+0x6a4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 8139 	beq.w	80018f6 <main+0x8d6>
				dev->dataRdy = false;
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <main+0x6a4>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				sprintf(buf, "Temp is: %.2f\r\n", dev->temp);
 800168e:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <main+0x6a4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff3f 	bl	8000518 <__aeabi_f2d>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4638      	mov	r0, r7
 80016a0:	490c      	ldr	r1, [pc, #48]	; (80016d4 <main+0x6b4>)
 80016a2:	f008 ffe3 	bl	800a66c <siprintf>
				HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 80016a6:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <main+0x6a4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681c      	ldr	r4, [r3, #0]
 80016ac:	463b      	mov	r3, r7
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe fd70 	bl	8000194 <strlen>
 80016b4:	4603      	mov	r3, r0
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	4639      	mov	r1, r7
 80016ba:	2364      	movs	r3, #100	; 0x64
 80016bc:	4620      	mov	r0, r4
 80016be:	f006 fb43 	bl	8007d48 <HAL_UART_Transmit>
			}
			break;
 80016c2:	e118      	b.n	80018f6 <main+0x8d6>
 80016c4:	20000020 	.word	0x20000020
 80016c8:	2000002c 	.word	0x2000002c
 80016cc:	200003fc 	.word	0x200003fc
 80016d0:	0800cc38 	.word	0x0800cc38
 80016d4:	0800cc40 	.word	0x0800cc40

		case RFO_STOP:
			break;

		case RFO_HELP:
			__NOP();
 80016d8:	bf00      	nop
			sprintf(buf, "Help Page for RFO\r\n");
 80016da:	463b      	mov	r3, r7
 80016dc:	4987      	ldr	r1, [pc, #540]	; (80018fc <main+0x8dc>)
 80016de:	4618      	mov	r0, r3
 80016e0:	f008 ffc4 	bl	800a66c <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 80016e4:	4b86      	ldr	r3, [pc, #536]	; (8001900 <main+0x8e0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681c      	ldr	r4, [r3, #0]
 80016ea:	463b      	mov	r3, r7
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe fd51 	bl	8000194 <strlen>
 80016f2:	4603      	mov	r3, r0
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	4639      	mov	r1, r7
 80016f8:	2364      	movs	r3, #100	; 0x64
 80016fa:	4620      	mov	r0, r4
 80016fc:	f006 fb24 	bl	8007d48 <HAL_UART_Transmit>
			sprintf(buf, "Commands: ");
 8001700:	463b      	mov	r3, r7
 8001702:	4980      	ldr	r1, [pc, #512]	; (8001904 <main+0x8e4>)
 8001704:	4618      	mov	r0, r3
 8001706:	f008 ffb1 	bl	800a66c <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 800170a:	4b7d      	ldr	r3, [pc, #500]	; (8001900 <main+0x8e0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681c      	ldr	r4, [r3, #0]
 8001710:	463b      	mov	r3, r7
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe fd3e 	bl	8000194 <strlen>
 8001718:	4603      	mov	r3, r0
 800171a:	b29a      	uxth	r2, r3
 800171c:	4639      	mov	r1, r7
 800171e:	2364      	movs	r3, #100	; 0x64
 8001720:	4620      	mov	r0, r4
 8001722:	f006 fb11 	bl	8007d48 <HAL_UART_Transmit>
			sprintf(buf, "pwm -<OPTION> --<INSTRUCTION>\r\n");
 8001726:	463b      	mov	r3, r7
 8001728:	4977      	ldr	r1, [pc, #476]	; (8001908 <main+0x8e8>)
 800172a:	4618      	mov	r0, r3
 800172c:	f008 ff9e 	bl	800a66c <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 8001730:	4b73      	ldr	r3, [pc, #460]	; (8001900 <main+0x8e0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681c      	ldr	r4, [r3, #0]
 8001736:	463b      	mov	r3, r7
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fd2b 	bl	8000194 <strlen>
 800173e:	4603      	mov	r3, r0
 8001740:	b29a      	uxth	r2, r3
 8001742:	4639      	mov	r1, r7
 8001744:	2364      	movs	r3, #100	; 0x64
 8001746:	4620      	mov	r0, r4
 8001748:	f006 fafe 	bl	8007d48 <HAL_UART_Transmit>
			sprintf(buf, "          Options: -s\r\n");
 800174c:	463b      	mov	r3, r7
 800174e:	496f      	ldr	r1, [pc, #444]	; (800190c <main+0x8ec>)
 8001750:	4618      	mov	r0, r3
 8001752:	f008 ff8b 	bl	800a66c <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 8001756:	4b6a      	ldr	r3, [pc, #424]	; (8001900 <main+0x8e0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681c      	ldr	r4, [r3, #0]
 800175c:	463b      	mov	r3, r7
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fd18 	bl	8000194 <strlen>
 8001764:	4603      	mov	r3, r0
 8001766:	b29a      	uxth	r2, r3
 8001768:	4639      	mov	r1, r7
 800176a:	2364      	movs	r3, #100	; 0x64
 800176c:	4620      	mov	r0, r4
 800176e:	f006 faeb 	bl	8007d48 <HAL_UART_Transmit>
			sprintf(buf, "          Instructions: --duty, --freq");
 8001772:	463b      	mov	r3, r7
 8001774:	4966      	ldr	r1, [pc, #408]	; (8001910 <main+0x8f0>)
 8001776:	4618      	mov	r0, r3
 8001778:	f008 ff78 	bl	800a66c <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 800177c:	4b60      	ldr	r3, [pc, #384]	; (8001900 <main+0x8e0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681c      	ldr	r4, [r3, #0]
 8001782:	463b      	mov	r3, r7
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fd05 	bl	8000194 <strlen>
 800178a:	4603      	mov	r3, r0
 800178c:	b29a      	uxth	r2, r3
 800178e:	4639      	mov	r1, r7
 8001790:	2364      	movs	r3, #100	; 0x64
 8001792:	4620      	mov	r0, r4
 8001794:	f006 fad8 	bl	8007d48 <HAL_UART_Transmit>

			sprintf(buf, "\r\n");
 8001798:	463b      	mov	r3, r7
 800179a:	495e      	ldr	r1, [pc, #376]	; (8001914 <main+0x8f4>)
 800179c:	4618      	mov	r0, r3
 800179e:	f008 ff65 	bl	800a66c <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 80017a2:	4b57      	ldr	r3, [pc, #348]	; (8001900 <main+0x8e0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681c      	ldr	r4, [r3, #0]
 80017a8:	463b      	mov	r3, r7
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fcf2 	bl	8000194 <strlen>
 80017b0:	4603      	mov	r3, r0
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	4639      	mov	r1, r7
 80017b6:	2364      	movs	r3, #100	; 0x64
 80017b8:	4620      	mov	r0, r4
 80017ba:	f006 fac5 	bl	8007d48 <HAL_UART_Transmit>

			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 80017be:	4b50      	ldr	r3, [pc, #320]	; (8001900 <main+0x8e0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681c      	ldr	r4, [r3, #0]
 80017c4:	463b      	mov	r3, r7
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fce4 	bl	8000194 <strlen>
 80017cc:	4603      	mov	r3, r0
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	4639      	mov	r1, r7
 80017d2:	2364      	movs	r3, #100	; 0x64
 80017d4:	4620      	mov	r0, r4
 80017d6:	f006 fab7 	bl	8007d48 <HAL_UART_Transmit>
			sprintf(buf, "          temp -<OPTION> --<INSTRUCTION>\r\n");
 80017da:	463b      	mov	r3, r7
 80017dc:	494e      	ldr	r1, [pc, #312]	; (8001918 <main+0x8f8>)
 80017de:	4618      	mov	r0, r3
 80017e0:	f008 ff44 	bl	800a66c <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 80017e4:	4b46      	ldr	r3, [pc, #280]	; (8001900 <main+0x8e0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681c      	ldr	r4, [r3, #0]
 80017ea:	463b      	mov	r3, r7
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fcd1 	bl	8000194 <strlen>
 80017f2:	4603      	mov	r3, r0
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	4639      	mov	r1, r7
 80017f8:	2364      	movs	r3, #100	; 0x64
 80017fa:	4620      	mov	r0, r4
 80017fc:	f006 faa4 	bl	8007d48 <HAL_UART_Transmit>
			sprintf(buf, "          Options: -m\r\n");
 8001800:	463b      	mov	r3, r7
 8001802:	4946      	ldr	r1, [pc, #280]	; (800191c <main+0x8fc>)
 8001804:	4618      	mov	r0, r3
 8001806:	f008 ff31 	bl	800a66c <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 800180a:	4b3d      	ldr	r3, [pc, #244]	; (8001900 <main+0x8e0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681c      	ldr	r4, [r3, #0]
 8001810:	463b      	mov	r3, r7
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fcbe 	bl	8000194 <strlen>
 8001818:	4603      	mov	r3, r0
 800181a:	b29a      	uxth	r2, r3
 800181c:	4639      	mov	r1, r7
 800181e:	2364      	movs	r3, #100	; 0x64
 8001820:	4620      	mov	r0, r4
 8001822:	f006 fa91 	bl	8007d48 <HAL_UART_Transmit>
			sprintf(buf, "          Instructions: --cont, --single\r\n");
 8001826:	463b      	mov	r3, r7
 8001828:	493d      	ldr	r1, [pc, #244]	; (8001920 <main+0x900>)
 800182a:	4618      	mov	r0, r3
 800182c:	f008 ff1e 	bl	800a66c <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 8001830:	4b33      	ldr	r3, [pc, #204]	; (8001900 <main+0x8e0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681c      	ldr	r4, [r3, #0]
 8001836:	463b      	mov	r3, r7
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fcab 	bl	8000194 <strlen>
 800183e:	4603      	mov	r3, r0
 8001840:	b29a      	uxth	r2, r3
 8001842:	4639      	mov	r1, r7
 8001844:	2364      	movs	r3, #100	; 0x64
 8001846:	4620      	mov	r0, r4
 8001848:	f006 fa7e 	bl	8007d48 <HAL_UART_Transmit>

			sprintf(buf, "\r\n");
 800184c:	463b      	mov	r3, r7
 800184e:	4931      	ldr	r1, [pc, #196]	; (8001914 <main+0x8f4>)
 8001850:	4618      	mov	r0, r3
 8001852:	f008 ff0b 	bl	800a66c <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 8001856:	4b2a      	ldr	r3, [pc, #168]	; (8001900 <main+0x8e0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681c      	ldr	r4, [r3, #0]
 800185c:	463b      	mov	r3, r7
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fc98 	bl	8000194 <strlen>
 8001864:	4603      	mov	r3, r0
 8001866:	b29a      	uxth	r2, r3
 8001868:	4639      	mov	r1, r7
 800186a:	2364      	movs	r3, #100	; 0x64
 800186c:	4620      	mov	r0, r4
 800186e:	f006 fa6b 	bl	8007d48 <HAL_UART_Transmit>

			sprintf(buf, "          start -<OPTION> --<INSTRUCTION>\r\n");
 8001872:	463b      	mov	r3, r7
 8001874:	492b      	ldr	r1, [pc, #172]	; (8001924 <main+0x904>)
 8001876:	4618      	mov	r0, r3
 8001878:	f008 fef8 	bl	800a66c <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 800187c:	4b20      	ldr	r3, [pc, #128]	; (8001900 <main+0x8e0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681c      	ldr	r4, [r3, #0]
 8001882:	463b      	mov	r3, r7
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fc85 	bl	8000194 <strlen>
 800188a:	4603      	mov	r3, r0
 800188c:	b29a      	uxth	r2, r3
 800188e:	4639      	mov	r1, r7
 8001890:	2364      	movs	r3, #100	; 0x64
 8001892:	4620      	mov	r0, r4
 8001894:	f006 fa58 	bl	8007d48 <HAL_UART_Transmit>
			sprintf(buf, "          Options: -p\r\n");
 8001898:	463b      	mov	r3, r7
 800189a:	4923      	ldr	r1, [pc, #140]	; (8001928 <main+0x908>)
 800189c:	4618      	mov	r0, r3
 800189e:	f008 fee5 	bl	800a66c <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 80018a2:	4b17      	ldr	r3, [pc, #92]	; (8001900 <main+0x8e0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681c      	ldr	r4, [r3, #0]
 80018a8:	463b      	mov	r3, r7
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fc72 	bl	8000194 <strlen>
 80018b0:	4603      	mov	r3, r0
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	4639      	mov	r1, r7
 80018b6:	2364      	movs	r3, #100	; 0x64
 80018b8:	4620      	mov	r0, r4
 80018ba:	f006 fa45 	bl	8007d48 <HAL_UART_Transmit>
			sprintf(buf, "          Instructions: --nonleaded, --leaded\r\n");
 80018be:	463b      	mov	r3, r7
 80018c0:	491a      	ldr	r1, [pc, #104]	; (800192c <main+0x90c>)
 80018c2:	4618      	mov	r0, r3
 80018c4:	f008 fed2 	bl	800a66c <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 80018c8:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <main+0x8e0>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681c      	ldr	r4, [r3, #0]
 80018ce:	463b      	mov	r3, r7
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fc5f 	bl	8000194 <strlen>
 80018d6:	4603      	mov	r3, r0
 80018d8:	b29a      	uxth	r2, r3
 80018da:	4639      	mov	r1, r7
 80018dc:	2364      	movs	r3, #100	; 0x64
 80018de:	4620      	mov	r0, r4
 80018e0:	f006 fa32 	bl	8007d48 <HAL_UART_Transmit>


			fsm->state = RFO_IDLE;
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <main+0x910>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2200      	movs	r2, #0
 80018ea:	709a      	strb	r2, [r3, #2]
			break;
 80018ec:	e004      	b.n	80018f8 <main+0x8d8>
			break;
 80018ee:	bf00      	nop
 80018f0:	e49f      	b.n	8001232 <main+0x212>
			break;
 80018f2:	bf00      	nop
 80018f4:	e49d      	b.n	8001232 <main+0x212>
			break;
 80018f6:	bf00      	nop
		switch(fsm->state)
 80018f8:	e49b      	b.n	8001232 <main+0x212>
 80018fa:	bf00      	nop
 80018fc:	0800cc50 	.word	0x0800cc50
 8001900:	20000020 	.word	0x20000020
 8001904:	0800cc64 	.word	0x0800cc64
 8001908:	0800cc70 	.word	0x0800cc70
 800190c:	0800cc90 	.word	0x0800cc90
 8001910:	0800cca8 	.word	0x0800cca8
 8001914:	0800cbec 	.word	0x0800cbec
 8001918:	0800ccd0 	.word	0x0800ccd0
 800191c:	0800ccfc 	.word	0x0800ccfc
 8001920:	0800cd14 	.word	0x0800cd14
 8001924:	0800cd40 	.word	0x0800cd40
 8001928:	0800cd6c 	.word	0x0800cd6c
 800192c:	0800cd84 	.word	0x0800cd84
 8001930:	20000024 	.word	0x20000024

08001934 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b09a      	sub	sp, #104	; 0x68
 8001938:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800193a:	f107 0320 	add.w	r3, r7, #32
 800193e:	2248      	movs	r2, #72	; 0x48
 8001940:	2100      	movs	r1, #0
 8001942:	4618      	mov	r0, r3
 8001944:	f008 fa20 	bl	8009d88 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
 8001954:	611a      	str	r2, [r3, #16]
 8001956:	615a      	str	r2, [r3, #20]
 8001958:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800195a:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <SystemClock_Config+0xc4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001962:	4a25      	ldr	r2, [pc, #148]	; (80019f8 <SystemClock_Config+0xc4>)
 8001964:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	4b23      	ldr	r3, [pc, #140]	; (80019f8 <SystemClock_Config+0xc4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001976:	2303      	movs	r3, #3
 8001978:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800197a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001986:	2340      	movs	r3, #64	; 0x40
 8001988:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800198a:	2302      	movs	r3, #2
 800198c:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800198e:	2303      	movs	r3, #3
 8001990:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001992:	2310      	movs	r3, #16
 8001994:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 8;
 8001996:	2308      	movs	r3, #8
 8001998:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800199a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800199e:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019a0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80019a4:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019aa:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ac:	f107 0320 	add.w	r3, r7, #32
 80019b0:	4618      	mov	r0, r3
 80019b2:	f003 f8ed 	bl	8004b90 <HAL_RCC_OscConfig>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <SystemClock_Config+0x8c>
	{
		Error_Handler();
 80019bc:	f001 f97a 	bl	8002cb4 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80019c0:	236f      	movs	r3, #111	; 0x6f
 80019c2:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019c4:	2303      	movs	r3, #3
 80019c6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019cc:	2300      	movs	r3, #0
 80019ce:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	2103      	movs	r1, #3
 80019e0:	4618      	mov	r0, r3
 80019e2:	f003 fc63 	bl	80052ac <HAL_RCC_ClockConfig>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <SystemClock_Config+0xbc>
	{
		Error_Handler();
 80019ec:	f001 f962 	bl	8002cb4 <Error_Handler>
	}
}
 80019f0:	bf00      	nop
 80019f2:	3768      	adds	r7, #104	; 0x68
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	58000400 	.word	0x58000400

080019fc <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b094      	sub	sp, #80	; 0x50
 8001a00:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a02:	463b      	mov	r3, r7
 8001a04:	2250      	movs	r2, #80	; 0x50
 8001a06:	2100      	movs	r1, #0
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f008 f9bd 	bl	8009d88 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8001a0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a12:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001a14:	2300      	movs	r3, #0
 8001a16:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001a18:	2310      	movs	r3, #16
 8001a1a:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a1c:	463b      	mov	r3, r7
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f004 f881 	bl	8005b26 <HAL_RCCEx_PeriphCLKConfig>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <PeriphCommonClock_Config+0x32>
	{
		Error_Handler();
 8001a2a:	f001 f943 	bl	8002cb4 <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 8001a2e:	bf00      	nop
 8001a30:	3750      	adds	r7, #80	; 0x50
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	af00      	add	r7, sp, #0
	/* USART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2024      	movs	r0, #36	; 0x24
 8001a40:	f002 f971 	bl	8003d26 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a44:	2024      	movs	r0, #36	; 0x24
 8001a46:	f002 f988 	bl	8003d5a <HAL_NVIC_EnableIRQ>
	/* LPUART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2025      	movs	r0, #37	; 0x25
 8001a50:	f002 f969 	bl	8003d26 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001a54:	2025      	movs	r0, #37	; 0x25
 8001a56:	f002 f980 	bl	8003d5a <HAL_NVIC_EnableIRQ>
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	201c      	movs	r0, #28
 8001a60:	f002 f961 	bl	8003d26 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a64:	201c      	movs	r0, #28
 8001a66:	f002 f978 	bl	8003d5a <HAL_NVIC_EnableIRQ>
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <MX_I2C1_Init+0x74>)
 8001a76:	4a1c      	ldr	r2, [pc, #112]	; (8001ae8 <MX_I2C1_Init+0x78>)
 8001a78:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10707DBC;
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <MX_I2C1_Init+0x74>)
 8001a7c:	4a1b      	ldr	r2, [pc, #108]	; (8001aec <MX_I2C1_Init+0x7c>)
 8001a7e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <MX_I2C1_Init+0x74>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a86:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <MX_I2C1_Init+0x74>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <MX_I2C1_Init+0x74>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <MX_I2C1_Init+0x74>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <MX_I2C1_Init+0x74>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a9e:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <MX_I2C1_Init+0x74>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <MX_I2C1_Init+0x74>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001aaa:	480e      	ldr	r0, [pc, #56]	; (8001ae4 <MX_I2C1_Init+0x74>)
 8001aac:	f002 fbb6 	bl	800421c <HAL_I2C_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8001ab6:	f001 f8fd 	bl	8002cb4 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aba:	2100      	movs	r1, #0
 8001abc:	4809      	ldr	r0, [pc, #36]	; (8001ae4 <MX_I2C1_Init+0x74>)
 8001abe:	f002 fc3c 	bl	800433a <HAL_I2CEx_ConfigAnalogFilter>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001ac8:	f001 f8f4 	bl	8002cb4 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001acc:	2100      	movs	r1, #0
 8001ace:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <MX_I2C1_Init+0x74>)
 8001ad0:	f002 fc7e 	bl	80043d0 <HAL_I2CEx_ConfigDigitalFilter>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8001ada:	f001 f8eb 	bl	8002cb4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	2000022c 	.word	0x2000022c
 8001ae8:	40005400 	.word	0x40005400
 8001aec:	10707dbc 	.word	0x10707dbc

08001af0 <MX_LPUART1_UART_Init>:
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 8001af4:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <MX_LPUART1_UART_Init+0x90>)
 8001af6:	4a23      	ldr	r2, [pc, #140]	; (8001b84 <MX_LPUART1_UART_Init+0x94>)
 8001af8:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 8001afa:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <MX_LPUART1_UART_Init+0x90>)
 8001afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b00:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b02:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <MX_LPUART1_UART_Init+0x90>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001b08:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <MX_LPUART1_UART_Init+0x90>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <MX_LPUART1_UART_Init+0x90>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001b14:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <MX_LPUART1_UART_Init+0x90>)
 8001b16:	220c      	movs	r2, #12
 8001b18:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1a:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <MX_LPUART1_UART_Init+0x90>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b20:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <MX_LPUART1_UART_Init+0x90>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b26:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <MX_LPUART1_UART_Init+0x90>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b2c:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <MX_LPUART1_UART_Init+0x90>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	629a      	str	r2, [r3, #40]	; 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001b32:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <MX_LPUART1_UART_Init+0x90>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	665a      	str	r2, [r3, #100]	; 0x64
	if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001b38:	4811      	ldr	r0, [pc, #68]	; (8001b80 <MX_LPUART1_UART_Init+0x90>)
 8001b3a:	f006 f8b5 	bl	8007ca8 <HAL_UART_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_LPUART1_UART_Init+0x58>
	{
		Error_Handler();
 8001b44:	f001 f8b6 	bl	8002cb4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b48:	2100      	movs	r1, #0
 8001b4a:	480d      	ldr	r0, [pc, #52]	; (8001b80 <MX_LPUART1_UART_Init+0x90>)
 8001b4c:	f008 f827 	bl	8009b9e <HAL_UARTEx_SetTxFifoThreshold>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_LPUART1_UART_Init+0x6a>
	{
		Error_Handler();
 8001b56:	f001 f8ad 	bl	8002cb4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4808      	ldr	r0, [pc, #32]	; (8001b80 <MX_LPUART1_UART_Init+0x90>)
 8001b5e:	f008 f85c 	bl	8009c1a <HAL_UARTEx_SetRxFifoThreshold>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_LPUART1_UART_Init+0x7c>
	{
		Error_Handler();
 8001b68:	f001 f8a4 	bl	8002cb4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001b6c:	4804      	ldr	r0, [pc, #16]	; (8001b80 <MX_LPUART1_UART_Init+0x90>)
 8001b6e:	f007 ffdd 	bl	8009b2c <HAL_UARTEx_DisableFifoMode>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_LPUART1_UART_Init+0x8c>
	{
		Error_Handler();
 8001b78:	f001 f89c 	bl	8002cb4 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000278 	.word	0x20000278
 8001b84:	40008000 	.word	0x40008000

08001b88 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001b8c:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001b8e:	4a23      	ldr	r2, [pc, #140]	; (8001c1c <MX_USART1_UART_Init+0x94>)
 8001b90:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001b92:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b98:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9a:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001ba0:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001bac:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001bae:	220c      	movs	r2, #12
 8001bb0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb2:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bd0:	4811      	ldr	r0, [pc, #68]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001bd2:	f006 f869 	bl	8007ca8 <HAL_UART_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 8001bdc:	f001 f86a 	bl	8002cb4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001be0:	2100      	movs	r1, #0
 8001be2:	480d      	ldr	r0, [pc, #52]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001be4:	f007 ffdb 	bl	8009b9e <HAL_UARTEx_SetTxFifoThreshold>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_USART1_UART_Init+0x6a>
	{
		Error_Handler();
 8001bee:	f001 f861 	bl	8002cb4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4808      	ldr	r0, [pc, #32]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001bf6:	f008 f810 	bl	8009c1a <HAL_UARTEx_SetRxFifoThreshold>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_USART1_UART_Init+0x7c>
	{
		Error_Handler();
 8001c00:	f001 f858 	bl	8002cb4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c04:	4804      	ldr	r0, [pc, #16]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001c06:	f007 ff91 	bl	8009b2c <HAL_UARTEx_DisableFifoMode>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 8001c10:	f001 f850 	bl	8002cb4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000308 	.word	0x20000308
 8001c1c:	40013800 	.word	0x40013800

08001c20 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001c24:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <MX_SPI1_Init+0x74>)
 8001c26:	4a1c      	ldr	r2, [pc, #112]	; (8001c98 <MX_SPI1_Init+0x78>)
 8001c28:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <MX_SPI1_Init+0x74>)
 8001c2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c30:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <MX_SPI1_Init+0x74>)
 8001c34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c38:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c3a:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <MX_SPI1_Init+0x74>)
 8001c3c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c40:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c42:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <MX_SPI1_Init+0x74>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <MX_SPI1_Init+0x74>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <MX_SPI1_Init+0x74>)
 8001c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c54:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <MX_SPI1_Init+0x74>)
 8001c58:	2230      	movs	r2, #48	; 0x30
 8001c5a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c5c:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <MX_SPI1_Init+0x74>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c62:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <MX_SPI1_Init+0x74>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c68:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <MX_SPI1_Init+0x74>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <MX_SPI1_Init+0x74>)
 8001c70:	2207      	movs	r2, #7
 8001c72:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c74:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <MX_SPI1_Init+0x74>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <MX_SPI1_Init+0x74>)
 8001c7c:	2208      	movs	r2, #8
 8001c7e:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c80:	4804      	ldr	r0, [pc, #16]	; (8001c94 <MX_SPI1_Init+0x74>)
 8001c82:	f004 f9d7 	bl	8006034 <HAL_SPI_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_SPI1_Init+0x70>
	{
		Error_Handler();
 8001c8c:	f001 f812 	bl	8002cb4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000398 	.word	0x20000398
 8001c98:	40013000 	.word	0x40013000

08001c9c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b098      	sub	sp, #96	; 0x60
 8001ca0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001cae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
 8001cbc:	611a      	str	r2, [r3, #16]
 8001cbe:	615a      	str	r2, [r3, #20]
 8001cc0:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	2234      	movs	r2, #52	; 0x34
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f008 f85d 	bl	8009d88 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001cce:	4b41      	ldr	r3, [pc, #260]	; (8001dd4 <MX_TIM1_Init+0x138>)
 8001cd0:	4a41      	ldr	r2, [pc, #260]	; (8001dd8 <MX_TIM1_Init+0x13c>)
 8001cd2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 250;
 8001cd4:	4b3f      	ldr	r3, [pc, #252]	; (8001dd4 <MX_TIM1_Init+0x138>)
 8001cd6:	22fa      	movs	r2, #250	; 0xfa
 8001cd8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cda:	4b3e      	ldr	r3, [pc, #248]	; (8001dd4 <MX_TIM1_Init+0x138>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 512;
 8001ce0:	4b3c      	ldr	r3, [pc, #240]	; (8001dd4 <MX_TIM1_Init+0x138>)
 8001ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ce6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce8:	4b3a      	ldr	r3, [pc, #232]	; (8001dd4 <MX_TIM1_Init+0x138>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001cee:	4b39      	ldr	r3, [pc, #228]	; (8001dd4 <MX_TIM1_Init+0x138>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf4:	4b37      	ldr	r3, [pc, #220]	; (8001dd4 <MX_TIM1_Init+0x138>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cfa:	4836      	ldr	r0, [pc, #216]	; (8001dd4 <MX_TIM1_Init+0x138>)
 8001cfc:	f005 f811 	bl	8006d22 <HAL_TIM_PWM_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM1_Init+0x6e>
	{
		Error_Handler();
 8001d06:	f000 ffd5 	bl	8002cb4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d16:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	482d      	ldr	r0, [pc, #180]	; (8001dd4 <MX_TIM1_Init+0x138>)
 8001d1e:	f005 fe95 	bl	8007a4c <HAL_TIMEx_MasterConfigSynchronization>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 8001d28:	f000 ffc4 	bl	8002cb4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d2c:	2360      	movs	r3, #96	; 0x60
 8001d2e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d34:	2300      	movs	r3, #0
 8001d36:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d40:	2300      	movs	r3, #0
 8001d42:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d44:	2300      	movs	r3, #0
 8001d46:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d48:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4820      	ldr	r0, [pc, #128]	; (8001dd4 <MX_TIM1_Init+0x138>)
 8001d52:	f005 fa37 	bl	80071c4 <HAL_TIM_PWM_ConfigChannel>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_TIM1_Init+0xc4>
	{
		Error_Handler();
 8001d5c:	f000 ffaa 	bl	8002cb4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d64:	2204      	movs	r2, #4
 8001d66:	4619      	mov	r1, r3
 8001d68:	481a      	ldr	r0, [pc, #104]	; (8001dd4 <MX_TIM1_Init+0x138>)
 8001d6a:	f005 fa2b 	bl	80071c4 <HAL_TIM_PWM_ConfigChannel>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_TIM1_Init+0xdc>
	{
		Error_Handler();
 8001d74:	f000 ff9e 	bl	8002cb4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d90:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001da8:	2300      	movs	r3, #0
 8001daa:	633b      	str	r3, [r7, #48]	; 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	4619      	mov	r1, r3
 8001db4:	4807      	ldr	r0, [pc, #28]	; (8001dd4 <MX_TIM1_Init+0x138>)
 8001db6:	f005 fea9 	bl	8007b0c <HAL_TIMEx_ConfigBreakDeadTime>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM1_Init+0x128>
	{
		Error_Handler();
 8001dc0:	f000 ff78 	bl	8002cb4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001dc4:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <MX_TIM1_Init+0x138>)
 8001dc6:	f001 fc53 	bl	8003670 <HAL_TIM_MspPostInit>

}
 8001dca:	bf00      	nop
 8001dcc:	3760      	adds	r7, #96	; 0x60
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200003fc 	.word	0x200003fc
 8001dd8:	40012c00 	.word	0x40012c00

08001ddc <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de2:	f107 031c 	add.w	r3, r7, #28
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001dee:	463b      	mov	r3, r7
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
 8001dfc:	615a      	str	r2, [r3, #20]
 8001dfe:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001e00:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <MX_TIM2_Init+0xb0>)
 8001e02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e06:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 8000-1;
 8001e08:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <MX_TIM2_Init+0xb0>)
 8001e0a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001e0e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e10:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <MX_TIM2_Init+0xb0>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4;
 8001e16:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <MX_TIM2_Init+0xb0>)
 8001e18:	2204      	movs	r2, #4
 8001e1a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e1c:	4b1b      	ldr	r3, [pc, #108]	; (8001e8c <MX_TIM2_Init+0xb0>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e22:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <MX_TIM2_Init+0xb0>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e28:	4818      	ldr	r0, [pc, #96]	; (8001e8c <MX_TIM2_Init+0xb0>)
 8001e2a:	f004 ff7a 	bl	8006d22 <HAL_TIM_PWM_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 8001e34:	f000 ff3e 	bl	8002cb4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e40:	f107 031c 	add.w	r3, r7, #28
 8001e44:	4619      	mov	r1, r3
 8001e46:	4811      	ldr	r0, [pc, #68]	; (8001e8c <MX_TIM2_Init+0xb0>)
 8001e48:	f005 fe00 	bl	8007a4c <HAL_TIMEx_MasterConfigSynchronization>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM2_Init+0x7a>
	{
		Error_Handler();
 8001e52:	f000 ff2f 	bl	8002cb4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e56:	2360      	movs	r3, #96	; 0x60
 8001e58:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 2;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e66:	463b      	mov	r3, r7
 8001e68:	2200      	movs	r2, #0
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4807      	ldr	r0, [pc, #28]	; (8001e8c <MX_TIM2_Init+0xb0>)
 8001e6e:	f005 f9a9 	bl	80071c4 <HAL_TIM_PWM_ConfigChannel>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM2_Init+0xa0>
	{
		Error_Handler();
 8001e78:	f000 ff1c 	bl	8002cb4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001e7c:	4803      	ldr	r0, [pc, #12]	; (8001e8c <MX_TIM2_Init+0xb0>)
 8001e7e:	f001 fbf7 	bl	8003670 <HAL_TIM_MspPostInit>

}
 8001e82:	bf00      	nop
 8001e84:	3728      	adds	r7, #40	; 0x28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000448 	.word	0x20000448

08001e90 <MX_TIM16_Init>:
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8001e94:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <MX_TIM16_Init+0x48>)
 8001e96:	4a11      	ldr	r2, [pc, #68]	; (8001edc <MX_TIM16_Init+0x4c>)
 8001e98:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 64000;
 8001e9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <MX_TIM16_Init+0x48>)
 8001e9c:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001ea0:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <MX_TIM16_Init+0x48>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 500;
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <MX_TIM16_Init+0x48>)
 8001eaa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001eae:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <MX_TIM16_Init+0x48>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8001eb6:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <MX_TIM16_Init+0x48>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <MX_TIM16_Init+0x48>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001ec2:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <MX_TIM16_Init+0x48>)
 8001ec4:	f004 fe58 	bl	8006b78 <HAL_TIM_Base_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM16_Init+0x42>
	{
		Error_Handler();
 8001ece:	f000 fef1 	bl	8002cb4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000494 	.word	0x20000494
 8001edc:	40014400 	.word	0x40014400

08001ee0 <MX_TIM17_Init>:
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
	/* USER CODE END TIM17_Init 0 */

	/* USER CODE BEGIN TIM17_Init 1 */

	/* USER CODE END TIM17_Init 1 */
	htim17.Instance = TIM17;
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <MX_TIM17_Init+0x44>)
 8001ee6:	4a10      	ldr	r2, [pc, #64]	; (8001f28 <MX_TIM17_Init+0x48>)
 8001ee8:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = 64000-1;
 8001eea:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <MX_TIM17_Init+0x44>)
 8001eec:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001ef0:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <MX_TIM17_Init+0x44>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 50;
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <MX_TIM17_Init+0x44>)
 8001efa:	2232      	movs	r2, #50	; 0x32
 8001efc:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <MX_TIM17_Init+0x44>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 8001f04:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <MX_TIM17_Init+0x44>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <MX_TIM17_Init+0x44>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001f10:	4804      	ldr	r0, [pc, #16]	; (8001f24 <MX_TIM17_Init+0x44>)
 8001f12:	f004 fe31 	bl	8006b78 <HAL_TIM_Base_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_TIM17_Init+0x40>
	{
		Error_Handler();
 8001f1c:	f000 feca 	bl	8002cb4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM17_Init 2 */

	/* USER CODE END TIM17_Init 2 */

}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200004e0 	.word	0x200004e0
 8001f28:	40014800 	.word	0x40014800

08001f2c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001f40:	2004      	movs	r0, #4
 8001f42:	f7ff f817 	bl	8000f74 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001f46:	2002      	movs	r0, #2
 8001f48:	f7ff f814 	bl	8000f74 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	f7ff f811 	bl	8000f74 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, T1_CS_Pin|T2_CS_Pin, GPIO_PIN_RESET);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2130      	movs	r1, #48	; 0x30
 8001f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f5a:	f002 f947 	bl	80041ec <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(WS_DATA_GPIO_Port, WS_DATA_Pin, GPIO_PIN_RESET);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2102      	movs	r1, #2
 8001f62:	4811      	ldr	r0, [pc, #68]	; (8001fa8 <MX_GPIO_Init+0x7c>)
 8001f64:	f002 f942 	bl	80041ec <HAL_GPIO_WritePin>

	/*Configure GPIO pins : T1_CS_Pin T2_CS_Pin */
	GPIO_InitStruct.Pin = T1_CS_Pin|T2_CS_Pin;
 8001f68:	2330      	movs	r3, #48	; 0x30
 8001f6a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2300      	movs	r3, #0
 8001f76:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f80:	f001 ffc4 	bl	8003f0c <HAL_GPIO_Init>

	/*Configure GPIO pin : WS_DATA_Pin */
	GPIO_InitStruct.Pin = WS_DATA_Pin;
 8001f84:	2302      	movs	r3, #2
 8001f86:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(WS_DATA_GPIO_Port, &GPIO_InitStruct);
 8001f94:	1d3b      	adds	r3, r7, #4
 8001f96:	4619      	mov	r1, r3
 8001f98:	4803      	ldr	r0, [pc, #12]	; (8001fa8 <MX_GPIO_Init+0x7c>)
 8001f9a:	f001 ffb7 	bl	8003f0c <HAL_GPIO_Init>

}
 8001f9e:	bf00      	nop
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	48000400 	.word	0x48000400

08001fac <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	dp->trmRdy = 1;
 8001fb4:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <HAL_UART_TxCpltCallback+0x1c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	70da      	strb	r2, [r3, #3]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	20000030 	.word	0x20000030

08001fcc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == LPUART1){
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a9b      	ldr	r2, [pc, #620]	; (8002248 <HAL_UART_RxCpltCallback+0x27c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d11d      	bne.n	800201a <HAL_UART_RxCpltCallback+0x4e>
		if(HAL_UART_Transmit(dev->uart, dev->rcv, 1, 1000) == HAL_OK) {
 8001fde:	4b9b      	ldr	r3, [pc, #620]	; (800224c <HAL_UART_RxCpltCallback+0x280>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	4b99      	ldr	r3, [pc, #612]	; (800224c <HAL_UART_RxCpltCallback+0x280>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	1d19      	adds	r1, r3, #4
 8001fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f005 feaa 	bl	8007d48 <HAL_UART_Transmit>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f040 82c9 	bne.w	800258e <HAL_UART_RxCpltCallback+0x5c2>
			fsm->state = RFO_PROCESS_CMD;
 8001ffc:	4b94      	ldr	r3, [pc, #592]	; (8002250 <HAL_UART_RxCpltCallback+0x284>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2201      	movs	r2, #1
 8002002:	709a      	strb	r2, [r3, #2]
			HAL_UART_Receive_IT(dev->uart, dev->rcv, 1);
 8002004:	4b91      	ldr	r3, [pc, #580]	; (800224c <HAL_UART_RxCpltCallback+0x280>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6818      	ldr	r0, [r3, #0]
 800200a:	4b90      	ldr	r3, [pc, #576]	; (800224c <HAL_UART_RxCpltCallback+0x280>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	3304      	adds	r3, #4
 8002010:	2201      	movs	r2, #1
 8002012:	4619      	mov	r1, r3
 8002014:	f006 f802 	bl	800801c <HAL_UART_Receive_IT>

		}

		HAL_UART_Receive_IT(&huart1, dp->rcv, 4);
	}
}
 8002018:	e2b9      	b.n	800258e <HAL_UART_RxCpltCallback+0x5c2>
	else if(huart->Instance == USART1)  {
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a8d      	ldr	r2, [pc, #564]	; (8002254 <HAL_UART_RxCpltCallback+0x288>)
 8002020:	4293      	cmp	r3, r2
 8002022:	f040 82b4 	bne.w	800258e <HAL_UART_RxCpltCallback+0x5c2>
		nextion_decode_response(dp);
 8002026:	4b8c      	ldr	r3, [pc, #560]	; (8002258 <HAL_UART_RxCpltCallback+0x28c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f000 ff2e 	bl	8002e8c <nextion_decode_response>
		switch(dp->response.page) {
 8002030:	4b89      	ldr	r3, [pc, #548]	; (8002258 <HAL_UART_RxCpltCallback+0x28c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	3b01      	subs	r3, #1
 8002038:	2b04      	cmp	r3, #4
 800203a:	f200 82a0 	bhi.w	800257e <HAL_UART_RxCpltCallback+0x5b2>
 800203e:	a201      	add	r2, pc, #4	; (adr r2, 8002044 <HAL_UART_RxCpltCallback+0x78>)
 8002040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002044:	08002059 	.word	0x08002059
 8002048:	08002161 	.word	0x08002161
 800204c:	0800235f 	.word	0x0800235f
 8002050:	08002479 	.word	0x08002479
 8002054:	080023cf 	.word	0x080023cf
			switch(dp->response.id) {
 8002058:	4b7f      	ldr	r3, [pc, #508]	; (8002258 <HAL_UART_RxCpltCallback+0x28c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	785b      	ldrb	r3, [r3, #1]
 800205e:	2b02      	cmp	r3, #2
 8002060:	d002      	beq.n	8002068 <HAL_UART_RxCpltCallback+0x9c>
 8002062:	2b03      	cmp	r3, #3
 8002064:	d067      	beq.n	8002136 <HAL_UART_RxCpltCallback+0x16a>
			break;
 8002066:	e28a      	b.n	800257e <HAL_UART_RxCpltCallback+0x5b2>
				beep_IT(dev,3);
 8002068:	4b78      	ldr	r3, [pc, #480]	; (800224c <HAL_UART_RxCpltCallback+0x280>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2103      	movs	r1, #3
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe ffb4 	bl	8000fdc <beep_IT>
				PIDController_Init(pid, kP, kI, kD, SAMPLE_TIME, tau, limMin, limMax, limMinInt, limMaxInt);
 8002074:	4b79      	ldr	r3, [pc, #484]	; (800225c <HAL_UART_RxCpltCallback+0x290>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	eddf 7a79 	vldr	s15, [pc, #484]	; 8002260 <HAL_UART_RxCpltCallback+0x294>
 800207c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002080:	eef3 6a0f 	vmov.f32	s13, #63	; 0x41f80000  31.0
 8002084:	ed9f 6a77 	vldr	s12, [pc, #476]	; 8002264 <HAL_UART_RxCpltCallback+0x298>
 8002088:	eddf 5a77 	vldr	s11, [pc, #476]	; 8002268 <HAL_UART_RxCpltCallback+0x29c>
 800208c:	ed9f 5a77 	vldr	s10, [pc, #476]	; 800226c <HAL_UART_RxCpltCallback+0x2a0>
 8002090:	eddf 4a77 	vldr	s9, [pc, #476]	; 8002270 <HAL_UART_RxCpltCallback+0x2a4>
 8002094:	ed9f 4a77 	vldr	s8, [pc, #476]	; 8002274 <HAL_UART_RxCpltCallback+0x2a8>
 8002098:	eef0 3a64 	vmov.f32	s7, s9
 800209c:	eeb0 3a45 	vmov.f32	s6, s10
 80020a0:	eef0 2a65 	vmov.f32	s5, s11
 80020a4:	eeb0 2a46 	vmov.f32	s4, s12
 80020a8:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 80020ac:	eeb0 1a66 	vmov.f32	s2, s13
 80020b0:	eef0 0a47 	vmov.f32	s1, s14
 80020b4:	eeb0 0a67 	vmov.f32	s0, s15
 80020b8:	4618      	mov	r0, r3
 80020ba:	f001 f803 	bl	80030c4 <PIDController_Init>
				__HAL_TIM_SET_AUTORELOAD(&htim1, reflowARR);
 80020be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020c2:	4b6d      	ldr	r3, [pc, #436]	; (8002278 <HAL_UART_RxCpltCallback+0x2ac>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80020c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b6a      	ldr	r3, [pc, #424]	; (8002278 <HAL_UART_RxCpltCallback+0x2ac>)
 80020d0:	60da      	str	r2, [r3, #12]
				dp->write(dp, "page reflow");
 80020d2:	4b61      	ldr	r3, [pc, #388]	; (8002258 <HAL_UART_RxCpltCallback+0x28c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020d8:	4a5f      	ldr	r2, [pc, #380]	; (8002258 <HAL_UART_RxCpltCallback+0x28c>)
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	4967      	ldr	r1, [pc, #412]	; (800227c <HAL_UART_RxCpltCallback+0x2b0>)
 80020de:	4610      	mov	r0, r2
 80020e0:	4798      	blx	r3
				dp->write_id_str(dp, "conState", "Not connected");
 80020e2:	4b5d      	ldr	r3, [pc, #372]	; (8002258 <HAL_UART_RxCpltCallback+0x28c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e8:	4a5b      	ldr	r2, [pc, #364]	; (8002258 <HAL_UART_RxCpltCallback+0x28c>)
 80020ea:	6810      	ldr	r0, [r2, #0]
 80020ec:	4a64      	ldr	r2, [pc, #400]	; (8002280 <HAL_UART_RxCpltCallback+0x2b4>)
 80020ee:	4965      	ldr	r1, [pc, #404]	; (8002284 <HAL_UART_RxCpltCallback+0x2b8>)
 80020f0:	4798      	blx	r3
				dp->write_id_str(dp, "reflowState", "Prepare");
 80020f2:	4b59      	ldr	r3, [pc, #356]	; (8002258 <HAL_UART_RxCpltCallback+0x28c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f8:	4a57      	ldr	r2, [pc, #348]	; (8002258 <HAL_UART_RxCpltCallback+0x28c>)
 80020fa:	6810      	ldr	r0, [r2, #0]
 80020fc:	4a62      	ldr	r2, [pc, #392]	; (8002288 <HAL_UART_RxCpltCallback+0x2bc>)
 80020fe:	4963      	ldr	r1, [pc, #396]	; (800228c <HAL_UART_RxCpltCallback+0x2c0>)
 8002100:	4798      	blx	r3
				dp->write_id_val(dp, "reflowProgress", 0);
 8002102:	4b55      	ldr	r3, [pc, #340]	; (8002258 <HAL_UART_RxCpltCallback+0x28c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002108:	4a53      	ldr	r2, [pc, #332]	; (8002258 <HAL_UART_RxCpltCallback+0x28c>)
 800210a:	6810      	ldr	r0, [r2, #0]
 800210c:	2200      	movs	r2, #0
 800210e:	4960      	ldr	r1, [pc, #384]	; (8002290 <HAL_UART_RxCpltCallback+0x2c4>)
 8002110:	4798      	blx	r3
				fsm->state = RFO_START;
 8002112:	4b4f      	ldr	r3, [pc, #316]	; (8002250 <HAL_UART_RxCpltCallback+0x284>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2205      	movs	r2, #5
 8002118:	709a      	strb	r2, [r3, #2]
				dev->currentReflowState = REFLOW_STATE_PREPARE;
 800211a:	4b4c      	ldr	r3, [pc, #304]	; (800224c <HAL_UART_RxCpltCallback+0x280>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2202      	movs	r2, #2
 8002120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				dev->print = true;
 8002124:	4b49      	ldr	r3, [pc, #292]	; (800224c <HAL_UART_RxCpltCallback+0x280>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				HAL_TIM_Base_Start_IT(&htim16);
 800212e:	4859      	ldr	r0, [pc, #356]	; (8002294 <HAL_UART_RxCpltCallback+0x2c8>)
 8002130:	f004 fd7a 	bl	8006c28 <HAL_TIM_Base_Start_IT>
				break;
 8002134:	e013      	b.n	800215e <HAL_UART_RxCpltCallback+0x192>
				beep_IT(dev,1);
 8002136:	4b45      	ldr	r3, [pc, #276]	; (800224c <HAL_UART_RxCpltCallback+0x280>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2101      	movs	r1, #1
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe ff4d 	bl	8000fdc <beep_IT>
				dp->write(dp, "page setting");
 8002142:	4b45      	ldr	r3, [pc, #276]	; (8002258 <HAL_UART_RxCpltCallback+0x28c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002148:	4a43      	ldr	r2, [pc, #268]	; (8002258 <HAL_UART_RxCpltCallback+0x28c>)
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	4952      	ldr	r1, [pc, #328]	; (8002298 <HAL_UART_RxCpltCallback+0x2cc>)
 800214e:	4610      	mov	r0, r2
 8002150:	4798      	blx	r3
				dev->currentPage = DP_SETTINGS;
 8002152:	4b3e      	ldr	r3, [pc, #248]	; (800224c <HAL_UART_RxCpltCallback+0x280>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2202      	movs	r2, #2
 8002158:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				break;
 800215c:	bf00      	nop
			break;
 800215e:	e20e      	b.n	800257e <HAL_UART_RxCpltCallback+0x5b2>
				switch(dp->response.id) {
 8002160:	4b3d      	ldr	r3, [pc, #244]	; (8002258 <HAL_UART_RxCpltCallback+0x28c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	785b      	ldrb	r3, [r3, #1]
 8002166:	2b05      	cmp	r3, #5
 8002168:	d021      	beq.n	80021ae <HAL_UART_RxCpltCallback+0x1e2>
 800216a:	2b05      	cmp	r3, #5
 800216c:	f300 81ce 	bgt.w	800250c <HAL_UART_RxCpltCallback+0x540>
 8002170:	2b02      	cmp	r3, #2
 8002172:	d002      	beq.n	800217a <HAL_UART_RxCpltCallback+0x1ae>
 8002174:	2b03      	cmp	r3, #3
 8002176:	d013      	beq.n	80021a0 <HAL_UART_RxCpltCallback+0x1d4>
				break;
 8002178:	e1c8      	b.n	800250c <HAL_UART_RxCpltCallback+0x540>
					dp->write(dp, "page main");
 800217a:	4b37      	ldr	r3, [pc, #220]	; (8002258 <HAL_UART_RxCpltCallback+0x28c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002180:	4a35      	ldr	r2, [pc, #212]	; (8002258 <HAL_UART_RxCpltCallback+0x28c>)
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	4945      	ldr	r1, [pc, #276]	; (800229c <HAL_UART_RxCpltCallback+0x2d0>)
 8002186:	4610      	mov	r0, r2
 8002188:	4798      	blx	r3
					dev->currentPage = DP_MAIN;
 800218a:	4b30      	ldr	r3, [pc, #192]	; (800224c <HAL_UART_RxCpltCallback+0x280>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
					nextion_print_page(dp);
 8002194:	4b30      	ldr	r3, [pc, #192]	; (8002258 <HAL_UART_RxCpltCallback+0x28c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f000 fead 	bl	8002ef8 <nextion_print_page>
					break;
 800219e:	e0dd      	b.n	800235c <HAL_UART_RxCpltCallback+0x390>
					beep_IT(dev,1);
 80021a0:	4b2a      	ldr	r3, [pc, #168]	; (800224c <HAL_UART_RxCpltCallback+0x280>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2101      	movs	r1, #1
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe ff18 	bl	8000fdc <beep_IT>
					break;
 80021ac:	e0d6      	b.n	800235c <HAL_UART_RxCpltCallback+0x390>
					beep_IT(dev,2);
 80021ae:	4b27      	ldr	r3, [pc, #156]	; (800224c <HAL_UART_RxCpltCallback+0x280>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2102      	movs	r1, #2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe ff11 	bl	8000fdc <beep_IT>
					if(dp->response.data == RFO_MODE_REFLOW) {
 80021ba:	4b27      	ldr	r3, [pc, #156]	; (8002258 <HAL_UART_RxCpltCallback+0x28c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	789b      	ldrb	r3, [r3, #2]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d16d      	bne.n	80022a0 <HAL_UART_RxCpltCallback+0x2d4>
						PIDController_Init(pid, kP, kI, kD, SAMPLE_TIME, tau, limMin, limMax, limMinInt, limMaxInt);
 80021c4:	4b25      	ldr	r3, [pc, #148]	; (800225c <HAL_UART_RxCpltCallback+0x290>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	eddf 7a25 	vldr	s15, [pc, #148]	; 8002260 <HAL_UART_RxCpltCallback+0x294>
 80021cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021d0:	eef3 6a0f 	vmov.f32	s13, #63	; 0x41f80000  31.0
 80021d4:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8002264 <HAL_UART_RxCpltCallback+0x298>
 80021d8:	eddf 5a23 	vldr	s11, [pc, #140]	; 8002268 <HAL_UART_RxCpltCallback+0x29c>
 80021dc:	ed9f 5a23 	vldr	s10, [pc, #140]	; 800226c <HAL_UART_RxCpltCallback+0x2a0>
 80021e0:	eddf 4a23 	vldr	s9, [pc, #140]	; 8002270 <HAL_UART_RxCpltCallback+0x2a4>
 80021e4:	ed9f 4a23 	vldr	s8, [pc, #140]	; 8002274 <HAL_UART_RxCpltCallback+0x2a8>
 80021e8:	eef0 3a64 	vmov.f32	s7, s9
 80021ec:	eeb0 3a45 	vmov.f32	s6, s10
 80021f0:	eef0 2a65 	vmov.f32	s5, s11
 80021f4:	eeb0 2a46 	vmov.f32	s4, s12
 80021f8:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 80021fc:	eeb0 1a66 	vmov.f32	s2, s13
 8002200:	eef0 0a47 	vmov.f32	s1, s14
 8002204:	eeb0 0a67 	vmov.f32	s0, s15
 8002208:	4618      	mov	r0, r3
 800220a:	f000 ff5b 	bl	80030c4 <PIDController_Init>
						__HAL_TIM_SET_AUTORELOAD(&htim1, reflowARR);
 800220e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002212:	4b19      	ldr	r3, [pc, #100]	; (8002278 <HAL_UART_RxCpltCallback+0x2ac>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	62da      	str	r2, [r3, #44]	; 0x2c
 8002218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800221c:	461a      	mov	r2, r3
 800221e:	4b16      	ldr	r3, [pc, #88]	; (8002278 <HAL_UART_RxCpltCallback+0x2ac>)
 8002220:	60da      	str	r2, [r3, #12]
						dp->write(dp, "page main");
 8002222:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <HAL_UART_RxCpltCallback+0x28c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002228:	4a0b      	ldr	r2, [pc, #44]	; (8002258 <HAL_UART_RxCpltCallback+0x28c>)
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	491b      	ldr	r1, [pc, #108]	; (800229c <HAL_UART_RxCpltCallback+0x2d0>)
 800222e:	4610      	mov	r0, r2
 8002230:	4798      	blx	r3
						dev->currentPage = DP_MAIN;
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_UART_RxCpltCallback+0x280>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
						nextion_print_page(dp);
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_UART_RxCpltCallback+0x28c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f000 fe59 	bl	8002ef8 <nextion_print_page>
					break;
 8002246:	e088      	b.n	800235a <HAL_UART_RxCpltCallback+0x38e>
 8002248:	40008000 	.word	0x40008000
 800224c:	20000020 	.word	0x20000020
 8002250:	20000024 	.word	0x20000024
 8002254:	40013800 	.word	0x40013800
 8002258:	20000030 	.word	0x20000030
 800225c:	2000002c 	.word	0x2000002c
 8002260:	421c0000 	.word	0x421c0000
 8002264:	3e4ccccd 	.word	0x3e4ccccd
 8002268:	00000000 	.word	0x00000000
 800226c:	43800000 	.word	0x43800000
 8002270:	c2700000 	.word	0xc2700000
 8002274:	42700000 	.word	0x42700000
 8002278:	200003fc 	.word	0x200003fc
 800227c:	0800cbf0 	.word	0x0800cbf0
 8002280:	0800cdb4 	.word	0x0800cdb4
 8002284:	0800cc08 	.word	0x0800cc08
 8002288:	0800cc14 	.word	0x0800cc14
 800228c:	0800cc1c 	.word	0x0800cc1c
 8002290:	0800cc28 	.word	0x0800cc28
 8002294:	20000494 	.word	0x20000494
 8002298:	0800cdc4 	.word	0x0800cdc4
 800229c:	0800cbe0 	.word	0x0800cbe0
					else if(dp->response.data == RFO_MODE_PLA) {
 80022a0:	4b9c      	ldr	r3, [pc, #624]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	789b      	ldrb	r3, [r3, #2]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d157      	bne.n	800235a <HAL_UART_RxCpltCallback+0x38e>
						PIDController_Init(pid, plaKp, plaKi, plaKd, SAMPLE_TIME, tau, limMin, limMax, limMinInt, limMaxInt);
 80022aa:	4b9b      	ldr	r3, [pc, #620]	; (8002518 <HAL_UART_RxCpltCallback+0x54c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
 80022b2:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 800251c <HAL_UART_RxCpltCallback+0x550>
 80022b6:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8002520 <HAL_UART_RxCpltCallback+0x554>
 80022ba:	ed9f 6a9a 	vldr	s12, [pc, #616]	; 8002524 <HAL_UART_RxCpltCallback+0x558>
 80022be:	eddf 5a9a 	vldr	s11, [pc, #616]	; 8002528 <HAL_UART_RxCpltCallback+0x55c>
 80022c2:	ed9f 5a9a 	vldr	s10, [pc, #616]	; 800252c <HAL_UART_RxCpltCallback+0x560>
 80022c6:	eddf 4a9a 	vldr	s9, [pc, #616]	; 8002530 <HAL_UART_RxCpltCallback+0x564>
 80022ca:	ed9f 4a9a 	vldr	s8, [pc, #616]	; 8002534 <HAL_UART_RxCpltCallback+0x568>
 80022ce:	eef0 3a64 	vmov.f32	s7, s9
 80022d2:	eeb0 3a45 	vmov.f32	s6, s10
 80022d6:	eef0 2a65 	vmov.f32	s5, s11
 80022da:	eeb0 2a46 	vmov.f32	s4, s12
 80022de:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 80022e2:	eeb0 1a66 	vmov.f32	s2, s13
 80022e6:	eef0 0a47 	vmov.f32	s1, s14
 80022ea:	eeb0 0a67 	vmov.f32	s0, s15
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 fee8 	bl	80030c4 <PIDController_Init>
						__HAL_TIM_SET_AUTORELOAD(&htim1, plaARR);
 80022f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022f8:	4b8f      	ldr	r3, [pc, #572]	; (8002538 <HAL_UART_RxCpltCallback+0x56c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80022fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002302:	461a      	mov	r2, r3
 8002304:	4b8c      	ldr	r3, [pc, #560]	; (8002538 <HAL_UART_RxCpltCallback+0x56c>)
 8002306:	60da      	str	r2, [r3, #12]
						dp->write(dp, "page mainPLA");
 8002308:	4b82      	ldr	r3, [pc, #520]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800230e:	4a81      	ldr	r2, [pc, #516]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	498a      	ldr	r1, [pc, #552]	; (800253c <HAL_UART_RxCpltCallback+0x570>)
 8002314:	4610      	mov	r0, r2
 8002316:	4798      	blx	r3
						dev->currentPage = DP_MAINPLA;
 8002318:	4b89      	ldr	r3, [pc, #548]	; (8002540 <HAL_UART_RxCpltCallback+0x574>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2205      	movs	r2, #5
 800231e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
						dev->targetTemp = plaTemp;
 8002322:	4b87      	ldr	r3, [pc, #540]	; (8002540 <HAL_UART_RxCpltCallback+0x574>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a87      	ldr	r2, [pc, #540]	; (8002544 <HAL_UART_RxCpltCallback+0x578>)
 8002328:	649a      	str	r2, [r3, #72]	; 0x48
						dp->write_id_float(dp, "plaTargetTemp", plaTemp);
 800232a:	4b7a      	ldr	r3, [pc, #488]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002330:	4a78      	ldr	r2, [pc, #480]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	eddf 7a84 	vldr	s15, [pc, #528]	; 8002548 <HAL_UART_RxCpltCallback+0x57c>
 8002338:	eeb0 0a67 	vmov.f32	s0, s15
 800233c:	4983      	ldr	r1, [pc, #524]	; (800254c <HAL_UART_RxCpltCallback+0x580>)
 800233e:	4610      	mov	r0, r2
 8002340:	4798      	blx	r3
						dp->write_id_float(dp, "t2", plaDuration);
 8002342:	4b74      	ldr	r3, [pc, #464]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002348:	4a72      	ldr	r2, [pc, #456]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	eddf 7a80 	vldr	s15, [pc, #512]	; 8002550 <HAL_UART_RxCpltCallback+0x584>
 8002350:	eeb0 0a67 	vmov.f32	s0, s15
 8002354:	497f      	ldr	r1, [pc, #508]	; (8002554 <HAL_UART_RxCpltCallback+0x588>)
 8002356:	4610      	mov	r0, r2
 8002358:	4798      	blx	r3
					break;
 800235a:	bf00      	nop
				break;
 800235c:	e0d6      	b.n	800250c <HAL_UART_RxCpltCallback+0x540>
					switch(dp->response.id) {
 800235e:	4b6d      	ldr	r3, [pc, #436]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	785b      	ldrb	r3, [r3, #1]
 8002364:	2b0f      	cmp	r3, #15
 8002366:	f040 80d3 	bne.w	8002510 <HAL_UART_RxCpltCallback+0x544>
						beep_IT(dev,3);
 800236a:	4b75      	ldr	r3, [pc, #468]	; (8002540 <HAL_UART_RxCpltCallback+0x574>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2103      	movs	r1, #3
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe fe33 	bl	8000fdc <beep_IT>
						HAL_TIM_Base_Stop_IT(&htim16);
 8002376:	4878      	ldr	r0, [pc, #480]	; (8002558 <HAL_UART_RxCpltCallback+0x58c>)
 8002378:	f004 fca4 	bl	8006cc4 <HAL_TIM_Base_Stop_IT>
						dev->currentReflowState = REFLOW_STATE_IDLE;
 800237c:	4b70      	ldr	r3, [pc, #448]	; (8002540 <HAL_UART_RxCpltCallback+0x574>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
						fsm->state = RFO_IDLE;
 8002386:	4b75      	ldr	r3, [pc, #468]	; (800255c <HAL_UART_RxCpltCallback+0x590>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2200      	movs	r2, #0
 800238c:	709a      	strb	r2, [r3, #2]
						dev->elaps = 0;
 800238e:	4b6c      	ldr	r3, [pc, #432]	; (8002540 <HAL_UART_RxCpltCallback+0x574>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2200      	movs	r2, #0
 8002394:	64da      	str	r2, [r3, #76]	; 0x4c
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002396:	4b68      	ldr	r3, [pc, #416]	; (8002538 <HAL_UART_RxCpltCallback+0x56c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2200      	movs	r2, #0
 800239c:	635a      	str	r2, [r3, #52]	; 0x34
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800239e:	4b66      	ldr	r3, [pc, #408]	; (8002538 <HAL_UART_RxCpltCallback+0x56c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2200      	movs	r2, #0
 80023a4:	639a      	str	r2, [r3, #56]	; 0x38
						dp->write(dp, "page main");
 80023a6:	4b5b      	ldr	r3, [pc, #364]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023ac:	4a59      	ldr	r2, [pc, #356]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	496b      	ldr	r1, [pc, #428]	; (8002560 <HAL_UART_RxCpltCallback+0x594>)
 80023b2:	4610      	mov	r0, r2
 80023b4:	4798      	blx	r3
						dev->currentPage = DP_MAIN;
 80023b6:	4b62      	ldr	r3, [pc, #392]	; (8002540 <HAL_UART_RxCpltCallback+0x574>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
						nextion_print_page(dp);
 80023c0:	4b54      	ldr	r3, [pc, #336]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 fd97 	bl	8002ef8 <nextion_print_page>
						break;
 80023ca:	bf00      	nop
					break;
 80023cc:	e0a0      	b.n	8002510 <HAL_UART_RxCpltCallback+0x544>
						switch(dp->response.id) {
 80023ce:	4b51      	ldr	r3, [pc, #324]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	785b      	ldrb	r3, [r3, #1]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d002      	beq.n	80023de <HAL_UART_RxCpltCallback+0x412>
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d038      	beq.n	800244e <HAL_UART_RxCpltCallback+0x482>
						break;
 80023dc:	e0cf      	b.n	800257e <HAL_UART_RxCpltCallback+0x5b2>
							beep_IT(dev,3);
 80023de:	4b58      	ldr	r3, [pc, #352]	; (8002540 <HAL_UART_RxCpltCallback+0x574>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2103      	movs	r1, #3
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe fdf9 	bl	8000fdc <beep_IT>
							dp->write(dp, "page filament");
 80023ea:	4b4a      	ldr	r3, [pc, #296]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023f0:	4a48      	ldr	r2, [pc, #288]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	495b      	ldr	r1, [pc, #364]	; (8002564 <HAL_UART_RxCpltCallback+0x598>)
 80023f6:	4610      	mov	r0, r2
 80023f8:	4798      	blx	r3
							dp->write_id_str(dp, "temp", "0");
 80023fa:	4b46      	ldr	r3, [pc, #280]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002400:	4a44      	ldr	r2, [pc, #272]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 8002402:	6810      	ldr	r0, [r2, #0]
 8002404:	4a58      	ldr	r2, [pc, #352]	; (8002568 <HAL_UART_RxCpltCallback+0x59c>)
 8002406:	4959      	ldr	r1, [pc, #356]	; (800256c <HAL_UART_RxCpltCallback+0x5a0>)
 8002408:	4798      	blx	r3
							dp->write_id_str(dp, "dur", "0");
 800240a:	4b42      	ldr	r3, [pc, #264]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002410:	4a40      	ldr	r2, [pc, #256]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 8002412:	6810      	ldr	r0, [r2, #0]
 8002414:	4a54      	ldr	r2, [pc, #336]	; (8002568 <HAL_UART_RxCpltCallback+0x59c>)
 8002416:	4956      	ldr	r1, [pc, #344]	; (8002570 <HAL_UART_RxCpltCallback+0x5a4>)
 8002418:	4798      	blx	r3
							dp->write_id_val(dp, "j0", 0);
 800241a:	4b3e      	ldr	r3, [pc, #248]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002420:	4a3c      	ldr	r2, [pc, #240]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 8002422:	6810      	ldr	r0, [r2, #0]
 8002424:	2200      	movs	r2, #0
 8002426:	4953      	ldr	r1, [pc, #332]	; (8002574 <HAL_UART_RxCpltCallback+0x5a8>)
 8002428:	4798      	blx	r3
							fsm->state = RFO_START;
 800242a:	4b4c      	ldr	r3, [pc, #304]	; (800255c <HAL_UART_RxCpltCallback+0x590>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2205      	movs	r2, #5
 8002430:	709a      	strb	r2, [r3, #2]
							dev->currentReflowState = REFLOW_STATE_PLA;
 8002432:	4b43      	ldr	r3, [pc, #268]	; (8002540 <HAL_UART_RxCpltCallback+0x574>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	220a      	movs	r2, #10
 8002438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
							dev->print = true;
 800243c:	4b40      	ldr	r3, [pc, #256]	; (8002540 <HAL_UART_RxCpltCallback+0x574>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
							HAL_TIM_Base_Start_IT(&htim16);
 8002446:	4844      	ldr	r0, [pc, #272]	; (8002558 <HAL_UART_RxCpltCallback+0x58c>)
 8002448:	f004 fbee 	bl	8006c28 <HAL_TIM_Base_Start_IT>
							break;
 800244c:	e013      	b.n	8002476 <HAL_UART_RxCpltCallback+0x4aa>
							beep_IT(dev,1);
 800244e:	4b3c      	ldr	r3, [pc, #240]	; (8002540 <HAL_UART_RxCpltCallback+0x574>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2101      	movs	r1, #1
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe fdc1 	bl	8000fdc <beep_IT>
							dp->write(dp, "page setting");
 800245a:	4b2e      	ldr	r3, [pc, #184]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002460:	4a2c      	ldr	r2, [pc, #176]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	4944      	ldr	r1, [pc, #272]	; (8002578 <HAL_UART_RxCpltCallback+0x5ac>)
 8002466:	4610      	mov	r0, r2
 8002468:	4798      	blx	r3
							dev->currentPage = DP_SETTINGS;
 800246a:	4b35      	ldr	r3, [pc, #212]	; (8002540 <HAL_UART_RxCpltCallback+0x574>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
							break;
 8002474:	bf00      	nop
						break;
 8002476:	e082      	b.n	800257e <HAL_UART_RxCpltCallback+0x5b2>
							switch(dp->response.id) {
 8002478:	4b26      	ldr	r3, [pc, #152]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	785b      	ldrb	r3, [r3, #1]
 800247e:	2b04      	cmp	r3, #4
 8002480:	d17c      	bne.n	800257c <HAL_UART_RxCpltCallback+0x5b0>
								beep_IT(dev,3);
 8002482:	4b2f      	ldr	r3, [pc, #188]	; (8002540 <HAL_UART_RxCpltCallback+0x574>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2103      	movs	r1, #3
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe fda7 	bl	8000fdc <beep_IT>
								HAL_TIM_Base_Stop_IT(&htim16);
 800248e:	4832      	ldr	r0, [pc, #200]	; (8002558 <HAL_UART_RxCpltCallback+0x58c>)
 8002490:	f004 fc18 	bl	8006cc4 <HAL_TIM_Base_Stop_IT>
								dev->currentReflowState = REFLOW_STATE_IDLE;
 8002494:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <HAL_UART_RxCpltCallback+0x574>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
								fsm->state = RFO_IDLE;
 800249e:	4b2f      	ldr	r3, [pc, #188]	; (800255c <HAL_UART_RxCpltCallback+0x590>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2200      	movs	r2, #0
 80024a4:	709a      	strb	r2, [r3, #2]
								dev->elaps = 0;
 80024a6:	4b26      	ldr	r3, [pc, #152]	; (8002540 <HAL_UART_RxCpltCallback+0x574>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2200      	movs	r2, #0
 80024ac:	64da      	str	r2, [r3, #76]	; 0x4c
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80024ae:	4b22      	ldr	r3, [pc, #136]	; (8002538 <HAL_UART_RxCpltCallback+0x56c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2200      	movs	r2, #0
 80024b4:	635a      	str	r2, [r3, #52]	; 0x34
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80024b6:	4b20      	ldr	r3, [pc, #128]	; (8002538 <HAL_UART_RxCpltCallback+0x56c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2200      	movs	r2, #0
 80024bc:	639a      	str	r2, [r3, #56]	; 0x38
								dp->write(dp, "page mainPLA");
 80024be:	4b15      	ldr	r3, [pc, #84]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024c4:	4a13      	ldr	r2, [pc, #76]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	491c      	ldr	r1, [pc, #112]	; (800253c <HAL_UART_RxCpltCallback+0x570>)
 80024ca:	4610      	mov	r0, r2
 80024cc:	4798      	blx	r3
								dev->currentPage = DP_MAINPLA;
 80024ce:	4b1c      	ldr	r3, [pc, #112]	; (8002540 <HAL_UART_RxCpltCallback+0x574>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2205      	movs	r2, #5
 80024d4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
								dp->write_id_float(dp, "plaTargetTemp", plaTemp);
 80024d8:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024de:	4a0d      	ldr	r2, [pc, #52]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 80024e0:	6812      	ldr	r2, [r2, #0]
 80024e2:	eddf 7a19 	vldr	s15, [pc, #100]	; 8002548 <HAL_UART_RxCpltCallback+0x57c>
 80024e6:	eeb0 0a67 	vmov.f32	s0, s15
 80024ea:	4918      	ldr	r1, [pc, #96]	; (800254c <HAL_UART_RxCpltCallback+0x580>)
 80024ec:	4610      	mov	r0, r2
 80024ee:	4798      	blx	r3
								dp->write_id_float(dp, "t2", plaDuration);
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024f6:	4a07      	ldr	r2, [pc, #28]	; (8002514 <HAL_UART_RxCpltCallback+0x548>)
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	eddf 7a15 	vldr	s15, [pc, #84]	; 8002550 <HAL_UART_RxCpltCallback+0x584>
 80024fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002502:	4914      	ldr	r1, [pc, #80]	; (8002554 <HAL_UART_RxCpltCallback+0x588>)
 8002504:	4610      	mov	r0, r2
 8002506:	4798      	blx	r3
								break;
 8002508:	bf00      	nop
							break;
 800250a:	e037      	b.n	800257c <HAL_UART_RxCpltCallback+0x5b0>
				break;
 800250c:	bf00      	nop
 800250e:	e036      	b.n	800257e <HAL_UART_RxCpltCallback+0x5b2>
					break;
 8002510:	bf00      	nop
 8002512:	e034      	b.n	800257e <HAL_UART_RxCpltCallback+0x5b2>
 8002514:	20000030 	.word	0x20000030
 8002518:	2000002c 	.word	0x2000002c
 800251c:	3951b717 	.word	0x3951b717
 8002520:	400ccccd 	.word	0x400ccccd
 8002524:	3e4ccccd 	.word	0x3e4ccccd
 8002528:	00000000 	.word	0x00000000
 800252c:	43800000 	.word	0x43800000
 8002530:	c2700000 	.word	0xc2700000
 8002534:	42700000 	.word	0x42700000
 8002538:	200003fc 	.word	0x200003fc
 800253c:	0800cdd4 	.word	0x0800cdd4
 8002540:	20000020 	.word	0x20000020
 8002544:	42340000 	.word	0x42340000
 8002548:	42340000 	.word	0x42340000
 800254c:	0800cde4 	.word	0x0800cde4
 8002550:	44160000 	.word	0x44160000
 8002554:	0800cdf4 	.word	0x0800cdf4
 8002558:	20000494 	.word	0x20000494
 800255c:	20000024 	.word	0x20000024
 8002560:	0800cbe0 	.word	0x0800cbe0
 8002564:	0800cdf8 	.word	0x0800cdf8
 8002568:	0800ce08 	.word	0x0800ce08
 800256c:	0800ce0c 	.word	0x0800ce0c
 8002570:	0800ce14 	.word	0x0800ce14
 8002574:	0800cbdc 	.word	0x0800cbdc
 8002578:	0800cdc4 	.word	0x0800cdc4
							break;
 800257c:	bf00      	nop
		HAL_UART_Receive_IT(&huart1, dp->rcv, 4);
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_UART_RxCpltCallback+0x5cc>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	3308      	adds	r3, #8
 8002584:	2204      	movs	r2, #4
 8002586:	4619      	mov	r1, r3
 8002588:	4804      	ldr	r0, [pc, #16]	; (800259c <HAL_UART_RxCpltCallback+0x5d0>)
 800258a:	f005 fd47 	bl	800801c <HAL_UART_Receive_IT>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000030 	.word	0x20000030
 800259c:	20000308 	.word	0x20000308

080025a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM17) {
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a90      	ldr	r2, [pc, #576]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d13e      	bne.n	8002630 <HAL_TIM_PeriodElapsedCallback+0x90>

		if(dev->cntBeeps == 2*dev->numBeeps-1) {
 80025b2:	4b90      	ldr	r3, [pc, #576]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b8d      	ldr	r3, [pc, #564]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	3b01      	subs	r3, #1
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d110      	bne.n	80025ee <HAL_TIM_PeriodElapsedCallback+0x4e>
			__HAL_TIM_SET_COMPARE(dev->buzPwmTim, TIM_CHANNEL_1, 0);
 80025cc:	4b89      	ldr	r3, [pc, #548]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2200      	movs	r2, #0
 80025d6:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_Base_Stop_IT(dev->buzElapsTim);
 80025d8:	4b86      	ldr	r3, [pc, #536]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025de:	4618      	mov	r0, r3
 80025e0:	f004 fb70 	bl	8006cc4 <HAL_TIM_Base_Stop_IT>
			dev->cntBeeps = 0;
 80025e4:	4b83      	ldr	r3, [pc, #524]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		}

		if(dev->cntBeeps % 2) {
 80025ee:	4b81      	ldr	r3, [pc, #516]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d006      	beq.n	800260e <HAL_TIM_PeriodElapsedCallback+0x6e>
			__HAL_TIM_SET_COMPARE(dev->buzPwmTim, TIM_CHANNEL_1, 2);
 8002600:	4b7c      	ldr	r3, [pc, #496]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2202      	movs	r2, #2
 800260a:	635a      	str	r2, [r3, #52]	; 0x34
 800260c:	e005      	b.n	800261a <HAL_TIM_PeriodElapsedCallback+0x7a>
		}
		else {
			__HAL_TIM_SET_COMPARE(dev->buzPwmTim, TIM_CHANNEL_1, 0);
 800260e:	4b79      	ldr	r3, [pc, #484]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2200      	movs	r2, #0
 8002618:	635a      	str	r2, [r3, #52]	; 0x34
		}

		dev->cntBeeps += 1;
 800261a:	4b76      	ldr	r3, [pc, #472]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8002622:	4b74      	ldr	r3, [pc, #464]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	3201      	adds	r2, #1
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

		dev->dataRdy = true;

	}

}
 800262e:	e321      	b.n	8002c74 <HAL_TIM_PeriodElapsedCallback+0x6d4>
	else if(htim->Instance == TIM16) {
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a70      	ldr	r2, [pc, #448]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002636:	4293      	cmp	r3, r2
 8002638:	f040 831c 	bne.w	8002c74 <HAL_TIM_PeriodElapsedCallback+0x6d4>
		MAX31855_read_celsius(tempSens);
 800263c:	4b6f      	ldr	r3, [pc, #444]	; (80027fc <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fc39 	bl	8000eb8 <MAX31855_read_celsius>
		dev->elaps += 1;
 8002646:	4b6b      	ldr	r3, [pc, #428]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800264c:	4b69      	ldr	r3, [pc, #420]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	3201      	adds	r2, #1
 8002652:	64da      	str	r2, [r3, #76]	; 0x4c
		dev->temp = tempSens->temp;
 8002654:	4b69      	ldr	r3, [pc, #420]	; (80027fc <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b66      	ldr	r3, [pc, #408]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6992      	ldr	r2, [r2, #24]
 800265e:	655a      	str	r2, [r3, #84]	; 0x54
		switch(dev->currentReflowState){
 8002660:	4b64      	ldr	r3, [pc, #400]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002668:	2b0a      	cmp	r3, #10
 800266a:	f200 82b8 	bhi.w	8002bde <HAL_TIM_PeriodElapsedCallback+0x63e>
 800266e:	a201      	add	r2, pc, #4	; (adr r2, 8002674 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002674:	08002bdf 	.word	0x08002bdf
 8002678:	08002bdf 	.word	0x08002bdf
 800267c:	080027af 	.word	0x080027af
 8002680:	0800283d 	.word	0x0800283d
 8002684:	080028d9 	.word	0x080028d9
 8002688:	0800297d 	.word	0x0800297d
 800268c:	08002a19 	.word	0x08002a19
 8002690:	08002af5 	.word	0x08002af5
 8002694:	08002bdf 	.word	0x08002bdf
 8002698:	08002bdf 	.word	0x08002bdf
 800269c:	080026a1 	.word	0x080026a1
			dev->targetTemp = plaTemp;
 80026a0:	4b54      	ldr	r3, [pc, #336]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a56      	ldr	r2, [pc, #344]	; (8002800 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80026a6:	649a      	str	r2, [r3, #72]	; 0x48
			dp->write_id_float(dp, "temp", tempSens->temp);
 80026a8:	4b56      	ldr	r3, [pc, #344]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026ae:	4a55      	ldr	r2, [pc, #340]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80026b0:	6810      	ldr	r0, [r2, #0]
 80026b2:	4a52      	ldr	r2, [pc, #328]	; (80027fc <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80026b4:	6812      	ldr	r2, [r2, #0]
 80026b6:	edd2 7a06 	vldr	s15, [r2, #24]
 80026ba:	eeb0 0a67 	vmov.f32	s0, s15
 80026be:	4952      	ldr	r1, [pc, #328]	; (8002808 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80026c0:	4798      	blx	r3
			dp->write_id_float(dp, "pidVal", pid->out);
 80026c2:	4b50      	ldr	r3, [pc, #320]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026c8:	4a4e      	ldr	r2, [pc, #312]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80026ca:	6810      	ldr	r0, [r2, #0]
 80026cc:	4a4f      	ldr	r2, [pc, #316]	; (800280c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80026d4:	eeb0 0a67 	vmov.f32	s0, s15
 80026d8:	494d      	ldr	r1, [pc, #308]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80026da:	4798      	blx	r3
			if(!(dev->elaps % 2)) {
 80026dc:	4b45      	ldr	r3, [pc, #276]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d116      	bne.n	8002718 <HAL_TIM_PeriodElapsedCallback+0x178>
				int num = dev->elaps/2;
 80026ea:	4b42      	ldr	r3, [pc, #264]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f0:	085b      	lsrs	r3, r3, #1
 80026f2:	60fb      	str	r3, [r7, #12]
				sprintf(dev->trm, "%d", num);
 80026f4:	4b3f      	ldr	r3, [pc, #252]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	3318      	adds	r3, #24
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4945      	ldr	r1, [pc, #276]	; (8002814 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80026fe:	4618      	mov	r0, r3
 8002700:	f007 ffb4 	bl	800a66c <siprintf>
				dp->write_id_str(dp, "dur", dev->trm);
 8002704:	4b3f      	ldr	r3, [pc, #252]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270a:	4a3e      	ldr	r2, [pc, #248]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800270c:	6810      	ldr	r0, [r2, #0]
 800270e:	4a39      	ldr	r2, [pc, #228]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002710:	6812      	ldr	r2, [r2, #0]
 8002712:	3218      	adds	r2, #24
 8002714:	4940      	ldr	r1, [pc, #256]	; (8002818 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002716:	4798      	blx	r3
			if(dev->elaps == 28800) {
 8002718:	4b36      	ldr	r3, [pc, #216]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
 8002722:	f040 8251 	bne.w	8002bc8 <HAL_TIM_PeriodElapsedCallback+0x628>
				beep_IT(dev,3);
 8002726:	4b33      	ldr	r3, [pc, #204]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2103      	movs	r1, #3
 800272c:	4618      	mov	r0, r3
 800272e:	f7fe fc55 	bl	8000fdc <beep_IT>
				HAL_TIM_Base_Stop_IT(&htim16);
 8002732:	483a      	ldr	r0, [pc, #232]	; (800281c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002734:	f004 fac6 	bl	8006cc4 <HAL_TIM_Base_Stop_IT>
				dev->currentReflowState = REFLOW_STATE_IDLE;
 8002738:	4b2e      	ldr	r3, [pc, #184]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				fsm->state = RFO_IDLE;
 8002742:	4b37      	ldr	r3, [pc, #220]	; (8002820 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2200      	movs	r2, #0
 8002748:	709a      	strb	r2, [r3, #2]
				dev->elaps = 0;
 800274a:	4b2a      	ldr	r3, [pc, #168]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2200      	movs	r2, #0
 8002750:	64da      	str	r2, [r3, #76]	; 0x4c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002752:	4b34      	ldr	r3, [pc, #208]	; (8002824 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2200      	movs	r2, #0
 8002758:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800275a:	4b32      	ldr	r3, [pc, #200]	; (8002824 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2200      	movs	r2, #0
 8002760:	639a      	str	r2, [r3, #56]	; 0x38
				dp->write(dp, "page mainPLA");
 8002762:	4b28      	ldr	r3, [pc, #160]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002768:	4a26      	ldr	r2, [pc, #152]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	492e      	ldr	r1, [pc, #184]	; (8002828 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800276e:	4610      	mov	r0, r2
 8002770:	4798      	blx	r3
				dev->currentPage = DP_MAINPLA;
 8002772:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2205      	movs	r2, #5
 8002778:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				dp->write_id_float(dp, "plaTargetTemp", plaTemp);
 800277c:	4b21      	ldr	r3, [pc, #132]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002782:	4a20      	ldr	r2, [pc, #128]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002784:	6812      	ldr	r2, [r2, #0]
 8002786:	eddf 7a29 	vldr	s15, [pc, #164]	; 800282c <HAL_TIM_PeriodElapsedCallback+0x28c>
 800278a:	eeb0 0a67 	vmov.f32	s0, s15
 800278e:	4928      	ldr	r1, [pc, #160]	; (8002830 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002790:	4610      	mov	r0, r2
 8002792:	4798      	blx	r3
				dp->write_id_float(dp, "t2", plaDuration);
 8002794:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800279a:	4a1a      	ldr	r2, [pc, #104]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	eddf 7a25 	vldr	s15, [pc, #148]	; 8002834 <HAL_TIM_PeriodElapsedCallback+0x294>
 80027a2:	eeb0 0a67 	vmov.f32	s0, s15
 80027a6:	4924      	ldr	r1, [pc, #144]	; (8002838 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80027a8:	4610      	mov	r0, r2
 80027aa:	4798      	blx	r3
				break;
 80027ac:	e217      	b.n	8002bde <HAL_TIM_PeriodElapsedCallback+0x63e>
			dev->targetTemp = 256;
 80027ae:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f04f 4287 	mov.w	r2, #1132462080	; 0x43800000
 80027b6:	649a      	str	r2, [r3, #72]	; 0x48
			if(dev->temp > PREHEAT_START_TEMP) {
 80027b8:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80027c0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80027c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027cc:	dc00      	bgt.n	80027d0 <HAL_TIM_PeriodElapsedCallback+0x230>
			break;
 80027ce:	e206      	b.n	8002bde <HAL_TIM_PeriodElapsedCallback+0x63e>
				beep_IT(dev,2);
 80027d0:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2102      	movs	r1, #2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe fc00 	bl	8000fdc <beep_IT>
				dev->currentReflowState = REFLOW_STATE_PREHEAT;
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2203      	movs	r2, #3
 80027e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				dev->elaps = 0;
 80027e6:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2200      	movs	r2, #0
 80027ec:	64da      	str	r2, [r3, #76]	; 0x4c
			break;
 80027ee:	e1f6      	b.n	8002bde <HAL_TIM_PeriodElapsedCallback+0x63e>
 80027f0:	40014800 	.word	0x40014800
 80027f4:	20000020 	.word	0x20000020
 80027f8:	40014400 	.word	0x40014400
 80027fc:	20000028 	.word	0x20000028
 8002800:	42340000 	.word	0x42340000
 8002804:	20000030 	.word	0x20000030
 8002808:	0800ce0c 	.word	0x0800ce0c
 800280c:	2000002c 	.word	0x2000002c
 8002810:	0800ce18 	.word	0x0800ce18
 8002814:	0800ce20 	.word	0x0800ce20
 8002818:	0800ce14 	.word	0x0800ce14
 800281c:	20000494 	.word	0x20000494
 8002820:	20000024 	.word	0x20000024
 8002824:	200003fc 	.word	0x200003fc
 8002828:	0800cdd4 	.word	0x0800cdd4
 800282c:	42340000 	.word	0x42340000
 8002830:	0800cde4 	.word	0x0800cde4
 8002834:	44160000 	.word	0x44160000
 8002838:	0800cdf4 	.word	0x0800cdf4
			dp->write_id_str(dp, "reflowState", "PREHEAT");
 800283c:	4b9d      	ldr	r3, [pc, #628]	; (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x514>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002842:	4a9c      	ldr	r2, [pc, #624]	; (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x514>)
 8002844:	6810      	ldr	r0, [r2, #0]
 8002846:	4a9c      	ldr	r2, [pc, #624]	; (8002ab8 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8002848:	499c      	ldr	r1, [pc, #624]	; (8002abc <HAL_TIM_PeriodElapsedCallback+0x51c>)
 800284a:	4798      	blx	r3
			if(!(dev->elaps % 4) || dev->elaps == 1) {
 800284c:	4b9c      	ldr	r3, [pc, #624]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d004      	beq.n	8002864 <HAL_TIM_PeriodElapsedCallback+0x2c4>
 800285a:	4b99      	ldr	r3, [pc, #612]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002860:	2b01      	cmp	r3, #1
 8002862:	d116      	bne.n	8002892 <HAL_TIM_PeriodElapsedCallback+0x2f2>
				dev->targetTemp = (float)PREHEAT_START_TEMP + (PREHEAT_TEMP_INCREASE*SAMPLE_TIME)*dev->elaps;
 8002864:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8002ac4 <HAL_TIM_PeriodElapsedCallback+0x524>
 8002868:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800286c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002870:	4b93      	ldr	r3, [pc, #588]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002876:	ee07 3a90 	vmov	s15, r3
 800287a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800287e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002882:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002886:	4b8e      	ldr	r3, [pc, #568]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800288e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			if(dev->elaps == (float)PREHEAT_DURATION/SAMPLE_TIME) {
 8002892:	4b8b      	ldr	r3, [pc, #556]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002898:	ee07 3a90 	vmov	s15, r3
 800289c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028a0:	ed9f 6a89 	vldr	s12, [pc, #548]	; 8002ac8 <HAL_TIM_PeriodElapsedCallback+0x528>
 80028a4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80028a8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80028ac:	eeb4 7a67 	vcmp.f32	s14, s15
 80028b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b4:	f040 818a 	bne.w	8002bcc <HAL_TIM_PeriodElapsedCallback+0x62c>
				beep_IT(dev,2);
 80028b8:	4b81      	ldr	r3, [pc, #516]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2102      	movs	r1, #2
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fe fb8c 	bl	8000fdc <beep_IT>
				dev->currentReflowState = REFLOW_STATE_SOAK;
 80028c4:	4b7e      	ldr	r3, [pc, #504]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2204      	movs	r2, #4
 80028ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				dev->elaps = 0;
 80028ce:	4b7c      	ldr	r3, [pc, #496]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2200      	movs	r2, #0
 80028d4:	64da      	str	r2, [r3, #76]	; 0x4c
			break;
 80028d6:	e179      	b.n	8002bcc <HAL_TIM_PeriodElapsedCallback+0x62c>
			dp->write_id_str(dp, "reflowState", "SOAK");
 80028d8:	4b76      	ldr	r3, [pc, #472]	; (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x514>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028de:	4a75      	ldr	r2, [pc, #468]	; (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x514>)
 80028e0:	6810      	ldr	r0, [r2, #0]
 80028e2:	4a7a      	ldr	r2, [pc, #488]	; (8002acc <HAL_TIM_PeriodElapsedCallback+0x52c>)
 80028e4:	4975      	ldr	r1, [pc, #468]	; (8002abc <HAL_TIM_PeriodElapsedCallback+0x51c>)
 80028e6:	4798      	blx	r3
			if(!(dev->elaps % 4) || dev->elaps == 1) {
 80028e8:	4b75      	ldr	r3, [pc, #468]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d004      	beq.n	8002900 <HAL_TIM_PeriodElapsedCallback+0x360>
 80028f6:	4b72      	ldr	r3, [pc, #456]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d116      	bne.n	800292e <HAL_TIM_PeriodElapsedCallback+0x38e>
				dev->targetTemp = (float)SOAK_START_TEMP + (SOAK_TEMP_INCREASE*SAMPLE_TIME)*dev->elaps;
 8002900:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002ad0 <HAL_TIM_PeriodElapsedCallback+0x530>
 8002904:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002908:	ee27 7a27 	vmul.f32	s14, s14, s15
 800290c:	4b6c      	ldr	r3, [pc, #432]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002912:	ee07 3a90 	vmov	s15, r3
 8002916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800291a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800291e:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002ac8 <HAL_TIM_PeriodElapsedCallback+0x528>
 8002922:	4b67      	ldr	r3, [pc, #412]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	ee77 7a87 	vadd.f32	s15, s15, s14
 800292a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			if(dev->elaps == (float)SOAK_DURATION/SAMPLE_TIME) {
 800292e:	4b64      	ldr	r3, [pc, #400]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002934:	ee07 3a90 	vmov	s15, r3
 8002938:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800293c:	ed9f 6a62 	vldr	s12, [pc, #392]	; 8002ac8 <HAL_TIM_PeriodElapsedCallback+0x528>
 8002940:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002944:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002948:	eeb4 7a67 	vcmp.f32	s14, s15
 800294c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002950:	f040 813e 	bne.w	8002bd0 <HAL_TIM_PeriodElapsedCallback+0x630>
				beep_IT(dev,2);
 8002954:	4b5a      	ldr	r3, [pc, #360]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2102      	movs	r1, #2
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe fb3e 	bl	8000fdc <beep_IT>
				dev->currentReflowState = REFLOW_STATE_RAMP;
 8002960:	4b57      	ldr	r3, [pc, #348]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2205      	movs	r2, #5
 8002966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				dev->elaps = 0;
 800296a:	4b55      	ldr	r3, [pc, #340]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2200      	movs	r2, #0
 8002970:	64da      	str	r2, [r3, #76]	; 0x4c
				pid->Kp = 50;
 8002972:	4b58      	ldr	r3, [pc, #352]	; (8002ad4 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a58      	ldr	r2, [pc, #352]	; (8002ad8 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8002978:	601a      	str	r2, [r3, #0]
			break;
 800297a:	e129      	b.n	8002bd0 <HAL_TIM_PeriodElapsedCallback+0x630>
			dp->write_id_str(dp, "reflowState", "RAMP");
 800297c:	4b4d      	ldr	r3, [pc, #308]	; (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x514>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002982:	4a4c      	ldr	r2, [pc, #304]	; (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x514>)
 8002984:	6810      	ldr	r0, [r2, #0]
 8002986:	4a55      	ldr	r2, [pc, #340]	; (8002adc <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8002988:	494c      	ldr	r1, [pc, #304]	; (8002abc <HAL_TIM_PeriodElapsedCallback+0x51c>)
 800298a:	4798      	blx	r3
			if(!(dev->elaps % 4) || dev->elaps == 1) {
 800298c:	4b4c      	ldr	r3, [pc, #304]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d004      	beq.n	80029a4 <HAL_TIM_PeriodElapsedCallback+0x404>
 800299a:	4b49      	ldr	r3, [pc, #292]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d116      	bne.n	80029d2 <HAL_TIM_PeriodElapsedCallback+0x432>
				dev->targetTemp = (float)RAMP_START_TEMP + (RAMP_TEMP_INCREASE*SAMPLE_TIME)*dev->elaps;
 80029a4:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002ae0 <HAL_TIM_PeriodElapsedCallback+0x540>
 80029a8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80029ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029b0:	4b43      	ldr	r3, [pc, #268]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b6:	ee07 3a90 	vmov	s15, r3
 80029ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029c2:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002ae4 <HAL_TIM_PeriodElapsedCallback+0x544>
 80029c6:	4b3e      	ldr	r3, [pc, #248]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029ce:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			if(dev->elaps == (float)RAMP_DURATION/SAMPLE_TIME) {
 80029d2:	4b3b      	ldr	r3, [pc, #236]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d8:	ee07 3a90 	vmov	s15, r3
 80029dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029e0:	eeb3 6a0e 	vmov.f32	s12, #62	; 0x41f00000  30.0
 80029e4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80029e8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80029ec:	eeb4 7a67 	vcmp.f32	s14, s15
 80029f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f4:	f040 80ee 	bne.w	8002bd4 <HAL_TIM_PeriodElapsedCallback+0x634>
				beep_IT(dev,2);
 80029f8:	4b31      	ldr	r3, [pc, #196]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2102      	movs	r1, #2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fe faec 	bl	8000fdc <beep_IT>
				dev->currentReflowState = REFLOW_STATE_REFLOW;
 8002a04:	4b2e      	ldr	r3, [pc, #184]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2206      	movs	r2, #6
 8002a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				dev->elaps = 0;
 8002a0e:	4b2c      	ldr	r3, [pc, #176]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2200      	movs	r2, #0
 8002a14:	64da      	str	r2, [r3, #76]	; 0x4c
			break;
 8002a16:	e0dd      	b.n	8002bd4 <HAL_TIM_PeriodElapsedCallback+0x634>
			dp->write_id_str(dp, "reflowState", "REFLOW");
 8002a18:	4b26      	ldr	r3, [pc, #152]	; (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x514>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1e:	4a25      	ldr	r2, [pc, #148]	; (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x514>)
 8002a20:	6810      	ldr	r0, [r2, #0]
 8002a22:	4a31      	ldr	r2, [pc, #196]	; (8002ae8 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002a24:	4925      	ldr	r1, [pc, #148]	; (8002abc <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8002a26:	4798      	blx	r3
			if(!(dev->elaps % 4) || dev->elaps == 1) {
 8002a28:	4b25      	ldr	r3, [pc, #148]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d004      	beq.n	8002a40 <HAL_TIM_PeriodElapsedCallback+0x4a0>
 8002a36:	4b22      	ldr	r3, [pc, #136]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d116      	bne.n	8002a6e <HAL_TIM_PeriodElapsedCallback+0x4ce>
				dev->targetTemp = REFLOW_START_TEMP + (REFLOW_TEMP_INCREASE*SAMPLE_TIME)*dev->elaps;
 8002a40:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002aec <HAL_TIM_PeriodElapsedCallback+0x54c>
 8002a44:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002a48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a4c:	4b1c      	ldr	r3, [pc, #112]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a52:	ee07 3a90 	vmov	s15, r3
 8002a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a5e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002af0 <HAL_TIM_PeriodElapsedCallback+0x550>
 8002a62:	4b17      	ldr	r3, [pc, #92]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a6a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			if(dev->elaps == REFLOW_DURATION/SAMPLE_TIME) {
 8002a6e:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a74:	ee07 3a90 	vmov	s15, r3
 8002a78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a7c:	eeb3 6a0e 	vmov.f32	s12, #62	; 0x41f00000  30.0
 8002a80:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002a84:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002a88:	eeb4 7a67 	vcmp.f32	s14, s15
 8002a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a90:	f040 80a2 	bne.w	8002bd8 <HAL_TIM_PeriodElapsedCallback+0x638>
				beep_IT(dev,2);
 8002a94:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2102      	movs	r1, #2
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe fa9e 	bl	8000fdc <beep_IT>
				dev->currentReflowState = REFLOW_STATE_COOL;
 8002aa0:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2207      	movs	r2, #7
 8002aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				dev->elaps = 0;
 8002aaa:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	64da      	str	r2, [r3, #76]	; 0x4c
			break;
 8002ab2:	e091      	b.n	8002bd8 <HAL_TIM_PeriodElapsedCallback+0x638>
 8002ab4:	20000030 	.word	0x20000030
 8002ab8:	0800ce24 	.word	0x0800ce24
 8002abc:	0800cc1c 	.word	0x0800cc1c
 8002ac0:	20000020 	.word	0x20000020
 8002ac4:	3f2aaaab 	.word	0x3f2aaaab
 8002ac8:	42b40000 	.word	0x42b40000
 8002acc:	0800ce2c 	.word	0x0800ce2c
 8002ad0:	3ee38e39 	.word	0x3ee38e39
 8002ad4:	2000002c 	.word	0x2000002c
 8002ad8:	42480000 	.word	0x42480000
 8002adc:	0800ce34 	.word	0x0800ce34
 8002ae0:	3e888889 	.word	0x3e888889
 8002ae4:	43020000 	.word	0x43020000
 8002ae8:	0800ce3c 	.word	0x0800ce3c
 8002aec:	3f666666 	.word	0x3f666666
 8002af0:	430a0000 	.word	0x430a0000
			dp->write_id_str(dp, "reflowState", "COOL");
 8002af4:	4b61      	ldr	r3, [pc, #388]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afa:	4a60      	ldr	r2, [pc, #384]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8002afc:	6810      	ldr	r0, [r2, #0]
 8002afe:	4a60      	ldr	r2, [pc, #384]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8002b00:	4960      	ldr	r1, [pc, #384]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8002b02:	4798      	blx	r3
			if(!(dev->elaps % 4) || dev->elaps == 1) {
 8002b04:	4b60      	ldr	r3, [pc, #384]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d004      	beq.n	8002b1c <HAL_TIM_PeriodElapsedCallback+0x57c>
 8002b12:	4b5d      	ldr	r3, [pc, #372]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d116      	bne.n	8002b4a <HAL_TIM_PeriodElapsedCallback+0x5aa>
				dev->targetTemp = REFLOW_END_TEMP - (COOL_TEMP_DECREASE*SAMPLE_TIME)*dev->elaps;
 8002b1c:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8002c8c <HAL_TIM_PeriodElapsedCallback+0x6ec>
 8002b20:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8002c90 <HAL_TIM_PeriodElapsedCallback+0x6f0>
 8002b24:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002b28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b2c:	4b56      	ldr	r3, [pc, #344]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b32:	ee07 3a90 	vmov	s15, r3
 8002b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b3e:	4b52      	ldr	r3, [pc, #328]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002b46:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			if(dev->elaps == (float)COOL_DURATION/SAMPLE_TIME) {
 8002b4a:	4b4f      	ldr	r3, [pc, #316]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b50:	ee07 3a90 	vmov	s15, r3
 8002b54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b58:	eeb3 6a0e 	vmov.f32	s12, #62	; 0x41f00000  30.0
 8002b5c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002b60:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002b64:	eeb4 7a67 	vcmp.f32	s14, s15
 8002b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b6c:	d136      	bne.n	8002bdc <HAL_TIM_PeriodElapsedCallback+0x63c>
				HAL_TIM_Base_Stop_IT(&htim16);
 8002b6e:	4849      	ldr	r0, [pc, #292]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8002b70:	f004 f8a8 	bl	8006cc4 <HAL_TIM_Base_Stop_IT>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002b74:	4b48      	ldr	r3, [pc, #288]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002b7c:	4b46      	ldr	r3, [pc, #280]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2200      	movs	r2, #0
 8002b82:	639a      	str	r2, [r3, #56]	; 0x38
				beep_IT(dev,5);
 8002b84:	4b40      	ldr	r3, [pc, #256]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2105      	movs	r1, #5
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe fa26 	bl	8000fdc <beep_IT>
				dev->currentReflowState = REFLOW_STATE_IDLE;
 8002b90:	4b3d      	ldr	r3, [pc, #244]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				dev->elaps = 0;
 8002b9a:	4b3b      	ldr	r3, [pc, #236]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	64da      	str	r2, [r3, #76]	; 0x4c
				dp->write(dp, "page main");
 8002ba2:	4b36      	ldr	r3, [pc, #216]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ba8:	4a34      	ldr	r2, [pc, #208]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	493b      	ldr	r1, [pc, #236]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8002bae:	4610      	mov	r0, r2
 8002bb0:	4798      	blx	r3
				dev->currentPage = DP_MAIN;
 8002bb2:	4b35      	ldr	r3, [pc, #212]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				nextion_print_page(dp);
 8002bbc:	4b2f      	ldr	r3, [pc, #188]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 f999 	bl	8002ef8 <nextion_print_page>
			break;
 8002bc6:	e009      	b.n	8002bdc <HAL_TIM_PeriodElapsedCallback+0x63c>
			break;
 8002bc8:	bf00      	nop
 8002bca:	e008      	b.n	8002bde <HAL_TIM_PeriodElapsedCallback+0x63e>
			break;
 8002bcc:	bf00      	nop
 8002bce:	e006      	b.n	8002bde <HAL_TIM_PeriodElapsedCallback+0x63e>
			break;
 8002bd0:	bf00      	nop
 8002bd2:	e004      	b.n	8002bde <HAL_TIM_PeriodElapsedCallback+0x63e>
			break;
 8002bd4:	bf00      	nop
 8002bd6:	e002      	b.n	8002bde <HAL_TIM_PeriodElapsedCallback+0x63e>
			break;
 8002bd8:	bf00      	nop
 8002bda:	e000      	b.n	8002bde <HAL_TIM_PeriodElapsedCallback+0x63e>
			break;
 8002bdc:	bf00      	nop
		if(dev->currentReflowState != REFLOW_STATE_IDLE && dev->currentReflowState != REFLOW_STATE_PLA) {
 8002bde:	4b2a      	ldr	r3, [pc, #168]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d03f      	beq.n	8002c6a <HAL_TIM_PeriodElapsedCallback+0x6ca>
 8002bea:	4b27      	ldr	r3, [pc, #156]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bf2:	2b0a      	cmp	r3, #10
 8002bf4:	d039      	beq.n	8002c6a <HAL_TIM_PeriodElapsedCallback+0x6ca>
			dp->write_id_float(dp, "targetTemp", dev->targetTemp);
 8002bf6:	4b21      	ldr	r3, [pc, #132]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bfc:	4a1f      	ldr	r2, [pc, #124]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8002bfe:	6810      	ldr	r0, [r2, #0]
 8002c00:	4a21      	ldr	r2, [pc, #132]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	edd2 7a12 	vldr	s15, [r2, #72]	; 0x48
 8002c08:	eeb0 0a67 	vmov.f32	s0, s15
 8002c0c:	4924      	ldr	r1, [pc, #144]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8002c0e:	4798      	blx	r3
			dp->write_id_float(dp, "currentTemp", dev->temp);
 8002c10:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c16:	4a19      	ldr	r2, [pc, #100]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8002c18:	6810      	ldr	r0, [r2, #0]
 8002c1a:	4a1b      	ldr	r2, [pc, #108]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8002c1c:	6812      	ldr	r2, [r2, #0]
 8002c1e:	edd2 7a15 	vldr	s15, [r2, #84]	; 0x54
 8002c22:	eeb0 0a67 	vmov.f32	s0, s15
 8002c26:	491f      	ldr	r1, [pc, #124]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8002c28:	4798      	blx	r3
			dp->write_id_float(dp, "tempDiff", dev->targetTemp-dev->temp);
 8002c2a:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c30:	4a12      	ldr	r2, [pc, #72]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8002c32:	6810      	ldr	r0, [r2, #0]
 8002c34:	4a14      	ldr	r2, [pc, #80]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	ed92 7a12 	vldr	s14, [r2, #72]	; 0x48
 8002c3c:	4a12      	ldr	r2, [pc, #72]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	edd2 7a15 	vldr	s15, [r2, #84]	; 0x54
 8002c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c48:	eeb0 0a67 	vmov.f32	s0, s15
 8002c4c:	4916      	ldr	r1, [pc, #88]	; (8002ca8 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8002c4e:	4798      	blx	r3
			dp->write_id_float(dp, "pidVal", pid->out);
 8002c50:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c56:	4a09      	ldr	r2, [pc, #36]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8002c58:	6810      	ldr	r0, [r2, #0]
 8002c5a:	4a14      	ldr	r2, [pc, #80]	; (8002cac <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8002c5c:	6812      	ldr	r2, [r2, #0]
 8002c5e:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8002c62:	eeb0 0a67 	vmov.f32	s0, s15
 8002c66:	4912      	ldr	r1, [pc, #72]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8002c68:	4798      	blx	r3
		dev->dataRdy = true;
 8002c6a:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8002c74:	bf00      	nop
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20000030 	.word	0x20000030
 8002c80:	0800ce44 	.word	0x0800ce44
 8002c84:	0800cc1c 	.word	0x0800cc1c
 8002c88:	20000020 	.word	0x20000020
 8002c8c:	43250000 	.word	0x43250000
 8002c90:	3f666666 	.word	0x3f666666
 8002c94:	20000494 	.word	0x20000494
 8002c98:	200003fc 	.word	0x200003fc
 8002c9c:	0800cbe0 	.word	0x0800cbe0
 8002ca0:	0800ce4c 	.word	0x0800ce4c
 8002ca4:	0800ce58 	.word	0x0800ce58
 8002ca8:	0800ce64 	.word	0x0800ce64
 8002cac:	2000002c 	.word	0x2000002c
 8002cb0:	0800ce18 	.word	0x0800ce18

08002cb4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cb8:	b672      	cpsid	i
}
 8002cba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002cbc:	e7fe      	b.n	8002cbc <Error_Handler+0x8>
	...

08002cc0 <nextion_send_str_to_id>:
#include "main.h"
#include "nextion.h"

const uint8_t nxEnd[3] = {0xFF,0xFF,0xFF};

int nextion_send_str_to_id(nextion_t* dp, char* id, char* msg) {
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]

	int len = sprintf(dp->trm, "%s.txt=\"%s\"",id,msg);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f103 003a 	add.w	r0, r3, #58	; 0x3a
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	4914      	ldr	r1, [pc, #80]	; (8002d28 <nextion_send_str_to_id+0x68>)
 8002cd8:	f007 fcc8 	bl	800a66c <siprintf>
 8002cdc:	6178      	str	r0, [r7, #20]

	if(HAL_UART_Transmit(dp->uart, (uint8_t*)dp->trm, len, 1000) != HAL_OK) {
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6858      	ldr	r0, [r3, #4]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f103 013a 	add.w	r1, r3, #58	; 0x3a
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cf0:	f005 f82a 	bl	8007d48 <HAL_UART_Transmit>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <nextion_send_str_to_id+0x40>
		return NX_ERROR;
 8002cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfe:	e00e      	b.n	8002d1e <nextion_send_str_to_id+0x5e>
	}
	if(HAL_UART_Transmit(dp->uart, nxEnd, 3, 1000) != HAL_OK) {
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6858      	ldr	r0, [r3, #4]
 8002d04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d08:	2203      	movs	r2, #3
 8002d0a:	4908      	ldr	r1, [pc, #32]	; (8002d2c <nextion_send_str_to_id+0x6c>)
 8002d0c:	f005 f81c 	bl	8007d48 <HAL_UART_Transmit>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <nextion_send_str_to_id+0x5c>
		return NX_ERROR;
 8002d16:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1a:	e000      	b.n	8002d1e <nextion_send_str_to_id+0x5e>
	}
	return NX_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	0800ce70 	.word	0x0800ce70
 8002d2c:	0800cfe4 	.word	0x0800cfe4

08002d30 <nextion_send_val_to_id>:

int nextion_send_val_to_id(nextion_t* dp, char* id, int val) {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]

	int len = sprintf(dp->trm, "%s.val=%d",id,val);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f103 003a 	add.w	r0, r3, #58	; 0x3a
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	4914      	ldr	r1, [pc, #80]	; (8002d98 <nextion_send_val_to_id+0x68>)
 8002d48:	f007 fc90 	bl	800a66c <siprintf>
 8002d4c:	6178      	str	r0, [r7, #20]

	if(HAL_UART_Transmit(dp->uart, (uint8_t*)dp->trm, len, 1000) != HAL_OK) {
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6858      	ldr	r0, [r3, #4]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f103 013a 	add.w	r1, r3, #58	; 0x3a
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d60:	f004 fff2 	bl	8007d48 <HAL_UART_Transmit>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <nextion_send_val_to_id+0x40>
		return NX_ERROR;
 8002d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6e:	e00e      	b.n	8002d8e <nextion_send_val_to_id+0x5e>
	}
	if(HAL_UART_Transmit(dp->uart, nxEnd, 3, 1000) != HAL_OK) {
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6858      	ldr	r0, [r3, #4]
 8002d74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d78:	2203      	movs	r2, #3
 8002d7a:	4908      	ldr	r1, [pc, #32]	; (8002d9c <nextion_send_val_to_id+0x6c>)
 8002d7c:	f004 ffe4 	bl	8007d48 <HAL_UART_Transmit>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <nextion_send_val_to_id+0x5c>
		return NX_ERROR;
 8002d86:	f04f 33ff 	mov.w	r3, #4294967295
 8002d8a:	e000      	b.n	8002d8e <nextion_send_val_to_id+0x5e>
	}
	return NX_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	0800ce7c 	.word	0x0800ce7c
 8002d9c:	0800cfe4 	.word	0x0800cfe4

08002da0 <nextion_send_float_to_id>:

int nextion_send_float_to_id(nextion_t* dp, char* id, float val) {
 8002da0:	b590      	push	{r4, r7, lr}
 8002da2:	b089      	sub	sp, #36	; 0x24
 8002da4:	af02      	add	r7, sp, #8
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	ed87 0a01 	vstr	s0, [r7, #4]

	int len = sprintf(dp->trm, "%s.txt=\"%.2f\"",id,val);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f103 043a 	add.w	r4, r3, #58	; 0x3a
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7fd fbaf 	bl	8000518 <__aeabi_f2d>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	e9cd 2300 	strd	r2, r3, [sp]
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	4914      	ldr	r1, [pc, #80]	; (8002e18 <nextion_send_float_to_id+0x78>)
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	f007 fc50 	bl	800a66c <siprintf>
 8002dcc:	6178      	str	r0, [r7, #20]

	if(HAL_UART_Transmit(dp->uart, (uint8_t*)dp->trm, len,1000) != HAL_OK) {
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6858      	ldr	r0, [r3, #4]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f103 013a 	add.w	r1, r3, #58	; 0x3a
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002de0:	f004 ffb2 	bl	8007d48 <HAL_UART_Transmit>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <nextion_send_float_to_id+0x50>
		return NX_ERROR;
 8002dea:	f04f 33ff 	mov.w	r3, #4294967295
 8002dee:	e00e      	b.n	8002e0e <nextion_send_float_to_id+0x6e>
	}

	if(HAL_UART_Transmit(dp->uart, (uint8_t*)nxEnd, 3,1000) != HAL_OK) {
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6858      	ldr	r0, [r3, #4]
 8002df4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002df8:	2203      	movs	r2, #3
 8002dfa:	4908      	ldr	r1, [pc, #32]	; (8002e1c <nextion_send_float_to_id+0x7c>)
 8002dfc:	f004 ffa4 	bl	8007d48 <HAL_UART_Transmit>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <nextion_send_float_to_id+0x6c>
		return NX_ERROR;
 8002e06:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0a:	e000      	b.n	8002e0e <nextion_send_float_to_id+0x6e>
	}
	return NX_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	371c      	adds	r7, #28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd90      	pop	{r4, r7, pc}
 8002e16:	bf00      	nop
 8002e18:	0800ce88 	.word	0x0800ce88
 8002e1c:	0800cfe4 	.word	0x0800cfe4

08002e20 <write>:

int write(nextion_t* dp, char* msg) {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]

	int len = sprintf(dp->trm, "%s", msg);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	333a      	adds	r3, #58	; 0x3a
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	4914      	ldr	r1, [pc, #80]	; (8002e84 <write+0x64>)
 8002e32:	4618      	mov	r0, r3
 8002e34:	f007 fc1a 	bl	800a66c <siprintf>
 8002e38:	60f8      	str	r0, [r7, #12]

	if(HAL_UART_Transmit(dp->uart, (uint8_t*)dp->trm, len, 1000) != HAL_OK) {
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6858      	ldr	r0, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f103 013a 	add.w	r1, r3, #58	; 0x3a
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e4c:	f004 ff7c 	bl	8007d48 <HAL_UART_Transmit>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <write+0x3c>
		return NX_ERROR;
 8002e56:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5a:	e00e      	b.n	8002e7a <write+0x5a>
	}
	if(HAL_UART_Transmit(dp->uart, nxEnd, 3, 1000) != HAL_OK) {
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6858      	ldr	r0, [r3, #4]
 8002e60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e64:	2203      	movs	r2, #3
 8002e66:	4908      	ldr	r1, [pc, #32]	; (8002e88 <write+0x68>)
 8002e68:	f004 ff6e 	bl	8007d48 <HAL_UART_Transmit>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <write+0x58>
		return NX_ERROR;
 8002e72:	f04f 33ff 	mov.w	r3, #4294967295
 8002e76:	e000      	b.n	8002e7a <write+0x5a>
	}
	return NX_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	0800ce98 	.word	0x0800ce98
 8002e88:	0800cfe4 	.word	0x0800cfe4

08002e8c <nextion_decode_response>:

void nextion_decode_response(nextion_t* dp) {
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]

	if(dp->rcv[0] == '$' && dp->rcv[3] == '&') {
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	7a1b      	ldrb	r3, [r3, #8]
 8002e98:	2b24      	cmp	r3, #36	; 0x24
 8002e9a:	d10f      	bne.n	8002ebc <nextion_decode_response+0x30>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	7adb      	ldrb	r3, [r3, #11]
 8002ea0:	2b26      	cmp	r3, #38	; 0x26
 8002ea2:	d10b      	bne.n	8002ebc <nextion_decode_response+0x30>

		dp->response.page = dp->rcv[1];
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	7a5a      	ldrb	r2, [r3, #9]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	701a      	strb	r2, [r3, #0]
		dp->response.id = dp->rcv[2];
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	7a9a      	ldrb	r2, [r3, #10]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	705a      	strb	r2, [r3, #1]
		dp->response.data = 0;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	709a      	strb	r2, [r3, #2]
		dp->response.page = dp->rcv[1];
		dp->response.id = dp->rcv[2];
		dp->response.data = dp->rcv[3];
	}

}
 8002eba:	e017      	b.n	8002eec <nextion_decode_response+0x60>
	else if(dp->rcv[0] == '$' && dp->rcv[1] == 2 && dp->rcv[2] == 5) {
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	7a1b      	ldrb	r3, [r3, #8]
 8002ec0:	2b24      	cmp	r3, #36	; 0x24
 8002ec2:	d113      	bne.n	8002eec <nextion_decode_response+0x60>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	7a5b      	ldrb	r3, [r3, #9]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d10f      	bne.n	8002eec <nextion_decode_response+0x60>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	7a9b      	ldrb	r3, [r3, #10]
 8002ed0:	2b05      	cmp	r3, #5
 8002ed2:	d10b      	bne.n	8002eec <nextion_decode_response+0x60>
		dp->response.page = dp->rcv[1];
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	7a5a      	ldrb	r2, [r3, #9]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	701a      	strb	r2, [r3, #0]
		dp->response.id = dp->rcv[2];
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	7a9a      	ldrb	r2, [r3, #10]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	705a      	strb	r2, [r3, #1]
		dp->response.data = dp->rcv[3];
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	7ada      	ldrb	r2, [r3, #11]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	709a      	strb	r2, [r3, #2]
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <nextion_print_page>:

void nextion_print_page(nextion_t* dp) {
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
	dp->write_id_str(dp, "varProfile", "TS391LT50");
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f04:	4a3c      	ldr	r2, [pc, #240]	; (8002ff8 <nextion_print_page+0x100>)
 8002f06:	493d      	ldr	r1, [pc, #244]	; (8002ffc <nextion_print_page+0x104>)
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	4798      	blx	r3
	dp->write_id_str(dp, "varState", "IDLE");
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f10:	4a3b      	ldr	r2, [pc, #236]	; (8003000 <nextion_print_page+0x108>)
 8002f12:	493c      	ldr	r1, [pc, #240]	; (8003004 <nextion_print_page+0x10c>)
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	4798      	blx	r3
	dp->write_id_str(dp, "prepStart", "0");
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1c:	4a3a      	ldr	r2, [pc, #232]	; (8003008 <nextion_print_page+0x110>)
 8002f1e:	493b      	ldr	r1, [pc, #236]	; (800300c <nextion_print_page+0x114>)
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	4798      	blx	r3
	dp->write_id_str(dp, "prepEnd", "-");
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f28:	4a39      	ldr	r2, [pc, #228]	; (8003010 <nextion_print_page+0x118>)
 8002f2a:	493a      	ldr	r1, [pc, #232]	; (8003014 <nextion_print_page+0x11c>)
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	4798      	blx	r3
	dp->write_id_str(dp, "prepTemp", "30");
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f34:	4a38      	ldr	r2, [pc, #224]	; (8003018 <nextion_print_page+0x120>)
 8002f36:	4939      	ldr	r1, [pc, #228]	; (800301c <nextion_print_page+0x124>)
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	4798      	blx	r3
	dp->write_id_str(dp, "heatStart", "-");
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f40:	4a33      	ldr	r2, [pc, #204]	; (8003010 <nextion_print_page+0x118>)
 8002f42:	4937      	ldr	r1, [pc, #220]	; (8003020 <nextion_print_page+0x128>)
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	4798      	blx	r3
	dp->write_id_str(dp, "heatEnd", "90");
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4c:	4a35      	ldr	r2, [pc, #212]	; (8003024 <nextion_print_page+0x12c>)
 8002f4e:	4936      	ldr	r1, [pc, #216]	; (8003028 <nextion_print_page+0x130>)
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	4798      	blx	r3
	dp->write_id_str(dp, "heatTemp", "90");
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f58:	4a32      	ldr	r2, [pc, #200]	; (8003024 <nextion_print_page+0x12c>)
 8002f5a:	4934      	ldr	r1, [pc, #208]	; (800302c <nextion_print_page+0x134>)
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	4798      	blx	r3
	dp->write_id_str(dp, "soakStart", "90");
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f64:	4a2f      	ldr	r2, [pc, #188]	; (8003024 <nextion_print_page+0x12c>)
 8002f66:	4932      	ldr	r1, [pc, #200]	; (8003030 <nextion_print_page+0x138>)
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	4798      	blx	r3
	dp->write_id_str(dp, "soakEnd", "180");
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f70:	4a30      	ldr	r2, [pc, #192]	; (8003034 <nextion_print_page+0x13c>)
 8002f72:	4931      	ldr	r1, [pc, #196]	; (8003038 <nextion_print_page+0x140>)
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	4798      	blx	r3
	dp->write_id_str(dp, "soakTemp", "130");
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7c:	4a2f      	ldr	r2, [pc, #188]	; (800303c <nextion_print_page+0x144>)
 8002f7e:	4930      	ldr	r1, [pc, #192]	; (8003040 <nextion_print_page+0x148>)
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	4798      	blx	r3
	dp->write_id_str(dp, "rampStart", "180");
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f88:	4a2a      	ldr	r2, [pc, #168]	; (8003034 <nextion_print_page+0x13c>)
 8002f8a:	492e      	ldr	r1, [pc, #184]	; (8003044 <nextion_print_page+0x14c>)
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	4798      	blx	r3
	dp->write_id_str(dp, "rampEnd", "210");
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f94:	4a2c      	ldr	r2, [pc, #176]	; (8003048 <nextion_print_page+0x150>)
 8002f96:	492d      	ldr	r1, [pc, #180]	; (800304c <nextion_print_page+0x154>)
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	4798      	blx	r3
	dp->write_id_str(dp, "rampTemp", "138");
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa0:	4a2b      	ldr	r2, [pc, #172]	; (8003050 <nextion_print_page+0x158>)
 8002fa2:	492c      	ldr	r1, [pc, #176]	; (8003054 <nextion_print_page+0x15c>)
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	4798      	blx	r3
	dp->write_id_str(dp, "reflowStart", "210");
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fac:	4a26      	ldr	r2, [pc, #152]	; (8003048 <nextion_print_page+0x150>)
 8002fae:	492a      	ldr	r1, [pc, #168]	; (8003058 <nextion_print_page+0x160>)
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	4798      	blx	r3
	dp->write_id_str(dp, "reflowEnd", "240");
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb8:	4a28      	ldr	r2, [pc, #160]	; (800305c <nextion_print_page+0x164>)
 8002fba:	4929      	ldr	r1, [pc, #164]	; (8003060 <nextion_print_page+0x168>)
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	4798      	blx	r3
	dp->write_id_str(dp, "reflowTemp", "165");
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc4:	4a27      	ldr	r2, [pc, #156]	; (8003064 <nextion_print_page+0x16c>)
 8002fc6:	4928      	ldr	r1, [pc, #160]	; (8003068 <nextion_print_page+0x170>)
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	4798      	blx	r3
	dp->write_id_str(dp, "coolStart", "240");
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	4a22      	ldr	r2, [pc, #136]	; (800305c <nextion_print_page+0x164>)
 8002fd2:	4926      	ldr	r1, [pc, #152]	; (800306c <nextion_print_page+0x174>)
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	4798      	blx	r3
	dp->write_id_str(dp, "coolEnd", "270");
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fdc:	4a24      	ldr	r2, [pc, #144]	; (8003070 <nextion_print_page+0x178>)
 8002fde:	4925      	ldr	r1, [pc, #148]	; (8003074 <nextion_print_page+0x17c>)
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	4798      	blx	r3
	dp->write_id_str(dp, "coolTemp", "138");
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe8:	4a19      	ldr	r2, [pc, #100]	; (8003050 <nextion_print_page+0x158>)
 8002fea:	4923      	ldr	r1, [pc, #140]	; (8003078 <nextion_print_page+0x180>)
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	4798      	blx	r3
}
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	0800ce9c 	.word	0x0800ce9c
 8002ffc:	0800cea8 	.word	0x0800cea8
 8003000:	0800ceb4 	.word	0x0800ceb4
 8003004:	0800cebc 	.word	0x0800cebc
 8003008:	0800cec8 	.word	0x0800cec8
 800300c:	0800cecc 	.word	0x0800cecc
 8003010:	0800ced8 	.word	0x0800ced8
 8003014:	0800cedc 	.word	0x0800cedc
 8003018:	0800cee4 	.word	0x0800cee4
 800301c:	0800cee8 	.word	0x0800cee8
 8003020:	0800cef4 	.word	0x0800cef4
 8003024:	0800cf00 	.word	0x0800cf00
 8003028:	0800cf04 	.word	0x0800cf04
 800302c:	0800cf0c 	.word	0x0800cf0c
 8003030:	0800cf18 	.word	0x0800cf18
 8003034:	0800cf24 	.word	0x0800cf24
 8003038:	0800cf28 	.word	0x0800cf28
 800303c:	0800cf30 	.word	0x0800cf30
 8003040:	0800cf34 	.word	0x0800cf34
 8003044:	0800cf40 	.word	0x0800cf40
 8003048:	0800cf4c 	.word	0x0800cf4c
 800304c:	0800cf50 	.word	0x0800cf50
 8003050:	0800cf58 	.word	0x0800cf58
 8003054:	0800cf5c 	.word	0x0800cf5c
 8003058:	0800cf68 	.word	0x0800cf68
 800305c:	0800cf74 	.word	0x0800cf74
 8003060:	0800cf78 	.word	0x0800cf78
 8003064:	0800cf84 	.word	0x0800cf84
 8003068:	0800cf88 	.word	0x0800cf88
 800306c:	0800cf94 	.word	0x0800cf94
 8003070:	0800cfa0 	.word	0x0800cfa0
 8003074:	0800cfa4 	.word	0x0800cfa4
 8003078:	0800cfac 	.word	0x0800cfac

0800307c <nextion_init>:


int nextion_init(nextion_t* dp, UART_HandleTypeDef *uart) {
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
	dp->uart = uart;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	605a      	str	r2, [r3, #4]
	dp->write_id_str = &nextion_send_str_to_id;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a09      	ldr	r2, [pc, #36]	; (80030b4 <nextion_init+0x38>)
 8003090:	671a      	str	r2, [r3, #112]	; 0x70
	dp->write_id_val = &nextion_send_val_to_id;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a08      	ldr	r2, [pc, #32]	; (80030b8 <nextion_init+0x3c>)
 8003096:	675a      	str	r2, [r3, #116]	; 0x74
	dp->write_id_float = &nextion_send_float_to_id;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a08      	ldr	r2, [pc, #32]	; (80030bc <nextion_init+0x40>)
 800309c:	67da      	str	r2, [r3, #124]	; 0x7c
	dp->write = &write;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a07      	ldr	r2, [pc, #28]	; (80030c0 <nextion_init+0x44>)
 80030a2:	679a      	str	r2, [r3, #120]	; 0x78
	return NX_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	08002cc1 	.word	0x08002cc1
 80030b8:	08002d31 	.word	0x08002d31
 80030bc:	08002da1 	.word	0x08002da1
 80030c0:	08002e21 	.word	0x08002e21

080030c4 <PIDController_Init>:
 */

#include "pid.h"

void PIDController_Init(PIDController *pid, const float kP, const float kI, const float kD, const float sampleTime, const float tau,
						const float limMin, const float limMax, const float limMinInt, const float limMaxInt) {
 80030c4:	b480      	push	{r7}
 80030c6:	b08b      	sub	sp, #44	; 0x2c
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6278      	str	r0, [r7, #36]	; 0x24
 80030cc:	ed87 0a08 	vstr	s0, [r7, #32]
 80030d0:	edc7 0a07 	vstr	s1, [r7, #28]
 80030d4:	ed87 1a06 	vstr	s2, [r7, #24]
 80030d8:	edc7 1a05 	vstr	s3, [r7, #20]
 80030dc:	ed87 2a04 	vstr	s4, [r7, #16]
 80030e0:	edc7 2a03 	vstr	s5, [r7, #12]
 80030e4:	ed87 3a02 	vstr	s6, [r7, #8]
 80030e8:	edc7 3a01 	vstr	s7, [r7, #4]
 80030ec:	ed87 4a00 	vstr	s8, [r7]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError  = 0.0f;
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator  = 0.0f;
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	631a      	str	r2, [r3, #48]	; 0x30

	pid->out = 0.0f;
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	635a      	str	r2, [r3, #52]	; 0x34

	pid->Kp = kP;
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	6a3a      	ldr	r2, [r7, #32]
 800311c:	601a      	str	r2, [r3, #0]
	pid->Ki = kI;
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	69fa      	ldr	r2, [r7, #28]
 8003122:	605a      	str	r2, [r3, #4]
	pid->Kd = kD;
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	609a      	str	r2, [r3, #8]

	pid->T = sampleTime;
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	621a      	str	r2, [r3, #32]

	pid->tau = tau;
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	60da      	str	r2, [r3, #12]

	pid->limMin = limMin;
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	611a      	str	r2, [r3, #16]
	pid->limMax = limMax;
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	615a      	str	r2, [r3, #20]

	pid->limMinInt = limMinInt;
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	619a      	str	r2, [r3, #24]
	pid->limMaxInt = limMaxInt;
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	61da      	str	r2, [r3, #28]

}
 800314e:	bf00      	nop
 8003150:	372c      	adds	r7, #44	; 0x2c
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 800315a:	b480      	push	{r7}
 800315c:	b087      	sub	sp, #28
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	ed87 0a02 	vstr	s0, [r7, #8]
 8003166:	edc7 0a01 	vstr	s1, [r7, #4]

	/*
	* Error signal
	*/
    float error = setpoint - measurement;
 800316a:	ed97 7a02 	vldr	s14, [r7, #8]
 800316e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003172:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003176:	edc7 7a05 	vstr	s15, [r7, #20]


	/*
	* Proportional
	*/
    float proportional = pid->Kp * error;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	edd3 7a00 	vldr	s15, [r3]
 8003180:	ed97 7a05 	vldr	s14, [r7, #20]
 8003184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003188:	edc7 7a04 	vstr	s15, [r7, #16]


	/*
	* Integral
	*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	edd3 7a01 	vldr	s15, [r3, #4]
 8003198:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800319c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	edd3 7a08 	vldr	s15, [r3, #32]
 80031a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 80031b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80031b4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80031b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator > pid->limMaxInt) {
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	edd3 7a07 	vldr	s15, [r3, #28]
 80031d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031da:	dd04      	ble.n	80031e6 <PIDController_Update+0x8c>

        pid->integrator = pid->limMaxInt;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	69da      	ldr	r2, [r3, #28]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	625a      	str	r2, [r3, #36]	; 0x24
 80031e4:	e00e      	b.n	8003204 <PIDController_Update+0xaa>

    } else if (pid->integrator < pid->limMinInt) {
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	edd3 7a06 	vldr	s15, [r3, #24]
 80031f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031fa:	d503      	bpl.n	8003204 <PIDController_Update+0xaa>

        pid->integrator = pid->limMinInt;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	699a      	ldr	r2, [r3, #24]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	625a      	str	r2, [r3, #36]	; 0x24

	/*
	* Derivative (band-limited differentiator)
	*/

    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement) + (2.0f * pid->tau - pid->T) * pid->differentiator) / (2.0f * pid->tau + pid->T);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	edd3 7a02 	vldr	s15, [r3, #8]
 800320a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003214:	edd7 6a01 	vldr	s13, [r7, #4]
 8003218:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800321c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	edd3 7a03 	vldr	s15, [r3, #12]
 8003226:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	edd3 7a08 	vldr	s15, [r3, #32]
 8003230:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800323a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800323e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003242:	eef1 6a67 	vneg.f32	s13, s15
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	edd3 7a03 	vldr	s15, [r3, #12]
 800324c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	edd3 7a08 	vldr	s15, [r3, #32]
 8003256:	ee37 7a27 	vadd.f32	s14, s14, s15
 800325a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	/*
	* Compute output and apply limits
	*/
    //pid->differentiator = pid->Kd*(measurement - pid->prevMeasurement);

    pid->out = proportional + pid->integrator + pid->differentiator;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800326a:	edd7 7a04 	vldr	s15, [r7, #16]
 800326e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (pid->out > pid->limMax) {
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	edd3 7a05 	vldr	s15, [r3, #20]
 800328e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003296:	dd04      	ble.n	80032a2 <PIDController_Update+0x148>

        pid->out = pid->limMax;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	695a      	ldr	r2, [r3, #20]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	635a      	str	r2, [r3, #52]	; 0x34
 80032a0:	e00e      	b.n	80032c0 <PIDController_Update+0x166>

    } else if (pid->out < pid->limMin) {
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80032ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b6:	d503      	bpl.n	80032c0 <PIDController_Update+0x166>

        pid->out = pid->limMin;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	635a      	str	r2, [r3, #52]	; 0x34

    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	629a      	str	r2, [r3, #40]	; 0x28
    pid->prevMeasurement = measurement;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	631a      	str	r2, [r3, #48]	; 0x30

	/* Return controller output */
    return pid->out;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d0:	ee07 3a90 	vmov	s15, r3

}
 80032d4:	eeb0 0a67 	vmov.f32	s0, s15
 80032d8:	371c      	adds	r7, #28
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <LL_AHB2_GRP1_EnableClock>:
{
 80032e2:	b480      	push	{r7}
 80032e4:	b085      	sub	sp, #20
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80032ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80032fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4013      	ands	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003306:	68fb      	ldr	r3, [r7, #12]
}
 8003308:	bf00      	nop
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800331c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003320:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003322:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4313      	orrs	r3, r2
 800332a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800332c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003330:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4013      	ands	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003338:	68fb      	ldr	r3, [r7, #12]
}
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8003346:	b480      	push	{r7}
 8003348:	b085      	sub	sp, #20
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800334e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003352:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003354:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4313      	orrs	r3, r2
 800335c:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800335e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003362:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4013      	ands	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800336a:	68fb      	ldr	r3, [r7, #12]
}
 800336c:	bf00      	nop
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003384:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003386:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4313      	orrs	r3, r2
 800338e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003394:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4013      	ands	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800339c:	68fb      	ldr	r3, [r7, #12]
}
 800339e:	bf00      	nop
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033aa:	b480      	push	{r7}
 80033ac:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033ae:	bf00      	nop
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b09c      	sub	sp, #112	; 0x70
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033d0:	f107 030c 	add.w	r3, r7, #12
 80033d4:	2250      	movs	r2, #80	; 0x50
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f006 fcd5 	bl	8009d88 <memset>
  if(hi2c->Instance==I2C1)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a17      	ldr	r2, [pc, #92]	; (8003440 <HAL_I2C_MspInit+0x88>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d126      	bne.n	8003436 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80033e8:	2304      	movs	r3, #4
 80033ea:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80033ec:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80033f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033f2:	f107 030c 	add.w	r3, r7, #12
 80033f6:	4618      	mov	r0, r3
 80033f8:	f002 fb95 	bl	8005b26 <HAL_RCCEx_PeriphCLKConfig>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003402:	f7ff fc57 	bl	8002cb4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003406:	2002      	movs	r0, #2
 8003408:	f7ff ff6b 	bl	80032e2 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 800340c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003410:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003412:	2312      	movs	r3, #18
 8003414:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003416:	2300      	movs	r3, #0
 8003418:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341a:	2300      	movs	r3, #0
 800341c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800341e:	2304      	movs	r3, #4
 8003420:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003422:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003426:	4619      	mov	r1, r3
 8003428:	4806      	ldr	r0, [pc, #24]	; (8003444 <HAL_I2C_MspInit+0x8c>)
 800342a:	f000 fd6f 	bl	8003f0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800342e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003432:	f7ff ff6f 	bl	8003314 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003436:	bf00      	nop
 8003438:	3770      	adds	r7, #112	; 0x70
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40005400 	.word	0x40005400
 8003444:	48000400 	.word	0x48000400

08003448 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b09c      	sub	sp, #112	; 0x70
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003450:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003460:	f107 030c 	add.w	r3, r7, #12
 8003464:	2250      	movs	r2, #80	; 0x50
 8003466:	2100      	movs	r1, #0
 8003468:	4618      	mov	r0, r3
 800346a:	f006 fc8d 	bl	8009d88 <memset>
  if(huart->Instance==LPUART1)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a36      	ldr	r2, [pc, #216]	; (800354c <HAL_UART_MspInit+0x104>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d125      	bne.n	80034c4 <HAL_UART_MspInit+0x7c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003478:	2302      	movs	r3, #2
 800347a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800347c:	2300      	movs	r3, #0
 800347e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003480:	f107 030c 	add.w	r3, r7, #12
 8003484:	4618      	mov	r0, r3
 8003486:	f002 fb4e 	bl	8005b26 <HAL_RCCEx_PeriphCLKConfig>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003490:	f7ff fc10 	bl	8002cb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003494:	2001      	movs	r0, #1
 8003496:	f7ff ff56 	bl	8003346 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800349a:	2001      	movs	r0, #1
 800349c:	f7ff ff21 	bl	80032e2 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80034a0:	230c      	movs	r3, #12
 80034a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a4:	2302      	movs	r3, #2
 80034a6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ac:	2300      	movs	r3, #0
 80034ae:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80034b0:	2308      	movs	r3, #8
 80034b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80034b8:	4619      	mov	r1, r3
 80034ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034be:	f000 fd25 	bl	8003f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80034c2:	e03e      	b.n	8003542 <HAL_UART_MspInit+0xfa>
  else if(huart->Instance==USART1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a21      	ldr	r2, [pc, #132]	; (8003550 <HAL_UART_MspInit+0x108>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d139      	bne.n	8003542 <HAL_UART_MspInit+0xfa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80034ce:	2301      	movs	r3, #1
 80034d0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80034d2:	2300      	movs	r3, #0
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034d6:	f107 030c 	add.w	r3, r7, #12
 80034da:	4618      	mov	r0, r3
 80034dc:	f002 fb23 	bl	8005b26 <HAL_RCCEx_PeriphCLKConfig>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_UART_MspInit+0xa2>
      Error_Handler();
 80034e6:	f7ff fbe5 	bl	8002cb4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80034ea:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80034ee:	f7ff ff43 	bl	8003378 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f2:	2001      	movs	r0, #1
 80034f4:	f7ff fef5 	bl	80032e2 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f8:	2002      	movs	r0, #2
 80034fa:	f7ff fef2 	bl	80032e2 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003502:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003504:	2302      	movs	r3, #2
 8003506:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003508:	2300      	movs	r3, #0
 800350a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350c:	2300      	movs	r3, #0
 800350e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003510:	2307      	movs	r3, #7
 8003512:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003514:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003518:	4619      	mov	r1, r3
 800351a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800351e:	f000 fcf5 	bl	8003f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003522:	2340      	movs	r3, #64	; 0x40
 8003524:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003526:	2302      	movs	r3, #2
 8003528:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352a:	2300      	movs	r3, #0
 800352c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352e:	2300      	movs	r3, #0
 8003530:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003532:	2307      	movs	r3, #7
 8003534:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003536:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800353a:	4619      	mov	r1, r3
 800353c:	4805      	ldr	r0, [pc, #20]	; (8003554 <HAL_UART_MspInit+0x10c>)
 800353e:	f000 fce5 	bl	8003f0c <HAL_GPIO_Init>
}
 8003542:	bf00      	nop
 8003544:	3770      	adds	r7, #112	; 0x70
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40008000 	.word	0x40008000
 8003550:	40013800 	.word	0x40013800
 8003554:	48000400 	.word	0x48000400

08003558 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003560:	f107 030c 	add.w	r3, r7, #12
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	605a      	str	r2, [r3, #4]
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	60da      	str	r2, [r3, #12]
 800356e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a0f      	ldr	r2, [pc, #60]	; (80035b4 <HAL_SPI_MspInit+0x5c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d117      	bne.n	80035aa <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800357a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800357e:	f7ff fefb 	bl	8003378 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003582:	2001      	movs	r0, #1
 8003584:	f7ff fead 	bl	80032e2 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8003588:	2342      	movs	r3, #66	; 0x42
 800358a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800358c:	2302      	movs	r3, #2
 800358e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003594:	2300      	movs	r3, #0
 8003596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003598:	2305      	movs	r3, #5
 800359a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800359c:	f107 030c 	add.w	r3, r7, #12
 80035a0:	4619      	mov	r1, r3
 80035a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035a6:	f000 fcb1 	bl	8003f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80035aa:	bf00      	nop
 80035ac:	3720      	adds	r7, #32
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40013000 	.word	0x40013000

080035b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a11      	ldr	r2, [pc, #68]	; (800360c <HAL_TIM_PWM_MspInit+0x54>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d114      	bne.n	80035f4 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035ca:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80035ce:	f7ff fed3 	bl	8003378 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80035d2:	2200      	movs	r2, #0
 80035d4:	2100      	movs	r1, #0
 80035d6:	2019      	movs	r0, #25
 80035d8:	f000 fba5 	bl	8003d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80035dc:	2019      	movs	r0, #25
 80035de:	f000 fbbc 	bl	8003d5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80035e2:	2200      	movs	r2, #0
 80035e4:	2100      	movs	r1, #0
 80035e6:	201a      	movs	r0, #26
 80035e8:	f000 fb9d 	bl	8003d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80035ec:	201a      	movs	r0, #26
 80035ee:	f000 fbb4 	bl	8003d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80035f2:	e007      	b.n	8003604 <HAL_TIM_PWM_MspInit+0x4c>
  else if(htim_pwm->Instance==TIM2)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035fc:	d102      	bne.n	8003604 <HAL_TIM_PWM_MspInit+0x4c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035fe:	2001      	movs	r0, #1
 8003600:	f7ff fe88 	bl	8003314 <LL_APB1_GRP1_EnableClock>
}
 8003604:	bf00      	nop
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40012c00 	.word	0x40012c00

08003610 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a12      	ldr	r2, [pc, #72]	; (8003668 <HAL_TIM_Base_MspInit+0x58>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d10c      	bne.n	800363c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003622:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003626:	f7ff fea7 	bl	8003378 <LL_APB2_GRP1_EnableClock>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800362a:	2200      	movs	r2, #0
 800362c:	2100      	movs	r1, #0
 800362e:	2019      	movs	r0, #25
 8003630:	f000 fb79 	bl	8003d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003634:	2019      	movs	r0, #25
 8003636:	f000 fb90 	bl	8003d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800363a:	e010      	b.n	800365e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a0a      	ldr	r2, [pc, #40]	; (800366c <HAL_TIM_Base_MspInit+0x5c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d10b      	bne.n	800365e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003646:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800364a:	f7ff fe95 	bl	8003378 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800364e:	2200      	movs	r2, #0
 8003650:	2100      	movs	r1, #0
 8003652:	201a      	movs	r0, #26
 8003654:	f000 fb67 	bl	8003d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003658:	201a      	movs	r0, #26
 800365a:	f000 fb7e 	bl	8003d5a <HAL_NVIC_EnableIRQ>
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40014400 	.word	0x40014400
 800366c:	40014800 	.word	0x40014800

08003670 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003678:	f107 030c 	add.w	r3, r7, #12
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1a      	ldr	r2, [pc, #104]	; (80036f8 <HAL_TIM_MspPostInit+0x88>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d115      	bne.n	80036be <HAL_TIM_MspPostInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003692:	2001      	movs	r0, #1
 8003694:	f7ff fe25 	bl	80032e2 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003698:	f44f 7340 	mov.w	r3, #768	; 0x300
 800369c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369e:	2302      	movs	r3, #2
 80036a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036aa:	2301      	movs	r3, #1
 80036ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ae:	f107 030c 	add.w	r3, r7, #12
 80036b2:	4619      	mov	r1, r3
 80036b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036b8:	f000 fc28 	bl	8003f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80036bc:	e018      	b.n	80036f0 <HAL_TIM_MspPostInit+0x80>
  else if(htim->Instance==TIM2)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c6:	d113      	bne.n	80036f0 <HAL_TIM_MspPostInit+0x80>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c8:	2001      	movs	r0, #1
 80036ca:	f7ff fe0a 	bl	80032e2 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80036ce:	2301      	movs	r3, #1
 80036d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d2:	2302      	movs	r3, #2
 80036d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036da:	2300      	movs	r3, #0
 80036dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036de:	2301      	movs	r3, #1
 80036e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e2:	f107 030c 	add.w	r3, r7, #12
 80036e6:	4619      	mov	r1, r3
 80036e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036ec:	f000 fc0e 	bl	8003f0c <HAL_GPIO_Init>
}
 80036f0:	bf00      	nop
 80036f2:	3720      	adds	r7, #32
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40012c00 	.word	0x40012c00

080036fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003700:	e7fe      	b.n	8003700 <NMI_Handler+0x4>

08003702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003702:	b480      	push	{r7}
 8003704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003706:	e7fe      	b.n	8003706 <HardFault_Handler+0x4>

08003708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800370c:	e7fe      	b.n	800370c <MemManage_Handler+0x4>

0800370e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800370e:	b480      	push	{r7}
 8003710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003712:	e7fe      	b.n	8003712 <BusFault_Handler+0x4>

08003714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003718:	e7fe      	b.n	8003718 <UsageFault_Handler+0x4>

0800371a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800371a:	b480      	push	{r7}
 800371c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800371e:	bf00      	nop
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800372c:	bf00      	nop
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003736:	b480      	push	{r7}
 8003738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800373a:	bf00      	nop
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003748:	f000 f9e6 	bl	8003b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800374c:	bf00      	nop
 800374e:	bd80      	pop	{r7, pc}

08003750 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003754:	4803      	ldr	r0, [pc, #12]	; (8003764 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003756:	f003 fc15 	bl	8006f84 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800375a:	4803      	ldr	r0, [pc, #12]	; (8003768 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800375c:	f003 fc12 	bl	8006f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003760:	bf00      	nop
 8003762:	bd80      	pop	{r7, pc}
 8003764:	200003fc 	.word	0x200003fc
 8003768:	20000494 	.word	0x20000494

0800376c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003770:	4803      	ldr	r0, [pc, #12]	; (8003780 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8003772:	f003 fc07 	bl	8006f84 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8003776:	4803      	ldr	r0, [pc, #12]	; (8003784 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8003778:	f003 fc04 	bl	8006f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800377c:	bf00      	nop
 800377e:	bd80      	pop	{r7, pc}
 8003780:	200003fc 	.word	0x200003fc
 8003784:	200004e0 	.word	0x200004e0

08003788 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800378c:	4802      	ldr	r0, [pc, #8]	; (8003798 <TIM2_IRQHandler+0x10>)
 800378e:	f003 fbf9 	bl	8006f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003792:	bf00      	nop
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	20000448 	.word	0x20000448

0800379c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80037a0:	4802      	ldr	r0, [pc, #8]	; (80037ac <USART1_IRQHandler+0x10>)
 80037a2:	f004 fc91 	bl	80080c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80037a6:	bf00      	nop
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	20000308 	.word	0x20000308

080037b0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80037b4:	4802      	ldr	r0, [pc, #8]	; (80037c0 <LPUART1_IRQHandler+0x10>)
 80037b6:	f004 fc87 	bl	80080c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80037ba:	bf00      	nop
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000278 	.word	0x20000278

080037c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
	return 1;
 80037c8:	2301      	movs	r3, #1
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <_kill>:

int _kill(int pid, int sig)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037de:	f006 faa9 	bl	8009d34 <__errno>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2216      	movs	r2, #22
 80037e6:	601a      	str	r2, [r3, #0]
	return -1;
 80037e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <_exit>:

void _exit (int status)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80037fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7ff ffe7 	bl	80037d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003806:	e7fe      	b.n	8003806 <_exit+0x12>

08003808 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	e00a      	b.n	8003830 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800381a:	f3af 8000 	nop.w
 800381e:	4601      	mov	r1, r0
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	60ba      	str	r2, [r7, #8]
 8003826:	b2ca      	uxtb	r2, r1
 8003828:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	3301      	adds	r3, #1
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	429a      	cmp	r2, r3
 8003836:	dbf0      	blt.n	800381a <_read+0x12>
	}

return len;
 8003838:	687b      	ldr	r3, [r7, #4]
}
 800383a:	4618      	mov	r0, r3
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b086      	sub	sp, #24
 8003846:	af00      	add	r7, sp, #0
 8003848:	60f8      	str	r0, [r7, #12]
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	e009      	b.n	8003868 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	60ba      	str	r2, [r7, #8]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	3301      	adds	r3, #1
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	429a      	cmp	r2, r3
 800386e:	dbf1      	blt.n	8003854 <_write+0x12>
	}
	return len;
 8003870:	687b      	ldr	r3, [r7, #4]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <_close>:

int _close(int file)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
	return -1;
 8003882:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003886:	4618      	mov	r0, r3
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038a2:	605a      	str	r2, [r3, #4]
	return 0;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <_isatty>:

int _isatty(int file)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
	return 1;
 80038ba:	2301      	movs	r3, #1
}
 80038bc:	4618      	mov	r0, r3
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
	return 0;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
	...

080038e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038ec:	4a14      	ldr	r2, [pc, #80]	; (8003940 <_sbrk+0x5c>)
 80038ee:	4b15      	ldr	r3, [pc, #84]	; (8003944 <_sbrk+0x60>)
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038f8:	4b13      	ldr	r3, [pc, #76]	; (8003948 <_sbrk+0x64>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d102      	bne.n	8003906 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003900:	4b11      	ldr	r3, [pc, #68]	; (8003948 <_sbrk+0x64>)
 8003902:	4a12      	ldr	r2, [pc, #72]	; (800394c <_sbrk+0x68>)
 8003904:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003906:	4b10      	ldr	r3, [pc, #64]	; (8003948 <_sbrk+0x64>)
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4413      	add	r3, r2
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	429a      	cmp	r2, r3
 8003912:	d207      	bcs.n	8003924 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003914:	f006 fa0e 	bl	8009d34 <__errno>
 8003918:	4603      	mov	r3, r0
 800391a:	220c      	movs	r2, #12
 800391c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800391e:	f04f 33ff 	mov.w	r3, #4294967295
 8003922:	e009      	b.n	8003938 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003924:	4b08      	ldr	r3, [pc, #32]	; (8003948 <_sbrk+0x64>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800392a:	4b07      	ldr	r3, [pc, #28]	; (8003948 <_sbrk+0x64>)
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4413      	add	r3, r2
 8003932:	4a05      	ldr	r2, [pc, #20]	; (8003948 <_sbrk+0x64>)
 8003934:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003936:	68fb      	ldr	r3, [r7, #12]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20030000 	.word	0x20030000
 8003944:	00000400 	.word	0x00000400
 8003948:	20000668 	.word	0x20000668
 800394c:	20000680 	.word	0x20000680

08003950 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003954:	4b24      	ldr	r3, [pc, #144]	; (80039e8 <SystemInit+0x98>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395a:	4a23      	ldr	r2, [pc, #140]	; (80039e8 <SystemInit+0x98>)
 800395c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003960:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003978:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800397c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800397e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003988:	4b18      	ldr	r3, [pc, #96]	; (80039ec <SystemInit+0x9c>)
 800398a:	4013      	ands	r3, r2
 800398c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800398e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003996:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800399a:	f023 0305 	bic.w	r3, r3, #5
 800399e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80039a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039ae:	f023 0301 	bic.w	r3, r3, #1
 80039b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80039b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ba:	4a0d      	ldr	r2, [pc, #52]	; (80039f0 <SystemInit+0xa0>)
 80039bc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80039be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c2:	4a0b      	ldr	r2, [pc, #44]	; (80039f0 <SystemInit+0xa0>)
 80039c4:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80039c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80039d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039da:	2200      	movs	r2, #0
 80039dc:	619a      	str	r2, [r3, #24]
}
 80039de:	bf00      	nop
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	e000ed00 	.word	0xe000ed00
 80039ec:	faf6fefb 	.word	0xfaf6fefb
 80039f0:	22041000 	.word	0x22041000

080039f4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80039f4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039f6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039f8:	3304      	adds	r3, #4

080039fa <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039fa:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039fc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80039fe:	d3f9      	bcc.n	80039f4 <CopyDataInit>
  bx lr
 8003a00:	4770      	bx	lr

08003a02 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003a02:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003a04:	3004      	adds	r0, #4

08003a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003a06:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003a08:	d3fb      	bcc.n	8003a02 <FillZerobss>
  bx lr
 8003a0a:	4770      	bx	lr

08003a0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a0c:	480c      	ldr	r0, [pc, #48]	; (8003a40 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8003a0e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a10:	f7ff ff9e 	bl	8003950 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003a14:	480b      	ldr	r0, [pc, #44]	; (8003a44 <LoopForever+0x8>)
 8003a16:	490c      	ldr	r1, [pc, #48]	; (8003a48 <LoopForever+0xc>)
 8003a18:	4a0c      	ldr	r2, [pc, #48]	; (8003a4c <LoopForever+0x10>)
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f7ff ffed 	bl	80039fa <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003a20:	480b      	ldr	r0, [pc, #44]	; (8003a50 <LoopForever+0x14>)
 8003a22:	490c      	ldr	r1, [pc, #48]	; (8003a54 <LoopForever+0x18>)
 8003a24:	2300      	movs	r3, #0
 8003a26:	f7ff ffee 	bl	8003a06 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003a2a:	480b      	ldr	r0, [pc, #44]	; (8003a58 <LoopForever+0x1c>)
 8003a2c:	490b      	ldr	r1, [pc, #44]	; (8003a5c <LoopForever+0x20>)
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f7ff ffe9 	bl	8003a06 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003a34:	f006 f984 	bl	8009d40 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8003a38:	f7fd faf2 	bl	8001020 <main>

08003a3c <LoopForever>:

LoopForever:
  b LoopForever
 8003a3c:	e7fe      	b.n	8003a3c <LoopForever>
 8003a3e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8003a40:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003a44:	20000004 	.word	0x20000004
 8003a48:	20000210 	.word	0x20000210
 8003a4c:	0800d49c 	.word	0x0800d49c
  INIT_BSS _sbss, _ebss
 8003a50:	20000210 	.word	0x20000210
 8003a54:	20000680 	.word	0x20000680
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003a58:	20030000 	.word	0x20030000
 8003a5c:	20030000 	.word	0x20030000

08003a60 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a60:	e7fe      	b.n	8003a60 <ADC1_IRQHandler>
	...

08003a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a6e:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <HAL_Init+0x3c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a0b      	ldr	r2, [pc, #44]	; (8003aa0 <HAL_Init+0x3c>)
 8003a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a78:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a7a:	2003      	movs	r0, #3
 8003a7c:	f000 f948 	bl	8003d10 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a80:	200f      	movs	r0, #15
 8003a82:	f000 f80f 	bl	8003aa4 <HAL_InitTick>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	71fb      	strb	r3, [r7, #7]
 8003a90:	e001      	b.n	8003a96 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a92:	f7ff fc8a 	bl	80033aa <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a96:	79fb      	ldrb	r3, [r7, #7]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	58004000 	.word	0x58004000

08003aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003aac:	2300      	movs	r3, #0
 8003aae:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003ab0:	4b17      	ldr	r3, [pc, #92]	; (8003b10 <HAL_InitTick+0x6c>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d024      	beq.n	8003b02 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003ab8:	f001 fda4 	bl	8005604 <HAL_RCC_GetHCLKFreq>
 8003abc:	4602      	mov	r2, r0
 8003abe:	4b14      	ldr	r3, [pc, #80]	; (8003b10 <HAL_InitTick+0x6c>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ac8:	fbb3 f3f1 	udiv	r3, r3, r1
 8003acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 f950 	bl	8003d76 <HAL_SYSTICK_Config>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10f      	bne.n	8003afc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b0f      	cmp	r3, #15
 8003ae0:	d809      	bhi.n	8003af6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8003aea:	f000 f91c 	bl	8003d26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003aee:	4a09      	ldr	r2, [pc, #36]	; (8003b14 <HAL_InitTick+0x70>)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	e007      	b.n	8003b06 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	73fb      	strb	r3, [r7, #15]
 8003afa:	e004      	b.n	8003b06 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	73fb      	strb	r3, [r7, #15]
 8003b00:	e001      	b.n	8003b06 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	2000003c 	.word	0x2000003c
 8003b14:	20000038 	.word	0x20000038

08003b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b1c:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <HAL_IncTick+0x20>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	461a      	mov	r2, r3
 8003b22:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <HAL_IncTick+0x24>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4413      	add	r3, r2
 8003b28:	4a04      	ldr	r2, [pc, #16]	; (8003b3c <HAL_IncTick+0x24>)
 8003b2a:	6013      	str	r3, [r2, #0]
}
 8003b2c:	bf00      	nop
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	2000003c 	.word	0x2000003c
 8003b3c:	2000066c 	.word	0x2000066c

08003b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  return uwTick;
 8003b44:	4b03      	ldr	r3, [pc, #12]	; (8003b54 <HAL_GetTick+0x14>)
 8003b46:	681b      	ldr	r3, [r3, #0]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	2000066c 	.word	0x2000066c

08003b58 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003b5c:	4b03      	ldr	r3, [pc, #12]	; (8003b6c <HAL_GetTickPrio+0x14>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	20000038 	.word	0x20000038

08003b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ba2:	4a04      	ldr	r2, [pc, #16]	; (8003bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	60d3      	str	r3, [r2, #12]
}
 8003ba8:	bf00      	nop
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	e000ed00 	.word	0xe000ed00

08003bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bbc:	4b04      	ldr	r3, [pc, #16]	; (8003bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	0a1b      	lsrs	r3, r3, #8
 8003bc2:	f003 0307 	and.w	r3, r3, #7
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	e000ed00 	.word	0xe000ed00

08003bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	db0b      	blt.n	8003bfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003be6:	79fb      	ldrb	r3, [r7, #7]
 8003be8:	f003 021f 	and.w	r2, r3, #31
 8003bec:	4907      	ldr	r1, [pc, #28]	; (8003c0c <__NVIC_EnableIRQ+0x38>)
 8003bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf2:	095b      	lsrs	r3, r3, #5
 8003bf4:	2001      	movs	r0, #1
 8003bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8003bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	e000e100 	.word	0xe000e100

08003c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	6039      	str	r1, [r7, #0]
 8003c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	db0a      	blt.n	8003c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	490c      	ldr	r1, [pc, #48]	; (8003c5c <__NVIC_SetPriority+0x4c>)
 8003c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2e:	0112      	lsls	r2, r2, #4
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	440b      	add	r3, r1
 8003c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c38:	e00a      	b.n	8003c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	4908      	ldr	r1, [pc, #32]	; (8003c60 <__NVIC_SetPriority+0x50>)
 8003c40:	79fb      	ldrb	r3, [r7, #7]
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	3b04      	subs	r3, #4
 8003c48:	0112      	lsls	r2, r2, #4
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	761a      	strb	r2, [r3, #24]
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	e000e100 	.word	0xe000e100
 8003c60:	e000ed00 	.word	0xe000ed00

08003c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b089      	sub	sp, #36	; 0x24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f1c3 0307 	rsb	r3, r3, #7
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	bf28      	it	cs
 8003c82:	2304      	movcs	r3, #4
 8003c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	2b06      	cmp	r3, #6
 8003c8c:	d902      	bls.n	8003c94 <NVIC_EncodePriority+0x30>
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	3b03      	subs	r3, #3
 8003c92:	e000      	b.n	8003c96 <NVIC_EncodePriority+0x32>
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c98:	f04f 32ff 	mov.w	r2, #4294967295
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43da      	mvns	r2, r3
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	401a      	ands	r2, r3
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cac:	f04f 31ff 	mov.w	r1, #4294967295
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb6:	43d9      	mvns	r1, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cbc:	4313      	orrs	r3, r2
         );
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3724      	adds	r7, #36	; 0x24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
	...

08003ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cdc:	d301      	bcc.n	8003ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e00f      	b.n	8003d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ce2:	4a0a      	ldr	r2, [pc, #40]	; (8003d0c <SysTick_Config+0x40>)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cea:	210f      	movs	r1, #15
 8003cec:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf0:	f7ff ff8e 	bl	8003c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cf4:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <SysTick_Config+0x40>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cfa:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <SysTick_Config+0x40>)
 8003cfc:	2207      	movs	r2, #7
 8003cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	e000e010 	.word	0xe000e010

08003d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff ff29 	bl	8003b70 <__NVIC_SetPriorityGrouping>
}
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b086      	sub	sp, #24
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	607a      	str	r2, [r7, #4]
 8003d32:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d34:	f7ff ff40 	bl	8003bb8 <__NVIC_GetPriorityGrouping>
 8003d38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	68b9      	ldr	r1, [r7, #8]
 8003d3e:	6978      	ldr	r0, [r7, #20]
 8003d40:	f7ff ff90 	bl	8003c64 <NVIC_EncodePriority>
 8003d44:	4602      	mov	r2, r0
 8003d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d4a:	4611      	mov	r1, r2
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff ff5f 	bl	8003c10 <__NVIC_SetPriority>
}
 8003d52:	bf00      	nop
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	4603      	mov	r3, r0
 8003d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff ff33 	bl	8003bd4 <__NVIC_EnableIRQ>
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b082      	sub	sp, #8
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff ffa4 	bl	8003ccc <SysTick_Config>
 8003d84:	4603      	mov	r3, r0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e04f      	b.n	8003e40 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d008      	beq.n	8003dbe <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2204      	movs	r2, #4
 8003db0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e040      	b.n	8003e40 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 020e 	bic.w	r2, r2, #14
 8003dcc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ddc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0201 	bic.w	r2, r2, #1
 8003dec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df2:	f003 021c 	and.w	r2, r3, #28
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8003e00:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e0a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00c      	beq.n	8003e2e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e22:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e2c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d005      	beq.n	8003e70 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2204      	movs	r2, #4
 8003e68:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	73fb      	strb	r3, [r7, #15]
 8003e6e:	e047      	b.n	8003f00 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 020e 	bic.w	r2, r2, #14
 8003e7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0201 	bic.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea4:	f003 021c 	and.w	r2, r3, #28
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	2101      	movs	r1, #1
 8003eae:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ebc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00c      	beq.n	8003ee0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ed4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ede:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d003      	beq.n	8003f00 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	4798      	blx	r3
    }
  }
  return status;
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
	...

08003f0c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f16:	2300      	movs	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f1a:	e14c      	b.n	80041b6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	2101      	movs	r1, #1
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	fa01 f303 	lsl.w	r3, r1, r3
 8003f28:	4013      	ands	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 813e 	beq.w	80041b0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d005      	beq.n	8003f4c <HAL_GPIO_Init+0x40>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 0303 	and.w	r3, r3, #3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d130      	bne.n	8003fae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	2203      	movs	r2, #3
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4013      	ands	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f82:	2201      	movs	r2, #1
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	091b      	lsrs	r3, r3, #4
 8003f98:	f003 0201 	and.w	r2, r3, #1
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	d017      	beq.n	8003fea <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	2203      	movs	r2, #3
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	43db      	mvns	r3, r3
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d123      	bne.n	800403e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	08da      	lsrs	r2, r3, #3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3208      	adds	r2, #8
 8003ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004002:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	220f      	movs	r2, #15
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	43db      	mvns	r3, r3
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4013      	ands	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	691a      	ldr	r2, [r3, #16]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4313      	orrs	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	08da      	lsrs	r2, r3, #3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3208      	adds	r2, #8
 8004038:	6939      	ldr	r1, [r7, #16]
 800403a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	2203      	movs	r2, #3
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	43db      	mvns	r3, r3
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4013      	ands	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f003 0203 	and.w	r2, r3, #3
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	4313      	orrs	r3, r2
 800406a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 8098 	beq.w	80041b0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004080:	4a54      	ldr	r2, [pc, #336]	; (80041d4 <HAL_GPIO_Init+0x2c8>)
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	089b      	lsrs	r3, r3, #2
 8004086:	3302      	adds	r3, #2
 8004088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800408c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f003 0303 	and.w	r3, r3, #3
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	220f      	movs	r2, #15
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	43db      	mvns	r3, r3
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4013      	ands	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80040aa:	d019      	beq.n	80040e0 <HAL_GPIO_Init+0x1d4>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a4a      	ldr	r2, [pc, #296]	; (80041d8 <HAL_GPIO_Init+0x2cc>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d013      	beq.n	80040dc <HAL_GPIO_Init+0x1d0>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a49      	ldr	r2, [pc, #292]	; (80041dc <HAL_GPIO_Init+0x2d0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d00d      	beq.n	80040d8 <HAL_GPIO_Init+0x1cc>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a48      	ldr	r2, [pc, #288]	; (80041e0 <HAL_GPIO_Init+0x2d4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d007      	beq.n	80040d4 <HAL_GPIO_Init+0x1c8>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a47      	ldr	r2, [pc, #284]	; (80041e4 <HAL_GPIO_Init+0x2d8>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d101      	bne.n	80040d0 <HAL_GPIO_Init+0x1c4>
 80040cc:	2304      	movs	r3, #4
 80040ce:	e008      	b.n	80040e2 <HAL_GPIO_Init+0x1d6>
 80040d0:	2307      	movs	r3, #7
 80040d2:	e006      	b.n	80040e2 <HAL_GPIO_Init+0x1d6>
 80040d4:	2303      	movs	r3, #3
 80040d6:	e004      	b.n	80040e2 <HAL_GPIO_Init+0x1d6>
 80040d8:	2302      	movs	r3, #2
 80040da:	e002      	b.n	80040e2 <HAL_GPIO_Init+0x1d6>
 80040dc:	2301      	movs	r3, #1
 80040de:	e000      	b.n	80040e2 <HAL_GPIO_Init+0x1d6>
 80040e0:	2300      	movs	r3, #0
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	f002 0203 	and.w	r2, r2, #3
 80040e8:	0092      	lsls	r2, r2, #2
 80040ea:	4093      	lsls	r3, r2
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040f2:	4938      	ldr	r1, [pc, #224]	; (80041d4 <HAL_GPIO_Init+0x2c8>)
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	089b      	lsrs	r3, r3, #2
 80040f8:	3302      	adds	r3, #2
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004100:	4b39      	ldr	r3, [pc, #228]	; (80041e8 <HAL_GPIO_Init+0x2dc>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	43db      	mvns	r3, r3
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4013      	ands	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004124:	4a30      	ldr	r2, [pc, #192]	; (80041e8 <HAL_GPIO_Init+0x2dc>)
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800412a:	4b2f      	ldr	r3, [pc, #188]	; (80041e8 <HAL_GPIO_Init+0x2dc>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	43db      	mvns	r3, r3
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	4013      	ands	r3, r2
 8004138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800414e:	4a26      	ldr	r2, [pc, #152]	; (80041e8 <HAL_GPIO_Init+0x2dc>)
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004154:	4b24      	ldr	r3, [pc, #144]	; (80041e8 <HAL_GPIO_Init+0x2dc>)
 8004156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800415a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	43db      	mvns	r3, r3
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4013      	ands	r3, r2
 8004164:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4313      	orrs	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800417a:	4a1b      	ldr	r2, [pc, #108]	; (80041e8 <HAL_GPIO_Init+0x2dc>)
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004182:	4b19      	ldr	r3, [pc, #100]	; (80041e8 <HAL_GPIO_Init+0x2dc>)
 8004184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	43db      	mvns	r3, r3
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	4013      	ands	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041a8:	4a0f      	ldr	r2, [pc, #60]	; (80041e8 <HAL_GPIO_Init+0x2dc>)
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	3301      	adds	r3, #1
 80041b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	fa22 f303 	lsr.w	r3, r2, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f47f aeab 	bne.w	8003f1c <HAL_GPIO_Init+0x10>
  }
}
 80041c6:	bf00      	nop
 80041c8:	bf00      	nop
 80041ca:	371c      	adds	r7, #28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	40010000 	.word	0x40010000
 80041d8:	48000400 	.word	0x48000400
 80041dc:	48000800 	.word	0x48000800
 80041e0:	48000c00 	.word	0x48000c00
 80041e4:	48001000 	.word	0x48001000
 80041e8:	58000800 	.word	0x58000800

080041ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	807b      	strh	r3, [r7, #2]
 80041f8:	4613      	mov	r3, r2
 80041fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041fc:	787b      	ldrb	r3, [r7, #1]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004202:	887a      	ldrh	r2, [r7, #2]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004208:	e002      	b.n	8004210 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800420a:	887a      	ldrh	r2, [r7, #2]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e081      	b.n	8004332 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7ff f8b8 	bl	80033b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2224      	movs	r2, #36	; 0x24
 800424c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0201 	bic.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800426c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800427c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d107      	bne.n	8004296 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004292:	609a      	str	r2, [r3, #8]
 8004294:	e006      	b.n	80042a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80042a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d104      	bne.n	80042b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691a      	ldr	r2, [r3, #16]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	69d9      	ldr	r1, [r3, #28]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a1a      	ldr	r2, [r3, #32]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2220      	movs	r2, #32
 800431e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b20      	cmp	r3, #32
 800434e:	d138      	bne.n	80043c2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800435a:	2302      	movs	r3, #2
 800435c:	e032      	b.n	80043c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2224      	movs	r2, #36	; 0x24
 800436a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0201 	bic.w	r2, r2, #1
 800437c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800438c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6819      	ldr	r1, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0201 	orr.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	e000      	b.n	80043c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043c2:	2302      	movs	r3, #2
  }
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b20      	cmp	r3, #32
 80043e4:	d139      	bne.n	800445a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80043f0:	2302      	movs	r3, #2
 80043f2:	e033      	b.n	800445c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2224      	movs	r2, #36	; 0x24
 8004400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0201 	bic.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004422:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	021b      	lsls	r3, r3, #8
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f042 0201 	orr.w	r2, r2, #1
 8004444:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	e000      	b.n	800445c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800445a:	2302      	movs	r3, #2
  }
}
 800445c:	4618      	mov	r0, r3
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800446c:	4b05      	ldr	r3, [pc, #20]	; (8004484 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a04      	ldr	r2, [pc, #16]	; (8004484 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004476:	6013      	str	r3, [r2, #0]
}
 8004478:	bf00      	nop
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	58000400 	.word	0x58000400

08004488 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800448c:	4b04      	ldr	r3, [pc, #16]	; (80044a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004494:	4618      	mov	r0, r3
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	58000400 	.word	0x58000400

080044a4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80044a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044b6:	d101      	bne.n	80044bc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80044b8:	2301      	movs	r3, #1
 80044ba:	e000      	b.n	80044be <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80044cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044da:	6013      	str	r3, [r2, #0]
}
 80044dc:	bf00      	nop
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80044e6:	b480      	push	{r7}
 80044e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80044ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044f8:	6013      	str	r3, [r2, #0]
}
 80044fa:	bf00      	nop
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004512:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004516:	d101      	bne.n	800451c <LL_RCC_HSE_IsReady+0x18>
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <LL_RCC_HSE_IsReady+0x1a>
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800452c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800453a:	6013      	str	r3, [r2, #0]
}
 800453c:	bf00      	nop
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8004546:	b480      	push	{r7}
 8004548:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800454a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004558:	6013      	str	r3, [r2, #0]
}
 800455a:	bf00      	nop
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004576:	d101      	bne.n	800457c <LL_RCC_HSI_IsReady+0x18>
 8004578:	2301      	movs	r3, #1
 800457a:	e000      	b.n	800457e <LL_RCC_HSI_IsReady+0x1a>
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	061b      	lsls	r3, r3, #24
 800459e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045a2:	4313      	orrs	r3, r2
 80045a4:	604b      	str	r3, [r1, #4]
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80045b2:	b480      	push	{r7}
 80045b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80045b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045c2:	f043 0301 	orr.w	r3, r3, #1
 80045c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80045ca:	bf00      	nop
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80045d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045e4:	f023 0301 	bic.w	r3, r3, #1
 80045e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80045ec:	bf00      	nop
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80045f6:	b480      	push	{r7}
 80045f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80045fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b02      	cmp	r3, #2
 8004608:	d101      	bne.n	800460e <LL_RCC_HSI48_IsReady+0x18>
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <LL_RCC_HSI48_IsReady+0x1a>
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800461a:	b480      	push	{r7}
 800461c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800461e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004626:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004632:	bf00      	nop
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004648:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800464c:	f023 0301 	bic.w	r3, r3, #1
 8004650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004654:	bf00      	nop
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800465e:	b480      	push	{r7}
 8004660:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800466e:	f043 0304 	orr.w	r3, r3, #4
 8004672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004676:	bf00      	nop
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004690:	f023 0304 	bic.w	r3, r3, #4
 8004694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004698:	bf00      	nop
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80046a2:	b480      	push	{r7}
 80046a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80046a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d101      	bne.n	80046ba <LL_RCC_LSE_IsReady+0x18>
 80046b6:	2301      	movs	r3, #1
 80046b8:	e000      	b.n	80046bc <LL_RCC_LSE_IsReady+0x1a>
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80046c6:	b480      	push	{r7}
 80046c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80046ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80046de:	bf00      	nop
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80046ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046f8:	f023 0301 	bic.w	r3, r3, #1
 80046fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004700:	bf00      	nop
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800470a:	b480      	push	{r7}
 800470c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800470e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004712:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b02      	cmp	r3, #2
 800471c:	d101      	bne.n	8004722 <LL_RCC_LSI1_IsReady+0x18>
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <LL_RCC_LSI1_IsReady+0x1a>
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800472e:	b480      	push	{r7}
 8004730:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800473a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800473e:	f043 0304 	orr.w	r3, r3, #4
 8004742:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004746:	bf00      	nop
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800475c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004760:	f023 0304 	bic.w	r3, r3, #4
 8004764:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004768:	bf00      	nop
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8004772:	b480      	push	{r7}
 8004774:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800477a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800477e:	f003 0308 	and.w	r3, r3, #8
 8004782:	2b08      	cmp	r3, #8
 8004784:	d101      	bne.n	800478a <LL_RCC_LSI2_IsReady+0x18>
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <LL_RCC_LSI2_IsReady+0x1a>
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800479e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	021b      	lsls	r3, r3, #8
 80047ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047b2:	4313      	orrs	r3, r2
 80047b4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80047c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047d2:	f043 0301 	orr.w	r3, r3, #1
 80047d6:	6013      	str	r3, [r2, #0]
}
 80047d8:	bf00      	nop
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80047e2:	b480      	push	{r7}
 80047e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80047e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047f0:	f023 0301 	bic.w	r3, r3, #1
 80047f4:	6013      	str	r3, [r2, #0]
}
 80047f6:	bf00      	nop
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b02      	cmp	r3, #2
 8004810:	d101      	bne.n	8004816 <LL_RCC_MSI_IsReady+0x16>
 8004812:	2301      	movs	r3, #1
 8004814:	e000      	b.n	8004818 <LL_RCC_MSI_IsReady+0x18>
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800482a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004834:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4313      	orrs	r3, r2
 800483c:	600b      	str	r3, [r1, #0]
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800485a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2bb0      	cmp	r3, #176	; 0xb0
 8004860:	d901      	bls.n	8004866 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8004862:	23b0      	movs	r3, #176	; 0xb0
 8004864:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8004866:	687b      	ldr	r3, [r7, #4]
}
 8004868:	4618      	mov	r0, r3
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800487c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	021b      	lsls	r3, r3, #8
 800488a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800488e:	4313      	orrs	r3, r2
 8004890:	604b      	str	r3, [r1, #4]
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80048a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f023 0203 	bic.w	r2, r3, #3
 80048b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	608b      	str	r3, [r1, #8]
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80048c6:	b480      	push	{r7}
 80048c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80048ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 030c 	and.w	r3, r3, #12
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80048e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	608b      	str	r3, [r1, #8]
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800490e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004912:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004916:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800491a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800493a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800493e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004942:	f023 020f 	bic.w	r2, r3, #15
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	091b      	lsrs	r3, r3, #4
 800494a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800494e:	4313      	orrs	r3, r2
 8004950:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004972:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4313      	orrs	r3, r2
 800497a:	608b      	str	r3, [r1, #8]
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800499a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	608b      	str	r3, [r1, #8]
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80049b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80049cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80049e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a26:	6013      	str	r3, [r2, #0]
}
 8004a28:	bf00      	nop
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004a32:	b480      	push	{r7}
 8004a34:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a44:	6013      	str	r3, [r2, #0]
}
 8004a46:	bf00      	nop
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a62:	d101      	bne.n	8004a68 <LL_RCC_PLL_IsReady+0x18>
 8004a64:	2301      	movs	r3, #1
 8004a66:	e000      	b.n	8004a6a <LL_RCC_PLL_IsReady+0x1a>
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	0a1b      	lsrs	r3, r3, #8
 8004a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f003 0303 	and.w	r3, r3, #3
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae8:	d101      	bne.n	8004aee <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004afa:	b480      	push	{r7}
 8004afc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b02:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b0e:	d101      	bne.n	8004b14 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004b10:	2301      	movs	r3, #1
 8004b12:	e000      	b.n	8004b16 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b28:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b34:	d101      	bne.n	8004b3a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004b46:	b480      	push	{r7}
 8004b48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b58:	d101      	bne.n	8004b5e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e000      	b.n	8004b60 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b7c:	d101      	bne.n	8004b82 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e000      	b.n	8004b84 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
	...

08004b90 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b90:	b590      	push	{r4, r7, lr}
 8004b92:	b08d      	sub	sp, #52	; 0x34
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e37f      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0320 	and.w	r3, r3, #32
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 8092 	beq.w	8004cd4 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bb0:	f7ff fe89 	bl	80048c6 <LL_RCC_GetSysClkSource>
 8004bb4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bb6:	f7ff ff82 	bl	8004abe <LL_RCC_PLL_GetMainSource>
 8004bba:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d005      	beq.n	8004bce <HAL_RCC_OscConfig+0x3e>
 8004bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc4:	2b0c      	cmp	r3, #12
 8004bc6:	d14c      	bne.n	8004c62 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d149      	bne.n	8004c62 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bce:	f7ff fe17 	bl	8004800 <LL_RCC_MSI_IsReady>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d005      	beq.n	8004be4 <HAL_RCC_OscConfig+0x54>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e35e      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004be8:	f7ff fe2f 	bl	800484a <LL_RCC_MSI_GetRange>
 8004bec:	4603      	mov	r3, r0
 8004bee:	429c      	cmp	r4, r3
 8004bf0:	d914      	bls.n	8004c1c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fd44 	bl	8005684 <RCC_SetFlashLatencyFromMSIRange>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e34d      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff fe09 	bl	8004822 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff fe2d 	bl	8004874 <LL_RCC_MSI_SetCalibTrimming>
 8004c1a:	e013      	b.n	8004c44 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7ff fdfe 	bl	8004822 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff fe22 	bl	8004874 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 fd25 	bl	8005684 <RCC_SetFlashLatencyFromMSIRange>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e32e      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004c44:	f000 fcde 	bl	8005604 <HAL_RCC_GetHCLKFreq>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	4aa5      	ldr	r2, [pc, #660]	; (8004ee0 <HAL_RCC_OscConfig+0x350>)
 8004c4c:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c4e:	4ba5      	ldr	r3, [pc, #660]	; (8004ee4 <HAL_RCC_OscConfig+0x354>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7fe ff26 	bl	8003aa4 <HAL_InitTick>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d039      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e31f      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d01e      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c6a:	f7ff fdab 	bl	80047c4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c6e:	f7fe ff67 	bl	8003b40 <HAL_GetTick>
 8004c72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004c74:	e008      	b.n	8004c88 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c76:	f7fe ff63 	bl	8003b40 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e30c      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004c88:	f7ff fdba 	bl	8004800 <LL_RCC_MSI_IsReady>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0f1      	beq.n	8004c76 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7ff fdc3 	bl	8004822 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff fde7 	bl	8004874 <LL_RCC_MSI_SetCalibTrimming>
 8004ca6:	e015      	b.n	8004cd4 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004ca8:	f7ff fd9b 	bl	80047e2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cac:	f7fe ff48 	bl	8003b40 <HAL_GetTick>
 8004cb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cb4:	f7fe ff44 	bl	8003b40 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e2ed      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004cc6:	f7ff fd9b 	bl	8004800 <LL_RCC_MSI_IsReady>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1f1      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x124>
 8004cd0:	e000      	b.n	8004cd4 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cd2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d04e      	beq.n	8004d7e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ce0:	f7ff fdf1 	bl	80048c6 <LL_RCC_GetSysClkSource>
 8004ce4:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ce6:	f7ff feea 	bl	8004abe <LL_RCC_PLL_GetMainSource>
 8004cea:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	2b08      	cmp	r3, #8
 8004cf0:	d005      	beq.n	8004cfe <HAL_RCC_OscConfig+0x16e>
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	2b0c      	cmp	r3, #12
 8004cf6:	d10d      	bne.n	8004d14 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	d10a      	bne.n	8004d14 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cfe:	f7ff fc01 	bl	8004504 <LL_RCC_HSE_IsReady>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d039      	beq.n	8004d7c <HAL_RCC_OscConfig+0x1ec>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d135      	bne.n	8004d7c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e2c6      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d1c:	d102      	bne.n	8004d24 <HAL_RCC_OscConfig+0x194>
 8004d1e:	f7ff fbd3 	bl	80044c8 <LL_RCC_HSE_Enable>
 8004d22:	e001      	b.n	8004d28 <HAL_RCC_OscConfig+0x198>
 8004d24:	f7ff fbdf 	bl	80044e6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d012      	beq.n	8004d56 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d30:	f7fe ff06 	bl	8003b40 <HAL_GetTick>
 8004d34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d38:	f7fe ff02 	bl	8003b40 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b64      	cmp	r3, #100	; 0x64
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e2ab      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004d4a:	f7ff fbdb 	bl	8004504 <LL_RCC_HSE_IsReady>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0f1      	beq.n	8004d38 <HAL_RCC_OscConfig+0x1a8>
 8004d54:	e013      	b.n	8004d7e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d56:	f7fe fef3 	bl	8003b40 <HAL_GetTick>
 8004d5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d5e:	f7fe feef 	bl	8003b40 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b64      	cmp	r3, #100	; 0x64
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e298      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004d70:	f7ff fbc8 	bl	8004504 <LL_RCC_HSE_IsReady>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1f1      	bne.n	8004d5e <HAL_RCC_OscConfig+0x1ce>
 8004d7a:	e000      	b.n	8004d7e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d7c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d051      	beq.n	8004e2e <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d8a:	f7ff fd9c 	bl	80048c6 <LL_RCC_GetSysClkSource>
 8004d8e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d90:	f7ff fe95 	bl	8004abe <LL_RCC_PLL_GetMainSource>
 8004d94:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	d005      	beq.n	8004da8 <HAL_RCC_OscConfig+0x218>
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	2b0c      	cmp	r3, #12
 8004da0:	d113      	bne.n	8004dca <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d110      	bne.n	8004dca <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004da8:	f7ff fbdc 	bl	8004564 <LL_RCC_HSI_IsReady>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <HAL_RCC_OscConfig+0x22e>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e271      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff fbe0 	bl	8004588 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dc8:	e031      	b.n	8004e2e <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d019      	beq.n	8004e06 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dd2:	f7ff fba9 	bl	8004528 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd6:	f7fe feb3 	bl	8003b40 <HAL_GetTick>
 8004dda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dde:	f7fe feaf 	bl	8003b40 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e258      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004df0:	f7ff fbb8 	bl	8004564 <LL_RCC_HSI_IsReady>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0f1      	beq.n	8004dde <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff fbc2 	bl	8004588 <LL_RCC_HSI_SetCalibTrimming>
 8004e04:	e013      	b.n	8004e2e <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e06:	f7ff fb9e 	bl	8004546 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0a:	f7fe fe99 	bl	8003b40 <HAL_GetTick>
 8004e0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004e10:	e008      	b.n	8004e24 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e12:	f7fe fe95 	bl	8003b40 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e23e      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004e24:	f7ff fb9e 	bl	8004564 <LL_RCC_HSI_IsReady>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1f1      	bne.n	8004e12 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0308 	and.w	r3, r3, #8
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d106      	bne.n	8004e48 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f000 80a4 	beq.w	8004f90 <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d077      	beq.n	8004f40 <HAL_RCC_OscConfig+0x3b0>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0310 	and.w	r3, r3, #16
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d04b      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x364>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004e5c:	f7ff fc55 	bl	800470a <LL_RCC_LSI1_IsReady>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d113      	bne.n	8004e8e <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004e66:	f7ff fc2e 	bl	80046c6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e6a:	f7fe fe69 	bl	8003b40 <HAL_GetTick>
 8004e6e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004e70:	e008      	b.n	8004e84 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004e72:	f7fe fe65 	bl	8003b40 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e20e      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004e84:	f7ff fc41 	bl	800470a <LL_RCC_LSI1_IsReady>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0f1      	beq.n	8004e72 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004e8e:	f7ff fc4e 	bl	800472e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e92:	f7fe fe55 	bl	8003b40 <HAL_GetTick>
 8004e96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004e98:	e008      	b.n	8004eac <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004e9a:	f7fe fe51 	bl	8003b40 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b03      	cmp	r3, #3
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e1fa      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004eac:	f7ff fc61 	bl	8004772 <LL_RCC_LSI2_IsReady>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f1      	beq.n	8004e9a <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7ff fc6b 	bl	8004796 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004ec0:	f7ff fc12 	bl	80046e8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec4:	f7fe fe3c 	bl	8003b40 <HAL_GetTick>
 8004ec8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004eca:	e00d      	b.n	8004ee8 <HAL_RCC_OscConfig+0x358>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004ecc:	f7fe fe38 	bl	8003b40 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d906      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e1e1      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
 8004ede:	bf00      	nop
 8004ee0:	20000034 	.word	0x20000034
 8004ee4:	20000038 	.word	0x20000038
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004ee8:	f7ff fc0f 	bl	800470a <LL_RCC_LSI1_IsReady>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1ec      	bne.n	8004ecc <HAL_RCC_OscConfig+0x33c>
 8004ef2:	e04d      	b.n	8004f90 <HAL_RCC_OscConfig+0x400>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004ef4:	f7ff fbe7 	bl	80046c6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef8:	f7fe fe22 	bl	8003b40 <HAL_GetTick>
 8004efc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0x382>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f00:	f7fe fe1e 	bl	8003b40 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e1c7      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004f12:	f7ff fbfa 	bl	800470a <LL_RCC_LSI1_IsReady>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0f1      	beq.n	8004f00 <HAL_RCC_OscConfig+0x370>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004f1c:	f7ff fc18 	bl	8004750 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004f20:	e008      	b.n	8004f34 <HAL_RCC_OscConfig+0x3a4>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004f22:	f7fe fe0d 	bl	8003b40 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e1b6      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004f34:	f7ff fc1d 	bl	8004772 <LL_RCC_LSI2_IsReady>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1f1      	bne.n	8004f22 <HAL_RCC_OscConfig+0x392>
 8004f3e:	e027      	b.n	8004f90 <HAL_RCC_OscConfig+0x400>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004f40:	f7ff fc06 	bl	8004750 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f44:	f7fe fdfc 	bl	8003b40 <HAL_GetTick>
 8004f48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x3ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004f4c:	f7fe fdf8 	bl	8003b40 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b03      	cmp	r3, #3
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e1a1      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004f5e:	f7ff fc08 	bl	8004772 <LL_RCC_LSI2_IsReady>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1f1      	bne.n	8004f4c <HAL_RCC_OscConfig+0x3bc>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004f68:	f7ff fbbe 	bl	80046e8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f6c:	f7fe fde8 	bl	8003b40 <HAL_GetTick>
 8004f70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0x3f6>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f74:	f7fe fde4 	bl	8003b40 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e18d      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004f86:	f7ff fbc0 	bl	800470a <LL_RCC_LSI1_IsReady>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1f1      	bne.n	8004f74 <HAL_RCC_OscConfig+0x3e4>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d05b      	beq.n	8005054 <HAL_RCC_OscConfig+0x4c4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f9c:	4ba7      	ldr	r3, [pc, #668]	; (800523c <HAL_RCC_OscConfig+0x6ac>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d114      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x442>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004fa8:	f7ff fa5e 	bl	8004468 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fac:	f7fe fdc8 	bl	8003b40 <HAL_GetTick>
 8004fb0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x436>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fb4:	f7fe fdc4 	bl	8003b40 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e16d      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fc6:	4b9d      	ldr	r3, [pc, #628]	; (800523c <HAL_RCC_OscConfig+0x6ac>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0f0      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x424>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d102      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x450>
 8004fda:	f7ff fb1e 	bl	800461a <LL_RCC_LSE_Enable>
 8004fde:	e00c      	b.n	8004ffa <HAL_RCC_OscConfig+0x46a>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	2b05      	cmp	r3, #5
 8004fe6:	d104      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x462>
 8004fe8:	f7ff fb39 	bl	800465e <LL_RCC_LSE_EnableBypass>
 8004fec:	f7ff fb15 	bl	800461a <LL_RCC_LSE_Enable>
 8004ff0:	e003      	b.n	8004ffa <HAL_RCC_OscConfig+0x46a>
 8004ff2:	f7ff fb23 	bl	800463c <LL_RCC_LSE_Disable>
 8004ff6:	f7ff fb43 	bl	8004680 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d014      	beq.n	800502c <HAL_RCC_OscConfig+0x49c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005002:	f7fe fd9d 	bl	8003b40 <HAL_GetTick>
 8005006:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005008:	e00a      	b.n	8005020 <HAL_RCC_OscConfig+0x490>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800500a:	f7fe fd99 	bl	8003b40 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	f241 3288 	movw	r2, #5000	; 0x1388
 8005018:	4293      	cmp	r3, r2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e140      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005020:	f7ff fb3f 	bl	80046a2 <LL_RCC_LSE_IsReady>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d0ef      	beq.n	800500a <HAL_RCC_OscConfig+0x47a>
 800502a:	e013      	b.n	8005054 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800502c:	f7fe fd88 	bl	8003b40 <HAL_GetTick>
 8005030:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005032:	e00a      	b.n	800504a <HAL_RCC_OscConfig+0x4ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005034:	f7fe fd84 	bl	8003b40 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005042:	4293      	cmp	r3, r2
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e12b      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() != 0U)
 800504a:	f7ff fb2a 	bl	80046a2 <LL_RCC_LSE_IsReady>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1ef      	bne.n	8005034 <HAL_RCC_OscConfig+0x4a4>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505c:	2b00      	cmp	r3, #0
 800505e:	d02c      	beq.n	80050ba <HAL_RCC_OscConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005064:	2b00      	cmp	r3, #0
 8005066:	d014      	beq.n	8005092 <HAL_RCC_OscConfig+0x502>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005068:	f7ff faa3 	bl	80045b2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800506c:	f7fe fd68 	bl	8003b40 <HAL_GetTick>
 8005070:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0x4f6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005074:	f7fe fd64 	bl	8003b40 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e10d      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005086:	f7ff fab6 	bl	80045f6 <LL_RCC_HSI48_IsReady>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0f1      	beq.n	8005074 <HAL_RCC_OscConfig+0x4e4>
 8005090:	e013      	b.n	80050ba <HAL_RCC_OscConfig+0x52a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005092:	f7ff fa9f 	bl	80045d4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005096:	f7fe fd53 	bl	8003b40 <HAL_GetTick>
 800509a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800509c:	e008      	b.n	80050b0 <HAL_RCC_OscConfig+0x520>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800509e:	f7fe fd4f 	bl	8003b40 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e0f8      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80050b0:	f7ff faa1 	bl	80045f6 <LL_RCC_HSI48_IsReady>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1f1      	bne.n	800509e <HAL_RCC_OscConfig+0x50e>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 80ee 	beq.w	80052a0 <HAL_RCC_OscConfig+0x710>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050c4:	f7ff fbff 	bl	80048c6 <LL_RCC_GetSysClkSource>
 80050c8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80050ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	f040 80b4 	bne.w	8005244 <HAL_RCC_OscConfig+0x6b4>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f003 0203 	and.w	r2, r3, #3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d123      	bne.n	8005132 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d11c      	bne.n	8005132 <HAL_RCC_OscConfig+0x5a2>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	0a1b      	lsrs	r3, r3, #8
 80050fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005104:	429a      	cmp	r2, r3
 8005106:	d114      	bne.n	8005132 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005112:	429a      	cmp	r2, r3
 8005114:	d10d      	bne.n	8005132 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005120:	429a      	cmp	r2, r3
 8005122:	d106      	bne.n	8005132 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800512e:	429a      	cmp	r2, r3
 8005130:	d05d      	beq.n	80051ee <HAL_RCC_OscConfig+0x65e>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	2b0c      	cmp	r3, #12
 8005136:	d058      	beq.n	80051ea <HAL_RCC_OscConfig+0x65a>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <HAL_RCC_OscConfig+0x5ba>

          {
            return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e0ab      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800514a:	f7ff fc72 	bl	8004a32 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800514e:	f7fe fcf7 	bl	8003b40 <HAL_GetTick>
 8005152:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005154:	e008      	b.n	8005168 <HAL_RCC_OscConfig+0x5d8>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005156:	f7fe fcf3 	bl	8003b40 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x5d8>
              {
                return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e09c      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1ef      	bne.n	8005156 <HAL_RCC_OscConfig+0x5c6>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	4b30      	ldr	r3, [pc, #192]	; (8005240 <HAL_RCC_OscConfig+0x6b0>)
 800517e:	4013      	ands	r3, r2
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005188:	4311      	orrs	r1, r2
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800518e:	0212      	lsls	r2, r2, #8
 8005190:	4311      	orrs	r1, r2
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005196:	4311      	orrs	r1, r2
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800519c:	4311      	orrs	r1, r2
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80051a2:	430a      	orrs	r2, r1
 80051a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80051ac:	f7ff fc32 	bl	8004a14 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051be:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051c0:	f7fe fcbe 	bl	8003b40 <HAL_GetTick>
 80051c4:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x64a>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c8:	f7fe fcba 	bl	8003b40 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x64a>
              {
                return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e063      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0ef      	beq.n	80051c8 <HAL_RCC_OscConfig+0x638>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051e8:	e05a      	b.n	80052a0 <HAL_RCC_OscConfig+0x710>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e059      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d151      	bne.n	80052a0 <HAL_RCC_OscConfig+0x710>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80051fc:	f7ff fc0a 	bl	8004a14 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800520a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800520e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005210:	f7fe fc96 	bl	8003b40 <HAL_GetTick>
 8005214:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0x69a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005218:	f7fe fc92 	bl	8003b40 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x69a>
            {
              return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e03b      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800522a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0ef      	beq.n	8005218 <HAL_RCC_OscConfig+0x688>
 8005238:	e032      	b.n	80052a0 <HAL_RCC_OscConfig+0x710>
 800523a:	bf00      	nop
 800523c:	58000400 	.word	0x58000400
 8005240:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	2b0c      	cmp	r3, #12
 8005248:	d028      	beq.n	800529c <HAL_RCC_OscConfig+0x70c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800524a:	f7ff fbf2 	bl	8004a32 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800524e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005258:	f023 0303 	bic.w	r3, r3, #3
 800525c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800525e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005268:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800526c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005270:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005272:	f7fe fc65 	bl	8003b40 <HAL_GetTick>
 8005276:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005278:	e008      	b.n	800528c <HAL_RCC_OscConfig+0x6fc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800527a:	f7fe fc61 	bl	8003b40 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d901      	bls.n	800528c <HAL_RCC_OscConfig+0x6fc>
          {
            return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e00a      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800528c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1ef      	bne.n	800527a <HAL_RCC_OscConfig+0x6ea>
 800529a:	e001      	b.n	80052a0 <HAL_RCC_OscConfig+0x710>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e000      	b.n	80052a2 <HAL_RCC_OscConfig+0x712>
      }
    }
  }
  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3734      	adds	r7, #52	; 0x34
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd90      	pop	{r4, r7, pc}
 80052aa:	bf00      	nop

080052ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e12d      	b.n	800551c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052c0:	4b98      	ldr	r3, [pc, #608]	; (8005524 <HAL_RCC_ClockConfig+0x278>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0307 	and.w	r3, r3, #7
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d91b      	bls.n	8005306 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ce:	4b95      	ldr	r3, [pc, #596]	; (8005524 <HAL_RCC_ClockConfig+0x278>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f023 0207 	bic.w	r2, r3, #7
 80052d6:	4993      	ldr	r1, [pc, #588]	; (8005524 <HAL_RCC_ClockConfig+0x278>)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	4313      	orrs	r3, r2
 80052dc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052de:	f7fe fc2f 	bl	8003b40 <HAL_GetTick>
 80052e2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052e4:	e008      	b.n	80052f8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80052e6:	f7fe fc2b 	bl	8003b40 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e111      	b.n	800551c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052f8:	4b8a      	ldr	r3, [pc, #552]	; (8005524 <HAL_RCC_ClockConfig+0x278>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d1ef      	bne.n	80052e6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d016      	beq.n	8005340 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	4618      	mov	r0, r3
 8005318:	f7ff fae1 	bl	80048de <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800531c:	f7fe fc10 	bl	8003b40 <HAL_GetTick>
 8005320:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005322:	e008      	b.n	8005336 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005324:	f7fe fc0c 	bl	8003b40 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e0f2      	b.n	800551c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005336:	f7ff fbce 	bl	8004ad6 <LL_RCC_IsActiveFlag_HPRE>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0f1      	beq.n	8005324 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b00      	cmp	r3, #0
 800534a:	d016      	beq.n	800537a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	4618      	mov	r0, r3
 8005352:	f7ff fad8 	bl	8004906 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005356:	f7fe fbf3 	bl	8003b40 <HAL_GetTick>
 800535a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800535c:	e008      	b.n	8005370 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800535e:	f7fe fbef 	bl	8003b40 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	2b02      	cmp	r3, #2
 800536a:	d901      	bls.n	8005370 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e0d5      	b.n	800551c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005370:	f7ff fbc3 	bl	8004afa <LL_RCC_IsActiveFlag_C2HPRE>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0f1      	beq.n	800535e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005382:	2b00      	cmp	r3, #0
 8005384:	d016      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	4618      	mov	r0, r3
 800538c:	f7ff fad1 	bl	8004932 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005390:	f7fe fbd6 	bl	8003b40 <HAL_GetTick>
 8005394:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005396:	e008      	b.n	80053aa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005398:	f7fe fbd2 	bl	8003b40 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e0b8      	b.n	800551c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80053aa:	f7ff fbb9 	bl	8004b20 <LL_RCC_IsActiveFlag_SHDHPRE>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0f1      	beq.n	8005398 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d016      	beq.n	80053ee <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7ff facb 	bl	8004960 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80053ca:	f7fe fbb9 	bl	8003b40 <HAL_GetTick>
 80053ce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80053d0:	e008      	b.n	80053e4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80053d2:	f7fe fbb5 	bl	8003b40 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e09b      	b.n	800551c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80053e4:	f7ff fbaf 	bl	8004b46 <LL_RCC_IsActiveFlag_PPRE1>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d0f1      	beq.n	80053d2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0308 	and.w	r3, r3, #8
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d017      	beq.n	800542a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	4618      	mov	r0, r3
 8005402:	f7ff fac1 	bl	8004988 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005406:	f7fe fb9b 	bl	8003b40 <HAL_GetTick>
 800540a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800540c:	e008      	b.n	8005420 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800540e:	f7fe fb97 	bl	8003b40 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d901      	bls.n	8005420 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e07d      	b.n	800551c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005420:	f7ff fba3 	bl	8004b6a <LL_RCC_IsActiveFlag_PPRE2>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0f1      	beq.n	800540e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d043      	beq.n	80054be <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d106      	bne.n	800544c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800543e:	f7ff f861 	bl	8004504 <LL_RCC_HSE_IsReady>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d11e      	bne.n	8005486 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e067      	b.n	800551c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	2b03      	cmp	r3, #3
 8005452:	d106      	bne.n	8005462 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005454:	f7ff fafc 	bl	8004a50 <LL_RCC_PLL_IsReady>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d113      	bne.n	8005486 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e05c      	b.n	800551c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d106      	bne.n	8005478 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800546a:	f7ff f9c9 	bl	8004800 <LL_RCC_MSI_IsReady>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d108      	bne.n	8005486 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e051      	b.n	800551c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005478:	f7ff f874 	bl	8004564 <LL_RCC_HSI_IsReady>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e04a      	b.n	800551c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	4618      	mov	r0, r3
 800548c:	f7ff fa07 	bl	800489e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005490:	f7fe fb56 	bl	8003b40 <HAL_GetTick>
 8005494:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005496:	e00a      	b.n	80054ae <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005498:	f7fe fb52 	bl	8003b40 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e036      	b.n	800551c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ae:	f7ff fa0a 	bl	80048c6 <LL_RCC_GetSysClkSource>
 80054b2:	4602      	mov	r2, r0
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d1ec      	bne.n	8005498 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054be:	4b19      	ldr	r3, [pc, #100]	; (8005524 <HAL_RCC_ClockConfig+0x278>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d21b      	bcs.n	8005504 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054cc:	4b15      	ldr	r3, [pc, #84]	; (8005524 <HAL_RCC_ClockConfig+0x278>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f023 0207 	bic.w	r2, r3, #7
 80054d4:	4913      	ldr	r1, [pc, #76]	; (8005524 <HAL_RCC_ClockConfig+0x278>)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	4313      	orrs	r3, r2
 80054da:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054dc:	f7fe fb30 	bl	8003b40 <HAL_GetTick>
 80054e0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80054e4:	f7fe fb2c 	bl	8003b40 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e012      	b.n	800551c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054f6:	4b0b      	ldr	r3, [pc, #44]	; (8005524 <HAL_RCC_ClockConfig+0x278>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0307 	and.w	r3, r3, #7
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	429a      	cmp	r2, r3
 8005502:	d1ef      	bne.n	80054e4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005504:	f000 f87e 	bl	8005604 <HAL_RCC_GetHCLKFreq>
 8005508:	4603      	mov	r3, r0
 800550a:	4a07      	ldr	r2, [pc, #28]	; (8005528 <HAL_RCC_ClockConfig+0x27c>)
 800550c:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800550e:	f7fe fb23 	bl	8003b58 <HAL_GetTickPrio>
 8005512:	4603      	mov	r3, r0
 8005514:	4618      	mov	r0, r3
 8005516:	f7fe fac5 	bl	8003aa4 <HAL_InitTick>
 800551a:	4603      	mov	r3, r0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	58004000 	.word	0x58004000
 8005528:	20000034 	.word	0x20000034

0800552c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800552c:	b590      	push	{r4, r7, lr}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005532:	f7ff f9c8 	bl	80048c6 <LL_RCC_GetSysClkSource>
 8005536:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10a      	bne.n	8005554 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800553e:	f7ff f984 	bl	800484a <LL_RCC_MSI_GetRange>
 8005542:	4603      	mov	r3, r0
 8005544:	091b      	lsrs	r3, r3, #4
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	4a2b      	ldr	r2, [pc, #172]	; (80055f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800554c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	e04b      	b.n	80055ec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b04      	cmp	r3, #4
 8005558:	d102      	bne.n	8005560 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800555a:	4b28      	ldr	r3, [pc, #160]	; (80055fc <HAL_RCC_GetSysClockFreq+0xd0>)
 800555c:	60fb      	str	r3, [r7, #12]
 800555e:	e045      	b.n	80055ec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b08      	cmp	r3, #8
 8005564:	d10a      	bne.n	800557c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005566:	f7fe ff9d 	bl	80044a4 <LL_RCC_HSE_IsEnabledDiv2>
 800556a:	4603      	mov	r3, r0
 800556c:	2b01      	cmp	r3, #1
 800556e:	d102      	bne.n	8005576 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005570:	4b22      	ldr	r3, [pc, #136]	; (80055fc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	e03a      	b.n	80055ec <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005576:	4b22      	ldr	r3, [pc, #136]	; (8005600 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005578:	60fb      	str	r3, [r7, #12]
 800557a:	e037      	b.n	80055ec <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800557c:	f7ff fa9f 	bl	8004abe <LL_RCC_PLL_GetMainSource>
 8005580:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b02      	cmp	r3, #2
 8005586:	d003      	beq.n	8005590 <HAL_RCC_GetSysClockFreq+0x64>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2b03      	cmp	r3, #3
 800558c:	d003      	beq.n	8005596 <HAL_RCC_GetSysClockFreq+0x6a>
 800558e:	e00d      	b.n	80055ac <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005590:	4b1a      	ldr	r3, [pc, #104]	; (80055fc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005592:	60bb      	str	r3, [r7, #8]
        break;
 8005594:	e015      	b.n	80055c2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005596:	f7fe ff85 	bl	80044a4 <LL_RCC_HSE_IsEnabledDiv2>
 800559a:	4603      	mov	r3, r0
 800559c:	2b01      	cmp	r3, #1
 800559e:	d102      	bne.n	80055a6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80055a0:	4b16      	ldr	r3, [pc, #88]	; (80055fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80055a2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80055a4:	e00d      	b.n	80055c2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80055a6:	4b16      	ldr	r3, [pc, #88]	; (8005600 <HAL_RCC_GetSysClockFreq+0xd4>)
 80055a8:	60bb      	str	r3, [r7, #8]
        break;
 80055aa:	e00a      	b.n	80055c2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80055ac:	f7ff f94d 	bl	800484a <LL_RCC_MSI_GetRange>
 80055b0:	4603      	mov	r3, r0
 80055b2:	091b      	lsrs	r3, r3, #4
 80055b4:	f003 030f 	and.w	r3, r3, #15
 80055b8:	4a0f      	ldr	r2, [pc, #60]	; (80055f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80055ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055be:	60bb      	str	r3, [r7, #8]
        break;
 80055c0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80055c2:	f7ff fa57 	bl	8004a74 <LL_RCC_PLL_GetN>
 80055c6:	4602      	mov	r2, r0
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	fb03 f402 	mul.w	r4, r3, r2
 80055ce:	f7ff fa6a 	bl	8004aa6 <LL_RCC_PLL_GetDivider>
 80055d2:	4603      	mov	r3, r0
 80055d4:	091b      	lsrs	r3, r3, #4
 80055d6:	3301      	adds	r3, #1
 80055d8:	fbb4 f4f3 	udiv	r4, r4, r3
 80055dc:	f7ff fa57 	bl	8004a8e <LL_RCC_PLL_GetR>
 80055e0:	4603      	mov	r3, r0
 80055e2:	0f5b      	lsrs	r3, r3, #29
 80055e4:	3301      	adds	r3, #1
 80055e6:	fbb4 f3f3 	udiv	r3, r4, r3
 80055ea:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80055ec:	68fb      	ldr	r3, [r7, #12]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd90      	pop	{r4, r7, pc}
 80055f6:	bf00      	nop
 80055f8:	0800d048 	.word	0x0800d048
 80055fc:	00f42400 	.word	0x00f42400
 8005600:	01e84800 	.word	0x01e84800

08005604 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005604:	b598      	push	{r3, r4, r7, lr}
 8005606:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005608:	f7ff ff90 	bl	800552c <HAL_RCC_GetSysClockFreq>
 800560c:	4604      	mov	r4, r0
 800560e:	f7ff f9cf 	bl	80049b0 <LL_RCC_GetAHBPrescaler>
 8005612:	4603      	mov	r3, r0
 8005614:	091b      	lsrs	r3, r3, #4
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	4a03      	ldr	r2, [pc, #12]	; (8005628 <HAL_RCC_GetHCLKFreq+0x24>)
 800561c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005620:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005624:	4618      	mov	r0, r3
 8005626:	bd98      	pop	{r3, r4, r7, pc}
 8005628:	0800cfe8 	.word	0x0800cfe8

0800562c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800562c:	b598      	push	{r3, r4, r7, lr}
 800562e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005630:	f7ff ffe8 	bl	8005604 <HAL_RCC_GetHCLKFreq>
 8005634:	4604      	mov	r4, r0
 8005636:	f7ff f9d5 	bl	80049e4 <LL_RCC_GetAPB1Prescaler>
 800563a:	4603      	mov	r3, r0
 800563c:	0a1b      	lsrs	r3, r3, #8
 800563e:	f003 0307 	and.w	r3, r3, #7
 8005642:	4a04      	ldr	r2, [pc, #16]	; (8005654 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005648:	f003 031f 	and.w	r3, r3, #31
 800564c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005650:	4618      	mov	r0, r3
 8005652:	bd98      	pop	{r3, r4, r7, pc}
 8005654:	0800d028 	.word	0x0800d028

08005658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005658:	b598      	push	{r3, r4, r7, lr}
 800565a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800565c:	f7ff ffd2 	bl	8005604 <HAL_RCC_GetHCLKFreq>
 8005660:	4604      	mov	r4, r0
 8005662:	f7ff f9cb 	bl	80049fc <LL_RCC_GetAPB2Prescaler>
 8005666:	4603      	mov	r3, r0
 8005668:	0adb      	lsrs	r3, r3, #11
 800566a:	f003 0307 	and.w	r3, r3, #7
 800566e:	4a04      	ldr	r2, [pc, #16]	; (8005680 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005674:	f003 031f 	and.w	r3, r3, #31
 8005678:	fa24 f303 	lsr.w	r3, r4, r3
}
 800567c:	4618      	mov	r0, r3
 800567e:	bd98      	pop	{r3, r4, r7, pc}
 8005680:	0800d028 	.word	0x0800d028

08005684 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005684:	b590      	push	{r4, r7, lr}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2bb0      	cmp	r3, #176	; 0xb0
 8005690:	d903      	bls.n	800569a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005692:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	e007      	b.n	80056aa <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	091b      	lsrs	r3, r3, #4
 800569e:	f003 030f 	and.w	r3, r3, #15
 80056a2:	4a11      	ldr	r2, [pc, #68]	; (80056e8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80056a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056a8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80056aa:	f7ff f98d 	bl	80049c8 <LL_RCC_GetAHB4Prescaler>
 80056ae:	4603      	mov	r3, r0
 80056b0:	091b      	lsrs	r3, r3, #4
 80056b2:	f003 030f 	and.w	r3, r3, #15
 80056b6:	4a0d      	ldr	r2, [pc, #52]	; (80056ec <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80056b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4a0a      	ldr	r2, [pc, #40]	; (80056f0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80056c8:	fba2 2303 	umull	r2, r3, r2, r3
 80056cc:	0c9c      	lsrs	r4, r3, #18
 80056ce:	f7fe fedb 	bl	8004488 <HAL_PWREx_GetVoltageRange>
 80056d2:	4603      	mov	r3, r0
 80056d4:	4619      	mov	r1, r3
 80056d6:	4620      	mov	r0, r4
 80056d8:	f000 f80c 	bl	80056f4 <RCC_SetFlashLatency>
 80056dc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd90      	pop	{r4, r7, pc}
 80056e6:	bf00      	nop
 80056e8:	0800d048 	.word	0x0800d048
 80056ec:	0800cfe8 	.word	0x0800cfe8
 80056f0:	431bde83 	.word	0x431bde83

080056f4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80056f4:	b590      	push	{r4, r7, lr}
 80056f6:	b093      	sub	sp, #76	; 0x4c
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80056fe:	4b37      	ldr	r3, [pc, #220]	; (80057dc <RCC_SetFlashLatency+0xe8>)
 8005700:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005704:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005706:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800570a:	4a35      	ldr	r2, [pc, #212]	; (80057e0 <RCC_SetFlashLatency+0xec>)
 800570c:	f107 031c 	add.w	r3, r7, #28
 8005710:	ca07      	ldmia	r2, {r0, r1, r2}
 8005712:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005716:	4b33      	ldr	r3, [pc, #204]	; (80057e4 <RCC_SetFlashLatency+0xf0>)
 8005718:	f107 040c 	add.w	r4, r7, #12
 800571c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800571e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005722:	2300      	movs	r3, #0
 8005724:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800572c:	d11a      	bne.n	8005764 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800572e:	2300      	movs	r3, #0
 8005730:	643b      	str	r3, [r7, #64]	; 0x40
 8005732:	e013      	b.n	800575c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	3348      	adds	r3, #72	; 0x48
 800573a:	443b      	add	r3, r7
 800573c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	429a      	cmp	r2, r3
 8005744:	d807      	bhi.n	8005756 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	3348      	adds	r3, #72	; 0x48
 800574c:	443b      	add	r3, r7
 800574e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005752:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005754:	e020      	b.n	8005798 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005758:	3301      	adds	r3, #1
 800575a:	643b      	str	r3, [r7, #64]	; 0x40
 800575c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800575e:	2b03      	cmp	r3, #3
 8005760:	d9e8      	bls.n	8005734 <RCC_SetFlashLatency+0x40>
 8005762:	e019      	b.n	8005798 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005764:	2300      	movs	r3, #0
 8005766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005768:	e013      	b.n	8005792 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800576a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	3348      	adds	r3, #72	; 0x48
 8005770:	443b      	add	r3, r7
 8005772:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	429a      	cmp	r2, r3
 800577a:	d807      	bhi.n	800578c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800577c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	3348      	adds	r3, #72	; 0x48
 8005782:	443b      	add	r3, r7
 8005784:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005788:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800578a:	e005      	b.n	8005798 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800578c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800578e:	3301      	adds	r3, #1
 8005790:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005794:	2b02      	cmp	r3, #2
 8005796:	d9e8      	bls.n	800576a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8005798:	4b13      	ldr	r3, [pc, #76]	; (80057e8 <RCC_SetFlashLatency+0xf4>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f023 0207 	bic.w	r2, r3, #7
 80057a0:	4911      	ldr	r1, [pc, #68]	; (80057e8 <RCC_SetFlashLatency+0xf4>)
 80057a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057a4:	4313      	orrs	r3, r2
 80057a6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80057a8:	f7fe f9ca 	bl	8003b40 <HAL_GetTick>
 80057ac:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80057ae:	e008      	b.n	80057c2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80057b0:	f7fe f9c6 	bl	8003b40 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e007      	b.n	80057d2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80057c2:	4b09      	ldr	r3, [pc, #36]	; (80057e8 <RCC_SetFlashLatency+0xf4>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d1ef      	bne.n	80057b0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	374c      	adds	r7, #76	; 0x4c
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd90      	pop	{r4, r7, pc}
 80057da:	bf00      	nop
 80057dc:	0800cfb8 	.word	0x0800cfb8
 80057e0:	0800cfc8 	.word	0x0800cfc8
 80057e4:	0800cfd4 	.word	0x0800cfd4
 80057e8:	58004000 	.word	0x58004000

080057ec <LL_RCC_LSE_IsEnabled>:
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80057f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d101      	bne.n	8005804 <LL_RCC_LSE_IsEnabled+0x18>
 8005800:	2301      	movs	r3, #1
 8005802:	e000      	b.n	8005806 <LL_RCC_LSE_IsEnabled+0x1a>
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <LL_RCC_LSE_IsReady>:
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b02      	cmp	r3, #2
 8005822:	d101      	bne.n	8005828 <LL_RCC_LSE_IsReady+0x18>
 8005824:	2301      	movs	r3, #1
 8005826:	e000      	b.n	800582a <LL_RCC_LSE_IsReady+0x1a>
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <LL_RCC_SetRFWKPClockSource>:
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800583c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005840:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005844:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005848:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4313      	orrs	r3, r2
 8005850:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <LL_RCC_SetSMPSClockSource>:
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586e:	f023 0203 	bic.w	r2, r3, #3
 8005872:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4313      	orrs	r3, r2
 800587a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <LL_RCC_SetSMPSPrescaler>:
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800589a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <LL_RCC_SetUSARTClockSource>:
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80058b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c0:	f023 0203 	bic.w	r2, r3, #3
 80058c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <LL_RCC_SetLPUARTClockSource>:
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80058e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <LL_RCC_SetI2CClockSource>:
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005914:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	091b      	lsrs	r3, r3, #4
 800591c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005920:	43db      	mvns	r3, r3
 8005922:	401a      	ands	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800592c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005930:	4313      	orrs	r3, r2
 8005932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <LL_RCC_SetLPTIMClockSource>:
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800594a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800594e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	0c1b      	lsrs	r3, r3, #16
 8005956:	041b      	lsls	r3, r3, #16
 8005958:	43db      	mvns	r3, r3
 800595a:	401a      	ands	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	041b      	lsls	r3, r3, #16
 8005960:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005964:	4313      	orrs	r3, r2
 8005966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <LL_RCC_SetSAIClockSource>:
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800597e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005986:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800598a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4313      	orrs	r3, r2
 8005992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005996:	bf00      	nop
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <LL_RCC_SetRNGClockSource>:
{
 80059a2:	b480      	push	{r7}
 80059a4:	b083      	sub	sp, #12
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80059aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80059b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4313      	orrs	r3, r2
 80059be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <LL_RCC_SetCLK48ClockSource>:
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80059d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <LL_RCC_SetUSBClockSource>:
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b082      	sub	sp, #8
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7ff ffe3 	bl	80059ce <LL_RCC_SetCLK48ClockSource>
}
 8005a08:	bf00      	nop
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <LL_RCC_SetADCClockSource>:
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a20:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <LL_RCC_SetRTCClockSource>:
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <LL_RCC_GetRTCClockSource>:
{
 8005a68:	b480      	push	{r7}
 8005a6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a74:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <LL_RCC_ForceBackupDomainReset>:
{
 8005a82:	b480      	push	{r7}
 8005a84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005a9a:	bf00      	nop
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005abc:	bf00      	nop
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <LL_RCC_PLLSAI1_Enable>:
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ad4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ad8:	6013      	str	r3, [r2, #0]
}
 8005ada:	bf00      	nop
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <LL_RCC_PLLSAI1_Disable>:
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005af2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005af6:	6013      	str	r3, [r2, #0]
}
 8005af8:	bf00      	nop
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <LL_RCC_PLLSAI1_IsReady>:
{
 8005b02:	b480      	push	{r7}
 8005b04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b14:	d101      	bne.n	8005b1a <LL_RCC_PLLSAI1_IsReady+0x18>
 8005b16:	2301      	movs	r3, #1
 8005b18:	e000      	b.n	8005b1c <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b088      	sub	sp, #32
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005b2e:	2300      	movs	r3, #0
 8005b30:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005b32:	2300      	movs	r3, #0
 8005b34:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d034      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b46:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b4a:	d021      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005b4c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b50:	d81b      	bhi.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b56:	d01d      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005b58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b5c:	d815      	bhi.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00b      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b66:	d110      	bne.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b76:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b78:	e00d      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 f947 	bl	8005e12 <RCCEx_PLLSAI1_ConfigNP>
 8005b84:	4603      	mov	r3, r0
 8005b86:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b88:	e005      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	77fb      	strb	r3, [r7, #31]
        break;
 8005b8e:	e002      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005b90:	bf00      	nop
 8005b92:	e000      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005b94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b96:	7ffb      	ldrb	r3, [r7, #31]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d105      	bne.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff fee8 	bl	8005976 <LL_RCC_SetSAIClockSource>
 8005ba6:	e001      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba8:	7ffb      	ldrb	r3, [r7, #31]
 8005baa:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d046      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005bb8:	f7ff ff56 	bl	8005a68 <LL_RCC_GetRTCClockSource>
 8005bbc:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d03c      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005bc8:	f7fe fc4e 	bl	8004468 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d105      	bne.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7ff ff30 	bl	8005a3c <LL_RCC_SetRTCClockSource>
 8005bdc:	e02e      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005be8:	f7ff ff4b 	bl	8005a82 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005bec:	f7ff ff5a 	bl	8005aa4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005bfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005c08:	f7ff fdf0 	bl	80057ec <LL_RCC_LSE_IsEnabled>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d114      	bne.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c12:	f7fd ff95 	bl	8003b40 <HAL_GetTick>
 8005c16:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005c18:	e00b      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c1a:	f7fd ff91 	bl	8003b40 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d902      	bls.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	77fb      	strb	r3, [r7, #31]
              break;
 8005c30:	e004      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005c32:	f7ff fded 	bl	8005810 <LL_RCC_LSE_IsReady>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d1ee      	bne.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005c3c:	7ffb      	ldrb	r3, [r7, #31]
 8005c3e:	77bb      	strb	r3, [r7, #30]
 8005c40:	e001      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c42:	7ffb      	ldrb	r3, [r7, #31]
 8005c44:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d004      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7ff fe2a 	bl	80058b0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0302 	and.w	r3, r3, #2
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d004      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	69db      	ldr	r3, [r3, #28]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff fe35 	bl	80058dc <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0310 	and.w	r3, r3, #16
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d004      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7ff fe5d 	bl	8005942 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0320 	and.w	r3, r3, #32
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d004      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7ff fe52 	bl	8005942 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0304 	and.w	r3, r3, #4
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d004      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7ff fe2a 	bl	8005908 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0308 	and.w	r3, r3, #8
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d004      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7ff fe1f 	bl	8005908 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d022      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7ff fe8d 	bl	80059fa <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ce8:	d107      	bne.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cf8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d02:	d10b      	bne.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3304      	adds	r3, #4
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 f8dd 	bl	8005ec8 <RCCEx_PLLSAI1_ConfigNQ>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005d12:	7ffb      	ldrb	r3, [r7, #31]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8005d18:	7ffb      	ldrb	r3, [r7, #31]
 8005d1a:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d02b      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d30:	d008      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d3a:	d003      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d105      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7ff fe2a 	bl	80059a2 <LL_RCC_SetRNGClockSource>
 8005d4e:	e00a      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d58:	60fb      	str	r3, [r7, #12]
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	f7ff fe21 	bl	80059a2 <LL_RCC_SetRNGClockSource>
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f7ff fe34 	bl	80059ce <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005d6e:	d107      	bne.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d7e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d022      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7ff fe3d 	bl	8005a10 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d9e:	d107      	bne.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dae:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005db8:	d10b      	bne.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 f8dd 	bl	8005f7e <RCCEx_PLLSAI1_ConfigNR>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005dc8:	7ffb      	ldrb	r3, [r7, #31]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8005dce:	7ffb      	ldrb	r3, [r7, #31]
 8005dd0:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d004      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7ff fd26 	bl	8005834 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d009      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7ff fd45 	bl	8005888 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7ff fd2c 	bl	8005860 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8005e08:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3720      	adds	r7, #32
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b084      	sub	sp, #16
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005e1e:	f7ff fe61 	bl	8005ae4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e22:	f7fd fe8d 	bl	8003b40 <HAL_GetTick>
 8005e26:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e28:	e009      	b.n	8005e3e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e2a:	f7fd fe89 	bl	8003b40 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d902      	bls.n	8005e3e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e3c:	e004      	b.n	8005e48 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e3e:	f7ff fe60 	bl	8005b02 <LL_RCC_PLLSAI1_IsReady>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1f0      	bne.n	8005e2a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d137      	bne.n	8005ebe <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	021b      	lsls	r3, r3, #8
 8005e5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e62:	4313      	orrs	r3, r2
 8005e64:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005e7c:	f7ff fe23 	bl	8005ac6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e80:	f7fd fe5e 	bl	8003b40 <HAL_GetTick>
 8005e84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005e86:	e009      	b.n	8005e9c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e88:	f7fd fe5a 	bl	8003b40 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d902      	bls.n	8005e9c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	73fb      	strb	r3, [r7, #15]
        break;
 8005e9a:	e004      	b.n	8005ea6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005e9c:	f7ff fe31 	bl	8005b02 <LL_RCC_PLLSAI1_IsReady>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d1f0      	bne.n	8005e88 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d108      	bne.n	8005ebe <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb0:	691a      	ldr	r2, [r3, #16]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005ed4:	f7ff fe06 	bl	8005ae4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ed8:	f7fd fe32 	bl	8003b40 <HAL_GetTick>
 8005edc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ede:	e009      	b.n	8005ef4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ee0:	f7fd fe2e 	bl	8003b40 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d902      	bls.n	8005ef4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ef2:	e004      	b.n	8005efe <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ef4:	f7ff fe05 	bl	8005b02 <LL_RCC_PLLSAI1_IsReady>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1f0      	bne.n	8005ee0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005efe:	7bfb      	ldrb	r3, [r7, #15]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d137      	bne.n	8005f74 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	021b      	lsls	r3, r3, #8
 8005f14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005f32:	f7ff fdc8 	bl	8005ac6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f36:	f7fd fe03 	bl	8003b40 <HAL_GetTick>
 8005f3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f3c:	e009      	b.n	8005f52 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f3e:	f7fd fdff 	bl	8003b40 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d902      	bls.n	8005f52 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	73fb      	strb	r3, [r7, #15]
        break;
 8005f50:	e004      	b.n	8005f5c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f52:	f7ff fdd6 	bl	8005b02 <LL_RCC_PLLSAI1_IsReady>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d1f0      	bne.n	8005f3e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d108      	bne.n	8005f74 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f66:	691a      	ldr	r2, [r3, #16]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f70:	4313      	orrs	r3, r2
 8005f72:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b084      	sub	sp, #16
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005f8a:	f7ff fdab 	bl	8005ae4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f8e:	f7fd fdd7 	bl	8003b40 <HAL_GetTick>
 8005f92:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f94:	e009      	b.n	8005faa <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f96:	f7fd fdd3 	bl	8003b40 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d902      	bls.n	8005faa <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fa8:	e004      	b.n	8005fb4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005faa:	f7ff fdaa 	bl	8005b02 <LL_RCC_PLLSAI1_IsReady>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1f0      	bne.n	8005f96 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d137      	bne.n	800602a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	021b      	lsls	r3, r3, #8
 8005fca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005fe8:	f7ff fd6d 	bl	8005ac6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fec:	f7fd fda8 	bl	8003b40 <HAL_GetTick>
 8005ff0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ff2:	e009      	b.n	8006008 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ff4:	f7fd fda4 	bl	8003b40 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d902      	bls.n	8006008 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	73fb      	strb	r3, [r7, #15]
        break;
 8006006:	e004      	b.n	8006012 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006008:	f7ff fd7b 	bl	8005b02 <LL_RCC_PLLSAI1_IsReady>
 800600c:	4603      	mov	r3, r0
 800600e:	2b01      	cmp	r3, #1
 8006010:	d1f0      	bne.n	8005ff4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006012:	7bfb      	ldrb	r3, [r7, #15]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d108      	bne.n	800602a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800601c:	691a      	ldr	r2, [r3, #16]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006026:	4313      	orrs	r3, r2
 8006028:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800602a:	7bfb      	ldrb	r3, [r7, #15]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e095      	b.n	8006172 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	2b00      	cmp	r3, #0
 800604c:	d108      	bne.n	8006060 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006056:	d009      	beq.n	800606c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	61da      	str	r2, [r3, #28]
 800605e:	e005      	b.n	800606c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d106      	bne.n	800608c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7fd fa66 	bl	8003558 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060ac:	d902      	bls.n	80060b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]
 80060b2:	e002      	b.n	80060ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80060b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80060c2:	d007      	beq.n	80060d4 <HAL_SPI_Init+0xa0>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060cc:	d002      	beq.n	80060d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80060e4:	431a      	orrs	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	431a      	orrs	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800610c:	431a      	orrs	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006116:	ea42 0103 	orr.w	r1, r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	0c1b      	lsrs	r3, r3, #16
 8006130:	f003 0204 	and.w	r2, r3, #4
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	f003 0310 	and.w	r3, r3, #16
 800613c:	431a      	orrs	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006142:	f003 0308 	and.w	r3, r3, #8
 8006146:	431a      	orrs	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006150:	ea42 0103 	orr.w	r1, r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b088      	sub	sp, #32
 800617e:	af02      	add	r7, sp, #8
 8006180:	60f8      	str	r0, [r7, #12]
 8006182:	60b9      	str	r1, [r7, #8]
 8006184:	603b      	str	r3, [r7, #0]
 8006186:	4613      	mov	r3, r2
 8006188:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006196:	d112      	bne.n	80061be <HAL_SPI_Receive+0x44>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10e      	bne.n	80061be <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2204      	movs	r2, #4
 80061a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80061a8:	88fa      	ldrh	r2, [r7, #6]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	4613      	mov	r3, r2
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	68b9      	ldr	r1, [r7, #8]
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f000 f910 	bl	80063da <HAL_SPI_TransmitReceive>
 80061ba:	4603      	mov	r3, r0
 80061bc:	e109      	b.n	80063d2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d101      	bne.n	80061cc <HAL_SPI_Receive+0x52>
 80061c8:	2302      	movs	r3, #2
 80061ca:	e102      	b.n	80063d2 <HAL_SPI_Receive+0x258>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061d4:	f7fd fcb4 	bl	8003b40 <HAL_GetTick>
 80061d8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d002      	beq.n	80061ec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80061e6:	2302      	movs	r3, #2
 80061e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061ea:	e0e9      	b.n	80063c0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d002      	beq.n	80061f8 <HAL_SPI_Receive+0x7e>
 80061f2:	88fb      	ldrh	r3, [r7, #6]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d102      	bne.n	80061fe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061fc:	e0e0      	b.n	80063c0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2204      	movs	r2, #4
 8006202:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	88fa      	ldrh	r2, [r7, #6]
 8006216:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	88fa      	ldrh	r2, [r7, #6]
 800621e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006248:	d908      	bls.n	800625c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006258:	605a      	str	r2, [r3, #4]
 800625a:	e007      	b.n	800626c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800626a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006274:	d10f      	bne.n	8006296 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006284:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006294:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a0:	2b40      	cmp	r3, #64	; 0x40
 80062a2:	d007      	beq.n	80062b4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062b2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062bc:	d867      	bhi.n	800638e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80062be:	e030      	b.n	8006322 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d117      	bne.n	80062fe <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f103 020c 	add.w	r2, r3, #12
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062da:	7812      	ldrb	r2, [r2, #0]
 80062dc:	b2d2      	uxtb	r2, r2
 80062de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e4:	1c5a      	adds	r2, r3, #1
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	3b01      	subs	r3, #1
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80062fc:	e011      	b.n	8006322 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062fe:	f7fd fc1f 	bl	8003b40 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d803      	bhi.n	8006316 <HAL_SPI_Receive+0x19c>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006314:	d102      	bne.n	800631c <HAL_SPI_Receive+0x1a2>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d102      	bne.n	8006322 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006320:	e04e      	b.n	80063c0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006328:	b29b      	uxth	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1c8      	bne.n	80062c0 <HAL_SPI_Receive+0x146>
 800632e:	e034      	b.n	800639a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b01      	cmp	r3, #1
 800633c:	d115      	bne.n	800636a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68da      	ldr	r2, [r3, #12]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006348:	b292      	uxth	r2, r2
 800634a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006350:	1c9a      	adds	r2, r3, #2
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800635c:	b29b      	uxth	r3, r3
 800635e:	3b01      	subs	r3, #1
 8006360:	b29a      	uxth	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006368:	e011      	b.n	800638e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800636a:	f7fd fbe9 	bl	8003b40 <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	429a      	cmp	r2, r3
 8006378:	d803      	bhi.n	8006382 <HAL_SPI_Receive+0x208>
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006380:	d102      	bne.n	8006388 <HAL_SPI_Receive+0x20e>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d102      	bne.n	800638e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800638c:	e018      	b.n	80063c0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006394:	b29b      	uxth	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1ca      	bne.n	8006330 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	6839      	ldr	r1, [r7, #0]
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f000 fb4c 	bl	8006a3c <SPI_EndRxTransaction>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2220      	movs	r2, #32
 80063ae:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	75fb      	strb	r3, [r7, #23]
 80063bc:	e000      	b.n	80063c0 <HAL_SPI_Receive+0x246>
  }

error :
 80063be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80063d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3718      	adds	r7, #24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b08a      	sub	sp, #40	; 0x28
 80063de:	af00      	add	r7, sp, #0
 80063e0:	60f8      	str	r0, [r7, #12]
 80063e2:	60b9      	str	r1, [r7, #8]
 80063e4:	607a      	str	r2, [r7, #4]
 80063e6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80063e8:	2301      	movs	r3, #1
 80063ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80063ec:	2300      	movs	r3, #0
 80063ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d101      	bne.n	8006400 <HAL_SPI_TransmitReceive+0x26>
 80063fc:	2302      	movs	r3, #2
 80063fe:	e1fb      	b.n	80067f8 <HAL_SPI_TransmitReceive+0x41e>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006408:	f7fd fb9a 	bl	8003b40 <HAL_GetTick>
 800640c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006414:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800641c:	887b      	ldrh	r3, [r7, #2]
 800641e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006420:	887b      	ldrh	r3, [r7, #2]
 8006422:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006424:	7efb      	ldrb	r3, [r7, #27]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d00e      	beq.n	8006448 <HAL_SPI_TransmitReceive+0x6e>
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006430:	d106      	bne.n	8006440 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d102      	bne.n	8006440 <HAL_SPI_TransmitReceive+0x66>
 800643a:	7efb      	ldrb	r3, [r7, #27]
 800643c:	2b04      	cmp	r3, #4
 800643e:	d003      	beq.n	8006448 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006440:	2302      	movs	r3, #2
 8006442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006446:	e1cd      	b.n	80067e4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d005      	beq.n	800645a <HAL_SPI_TransmitReceive+0x80>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <HAL_SPI_TransmitReceive+0x80>
 8006454:	887b      	ldrh	r3, [r7, #2]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d103      	bne.n	8006462 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006460:	e1c0      	b.n	80067e4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b04      	cmp	r3, #4
 800646c:	d003      	beq.n	8006476 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2205      	movs	r2, #5
 8006472:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	887a      	ldrh	r2, [r7, #2]
 8006486:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	887a      	ldrh	r2, [r7, #2]
 800648e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	887a      	ldrh	r2, [r7, #2]
 800649c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	887a      	ldrh	r2, [r7, #2]
 80064a2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064b8:	d802      	bhi.n	80064c0 <HAL_SPI_TransmitReceive+0xe6>
 80064ba:	8a3b      	ldrh	r3, [r7, #16]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d908      	bls.n	80064d2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80064ce:	605a      	str	r2, [r3, #4]
 80064d0:	e007      	b.n	80064e2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80064e0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ec:	2b40      	cmp	r3, #64	; 0x40
 80064ee:	d007      	beq.n	8006500 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006508:	d97c      	bls.n	8006604 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <HAL_SPI_TransmitReceive+0x13e>
 8006512:	8a7b      	ldrh	r3, [r7, #18]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d169      	bne.n	80065ec <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651c:	881a      	ldrh	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006528:	1c9a      	adds	r2, r3, #2
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006532:	b29b      	uxth	r3, r3
 8006534:	3b01      	subs	r3, #1
 8006536:	b29a      	uxth	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800653c:	e056      	b.n	80065ec <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b02      	cmp	r3, #2
 800654a:	d11b      	bne.n	8006584 <HAL_SPI_TransmitReceive+0x1aa>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006550:	b29b      	uxth	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d016      	beq.n	8006584 <HAL_SPI_TransmitReceive+0x1aa>
 8006556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006558:	2b01      	cmp	r3, #1
 800655a:	d113      	bne.n	8006584 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006560:	881a      	ldrh	r2, [r3, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656c:	1c9a      	adds	r2, r3, #2
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006576:	b29b      	uxth	r3, r3
 8006578:	3b01      	subs	r3, #1
 800657a:	b29a      	uxth	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006580:	2300      	movs	r3, #0
 8006582:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b01      	cmp	r3, #1
 8006590:	d11c      	bne.n	80065cc <HAL_SPI_TransmitReceive+0x1f2>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006598:	b29b      	uxth	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d016      	beq.n	80065cc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68da      	ldr	r2, [r3, #12]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a8:	b292      	uxth	r2, r2
 80065aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b0:	1c9a      	adds	r2, r3, #2
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065bc:	b29b      	uxth	r3, r3
 80065be:	3b01      	subs	r3, #1
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065c8:	2301      	movs	r3, #1
 80065ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80065cc:	f7fd fab8 	bl	8003b40 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065d8:	429a      	cmp	r2, r3
 80065da:	d807      	bhi.n	80065ec <HAL_SPI_TransmitReceive+0x212>
 80065dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e2:	d003      	beq.n	80065ec <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80065ea:	e0fb      	b.n	80067e4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1a3      	bne.n	800653e <HAL_SPI_TransmitReceive+0x164>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d19d      	bne.n	800653e <HAL_SPI_TransmitReceive+0x164>
 8006602:	e0df      	b.n	80067c4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d003      	beq.n	8006614 <HAL_SPI_TransmitReceive+0x23a>
 800660c:	8a7b      	ldrh	r3, [r7, #18]
 800660e:	2b01      	cmp	r3, #1
 8006610:	f040 80cb 	bne.w	80067aa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006618:	b29b      	uxth	r3, r3
 800661a:	2b01      	cmp	r3, #1
 800661c:	d912      	bls.n	8006644 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006622:	881a      	ldrh	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662e:	1c9a      	adds	r2, r3, #2
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006638:	b29b      	uxth	r3, r3
 800663a:	3b02      	subs	r3, #2
 800663c:	b29a      	uxth	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006642:	e0b2      	b.n	80067aa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	330c      	adds	r3, #12
 800664e:	7812      	ldrb	r2, [r2, #0]
 8006650:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006656:	1c5a      	adds	r2, r3, #1
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006660:	b29b      	uxth	r3, r3
 8006662:	3b01      	subs	r3, #1
 8006664:	b29a      	uxth	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800666a:	e09e      	b.n	80067aa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b02      	cmp	r3, #2
 8006678:	d134      	bne.n	80066e4 <HAL_SPI_TransmitReceive+0x30a>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800667e:	b29b      	uxth	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	d02f      	beq.n	80066e4 <HAL_SPI_TransmitReceive+0x30a>
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006686:	2b01      	cmp	r3, #1
 8006688:	d12c      	bne.n	80066e4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800668e:	b29b      	uxth	r3, r3
 8006690:	2b01      	cmp	r3, #1
 8006692:	d912      	bls.n	80066ba <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006698:	881a      	ldrh	r2, [r3, #0]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a4:	1c9a      	adds	r2, r3, #2
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	3b02      	subs	r3, #2
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066b8:	e012      	b.n	80066e0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	330c      	adds	r3, #12
 80066c4:	7812      	ldrb	r2, [r2, #0]
 80066c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066cc:	1c5a      	adds	r2, r3, #1
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	3b01      	subs	r3, #1
 80066da:	b29a      	uxth	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066e0:	2300      	movs	r3, #0
 80066e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d148      	bne.n	8006784 <HAL_SPI_TransmitReceive+0x3aa>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d042      	beq.n	8006784 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006704:	b29b      	uxth	r3, r3
 8006706:	2b01      	cmp	r3, #1
 8006708:	d923      	bls.n	8006752 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68da      	ldr	r2, [r3, #12]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006714:	b292      	uxth	r2, r2
 8006716:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671c:	1c9a      	adds	r2, r3, #2
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006728:	b29b      	uxth	r3, r3
 800672a:	3b02      	subs	r3, #2
 800672c:	b29a      	uxth	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800673a:	b29b      	uxth	r3, r3
 800673c:	2b01      	cmp	r3, #1
 800673e:	d81f      	bhi.n	8006780 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	685a      	ldr	r2, [r3, #4]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800674e:	605a      	str	r2, [r3, #4]
 8006750:	e016      	b.n	8006780 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f103 020c 	add.w	r2, r3, #12
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675e:	7812      	ldrb	r2, [r2, #0]
 8006760:	b2d2      	uxtb	r2, r2
 8006762:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006774:	b29b      	uxth	r3, r3
 8006776:	3b01      	subs	r3, #1
 8006778:	b29a      	uxth	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006780:	2301      	movs	r3, #1
 8006782:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006784:	f7fd f9dc 	bl	8003b40 <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006790:	429a      	cmp	r2, r3
 8006792:	d803      	bhi.n	800679c <HAL_SPI_TransmitReceive+0x3c2>
 8006794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679a:	d102      	bne.n	80067a2 <HAL_SPI_TransmitReceive+0x3c8>
 800679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d103      	bne.n	80067aa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80067a8:	e01c      	b.n	80067e4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f47f af5b 	bne.w	800666c <HAL_SPI_TransmitReceive+0x292>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f47f af54 	bne.w	800666c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067c4:	69fa      	ldr	r2, [r7, #28]
 80067c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 f98f 	bl	8006aec <SPI_EndRxTxTransaction>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d006      	beq.n	80067e2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2220      	movs	r2, #32
 80067de:	661a      	str	r2, [r3, #96]	; 0x60
 80067e0:	e000      	b.n	80067e4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80067e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80067f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3728      	adds	r7, #40	; 0x28
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b088      	sub	sp, #32
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	603b      	str	r3, [r7, #0]
 800680c:	4613      	mov	r3, r2
 800680e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006810:	f7fd f996 	bl	8003b40 <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006818:	1a9b      	subs	r3, r3, r2
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	4413      	add	r3, r2
 800681e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006820:	f7fd f98e 	bl	8003b40 <HAL_GetTick>
 8006824:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006826:	4b39      	ldr	r3, [pc, #228]	; (800690c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	015b      	lsls	r3, r3, #5
 800682c:	0d1b      	lsrs	r3, r3, #20
 800682e:	69fa      	ldr	r2, [r7, #28]
 8006830:	fb02 f303 	mul.w	r3, r2, r3
 8006834:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006836:	e054      	b.n	80068e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683e:	d050      	beq.n	80068e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006840:	f7fd f97e 	bl	8003b40 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	69fa      	ldr	r2, [r7, #28]
 800684c:	429a      	cmp	r2, r3
 800684e:	d902      	bls.n	8006856 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d13d      	bne.n	80068d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006864:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800686e:	d111      	bne.n	8006894 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006878:	d004      	beq.n	8006884 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006882:	d107      	bne.n	8006894 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006892:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800689c:	d10f      	bne.n	80068be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e017      	b.n	8006902 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80068d8:	2300      	movs	r3, #0
 80068da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	3b01      	subs	r3, #1
 80068e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689a      	ldr	r2, [r3, #8]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	4013      	ands	r3, r2
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	bf0c      	ite	eq
 80068f2:	2301      	moveq	r3, #1
 80068f4:	2300      	movne	r3, #0
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	461a      	mov	r2, r3
 80068fa:	79fb      	ldrb	r3, [r7, #7]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d19b      	bne.n	8006838 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3720      	adds	r7, #32
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000034 	.word	0x20000034

08006910 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b08a      	sub	sp, #40	; 0x28
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
 800691c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800691e:	2300      	movs	r3, #0
 8006920:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006922:	f7fd f90d 	bl	8003b40 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692a:	1a9b      	subs	r3, r3, r2
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	4413      	add	r3, r2
 8006930:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006932:	f7fd f905 	bl	8003b40 <HAL_GetTick>
 8006936:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	330c      	adds	r3, #12
 800693e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006940:	4b3d      	ldr	r3, [pc, #244]	; (8006a38 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	4613      	mov	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	00da      	lsls	r2, r3, #3
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	0d1b      	lsrs	r3, r3, #20
 8006950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006952:	fb02 f303 	mul.w	r3, r2, r3
 8006956:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006958:	e060      	b.n	8006a1c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006960:	d107      	bne.n	8006972 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d104      	bne.n	8006972 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	b2db      	uxtb	r3, r3
 800696e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006970:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006978:	d050      	beq.n	8006a1c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800697a:	f7fd f8e1 	bl	8003b40 <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	6a3b      	ldr	r3, [r7, #32]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006986:	429a      	cmp	r2, r3
 8006988:	d902      	bls.n	8006990 <SPI_WaitFifoStateUntilTimeout+0x80>
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	2b00      	cmp	r3, #0
 800698e:	d13d      	bne.n	8006a0c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800699e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069a8:	d111      	bne.n	80069ce <SPI_WaitFifoStateUntilTimeout+0xbe>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069b2:	d004      	beq.n	80069be <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069bc:	d107      	bne.n	80069ce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069d6:	d10f      	bne.n	80069f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069e6:	601a      	str	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e010      	b.n	8006a2e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689a      	ldr	r2, [r3, #8]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	4013      	ands	r3, r2
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d196      	bne.n	800695a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3728      	adds	r7, #40	; 0x28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20000034 	.word	0x20000034

08006a3c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af02      	add	r7, sp, #8
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a50:	d111      	bne.n	8006a76 <SPI_EndRxTransaction+0x3a>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a5a:	d004      	beq.n	8006a66 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a64:	d107      	bne.n	8006a76 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a74:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	2180      	movs	r1, #128	; 0x80
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f7ff febd 	bl	8006800 <SPI_WaitFlagStateUntilTimeout>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d007      	beq.n	8006a9c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a90:	f043 0220 	orr.w	r2, r3, #32
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e023      	b.n	8006ae4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006aa4:	d11d      	bne.n	8006ae2 <SPI_EndRxTransaction+0xa6>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aae:	d004      	beq.n	8006aba <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ab8:	d113      	bne.n	8006ae2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f7ff ff22 	bl	8006910 <SPI_WaitFifoStateUntilTimeout>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d007      	beq.n	8006ae2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ad6:	f043 0220 	orr.w	r2, r3, #32
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e000      	b.n	8006ae4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af02      	add	r7, sp, #8
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	9300      	str	r3, [sp, #0]
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f7ff ff03 	bl	8006910 <SPI_WaitFifoStateUntilTimeout>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d007      	beq.n	8006b20 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b14:	f043 0220 	orr.w	r2, r3, #32
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e027      	b.n	8006b70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2200      	movs	r2, #0
 8006b28:	2180      	movs	r1, #128	; 0x80
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f7ff fe68 	bl	8006800 <SPI_WaitFlagStateUntilTimeout>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d007      	beq.n	8006b46 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b3a:	f043 0220 	orr.w	r2, r3, #32
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e014      	b.n	8006b70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f7ff fedc 	bl	8006910 <SPI_WaitFifoStateUntilTimeout>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d007      	beq.n	8006b6e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b62:	f043 0220 	orr.w	r2, r3, #32
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e000      	b.n	8006b70 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d101      	bne.n	8006b8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e049      	b.n	8006c1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d106      	bne.n	8006ba4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7fc fd36 	bl	8003610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	4610      	mov	r0, r2
 8006bb8:	f000 fc40 	bl	800743c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3708      	adds	r7, #8
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
	...

08006c28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d001      	beq.n	8006c40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e036      	b.n	8006cae <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2202      	movs	r2, #2
 8006c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68da      	ldr	r2, [r3, #12]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f042 0201 	orr.w	r2, r2, #1
 8006c56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a17      	ldr	r2, [pc, #92]	; (8006cbc <HAL_TIM_Base_Start_IT+0x94>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d004      	beq.n	8006c6c <HAL_TIM_Base_Start_IT+0x44>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c6a:	d115      	bne.n	8006c98 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	689a      	ldr	r2, [r3, #8]
 8006c72:	4b13      	ldr	r3, [pc, #76]	; (8006cc0 <HAL_TIM_Base_Start_IT+0x98>)
 8006c74:	4013      	ands	r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b06      	cmp	r3, #6
 8006c7c:	d015      	beq.n	8006caa <HAL_TIM_Base_Start_IT+0x82>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c84:	d011      	beq.n	8006caa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f042 0201 	orr.w	r2, r2, #1
 8006c94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c96:	e008      	b.n	8006caa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f042 0201 	orr.w	r2, r2, #1
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	e000      	b.n	8006cac <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006caa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	40012c00 	.word	0x40012c00
 8006cc0:	00010007 	.word	0x00010007

08006cc4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68da      	ldr	r2, [r3, #12]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 0201 	bic.w	r2, r2, #1
 8006cda:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6a1a      	ldr	r2, [r3, #32]
 8006ce2:	f241 1311 	movw	r3, #4369	; 0x1111
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10f      	bne.n	8006d0c <HAL_TIM_Base_Stop_IT+0x48>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6a1a      	ldr	r2, [r3, #32]
 8006cf2:	f240 4344 	movw	r3, #1092	; 0x444
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d107      	bne.n	8006d0c <HAL_TIM_Base_Stop_IT+0x48>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f022 0201 	bic.w	r2, r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b082      	sub	sp, #8
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e049      	b.n	8006dc8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d106      	bne.n	8006d4e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7fc fc35 	bl	80035b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2202      	movs	r2, #2
 8006d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4610      	mov	r0, r2
 8006d62:	f000 fb6b 	bl	800743c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d109      	bne.n	8006df4 <HAL_TIM_PWM_Start+0x24>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	bf14      	ite	ne
 8006dec:	2301      	movne	r3, #1
 8006dee:	2300      	moveq	r3, #0
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	e03c      	b.n	8006e6e <HAL_TIM_PWM_Start+0x9e>
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	2b04      	cmp	r3, #4
 8006df8:	d109      	bne.n	8006e0e <HAL_TIM_PWM_Start+0x3e>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	bf14      	ite	ne
 8006e06:	2301      	movne	r3, #1
 8006e08:	2300      	moveq	r3, #0
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	e02f      	b.n	8006e6e <HAL_TIM_PWM_Start+0x9e>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2b08      	cmp	r3, #8
 8006e12:	d109      	bne.n	8006e28 <HAL_TIM_PWM_Start+0x58>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	bf14      	ite	ne
 8006e20:	2301      	movne	r3, #1
 8006e22:	2300      	moveq	r3, #0
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	e022      	b.n	8006e6e <HAL_TIM_PWM_Start+0x9e>
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	2b0c      	cmp	r3, #12
 8006e2c:	d109      	bne.n	8006e42 <HAL_TIM_PWM_Start+0x72>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	bf14      	ite	ne
 8006e3a:	2301      	movne	r3, #1
 8006e3c:	2300      	moveq	r3, #0
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	e015      	b.n	8006e6e <HAL_TIM_PWM_Start+0x9e>
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2b10      	cmp	r3, #16
 8006e46:	d109      	bne.n	8006e5c <HAL_TIM_PWM_Start+0x8c>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	bf14      	ite	ne
 8006e54:	2301      	movne	r3, #1
 8006e56:	2300      	moveq	r3, #0
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	e008      	b.n	8006e6e <HAL_TIM_PWM_Start+0x9e>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	bf14      	ite	ne
 8006e68:	2301      	movne	r3, #1
 8006e6a:	2300      	moveq	r3, #0
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e079      	b.n	8006f6a <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d104      	bne.n	8006e86 <HAL_TIM_PWM_Start+0xb6>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2202      	movs	r2, #2
 8006e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e84:	e023      	b.n	8006ece <HAL_TIM_PWM_Start+0xfe>
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	2b04      	cmp	r3, #4
 8006e8a:	d104      	bne.n	8006e96 <HAL_TIM_PWM_Start+0xc6>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2202      	movs	r2, #2
 8006e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e94:	e01b      	b.n	8006ece <HAL_TIM_PWM_Start+0xfe>
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b08      	cmp	r3, #8
 8006e9a:	d104      	bne.n	8006ea6 <HAL_TIM_PWM_Start+0xd6>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ea4:	e013      	b.n	8006ece <HAL_TIM_PWM_Start+0xfe>
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2b0c      	cmp	r3, #12
 8006eaa:	d104      	bne.n	8006eb6 <HAL_TIM_PWM_Start+0xe6>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006eb4:	e00b      	b.n	8006ece <HAL_TIM_PWM_Start+0xfe>
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2b10      	cmp	r3, #16
 8006eba:	d104      	bne.n	8006ec6 <HAL_TIM_PWM_Start+0xf6>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ec4:	e003      	b.n	8006ece <HAL_TIM_PWM_Start+0xfe>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2202      	movs	r2, #2
 8006eca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	6839      	ldr	r1, [r7, #0]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f000 fd92 	bl	8007a00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a24      	ldr	r2, [pc, #144]	; (8006f74 <HAL_TIM_PWM_Start+0x1a4>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d009      	beq.n	8006efa <HAL_TIM_PWM_Start+0x12a>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a23      	ldr	r2, [pc, #140]	; (8006f78 <HAL_TIM_PWM_Start+0x1a8>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d004      	beq.n	8006efa <HAL_TIM_PWM_Start+0x12a>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a21      	ldr	r2, [pc, #132]	; (8006f7c <HAL_TIM_PWM_Start+0x1ac>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d101      	bne.n	8006efe <HAL_TIM_PWM_Start+0x12e>
 8006efa:	2301      	movs	r3, #1
 8006efc:	e000      	b.n	8006f00 <HAL_TIM_PWM_Start+0x130>
 8006efe:	2300      	movs	r3, #0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d007      	beq.n	8006f14 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f12:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a16      	ldr	r2, [pc, #88]	; (8006f74 <HAL_TIM_PWM_Start+0x1a4>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d004      	beq.n	8006f28 <HAL_TIM_PWM_Start+0x158>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f26:	d115      	bne.n	8006f54 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	689a      	ldr	r2, [r3, #8]
 8006f2e:	4b14      	ldr	r3, [pc, #80]	; (8006f80 <HAL_TIM_PWM_Start+0x1b0>)
 8006f30:	4013      	ands	r3, r2
 8006f32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b06      	cmp	r3, #6
 8006f38:	d015      	beq.n	8006f66 <HAL_TIM_PWM_Start+0x196>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f40:	d011      	beq.n	8006f66 <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f042 0201 	orr.w	r2, r2, #1
 8006f50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f52:	e008      	b.n	8006f66 <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f042 0201 	orr.w	r2, r2, #1
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	e000      	b.n	8006f68 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	40012c00 	.word	0x40012c00
 8006f78:	40014400 	.word	0x40014400
 8006f7c:	40014800 	.word	0x40014800
 8006f80:	00010007 	.word	0x00010007

08006f84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d122      	bne.n	8006fe0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	f003 0302 	and.w	r3, r3, #2
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d11b      	bne.n	8006fe0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f06f 0202 	mvn.w	r2, #2
 8006fb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	f003 0303 	and.w	r3, r3, #3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fa1a 	bl	8007400 <HAL_TIM_IC_CaptureCallback>
 8006fcc:	e005      	b.n	8006fda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fa0c 	bl	80073ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fa1d 	bl	8007414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	f003 0304 	and.w	r3, r3, #4
 8006fea:	2b04      	cmp	r3, #4
 8006fec:	d122      	bne.n	8007034 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	f003 0304 	and.w	r3, r3, #4
 8006ff8:	2b04      	cmp	r3, #4
 8006ffa:	d11b      	bne.n	8007034 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f06f 0204 	mvn.w	r2, #4
 8007004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2202      	movs	r2, #2
 800700a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007016:	2b00      	cmp	r3, #0
 8007018:	d003      	beq.n	8007022 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f9f0 	bl	8007400 <HAL_TIM_IC_CaptureCallback>
 8007020:	e005      	b.n	800702e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f9e2 	bl	80073ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f9f3 	bl	8007414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	f003 0308 	and.w	r3, r3, #8
 800703e:	2b08      	cmp	r3, #8
 8007040:	d122      	bne.n	8007088 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	f003 0308 	and.w	r3, r3, #8
 800704c:	2b08      	cmp	r3, #8
 800704e:	d11b      	bne.n	8007088 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f06f 0208 	mvn.w	r2, #8
 8007058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2204      	movs	r2, #4
 800705e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	f003 0303 	and.w	r3, r3, #3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d003      	beq.n	8007076 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f9c6 	bl	8007400 <HAL_TIM_IC_CaptureCallback>
 8007074:	e005      	b.n	8007082 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f9b8 	bl	80073ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 f9c9 	bl	8007414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	f003 0310 	and.w	r3, r3, #16
 8007092:	2b10      	cmp	r3, #16
 8007094:	d122      	bne.n	80070dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	f003 0310 	and.w	r3, r3, #16
 80070a0:	2b10      	cmp	r3, #16
 80070a2:	d11b      	bne.n	80070dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f06f 0210 	mvn.w	r2, #16
 80070ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2208      	movs	r2, #8
 80070b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d003      	beq.n	80070ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f99c 	bl	8007400 <HAL_TIM_IC_CaptureCallback>
 80070c8:	e005      	b.n	80070d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f98e 	bl	80073ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 f99f 	bl	8007414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d10e      	bne.n	8007108 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d107      	bne.n	8007108 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f06f 0201 	mvn.w	r2, #1
 8007100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f7fb fa4c 	bl	80025a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007112:	2b80      	cmp	r3, #128	; 0x80
 8007114:	d10e      	bne.n	8007134 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007120:	2b80      	cmp	r3, #128	; 0x80
 8007122:	d107      	bne.n	8007134 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800712c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fd86 	bl	8007c40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007142:	d10e      	bne.n	8007162 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800714e:	2b80      	cmp	r3, #128	; 0x80
 8007150:	d107      	bne.n	8007162 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800715a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fd79 	bl	8007c54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800716c:	2b40      	cmp	r3, #64	; 0x40
 800716e:	d10e      	bne.n	800718e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800717a:	2b40      	cmp	r3, #64	; 0x40
 800717c:	d107      	bne.n	800718e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f94d 	bl	8007428 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	f003 0320 	and.w	r3, r3, #32
 8007198:	2b20      	cmp	r3, #32
 800719a:	d10e      	bne.n	80071ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	f003 0320 	and.w	r3, r3, #32
 80071a6:	2b20      	cmp	r3, #32
 80071a8:	d107      	bne.n	80071ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f06f 0220 	mvn.w	r2, #32
 80071b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fd39 	bl	8007c2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071ba:	bf00      	nop
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
	...

080071c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071d0:	2300      	movs	r3, #0
 80071d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d101      	bne.n	80071e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071de:	2302      	movs	r3, #2
 80071e0:	e0ff      	b.n	80073e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b14      	cmp	r3, #20
 80071ee:	f200 80f0 	bhi.w	80073d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80071f2:	a201      	add	r2, pc, #4	; (adr r2, 80071f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f8:	0800724d 	.word	0x0800724d
 80071fc:	080073d3 	.word	0x080073d3
 8007200:	080073d3 	.word	0x080073d3
 8007204:	080073d3 	.word	0x080073d3
 8007208:	0800728d 	.word	0x0800728d
 800720c:	080073d3 	.word	0x080073d3
 8007210:	080073d3 	.word	0x080073d3
 8007214:	080073d3 	.word	0x080073d3
 8007218:	080072cf 	.word	0x080072cf
 800721c:	080073d3 	.word	0x080073d3
 8007220:	080073d3 	.word	0x080073d3
 8007224:	080073d3 	.word	0x080073d3
 8007228:	0800730f 	.word	0x0800730f
 800722c:	080073d3 	.word	0x080073d3
 8007230:	080073d3 	.word	0x080073d3
 8007234:	080073d3 	.word	0x080073d3
 8007238:	08007351 	.word	0x08007351
 800723c:	080073d3 	.word	0x080073d3
 8007240:	080073d3 	.word	0x080073d3
 8007244:	080073d3 	.word	0x080073d3
 8007248:	08007391 	.word	0x08007391
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68b9      	ldr	r1, [r7, #8]
 8007252:	4618      	mov	r0, r3
 8007254:	f000 f956 	bl	8007504 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	699a      	ldr	r2, [r3, #24]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f042 0208 	orr.w	r2, r2, #8
 8007266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	699a      	ldr	r2, [r3, #24]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f022 0204 	bic.w	r2, r2, #4
 8007276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6999      	ldr	r1, [r3, #24]
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	691a      	ldr	r2, [r3, #16]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	430a      	orrs	r2, r1
 8007288:	619a      	str	r2, [r3, #24]
      break;
 800728a:	e0a5      	b.n	80073d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68b9      	ldr	r1, [r7, #8]
 8007292:	4618      	mov	r0, r3
 8007294:	f000 f9b2 	bl	80075fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	699a      	ldr	r2, [r3, #24]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	699a      	ldr	r2, [r3, #24]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6999      	ldr	r1, [r3, #24]
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	021a      	lsls	r2, r3, #8
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	430a      	orrs	r2, r1
 80072ca:	619a      	str	r2, [r3, #24]
      break;
 80072cc:	e084      	b.n	80073d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	68b9      	ldr	r1, [r7, #8]
 80072d4:	4618      	mov	r0, r3
 80072d6:	f000 fa0b 	bl	80076f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	69da      	ldr	r2, [r3, #28]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f042 0208 	orr.w	r2, r2, #8
 80072e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	69da      	ldr	r2, [r3, #28]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f022 0204 	bic.w	r2, r2, #4
 80072f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	69d9      	ldr	r1, [r3, #28]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	691a      	ldr	r2, [r3, #16]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	61da      	str	r2, [r3, #28]
      break;
 800730c:	e064      	b.n	80073d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68b9      	ldr	r1, [r7, #8]
 8007314:	4618      	mov	r0, r3
 8007316:	f000 fa63 	bl	80077e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	69da      	ldr	r2, [r3, #28]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	69da      	ldr	r2, [r3, #28]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	69d9      	ldr	r1, [r3, #28]
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	021a      	lsls	r2, r3, #8
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	430a      	orrs	r2, r1
 800734c:	61da      	str	r2, [r3, #28]
      break;
 800734e:	e043      	b.n	80073d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68b9      	ldr	r1, [r7, #8]
 8007356:	4618      	mov	r0, r3
 8007358:	f000 faa0 	bl	800789c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f042 0208 	orr.w	r2, r2, #8
 800736a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f022 0204 	bic.w	r2, r2, #4
 800737a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	691a      	ldr	r2, [r3, #16]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800738e:	e023      	b.n	80073d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68b9      	ldr	r1, [r7, #8]
 8007396:	4618      	mov	r0, r3
 8007398:	f000 fad8 	bl	800794c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	021a      	lsls	r2, r3, #8
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	430a      	orrs	r2, r1
 80073ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80073d0:	e002      	b.n	80073d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	75fb      	strb	r3, [r7, #23]
      break;
 80073d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3718      	adds	r7, #24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop

080073ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a2a      	ldr	r2, [pc, #168]	; (80074f8 <TIM_Base_SetConfig+0xbc>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d003      	beq.n	800745c <TIM_Base_SetConfig+0x20>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800745a:	d108      	bne.n	800746e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	4313      	orrs	r3, r2
 800746c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a21      	ldr	r2, [pc, #132]	; (80074f8 <TIM_Base_SetConfig+0xbc>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d00b      	beq.n	800748e <TIM_Base_SetConfig+0x52>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800747c:	d007      	beq.n	800748e <TIM_Base_SetConfig+0x52>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a1e      	ldr	r2, [pc, #120]	; (80074fc <TIM_Base_SetConfig+0xc0>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d003      	beq.n	800748e <TIM_Base_SetConfig+0x52>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a1d      	ldr	r2, [pc, #116]	; (8007500 <TIM_Base_SetConfig+0xc4>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d108      	bne.n	80074a0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	4313      	orrs	r3, r2
 800749e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	689a      	ldr	r2, [r3, #8]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a0c      	ldr	r2, [pc, #48]	; (80074f8 <TIM_Base_SetConfig+0xbc>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d007      	beq.n	80074dc <TIM_Base_SetConfig+0xa0>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a0b      	ldr	r2, [pc, #44]	; (80074fc <TIM_Base_SetConfig+0xc0>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d003      	beq.n	80074dc <TIM_Base_SetConfig+0xa0>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a0a      	ldr	r2, [pc, #40]	; (8007500 <TIM_Base_SetConfig+0xc4>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d103      	bne.n	80074e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	691a      	ldr	r2, [r3, #16]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	615a      	str	r2, [r3, #20]
}
 80074ea:	bf00      	nop
 80074ec:	3714      	adds	r7, #20
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	40012c00 	.word	0x40012c00
 80074fc:	40014400 	.word	0x40014400
 8007500:	40014800 	.word	0x40014800

08007504 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007504:	b480      	push	{r7}
 8007506:	b087      	sub	sp, #28
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	f023 0201 	bic.w	r2, r3, #1
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a1b      	ldr	r3, [r3, #32]
 800751e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f023 0303 	bic.w	r3, r3, #3
 800753e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	4313      	orrs	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f023 0302 	bic.w	r3, r3, #2
 8007550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	697a      	ldr	r2, [r7, #20]
 8007558:	4313      	orrs	r3, r2
 800755a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a24      	ldr	r2, [pc, #144]	; (80075f0 <TIM_OC1_SetConfig+0xec>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d007      	beq.n	8007574 <TIM_OC1_SetConfig+0x70>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a23      	ldr	r2, [pc, #140]	; (80075f4 <TIM_OC1_SetConfig+0xf0>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d003      	beq.n	8007574 <TIM_OC1_SetConfig+0x70>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a22      	ldr	r2, [pc, #136]	; (80075f8 <TIM_OC1_SetConfig+0xf4>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d10c      	bne.n	800758e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	f023 0308 	bic.w	r3, r3, #8
 800757a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	4313      	orrs	r3, r2
 8007584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	f023 0304 	bic.w	r3, r3, #4
 800758c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a17      	ldr	r2, [pc, #92]	; (80075f0 <TIM_OC1_SetConfig+0xec>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d007      	beq.n	80075a6 <TIM_OC1_SetConfig+0xa2>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a17      	ldr	r2, [pc, #92]	; (80075f8 <TIM_OC1_SetConfig+0xf4>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d003      	beq.n	80075a6 <TIM_OC1_SetConfig+0xa2>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a14      	ldr	r2, [pc, #80]	; (80075f4 <TIM_OC1_SetConfig+0xf0>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d111      	bne.n	80075ca <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	693a      	ldr	r2, [r7, #16]
 80075bc:	4313      	orrs	r3, r2
 80075be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	693a      	ldr	r2, [r7, #16]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	685a      	ldr	r2, [r3, #4]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	621a      	str	r2, [r3, #32]
}
 80075e4:	bf00      	nop
 80075e6:	371c      	adds	r7, #28
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	40012c00 	.word	0x40012c00
 80075f4:	40014800 	.word	0x40014800
 80075f8:	40014400 	.word	0x40014400

080075fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b087      	sub	sp, #28
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	f023 0210 	bic.w	r2, r3, #16
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800762a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800762e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	021b      	lsls	r3, r3, #8
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	4313      	orrs	r3, r2
 8007642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	f023 0320 	bic.w	r3, r3, #32
 800764a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	011b      	lsls	r3, r3, #4
 8007652:	697a      	ldr	r2, [r7, #20]
 8007654:	4313      	orrs	r3, r2
 8007656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a22      	ldr	r2, [pc, #136]	; (80076e4 <TIM_OC2_SetConfig+0xe8>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d10d      	bne.n	800767c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	011b      	lsls	r3, r3, #4
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	4313      	orrs	r3, r2
 8007672:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800767a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a19      	ldr	r2, [pc, #100]	; (80076e4 <TIM_OC2_SetConfig+0xe8>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d007      	beq.n	8007694 <TIM_OC2_SetConfig+0x98>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a18      	ldr	r2, [pc, #96]	; (80076e8 <TIM_OC2_SetConfig+0xec>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d003      	beq.n	8007694 <TIM_OC2_SetConfig+0x98>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a17      	ldr	r2, [pc, #92]	; (80076ec <TIM_OC2_SetConfig+0xf0>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d113      	bne.n	80076bc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800769a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	693a      	ldr	r2, [r7, #16]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	621a      	str	r2, [r3, #32]
}
 80076d6:	bf00      	nop
 80076d8:	371c      	adds	r7, #28
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	40012c00 	.word	0x40012c00
 80076e8:	40014400 	.word	0x40014400
 80076ec:	40014800 	.word	0x40014800

080076f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b087      	sub	sp, #28
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a1b      	ldr	r3, [r3, #32]
 800770a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	69db      	ldr	r3, [r3, #28]
 8007716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800771e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f023 0303 	bic.w	r3, r3, #3
 800772a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	4313      	orrs	r3, r2
 8007734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800773c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	021b      	lsls	r3, r3, #8
 8007744:	697a      	ldr	r2, [r7, #20]
 8007746:	4313      	orrs	r3, r2
 8007748:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a21      	ldr	r2, [pc, #132]	; (80077d4 <TIM_OC3_SetConfig+0xe4>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d10d      	bne.n	800776e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007758:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	021b      	lsls	r3, r3, #8
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	4313      	orrs	r3, r2
 8007764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800776c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a18      	ldr	r2, [pc, #96]	; (80077d4 <TIM_OC3_SetConfig+0xe4>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d007      	beq.n	8007786 <TIM_OC3_SetConfig+0x96>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a17      	ldr	r2, [pc, #92]	; (80077d8 <TIM_OC3_SetConfig+0xe8>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d003      	beq.n	8007786 <TIM_OC3_SetConfig+0x96>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a16      	ldr	r2, [pc, #88]	; (80077dc <TIM_OC3_SetConfig+0xec>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d113      	bne.n	80077ae <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800778c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	011b      	lsls	r3, r3, #4
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	4313      	orrs	r3, r2
 80077a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	699b      	ldr	r3, [r3, #24]
 80077a6:	011b      	lsls	r3, r3, #4
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	621a      	str	r2, [r3, #32]
}
 80077c8:	bf00      	nop
 80077ca:	371c      	adds	r7, #28
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	40012c00 	.word	0x40012c00
 80077d8:	40014400 	.word	0x40014400
 80077dc:	40014800 	.word	0x40014800

080077e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b087      	sub	sp, #28
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800780e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800781a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	021b      	lsls	r3, r3, #8
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	4313      	orrs	r3, r2
 8007826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800782e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	031b      	lsls	r3, r3, #12
 8007836:	693a      	ldr	r2, [r7, #16]
 8007838:	4313      	orrs	r3, r2
 800783a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a14      	ldr	r2, [pc, #80]	; (8007890 <TIM_OC4_SetConfig+0xb0>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d007      	beq.n	8007854 <TIM_OC4_SetConfig+0x74>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a13      	ldr	r2, [pc, #76]	; (8007894 <TIM_OC4_SetConfig+0xb4>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d003      	beq.n	8007854 <TIM_OC4_SetConfig+0x74>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a12      	ldr	r2, [pc, #72]	; (8007898 <TIM_OC4_SetConfig+0xb8>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d109      	bne.n	8007868 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800785a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	019b      	lsls	r3, r3, #6
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	4313      	orrs	r3, r2
 8007866:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	621a      	str	r2, [r3, #32]
}
 8007882:	bf00      	nop
 8007884:	371c      	adds	r7, #28
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	40012c00 	.word	0x40012c00
 8007894:	40014400 	.word	0x40014400
 8007898:	40014800 	.word	0x40014800

0800789c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800789c:	b480      	push	{r7}
 800789e:	b087      	sub	sp, #28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80078e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	041b      	lsls	r3, r3, #16
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a13      	ldr	r2, [pc, #76]	; (8007940 <TIM_OC5_SetConfig+0xa4>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d007      	beq.n	8007906 <TIM_OC5_SetConfig+0x6a>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a12      	ldr	r2, [pc, #72]	; (8007944 <TIM_OC5_SetConfig+0xa8>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d003      	beq.n	8007906 <TIM_OC5_SetConfig+0x6a>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a11      	ldr	r2, [pc, #68]	; (8007948 <TIM_OC5_SetConfig+0xac>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d109      	bne.n	800791a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800790c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	021b      	lsls	r3, r3, #8
 8007914:	697a      	ldr	r2, [r7, #20]
 8007916:	4313      	orrs	r3, r2
 8007918:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	685a      	ldr	r2, [r3, #4]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	621a      	str	r2, [r3, #32]
}
 8007934:	bf00      	nop
 8007936:	371c      	adds	r7, #28
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	40012c00 	.word	0x40012c00
 8007944:	40014400 	.word	0x40014400
 8007948:	40014800 	.word	0x40014800

0800794c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800794c:	b480      	push	{r7}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800797a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800797e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	021b      	lsls	r3, r3, #8
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	4313      	orrs	r3, r2
 800798a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007992:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	051b      	lsls	r3, r3, #20
 800799a:	693a      	ldr	r2, [r7, #16]
 800799c:	4313      	orrs	r3, r2
 800799e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a14      	ldr	r2, [pc, #80]	; (80079f4 <TIM_OC6_SetConfig+0xa8>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d007      	beq.n	80079b8 <TIM_OC6_SetConfig+0x6c>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a13      	ldr	r2, [pc, #76]	; (80079f8 <TIM_OC6_SetConfig+0xac>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d003      	beq.n	80079b8 <TIM_OC6_SetConfig+0x6c>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a12      	ldr	r2, [pc, #72]	; (80079fc <TIM_OC6_SetConfig+0xb0>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d109      	bne.n	80079cc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	695b      	ldr	r3, [r3, #20]
 80079c4:	029b      	lsls	r3, r3, #10
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	693a      	ldr	r2, [r7, #16]
 80079e4:	621a      	str	r2, [r3, #32]
}
 80079e6:	bf00      	nop
 80079e8:	371c      	adds	r7, #28
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	40012c00 	.word	0x40012c00
 80079f8:	40014400 	.word	0x40014400
 80079fc:	40014800 	.word	0x40014800

08007a00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b087      	sub	sp, #28
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	f003 031f 	and.w	r3, r3, #31
 8007a12:	2201      	movs	r2, #1
 8007a14:	fa02 f303 	lsl.w	r3, r2, r3
 8007a18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6a1a      	ldr	r2, [r3, #32]
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	43db      	mvns	r3, r3
 8007a22:	401a      	ands	r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6a1a      	ldr	r2, [r3, #32]
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	f003 031f 	and.w	r3, r3, #31
 8007a32:	6879      	ldr	r1, [r7, #4]
 8007a34:	fa01 f303 	lsl.w	r3, r1, r3
 8007a38:	431a      	orrs	r2, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	621a      	str	r2, [r3, #32]
}
 8007a3e:	bf00      	nop
 8007a40:	371c      	adds	r7, #28
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr
	...

08007a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d101      	bne.n	8007a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a60:	2302      	movs	r3, #2
 8007a62:	e04a      	b.n	8007afa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2202      	movs	r2, #2
 8007a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a1f      	ldr	r2, [pc, #124]	; (8007b08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d108      	bne.n	8007aa0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a12      	ldr	r2, [pc, #72]	; (8007b08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d004      	beq.n	8007ace <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007acc:	d10c      	bne.n	8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ad4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	40012c00 	.word	0x40012c00

08007b0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b16:	2300      	movs	r3, #0
 8007b18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d101      	bne.n	8007b28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b24:	2302      	movs	r3, #2
 8007b26:	e078      	b.n	8007c1a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	695b      	ldr	r3, [r3, #20]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	041b      	lsls	r3, r3, #16
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a20      	ldr	r2, [pc, #128]	; (8007c28 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d106      	bne.n	8007bba <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	69db      	ldr	r3, [r3, #28]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a1a      	ldr	r2, [pc, #104]	; (8007c28 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d121      	bne.n	8007c08 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bce:	051b      	lsls	r3, r3, #20
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bec:	4313      	orrs	r3, r2
 8007bee:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a0c      	ldr	r2, [pc, #48]	; (8007c28 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d106      	bne.n	8007c08 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c04:	4313      	orrs	r3, r2
 8007c06:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	40012c00 	.word	0x40012c00

08007c2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <LL_RCC_GetUSARTClockSource>:
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4013      	ands	r3, r2
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <LL_RCC_GetLPUARTClockSource>:
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c94:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4013      	ands	r3, r2
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e042      	b.n	8007d40 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d106      	bne.n	8007cd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f7fb fbbb 	bl	8003448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2224      	movs	r2, #36	; 0x24
 8007cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f022 0201 	bic.w	r2, r2, #1
 8007ce8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fd1a 	bl	8008724 <UART_SetConfig>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d101      	bne.n	8007cfa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e022      	b.n	8007d40 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d002      	beq.n	8007d08 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 ff36 	bl	8008b74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685a      	ldr	r2, [r3, #4]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	689a      	ldr	r2, [r3, #8]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f042 0201 	orr.w	r2, r2, #1
 8007d36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 ffbd 	bl	8008cb8 <UART_CheckIdleState>
 8007d3e:	4603      	mov	r3, r0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b08a      	sub	sp, #40	; 0x28
 8007d4c:	af02      	add	r7, sp, #8
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	603b      	str	r3, [r7, #0]
 8007d54:	4613      	mov	r3, r2
 8007d56:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d5e:	2b20      	cmp	r3, #32
 8007d60:	f040 8083 	bne.w	8007e6a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d002      	beq.n	8007d70 <HAL_UART_Transmit+0x28>
 8007d6a:	88fb      	ldrh	r3, [r7, #6]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d101      	bne.n	8007d74 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e07b      	b.n	8007e6c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d101      	bne.n	8007d82 <HAL_UART_Transmit+0x3a>
 8007d7e:	2302      	movs	r3, #2
 8007d80:	e074      	b.n	8007e6c <HAL_UART_Transmit+0x124>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2221      	movs	r2, #33	; 0x21
 8007d96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d9a:	f7fb fed1 	bl	8003b40 <HAL_GetTick>
 8007d9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	88fa      	ldrh	r2, [r7, #6]
 8007da4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	88fa      	ldrh	r2, [r7, #6]
 8007dac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007db8:	d108      	bne.n	8007dcc <HAL_UART_Transmit+0x84>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d104      	bne.n	8007dcc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	61bb      	str	r3, [r7, #24]
 8007dca:	e003      	b.n	8007dd4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007ddc:	e02c      	b.n	8007e38 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	2200      	movs	r2, #0
 8007de6:	2180      	movs	r1, #128	; 0x80
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f000 ffb0 	bl	8008d4e <UART_WaitOnFlagUntilTimeout>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d001      	beq.n	8007df8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e039      	b.n	8007e6c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10b      	bne.n	8007e16 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	881b      	ldrh	r3, [r3, #0]
 8007e02:	461a      	mov	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e0c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	3302      	adds	r3, #2
 8007e12:	61bb      	str	r3, [r7, #24]
 8007e14:	e007      	b.n	8007e26 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	781a      	ldrb	r2, [r3, #0]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	3301      	adds	r3, #1
 8007e24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1cc      	bne.n	8007dde <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	9300      	str	r3, [sp, #0]
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	2140      	movs	r1, #64	; 0x40
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f000 ff7d 	bl	8008d4e <UART_WaitOnFlagUntilTimeout>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e006      	b.n	8007e6c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2220      	movs	r2, #32
 8007e62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007e66:	2300      	movs	r3, #0
 8007e68:	e000      	b.n	8007e6c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007e6a:	2302      	movs	r3, #2
  }
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3720      	adds	r7, #32
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b08a      	sub	sp, #40	; 0x28
 8007e78:	af02      	add	r7, sp, #8
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	603b      	str	r3, [r7, #0]
 8007e80:	4613      	mov	r3, r2
 8007e82:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e8a:	2b20      	cmp	r3, #32
 8007e8c:	f040 80c0 	bne.w	8008010 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d002      	beq.n	8007e9c <HAL_UART_Receive+0x28>
 8007e96:	88fb      	ldrh	r3, [r7, #6]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d101      	bne.n	8007ea0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e0b8      	b.n	8008012 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d101      	bne.n	8007eae <HAL_UART_Receive+0x3a>
 8007eaa:	2302      	movs	r3, #2
 8007eac:	e0b1      	b.n	8008012 <HAL_UART_Receive+0x19e>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2222      	movs	r2, #34	; 0x22
 8007ec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ecc:	f7fb fe38 	bl	8003b40 <HAL_GetTick>
 8007ed0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	88fa      	ldrh	r2, [r7, #6]
 8007ed6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	88fa      	ldrh	r2, [r7, #6]
 8007ede:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eea:	d10e      	bne.n	8007f0a <HAL_UART_Receive+0x96>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d105      	bne.n	8007f00 <HAL_UART_Receive+0x8c>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007efa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007efe:	e02d      	b.n	8007f5c <HAL_UART_Receive+0xe8>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	22ff      	movs	r2, #255	; 0xff
 8007f04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f08:	e028      	b.n	8007f5c <HAL_UART_Receive+0xe8>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10d      	bne.n	8007f2e <HAL_UART_Receive+0xba>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d104      	bne.n	8007f24 <HAL_UART_Receive+0xb0>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	22ff      	movs	r2, #255	; 0xff
 8007f1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f22:	e01b      	b.n	8007f5c <HAL_UART_Receive+0xe8>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	227f      	movs	r2, #127	; 0x7f
 8007f28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f2c:	e016      	b.n	8007f5c <HAL_UART_Receive+0xe8>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f36:	d10d      	bne.n	8007f54 <HAL_UART_Receive+0xe0>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d104      	bne.n	8007f4a <HAL_UART_Receive+0xd6>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	227f      	movs	r2, #127	; 0x7f
 8007f44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f48:	e008      	b.n	8007f5c <HAL_UART_Receive+0xe8>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	223f      	movs	r2, #63	; 0x3f
 8007f4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f52:	e003      	b.n	8007f5c <HAL_UART_Receive+0xe8>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f62:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f6c:	d108      	bne.n	8007f80 <HAL_UART_Receive+0x10c>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d104      	bne.n	8007f80 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8007f76:	2300      	movs	r3, #0
 8007f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	61bb      	str	r3, [r7, #24]
 8007f7e:	e003      	b.n	8007f88 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f84:	2300      	movs	r3, #0
 8007f86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007f90:	e032      	b.n	8007ff8 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	9300      	str	r3, [sp, #0]
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	2120      	movs	r1, #32
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f000 fed6 	bl	8008d4e <UART_WaitOnFlagUntilTimeout>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	e032      	b.n	8008012 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d10c      	bne.n	8007fcc <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	8a7b      	ldrh	r3, [r7, #18]
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	3302      	adds	r3, #2
 8007fc8:	61bb      	str	r3, [r7, #24]
 8007fca:	e00c      	b.n	8007fe6 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd2:	b2da      	uxtb	r2, r3
 8007fd4:	8a7b      	ldrh	r3, [r7, #18]
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	4013      	ands	r3, r2
 8007fda:	b2da      	uxtb	r2, r3
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1c6      	bne.n	8007f92 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2220      	movs	r2, #32
 8008008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800800c:	2300      	movs	r3, #0
 800800e:	e000      	b.n	8008012 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8008010:	2302      	movs	r3, #2
  }
}
 8008012:	4618      	mov	r0, r3
 8008014:	3720      	adds	r7, #32
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
	...

0800801c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b08a      	sub	sp, #40	; 0x28
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	4613      	mov	r3, r2
 8008028:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008030:	2b20      	cmp	r3, #32
 8008032:	d142      	bne.n	80080ba <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d002      	beq.n	8008040 <HAL_UART_Receive_IT+0x24>
 800803a:	88fb      	ldrh	r3, [r7, #6]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d101      	bne.n	8008044 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e03b      	b.n	80080bc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800804a:	2b01      	cmp	r3, #1
 800804c:	d101      	bne.n	8008052 <HAL_UART_Receive_IT+0x36>
 800804e:	2302      	movs	r3, #2
 8008050:	e034      	b.n	80080bc <HAL_UART_Receive_IT+0xa0>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a17      	ldr	r2, [pc, #92]	; (80080c4 <HAL_UART_Receive_IT+0xa8>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d01f      	beq.n	80080aa <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d018      	beq.n	80080aa <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	e853 3f00 	ldrex	r3, [r3]
 8008084:	613b      	str	r3, [r7, #16]
   return(result);
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800808c:	627b      	str	r3, [r7, #36]	; 0x24
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	461a      	mov	r2, r3
 8008094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008096:	623b      	str	r3, [r7, #32]
 8008098:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809a:	69f9      	ldr	r1, [r7, #28]
 800809c:	6a3a      	ldr	r2, [r7, #32]
 800809e:	e841 2300 	strex	r3, r2, [r1]
 80080a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1e6      	bne.n	8008078 <HAL_UART_Receive_IT+0x5c>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif

    return(UART_Start_Receive_IT(huart, pData, Size));
 80080aa:	88fb      	ldrh	r3, [r7, #6]
 80080ac:	461a      	mov	r2, r3
 80080ae:	68b9      	ldr	r1, [r7, #8]
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f000 ff15 	bl	8008ee0 <UART_Start_Receive_IT>
 80080b6:	4603      	mov	r3, r0
 80080b8:	e000      	b.n	80080bc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80080ba:	2302      	movs	r3, #2
  }
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3728      	adds	r7, #40	; 0x28
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	40008000 	.word	0x40008000

080080c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b0ba      	sub	sp, #232	; 0xe8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80080ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80080f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80080f6:	4013      	ands	r3, r2
 80080f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80080fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008100:	2b00      	cmp	r3, #0
 8008102:	d11b      	bne.n	800813c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008108:	f003 0320 	and.w	r3, r3, #32
 800810c:	2b00      	cmp	r3, #0
 800810e:	d015      	beq.n	800813c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008114:	f003 0320 	and.w	r3, r3, #32
 8008118:	2b00      	cmp	r3, #0
 800811a:	d105      	bne.n	8008128 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800811c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008124:	2b00      	cmp	r3, #0
 8008126:	d009      	beq.n	800813c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800812c:	2b00      	cmp	r3, #0
 800812e:	f000 82d6 	beq.w	80086de <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	4798      	blx	r3
      }
      return;
 800813a:	e2d0      	b.n	80086de <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800813c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008140:	2b00      	cmp	r3, #0
 8008142:	f000 811f 	beq.w	8008384 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008146:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800814a:	4b8b      	ldr	r3, [pc, #556]	; (8008378 <HAL_UART_IRQHandler+0x2b0>)
 800814c:	4013      	ands	r3, r2
 800814e:	2b00      	cmp	r3, #0
 8008150:	d106      	bne.n	8008160 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008152:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008156:	4b89      	ldr	r3, [pc, #548]	; (800837c <HAL_UART_IRQHandler+0x2b4>)
 8008158:	4013      	ands	r3, r2
 800815a:	2b00      	cmp	r3, #0
 800815c:	f000 8112 	beq.w	8008384 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008164:	f003 0301 	and.w	r3, r3, #1
 8008168:	2b00      	cmp	r3, #0
 800816a:	d011      	beq.n	8008190 <HAL_UART_IRQHandler+0xc8>
 800816c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00b      	beq.n	8008190 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2201      	movs	r2, #1
 800817e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008186:	f043 0201 	orr.w	r2, r3, #1
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008194:	f003 0302 	and.w	r3, r3, #2
 8008198:	2b00      	cmp	r3, #0
 800819a:	d011      	beq.n	80081c0 <HAL_UART_IRQHandler+0xf8>
 800819c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081a0:	f003 0301 	and.w	r3, r3, #1
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00b      	beq.n	80081c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2202      	movs	r2, #2
 80081ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081b6:	f043 0204 	orr.w	r2, r3, #4
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081c4:	f003 0304 	and.w	r3, r3, #4
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d011      	beq.n	80081f0 <HAL_UART_IRQHandler+0x128>
 80081cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00b      	beq.n	80081f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2204      	movs	r2, #4
 80081de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081e6:	f043 0202 	orr.w	r2, r3, #2
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80081f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081f4:	f003 0308 	and.w	r3, r3, #8
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d017      	beq.n	800822c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008200:	f003 0320 	and.w	r3, r3, #32
 8008204:	2b00      	cmp	r3, #0
 8008206:	d105      	bne.n	8008214 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008208:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800820c:	4b5a      	ldr	r3, [pc, #360]	; (8008378 <HAL_UART_IRQHandler+0x2b0>)
 800820e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00b      	beq.n	800822c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2208      	movs	r2, #8
 800821a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008222:	f043 0208 	orr.w	r2, r3, #8
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800822c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008230:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008234:	2b00      	cmp	r3, #0
 8008236:	d012      	beq.n	800825e <HAL_UART_IRQHandler+0x196>
 8008238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800823c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00c      	beq.n	800825e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800824c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008254:	f043 0220 	orr.w	r2, r3, #32
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008264:	2b00      	cmp	r3, #0
 8008266:	f000 823c 	beq.w	80086e2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800826a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800826e:	f003 0320 	and.w	r3, r3, #32
 8008272:	2b00      	cmp	r3, #0
 8008274:	d013      	beq.n	800829e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800827a:	f003 0320 	and.w	r3, r3, #32
 800827e:	2b00      	cmp	r3, #0
 8008280:	d105      	bne.n	800828e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800828a:	2b00      	cmp	r3, #0
 800828c:	d007      	beq.n	800829e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008292:	2b00      	cmp	r3, #0
 8008294:	d003      	beq.n	800829e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b2:	2b40      	cmp	r3, #64	; 0x40
 80082b4:	d005      	beq.n	80082c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80082b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d04f      	beq.n	8008362 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 ff10 	bl	80090e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d2:	2b40      	cmp	r3, #64	; 0x40
 80082d4:	d141      	bne.n	800835a <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	3308      	adds	r3, #8
 80082dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082e4:	e853 3f00 	ldrex	r3, [r3]
 80082e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80082ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	3308      	adds	r3, #8
 80082fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008302:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008306:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800830e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008312:	e841 2300 	strex	r3, r2, [r1]
 8008316:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800831a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1d9      	bne.n	80082d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008326:	2b00      	cmp	r3, #0
 8008328:	d013      	beq.n	8008352 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800832e:	4a14      	ldr	r2, [pc, #80]	; (8008380 <HAL_UART_IRQHandler+0x2b8>)
 8008330:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008336:	4618      	mov	r0, r3
 8008338:	f7fb fd88 	bl	8003e4c <HAL_DMA_Abort_IT>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d017      	beq.n	8008372 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800834c:	4610      	mov	r0, r2
 800834e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008350:	e00f      	b.n	8008372 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f9d0 	bl	80086f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008358:	e00b      	b.n	8008372 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f9cc 	bl	80086f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008360:	e007      	b.n	8008372 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f9c8 	bl	80086f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008370:	e1b7      	b.n	80086e2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008372:	bf00      	nop
    return;
 8008374:	e1b5      	b.n	80086e2 <HAL_UART_IRQHandler+0x61a>
 8008376:	bf00      	nop
 8008378:	10000001 	.word	0x10000001
 800837c:	04000120 	.word	0x04000120
 8008380:	080091b5 	.word	0x080091b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008388:	2b01      	cmp	r3, #1
 800838a:	f040 814a 	bne.w	8008622 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800838e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008392:	f003 0310 	and.w	r3, r3, #16
 8008396:	2b00      	cmp	r3, #0
 8008398:	f000 8143 	beq.w	8008622 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800839c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083a0:	f003 0310 	and.w	r3, r3, #16
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f000 813c 	beq.w	8008622 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2210      	movs	r2, #16
 80083b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083bc:	2b40      	cmp	r3, #64	; 0x40
 80083be:	f040 80b5 	bne.w	800852c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80083ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	f000 8187 	beq.w	80086e6 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80083de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083e2:	429a      	cmp	r2, r3
 80083e4:	f080 817f 	bcs.w	80086e6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 0320 	and.w	r3, r3, #32
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f040 8086 	bne.w	8008510 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008410:	e853 3f00 	ldrex	r3, [r3]
 8008414:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008418:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800841c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008420:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	461a      	mov	r2, r3
 800842a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800842e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008432:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008436:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800843a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800843e:	e841 2300 	strex	r3, r2, [r1]
 8008442:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008446:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1da      	bne.n	8008404 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3308      	adds	r3, #8
 8008454:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008458:	e853 3f00 	ldrex	r3, [r3]
 800845c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800845e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008460:	f023 0301 	bic.w	r3, r3, #1
 8008464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	3308      	adds	r3, #8
 800846e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008472:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008476:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008478:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800847a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800847e:	e841 2300 	strex	r3, r2, [r1]
 8008482:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008484:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1e1      	bne.n	800844e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	3308      	adds	r3, #8
 8008490:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008492:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008494:	e853 3f00 	ldrex	r3, [r3]
 8008498:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800849a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800849c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	3308      	adds	r3, #8
 80084aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80084ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80084b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80084b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084b6:	e841 2300 	strex	r3, r2, [r1]
 80084ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80084bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1e3      	bne.n	800848a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2220      	movs	r2, #32
 80084c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084d8:	e853 3f00 	ldrex	r3, [r3]
 80084dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084e0:	f023 0310 	bic.w	r3, r3, #16
 80084e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	461a      	mov	r2, r3
 80084ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80084f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084fa:	e841 2300 	strex	r3, r2, [r1]
 80084fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1e4      	bne.n	80084d0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800850a:	4618      	mov	r0, r3
 800850c:	f7fb fc3f 	bl	8003d8e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800851c:	b29b      	uxth	r3, r3
 800851e:	1ad3      	subs	r3, r2, r3
 8008520:	b29b      	uxth	r3, r3
 8008522:	4619      	mov	r1, r3
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f8f1 	bl	800870c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800852a:	e0dc      	b.n	80086e6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008538:	b29b      	uxth	r3, r3
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008546:	b29b      	uxth	r3, r3
 8008548:	2b00      	cmp	r3, #0
 800854a:	f000 80ce 	beq.w	80086ea <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800854e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008552:	2b00      	cmp	r3, #0
 8008554:	f000 80c9 	beq.w	80086ea <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008560:	e853 3f00 	ldrex	r3, [r3]
 8008564:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008568:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800856c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	461a      	mov	r2, r3
 8008576:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800857a:	647b      	str	r3, [r7, #68]	; 0x44
 800857c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008580:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008582:	e841 2300 	strex	r3, r2, [r1]
 8008586:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1e4      	bne.n	8008558 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	3308      	adds	r3, #8
 8008594:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008598:	e853 3f00 	ldrex	r3, [r3]
 800859c:	623b      	str	r3, [r7, #32]
   return(result);
 800859e:	6a3b      	ldr	r3, [r7, #32]
 80085a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085a4:	f023 0301 	bic.w	r3, r3, #1
 80085a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	3308      	adds	r3, #8
 80085b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80085b6:	633a      	str	r2, [r7, #48]	; 0x30
 80085b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085be:	e841 2300 	strex	r3, r2, [r1]
 80085c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1e1      	bne.n	800858e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2220      	movs	r2, #32
 80085ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	e853 3f00 	ldrex	r3, [r3]
 80085ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f023 0310 	bic.w	r3, r3, #16
 80085f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	461a      	mov	r2, r3
 80085fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008600:	61fb      	str	r3, [r7, #28]
 8008602:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008604:	69b9      	ldr	r1, [r7, #24]
 8008606:	69fa      	ldr	r2, [r7, #28]
 8008608:	e841 2300 	strex	r3, r2, [r1]
 800860c:	617b      	str	r3, [r7, #20]
   return(result);
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1e4      	bne.n	80085de <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008614:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008618:	4619      	mov	r1, r3
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f876 	bl	800870c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008620:	e063      	b.n	80086ea <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00e      	beq.n	800864c <HAL_UART_IRQHandler+0x584>
 800862e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008636:	2b00      	cmp	r3, #0
 8008638:	d008      	beq.n	800864c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008642:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f001 fa53 	bl	8009af0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800864a:	e051      	b.n	80086f0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800864c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008654:	2b00      	cmp	r3, #0
 8008656:	d014      	beq.n	8008682 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800865c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008660:	2b00      	cmp	r3, #0
 8008662:	d105      	bne.n	8008670 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008668:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d008      	beq.n	8008682 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008674:	2b00      	cmp	r3, #0
 8008676:	d03a      	beq.n	80086ee <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	4798      	blx	r3
    }
    return;
 8008680:	e035      	b.n	80086ee <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800868a:	2b00      	cmp	r3, #0
 800868c:	d009      	beq.n	80086a2 <HAL_UART_IRQHandler+0x5da>
 800868e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008696:	2b00      	cmp	r3, #0
 8008698:	d003      	beq.n	80086a2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fda0 	bl	80091e0 <UART_EndTransmit_IT>
    return;
 80086a0:	e026      	b.n	80086f0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80086a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d009      	beq.n	80086c2 <HAL_UART_IRQHandler+0x5fa>
 80086ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d003      	beq.n	80086c2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f001 fa2c 	bl	8009b18 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086c0:	e016      	b.n	80086f0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80086c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d010      	beq.n	80086f0 <HAL_UART_IRQHandler+0x628>
 80086ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	da0c      	bge.n	80086f0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f001 fa14 	bl	8009b04 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086dc:	e008      	b.n	80086f0 <HAL_UART_IRQHandler+0x628>
      return;
 80086de:	bf00      	nop
 80086e0:	e006      	b.n	80086f0 <HAL_UART_IRQHandler+0x628>
    return;
 80086e2:	bf00      	nop
 80086e4:	e004      	b.n	80086f0 <HAL_UART_IRQHandler+0x628>
      return;
 80086e6:	bf00      	nop
 80086e8:	e002      	b.n	80086f0 <HAL_UART_IRQHandler+0x628>
      return;
 80086ea:	bf00      	nop
 80086ec:	e000      	b.n	80086f0 <HAL_UART_IRQHandler+0x628>
    return;
 80086ee:	bf00      	nop
  }
}
 80086f0:	37e8      	adds	r7, #232	; 0xe8
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop

080086f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008700:	bf00      	nop
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	460b      	mov	r3, r1
 8008716:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008728:	b08c      	sub	sp, #48	; 0x30
 800872a:	af00      	add	r7, sp, #0
 800872c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800872e:	2300      	movs	r3, #0
 8008730:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	689a      	ldr	r2, [r3, #8]
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	431a      	orrs	r2, r3
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	695b      	ldr	r3, [r3, #20]
 8008742:	431a      	orrs	r2, r3
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	69db      	ldr	r3, [r3, #28]
 8008748:	4313      	orrs	r3, r2
 800874a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	4baf      	ldr	r3, [pc, #700]	; (8008a10 <UART_SetConfig+0x2ec>)
 8008754:	4013      	ands	r3, r2
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	6812      	ldr	r2, [r2, #0]
 800875a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800875c:	430b      	orrs	r3, r1
 800875e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	68da      	ldr	r2, [r3, #12]
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	430a      	orrs	r2, r1
 8008774:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4aa4      	ldr	r2, [pc, #656]	; (8008a14 <UART_SetConfig+0x2f0>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d004      	beq.n	8008790 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	6a1b      	ldr	r3, [r3, #32]
 800878a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800878c:	4313      	orrs	r3, r2
 800878e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800879a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800879e:	697a      	ldr	r2, [r7, #20]
 80087a0:	6812      	ldr	r2, [r2, #0]
 80087a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087a4:	430b      	orrs	r3, r1
 80087a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ae:	f023 010f 	bic.w	r1, r3, #15
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	430a      	orrs	r2, r1
 80087bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a95      	ldr	r2, [pc, #596]	; (8008a18 <UART_SetConfig+0x2f4>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d125      	bne.n	8008814 <UART_SetConfig+0xf0>
 80087c8:	2003      	movs	r0, #3
 80087ca:	f7ff fa4d 	bl	8007c68 <LL_RCC_GetUSARTClockSource>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b03      	cmp	r3, #3
 80087d2:	d81b      	bhi.n	800880c <UART_SetConfig+0xe8>
 80087d4:	a201      	add	r2, pc, #4	; (adr r2, 80087dc <UART_SetConfig+0xb8>)
 80087d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087da:	bf00      	nop
 80087dc:	080087ed 	.word	0x080087ed
 80087e0:	080087fd 	.word	0x080087fd
 80087e4:	080087f5 	.word	0x080087f5
 80087e8:	08008805 	.word	0x08008805
 80087ec:	2301      	movs	r3, #1
 80087ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087f2:	e042      	b.n	800887a <UART_SetConfig+0x156>
 80087f4:	2302      	movs	r3, #2
 80087f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087fa:	e03e      	b.n	800887a <UART_SetConfig+0x156>
 80087fc:	2304      	movs	r3, #4
 80087fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008802:	e03a      	b.n	800887a <UART_SetConfig+0x156>
 8008804:	2308      	movs	r3, #8
 8008806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800880a:	e036      	b.n	800887a <UART_SetConfig+0x156>
 800880c:	2310      	movs	r3, #16
 800880e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008812:	e032      	b.n	800887a <UART_SetConfig+0x156>
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a7e      	ldr	r2, [pc, #504]	; (8008a14 <UART_SetConfig+0x2f0>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d12a      	bne.n	8008874 <UART_SetConfig+0x150>
 800881e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008822:	f7ff fa31 	bl	8007c88 <LL_RCC_GetLPUARTClockSource>
 8008826:	4603      	mov	r3, r0
 8008828:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800882c:	d01a      	beq.n	8008864 <UART_SetConfig+0x140>
 800882e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008832:	d81b      	bhi.n	800886c <UART_SetConfig+0x148>
 8008834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008838:	d00c      	beq.n	8008854 <UART_SetConfig+0x130>
 800883a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800883e:	d815      	bhi.n	800886c <UART_SetConfig+0x148>
 8008840:	2b00      	cmp	r3, #0
 8008842:	d003      	beq.n	800884c <UART_SetConfig+0x128>
 8008844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008848:	d008      	beq.n	800885c <UART_SetConfig+0x138>
 800884a:	e00f      	b.n	800886c <UART_SetConfig+0x148>
 800884c:	2300      	movs	r3, #0
 800884e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008852:	e012      	b.n	800887a <UART_SetConfig+0x156>
 8008854:	2302      	movs	r3, #2
 8008856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800885a:	e00e      	b.n	800887a <UART_SetConfig+0x156>
 800885c:	2304      	movs	r3, #4
 800885e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008862:	e00a      	b.n	800887a <UART_SetConfig+0x156>
 8008864:	2308      	movs	r3, #8
 8008866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800886a:	e006      	b.n	800887a <UART_SetConfig+0x156>
 800886c:	2310      	movs	r3, #16
 800886e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008872:	e002      	b.n	800887a <UART_SetConfig+0x156>
 8008874:	2310      	movs	r3, #16
 8008876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a65      	ldr	r2, [pc, #404]	; (8008a14 <UART_SetConfig+0x2f0>)
 8008880:	4293      	cmp	r3, r2
 8008882:	f040 8097 	bne.w	80089b4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008886:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800888a:	2b08      	cmp	r3, #8
 800888c:	d823      	bhi.n	80088d6 <UART_SetConfig+0x1b2>
 800888e:	a201      	add	r2, pc, #4	; (adr r2, 8008894 <UART_SetConfig+0x170>)
 8008890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008894:	080088b9 	.word	0x080088b9
 8008898:	080088d7 	.word	0x080088d7
 800889c:	080088c1 	.word	0x080088c1
 80088a0:	080088d7 	.word	0x080088d7
 80088a4:	080088c7 	.word	0x080088c7
 80088a8:	080088d7 	.word	0x080088d7
 80088ac:	080088d7 	.word	0x080088d7
 80088b0:	080088d7 	.word	0x080088d7
 80088b4:	080088cf 	.word	0x080088cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088b8:	f7fc feb8 	bl	800562c <HAL_RCC_GetPCLK1Freq>
 80088bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088be:	e010      	b.n	80088e2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088c0:	4b56      	ldr	r3, [pc, #344]	; (8008a1c <UART_SetConfig+0x2f8>)
 80088c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088c4:	e00d      	b.n	80088e2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088c6:	f7fc fe31 	bl	800552c <HAL_RCC_GetSysClockFreq>
 80088ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088cc:	e009      	b.n	80088e2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088d4:	e005      	b.n	80088e2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80088d6:	2300      	movs	r3, #0
 80088d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80088e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80088e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f000 812b 	beq.w	8008b40 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ee:	4a4c      	ldr	r2, [pc, #304]	; (8008a20 <UART_SetConfig+0x2fc>)
 80088f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088f4:	461a      	mov	r2, r3
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80088fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	685a      	ldr	r2, [r3, #4]
 8008902:	4613      	mov	r3, r2
 8008904:	005b      	lsls	r3, r3, #1
 8008906:	4413      	add	r3, r2
 8008908:	69ba      	ldr	r2, [r7, #24]
 800890a:	429a      	cmp	r2, r3
 800890c:	d305      	bcc.n	800891a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008914:	69ba      	ldr	r2, [r7, #24]
 8008916:	429a      	cmp	r2, r3
 8008918:	d903      	bls.n	8008922 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008920:	e10e      	b.n	8008b40 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008924:	2200      	movs	r2, #0
 8008926:	60bb      	str	r3, [r7, #8]
 8008928:	60fa      	str	r2, [r7, #12]
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892e:	4a3c      	ldr	r2, [pc, #240]	; (8008a20 <UART_SetConfig+0x2fc>)
 8008930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008934:	b29b      	uxth	r3, r3
 8008936:	2200      	movs	r2, #0
 8008938:	603b      	str	r3, [r7, #0]
 800893a:	607a      	str	r2, [r7, #4]
 800893c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008940:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008944:	f7f8 f918 	bl	8000b78 <__aeabi_uldivmod>
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	4610      	mov	r0, r2
 800894e:	4619      	mov	r1, r3
 8008950:	f04f 0200 	mov.w	r2, #0
 8008954:	f04f 0300 	mov.w	r3, #0
 8008958:	020b      	lsls	r3, r1, #8
 800895a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800895e:	0202      	lsls	r2, r0, #8
 8008960:	6979      	ldr	r1, [r7, #20]
 8008962:	6849      	ldr	r1, [r1, #4]
 8008964:	0849      	lsrs	r1, r1, #1
 8008966:	2000      	movs	r0, #0
 8008968:	460c      	mov	r4, r1
 800896a:	4605      	mov	r5, r0
 800896c:	eb12 0804 	adds.w	r8, r2, r4
 8008970:	eb43 0905 	adc.w	r9, r3, r5
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	469a      	mov	sl, r3
 800897c:	4693      	mov	fp, r2
 800897e:	4652      	mov	r2, sl
 8008980:	465b      	mov	r3, fp
 8008982:	4640      	mov	r0, r8
 8008984:	4649      	mov	r1, r9
 8008986:	f7f8 f8f7 	bl	8000b78 <__aeabi_uldivmod>
 800898a:	4602      	mov	r2, r0
 800898c:	460b      	mov	r3, r1
 800898e:	4613      	mov	r3, r2
 8008990:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008992:	6a3b      	ldr	r3, [r7, #32]
 8008994:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008998:	d308      	bcc.n	80089ac <UART_SetConfig+0x288>
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089a0:	d204      	bcs.n	80089ac <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	6a3a      	ldr	r2, [r7, #32]
 80089a8:	60da      	str	r2, [r3, #12]
 80089aa:	e0c9      	b.n	8008b40 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80089b2:	e0c5      	b.n	8008b40 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	69db      	ldr	r3, [r3, #28]
 80089b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089bc:	d16e      	bne.n	8008a9c <UART_SetConfig+0x378>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80089be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80089c2:	3b01      	subs	r3, #1
 80089c4:	2b07      	cmp	r3, #7
 80089c6:	d82d      	bhi.n	8008a24 <UART_SetConfig+0x300>
 80089c8:	a201      	add	r2, pc, #4	; (adr r2, 80089d0 <UART_SetConfig+0x2ac>)
 80089ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ce:	bf00      	nop
 80089d0:	080089f1 	.word	0x080089f1
 80089d4:	080089f9 	.word	0x080089f9
 80089d8:	08008a25 	.word	0x08008a25
 80089dc:	080089ff 	.word	0x080089ff
 80089e0:	08008a25 	.word	0x08008a25
 80089e4:	08008a25 	.word	0x08008a25
 80089e8:	08008a25 	.word	0x08008a25
 80089ec:	08008a07 	.word	0x08008a07
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089f0:	f7fc fe32 	bl	8005658 <HAL_RCC_GetPCLK2Freq>
 80089f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089f6:	e01b      	b.n	8008a30 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089f8:	4b08      	ldr	r3, [pc, #32]	; (8008a1c <UART_SetConfig+0x2f8>)
 80089fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089fc:	e018      	b.n	8008a30 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089fe:	f7fc fd95 	bl	800552c <HAL_RCC_GetSysClockFreq>
 8008a02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a04:	e014      	b.n	8008a30 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a0c:	e010      	b.n	8008a30 <UART_SetConfig+0x30c>
 8008a0e:	bf00      	nop
 8008a10:	cfff69f3 	.word	0xcfff69f3
 8008a14:	40008000 	.word	0x40008000
 8008a18:	40013800 	.word	0x40013800
 8008a1c:	00f42400 	.word	0x00f42400
 8008a20:	0800d088 	.word	0x0800d088
      default:
        pclk = 0U;
 8008a24:	2300      	movs	r3, #0
 8008a26:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f000 8084 	beq.w	8008b40 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3c:	4a4b      	ldr	r2, [pc, #300]	; (8008b6c <UART_SetConfig+0x448>)
 8008a3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a42:	461a      	mov	r2, r3
 8008a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a46:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a4a:	005a      	lsls	r2, r3, #1
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	085b      	lsrs	r3, r3, #1
 8008a52:	441a      	add	r2, r3
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a60:	6a3b      	ldr	r3, [r7, #32]
 8008a62:	2b0f      	cmp	r3, #15
 8008a64:	d916      	bls.n	8008a94 <UART_SetConfig+0x370>
 8008a66:	6a3b      	ldr	r3, [r7, #32]
 8008a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a6c:	d212      	bcs.n	8008a94 <UART_SetConfig+0x370>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	f023 030f 	bic.w	r3, r3, #15
 8008a76:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a78:	6a3b      	ldr	r3, [r7, #32]
 8008a7a:	085b      	lsrs	r3, r3, #1
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	f003 0307 	and.w	r3, r3, #7
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	8bfb      	ldrh	r3, [r7, #30]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	8bfa      	ldrh	r2, [r7, #30]
 8008a90:	60da      	str	r2, [r3, #12]
 8008a92:	e055      	b.n	8008b40 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008a9a:	e051      	b.n	8008b40 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	2b07      	cmp	r3, #7
 8008aa4:	d821      	bhi.n	8008aea <UART_SetConfig+0x3c6>
 8008aa6:	a201      	add	r2, pc, #4	; (adr r2, 8008aac <UART_SetConfig+0x388>)
 8008aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aac:	08008acd 	.word	0x08008acd
 8008ab0:	08008ad5 	.word	0x08008ad5
 8008ab4:	08008aeb 	.word	0x08008aeb
 8008ab8:	08008adb 	.word	0x08008adb
 8008abc:	08008aeb 	.word	0x08008aeb
 8008ac0:	08008aeb 	.word	0x08008aeb
 8008ac4:	08008aeb 	.word	0x08008aeb
 8008ac8:	08008ae3 	.word	0x08008ae3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008acc:	f7fc fdc4 	bl	8005658 <HAL_RCC_GetPCLK2Freq>
 8008ad0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ad2:	e010      	b.n	8008af6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ad4:	4b26      	ldr	r3, [pc, #152]	; (8008b70 <UART_SetConfig+0x44c>)
 8008ad6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ad8:	e00d      	b.n	8008af6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ada:	f7fc fd27 	bl	800552c <HAL_RCC_GetSysClockFreq>
 8008ade:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ae0:	e009      	b.n	8008af6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ae6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ae8:	e005      	b.n	8008af6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008aea:	2300      	movs	r3, #0
 8008aec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008af4:	bf00      	nop
    }

    if (pclk != 0U)
 8008af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d021      	beq.n	8008b40 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b00:	4a1a      	ldr	r2, [pc, #104]	; (8008b6c <UART_SetConfig+0x448>)
 8008b02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b06:	461a      	mov	r2, r3
 8008b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	085b      	lsrs	r3, r3, #1
 8008b14:	441a      	add	r2, r3
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b22:	6a3b      	ldr	r3, [r7, #32]
 8008b24:	2b0f      	cmp	r3, #15
 8008b26:	d908      	bls.n	8008b3a <UART_SetConfig+0x416>
 8008b28:	6a3b      	ldr	r3, [r7, #32]
 8008b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b2e:	d204      	bcs.n	8008b3a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = usartdiv;
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6a3a      	ldr	r2, [r7, #32]
 8008b36:	60da      	str	r2, [r3, #12]
 8008b38:	e002      	b.n	8008b40 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	2200      	movs	r2, #0
 8008b54:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008b5c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3730      	adds	r7, #48	; 0x30
 8008b64:	46bd      	mov	sp, r7
 8008b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b6a:	bf00      	nop
 8008b6c:	0800d088 	.word	0x0800d088
 8008b70:	00f42400 	.word	0x00f42400

08008b74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b80:	f003 0301 	and.w	r3, r3, #1
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00a      	beq.n	8008b9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba2:	f003 0302 	and.w	r3, r3, #2
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00a      	beq.n	8008bc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc4:	f003 0304 	and.w	r3, r3, #4
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00a      	beq.n	8008be2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	430a      	orrs	r2, r1
 8008be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be6:	f003 0308 	and.w	r3, r3, #8
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00a      	beq.n	8008c04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	430a      	orrs	r2, r1
 8008c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c08:	f003 0310 	and.w	r3, r3, #16
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00a      	beq.n	8008c26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2a:	f003 0320 	and.w	r3, r3, #32
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00a      	beq.n	8008c48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	430a      	orrs	r2, r1
 8008c46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d01a      	beq.n	8008c8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	430a      	orrs	r2, r1
 8008c68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c72:	d10a      	bne.n	8008c8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	430a      	orrs	r2, r1
 8008c88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00a      	beq.n	8008cac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	430a      	orrs	r2, r1
 8008caa:	605a      	str	r2, [r3, #4]
  }
}
 8008cac:	bf00      	nop
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af02      	add	r7, sp, #8
 8008cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008cc8:	f7fa ff3a 	bl	8003b40 <HAL_GetTick>
 8008ccc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 0308 	and.w	r3, r3, #8
 8008cd8:	2b08      	cmp	r3, #8
 8008cda:	d10e      	bne.n	8008cfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f82f 	bl	8008d4e <UART_WaitOnFlagUntilTimeout>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d001      	beq.n	8008cfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e025      	b.n	8008d46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 0304 	and.w	r3, r3, #4
 8008d04:	2b04      	cmp	r3, #4
 8008d06:	d10e      	bne.n	8008d26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f819 	bl	8008d4e <UART_WaitOnFlagUntilTimeout>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e00f      	b.n	8008d46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2220      	movs	r2, #32
 8008d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2220      	movs	r2, #32
 8008d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b09c      	sub	sp, #112	; 0x70
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	60f8      	str	r0, [r7, #12]
 8008d56:	60b9      	str	r1, [r7, #8]
 8008d58:	603b      	str	r3, [r7, #0]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d5e:	e0a9      	b.n	8008eb4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d66:	f000 80a5 	beq.w	8008eb4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d6a:	f7fa fee9 	bl	8003b40 <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d302      	bcc.n	8008d80 <UART_WaitOnFlagUntilTimeout+0x32>
 8008d7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d140      	bne.n	8008e02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d88:	e853 3f00 	ldrex	r3, [r3]
 8008d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d94:	667b      	str	r3, [r7, #100]	; 0x64
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008da0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008da4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008da6:	e841 2300 	strex	r3, r2, [r1]
 8008daa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1e6      	bne.n	8008d80 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	3308      	adds	r3, #8
 8008db8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dbc:	e853 3f00 	ldrex	r3, [r3]
 8008dc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc4:	f023 0301 	bic.w	r3, r3, #1
 8008dc8:	663b      	str	r3, [r7, #96]	; 0x60
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	3308      	adds	r3, #8
 8008dd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008dd2:	64ba      	str	r2, [r7, #72]	; 0x48
 8008dd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008dd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dda:	e841 2300 	strex	r3, r2, [r1]
 8008dde:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1e5      	bne.n	8008db2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2220      	movs	r2, #32
 8008dea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2220      	movs	r2, #32
 8008df2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	e069      	b.n	8008ed6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 0304 	and.w	r3, r3, #4
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d051      	beq.n	8008eb4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	69db      	ldr	r3, [r3, #28]
 8008e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e1e:	d149      	bne.n	8008eb4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e32:	e853 3f00 	ldrex	r3, [r3]
 8008e36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	461a      	mov	r2, r3
 8008e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e48:	637b      	str	r3, [r7, #52]	; 0x34
 8008e4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e50:	e841 2300 	strex	r3, r2, [r1]
 8008e54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1e6      	bne.n	8008e2a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	3308      	adds	r3, #8
 8008e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	e853 3f00 	ldrex	r3, [r3]
 8008e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	f023 0301 	bic.w	r3, r3, #1
 8008e72:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	3308      	adds	r3, #8
 8008e7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e7c:	623a      	str	r2, [r7, #32]
 8008e7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e80:	69f9      	ldr	r1, [r7, #28]
 8008e82:	6a3a      	ldr	r2, [r7, #32]
 8008e84:	e841 2300 	strex	r3, r2, [r1]
 8008e88:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1e5      	bne.n	8008e5c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2220      	movs	r2, #32
 8008e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2220      	movs	r2, #32
 8008e9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2220      	movs	r2, #32
 8008ea4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	e010      	b.n	8008ed6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	69da      	ldr	r2, [r3, #28]
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	68ba      	ldr	r2, [r7, #8]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	bf0c      	ite	eq
 8008ec4:	2301      	moveq	r3, #1
 8008ec6:	2300      	movne	r3, #0
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	461a      	mov	r2, r3
 8008ecc:	79fb      	ldrb	r3, [r7, #7]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	f43f af46 	beq.w	8008d60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3770      	adds	r7, #112	; 0x70
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
	...

08008ee0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b09d      	sub	sp, #116	; 0x74
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	4613      	mov	r3, r2
 8008eec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	88fa      	ldrh	r2, [r7, #6]
 8008ef8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	88fa      	ldrh	r2, [r7, #6]
 8008f00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f12:	d10e      	bne.n	8008f32 <UART_Start_Receive_IT+0x52>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	691b      	ldr	r3, [r3, #16]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d105      	bne.n	8008f28 <UART_Start_Receive_IT+0x48>
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008f22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f26:	e02d      	b.n	8008f84 <UART_Start_Receive_IT+0xa4>
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	22ff      	movs	r2, #255	; 0xff
 8008f2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f30:	e028      	b.n	8008f84 <UART_Start_Receive_IT+0xa4>
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d10d      	bne.n	8008f56 <UART_Start_Receive_IT+0x76>
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d104      	bne.n	8008f4c <UART_Start_Receive_IT+0x6c>
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	22ff      	movs	r2, #255	; 0xff
 8008f46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f4a:	e01b      	b.n	8008f84 <UART_Start_Receive_IT+0xa4>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	227f      	movs	r2, #127	; 0x7f
 8008f50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f54:	e016      	b.n	8008f84 <UART_Start_Receive_IT+0xa4>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f5e:	d10d      	bne.n	8008f7c <UART_Start_Receive_IT+0x9c>
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d104      	bne.n	8008f72 <UART_Start_Receive_IT+0x92>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	227f      	movs	r2, #127	; 0x7f
 8008f6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f70:	e008      	b.n	8008f84 <UART_Start_Receive_IT+0xa4>
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	223f      	movs	r2, #63	; 0x3f
 8008f76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f7a:	e003      	b.n	8008f84 <UART_Start_Receive_IT+0xa4>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2222      	movs	r2, #34	; 0x22
 8008f90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	3308      	adds	r3, #8
 8008f9a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f9e:	e853 3f00 	ldrex	r3, [r3]
 8008fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fa6:	f043 0301 	orr.w	r3, r3, #1
 8008faa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	3308      	adds	r3, #8
 8008fb2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008fb4:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008fb6:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008fba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008fbc:	e841 2300 	strex	r3, r2, [r1]
 8008fc0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1e5      	bne.n	8008f94 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fd0:	d14d      	bne.n	800906e <UART_Start_Receive_IT+0x18e>
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008fd8:	88fa      	ldrh	r2, [r7, #6]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d347      	bcc.n	800906e <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fe6:	d107      	bne.n	8008ff8 <UART_Start_Receive_IT+0x118>
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d103      	bne.n	8008ff8 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	4a39      	ldr	r2, [pc, #228]	; (80090d8 <UART_Start_Receive_IT+0x1f8>)
 8008ff4:	671a      	str	r2, [r3, #112]	; 0x70
 8008ff6:	e002      	b.n	8008ffe <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	4a38      	ldr	r2, [pc, #224]	; (80090dc <UART_Start_Receive_IT+0x1fc>)
 8008ffc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800900e:	e853 3f00 	ldrex	r3, [r3]
 8009012:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800901a:	66bb      	str	r3, [r7, #104]	; 0x68
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	461a      	mov	r2, r3
 8009022:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009024:	64bb      	str	r3, [r7, #72]	; 0x48
 8009026:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009028:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800902a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800902c:	e841 2300 	strex	r3, r2, [r1]
 8009030:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1e6      	bne.n	8009006 <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	3308      	adds	r3, #8
 800903e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009042:	e853 3f00 	ldrex	r3, [r3]
 8009046:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800904e:	667b      	str	r3, [r7, #100]	; 0x64
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	3308      	adds	r3, #8
 8009056:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009058:	637a      	str	r2, [r7, #52]	; 0x34
 800905a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800905e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009060:	e841 2300 	strex	r3, r2, [r1]
 8009064:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009068:	2b00      	cmp	r3, #0
 800906a:	d1e5      	bne.n	8009038 <UART_Start_Receive_IT+0x158>
 800906c:	e02c      	b.n	80090c8 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009076:	d107      	bne.n	8009088 <UART_Start_Receive_IT+0x1a8>
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d103      	bne.n	8009088 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	4a17      	ldr	r2, [pc, #92]	; (80090e0 <UART_Start_Receive_IT+0x200>)
 8009084:	671a      	str	r2, [r3, #112]	; 0x70
 8009086:	e002      	b.n	800908e <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	4a16      	ldr	r2, [pc, #88]	; (80090e4 <UART_Start_Receive_IT+0x204>)
 800908c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	e853 3f00 	ldrex	r3, [r3]
 80090a2:	613b      	str	r3, [r7, #16]
   return(result);
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80090aa:	663b      	str	r3, [r7, #96]	; 0x60
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	461a      	mov	r2, r3
 80090b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090b4:	623b      	str	r3, [r7, #32]
 80090b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b8:	69f9      	ldr	r1, [r7, #28]
 80090ba:	6a3a      	ldr	r2, [r7, #32]
 80090bc:	e841 2300 	strex	r3, r2, [r1]
 80090c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d1e6      	bne.n	8009096 <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3774      	adds	r7, #116	; 0x74
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	080097f1 	.word	0x080097f1
 80090dc:	080094f9 	.word	0x080094f9
 80090e0:	08009397 	.word	0x08009397
 80090e4:	08009237 	.word	0x08009237

080090e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b095      	sub	sp, #84	; 0x54
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f8:	e853 3f00 	ldrex	r3, [r3]
 80090fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80090fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009100:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009104:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	461a      	mov	r2, r3
 800910c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800910e:	643b      	str	r3, [r7, #64]	; 0x40
 8009110:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009112:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009114:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009116:	e841 2300 	strex	r3, r2, [r1]
 800911a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800911c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1e6      	bne.n	80090f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3308      	adds	r3, #8
 8009128:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912a:	6a3b      	ldr	r3, [r7, #32]
 800912c:	e853 3f00 	ldrex	r3, [r3]
 8009130:	61fb      	str	r3, [r7, #28]
   return(result);
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009138:	f023 0301 	bic.w	r3, r3, #1
 800913c:	64bb      	str	r3, [r7, #72]	; 0x48
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3308      	adds	r3, #8
 8009144:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009146:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009148:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800914c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800914e:	e841 2300 	strex	r3, r2, [r1]
 8009152:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1e3      	bne.n	8009122 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800915e:	2b01      	cmp	r3, #1
 8009160:	d118      	bne.n	8009194 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	e853 3f00 	ldrex	r3, [r3]
 800916e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	f023 0310 	bic.w	r3, r3, #16
 8009176:	647b      	str	r3, [r7, #68]	; 0x44
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	461a      	mov	r2, r3
 800917e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009180:	61bb      	str	r3, [r7, #24]
 8009182:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009184:	6979      	ldr	r1, [r7, #20]
 8009186:	69ba      	ldr	r2, [r7, #24]
 8009188:	e841 2300 	strex	r3, r2, [r1]
 800918c:	613b      	str	r3, [r7, #16]
   return(result);
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1e6      	bne.n	8009162 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2220      	movs	r2, #32
 8009198:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80091a8:	bf00      	nop
 80091aa:	3754      	adds	r7, #84	; 0x54
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f7ff fa90 	bl	80086f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091d8:	bf00      	nop
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b088      	sub	sp, #32
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	e853 3f00 	ldrex	r3, [r3]
 80091f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091fc:	61fb      	str	r3, [r7, #28]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	461a      	mov	r2, r3
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	61bb      	str	r3, [r7, #24]
 8009208:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920a:	6979      	ldr	r1, [r7, #20]
 800920c:	69ba      	ldr	r2, [r7, #24]
 800920e:	e841 2300 	strex	r3, r2, [r1]
 8009212:	613b      	str	r3, [r7, #16]
   return(result);
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d1e6      	bne.n	80091e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2220      	movs	r2, #32
 800921e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7f8 febf 	bl	8001fac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800922e:	bf00      	nop
 8009230:	3720      	adds	r7, #32
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b096      	sub	sp, #88	; 0x58
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009244:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800924e:	2b22      	cmp	r3, #34	; 0x22
 8009250:	f040 8095 	bne.w	800937e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800925e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009262:	b2d9      	uxtb	r1, r3
 8009264:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009268:	b2da      	uxtb	r2, r3
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800926e:	400a      	ands	r2, r1
 8009270:	b2d2      	uxtb	r2, r2
 8009272:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009278:	1c5a      	adds	r2, r3, #1
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009284:	b29b      	uxth	r3, r3
 8009286:	3b01      	subs	r3, #1
 8009288:	b29a      	uxth	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009296:	b29b      	uxth	r3, r3
 8009298:	2b00      	cmp	r3, #0
 800929a:	d178      	bne.n	800938e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a4:	e853 3f00 	ldrex	r3, [r3]
 80092a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092b0:	653b      	str	r3, [r7, #80]	; 0x50
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	461a      	mov	r2, r3
 80092b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092ba:	647b      	str	r3, [r7, #68]	; 0x44
 80092bc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80092c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092c2:	e841 2300 	strex	r3, r2, [r1]
 80092c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80092c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d1e6      	bne.n	800929c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	3308      	adds	r3, #8
 80092d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d8:	e853 3f00 	ldrex	r3, [r3]
 80092dc:	623b      	str	r3, [r7, #32]
   return(result);
 80092de:	6a3b      	ldr	r3, [r7, #32]
 80092e0:	f023 0301 	bic.w	r3, r3, #1
 80092e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	3308      	adds	r3, #8
 80092ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092ee:	633a      	str	r2, [r7, #48]	; 0x30
 80092f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092f6:	e841 2300 	strex	r3, r2, [r1]
 80092fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80092fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1e5      	bne.n	80092ce <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2220      	movs	r2, #32
 8009306:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009314:	2b01      	cmp	r3, #1
 8009316:	d12e      	bne.n	8009376 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	e853 3f00 	ldrex	r3, [r3]
 800932a:	60fb      	str	r3, [r7, #12]
   return(result);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f023 0310 	bic.w	r3, r3, #16
 8009332:	64bb      	str	r3, [r7, #72]	; 0x48
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	461a      	mov	r2, r3
 800933a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800933c:	61fb      	str	r3, [r7, #28]
 800933e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009340:	69b9      	ldr	r1, [r7, #24]
 8009342:	69fa      	ldr	r2, [r7, #28]
 8009344:	e841 2300 	strex	r3, r2, [r1]
 8009348:	617b      	str	r3, [r7, #20]
   return(result);
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d1e6      	bne.n	800931e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	69db      	ldr	r3, [r3, #28]
 8009356:	f003 0310 	and.w	r3, r3, #16
 800935a:	2b10      	cmp	r3, #16
 800935c:	d103      	bne.n	8009366 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2210      	movs	r2, #16
 8009364:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800936c:	4619      	mov	r1, r3
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f7ff f9cc 	bl	800870c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009374:	e00b      	b.n	800938e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7f8 fe28 	bl	8001fcc <HAL_UART_RxCpltCallback>
}
 800937c:	e007      	b.n	800938e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	699a      	ldr	r2, [r3, #24]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f042 0208 	orr.w	r2, r2, #8
 800938c:	619a      	str	r2, [r3, #24]
}
 800938e:	bf00      	nop
 8009390:	3758      	adds	r7, #88	; 0x58
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b096      	sub	sp, #88	; 0x58
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80093a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093ae:	2b22      	cmp	r3, #34	; 0x22
 80093b0:	f040 8095 	bne.w	80094de <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ba:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093c2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80093c4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80093c8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80093cc:	4013      	ands	r3, r2
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093d2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093d8:	1c9a      	adds	r2, r3, #2
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	3b01      	subs	r3, #1
 80093e8:	b29a      	uxth	r2, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d178      	bne.n	80094ee <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009404:	e853 3f00 	ldrex	r3, [r3]
 8009408:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800940a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009410:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	461a      	mov	r2, r3
 8009418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800941a:	643b      	str	r3, [r7, #64]	; 0x40
 800941c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009420:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009422:	e841 2300 	strex	r3, r2, [r1]
 8009426:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1e6      	bne.n	80093fc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	3308      	adds	r3, #8
 8009434:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009436:	6a3b      	ldr	r3, [r7, #32]
 8009438:	e853 3f00 	ldrex	r3, [r3]
 800943c:	61fb      	str	r3, [r7, #28]
   return(result);
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	f023 0301 	bic.w	r3, r3, #1
 8009444:	64bb      	str	r3, [r7, #72]	; 0x48
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	3308      	adds	r3, #8
 800944c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800944e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009450:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009452:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009456:	e841 2300 	strex	r3, r2, [r1]
 800945a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1e5      	bne.n	800942e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2220      	movs	r2, #32
 8009466:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009474:	2b01      	cmp	r3, #1
 8009476:	d12e      	bne.n	80094d6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	e853 3f00 	ldrex	r3, [r3]
 800948a:	60bb      	str	r3, [r7, #8]
   return(result);
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	f023 0310 	bic.w	r3, r3, #16
 8009492:	647b      	str	r3, [r7, #68]	; 0x44
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	461a      	mov	r2, r3
 800949a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800949c:	61bb      	str	r3, [r7, #24]
 800949e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a0:	6979      	ldr	r1, [r7, #20]
 80094a2:	69ba      	ldr	r2, [r7, #24]
 80094a4:	e841 2300 	strex	r3, r2, [r1]
 80094a8:	613b      	str	r3, [r7, #16]
   return(result);
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1e6      	bne.n	800947e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	69db      	ldr	r3, [r3, #28]
 80094b6:	f003 0310 	and.w	r3, r3, #16
 80094ba:	2b10      	cmp	r3, #16
 80094bc:	d103      	bne.n	80094c6 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2210      	movs	r2, #16
 80094c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80094cc:	4619      	mov	r1, r3
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f7ff f91c 	bl	800870c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80094d4:	e00b      	b.n	80094ee <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f7f8 fd78 	bl	8001fcc <HAL_UART_RxCpltCallback>
}
 80094dc:	e007      	b.n	80094ee <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	699a      	ldr	r2, [r3, #24]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f042 0208 	orr.w	r2, r2, #8
 80094ec:	619a      	str	r2, [r3, #24]
}
 80094ee:	bf00      	nop
 80094f0:	3758      	adds	r7, #88	; 0x58
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
	...

080094f8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b0a6      	sub	sp, #152	; 0x98
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009506:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	69db      	ldr	r3, [r3, #28]
 8009510:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800952e:	2b22      	cmp	r3, #34	; 0x22
 8009530:	f040 814f 	bne.w	80097d2 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800953a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800953e:	e0f6      	b.n	800972e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009546:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800954a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800954e:	b2d9      	uxtb	r1, r3
 8009550:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009554:	b2da      	uxtb	r2, r3
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800955a:	400a      	ands	r2, r1
 800955c:	b2d2      	uxtb	r2, r2
 800955e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009564:	1c5a      	adds	r2, r3, #1
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009570:	b29b      	uxth	r3, r3
 8009572:	3b01      	subs	r3, #1
 8009574:	b29a      	uxth	r2, r3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	69db      	ldr	r3, [r3, #28]
 8009582:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009586:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800958a:	f003 0307 	and.w	r3, r3, #7
 800958e:	2b00      	cmp	r3, #0
 8009590:	d053      	beq.n	800963a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009592:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	2b00      	cmp	r3, #0
 800959c:	d011      	beq.n	80095c2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800959e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00b      	beq.n	80095c2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2201      	movs	r2, #1
 80095b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095b8:	f043 0201 	orr.w	r2, r3, #1
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80095c6:	f003 0302 	and.w	r3, r3, #2
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d011      	beq.n	80095f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80095ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095d2:	f003 0301 	and.w	r3, r3, #1
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d00b      	beq.n	80095f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2202      	movs	r2, #2
 80095e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095e8:	f043 0204 	orr.w	r2, r3, #4
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80095f6:	f003 0304 	and.w	r3, r3, #4
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d011      	beq.n	8009622 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80095fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009602:	f003 0301 	and.w	r3, r3, #1
 8009606:	2b00      	cmp	r3, #0
 8009608:	d00b      	beq.n	8009622 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2204      	movs	r2, #4
 8009610:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009618:	f043 0202 	orr.w	r2, r3, #2
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009628:	2b00      	cmp	r3, #0
 800962a:	d006      	beq.n	800963a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f7ff f863 	bl	80086f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009640:	b29b      	uxth	r3, r3
 8009642:	2b00      	cmp	r3, #0
 8009644:	d173      	bne.n	800972e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800964e:	e853 3f00 	ldrex	r3, [r3]
 8009652:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009654:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009656:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800965a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	461a      	mov	r2, r3
 8009664:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009668:	66bb      	str	r3, [r7, #104]	; 0x68
 800966a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800966e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009670:	e841 2300 	strex	r3, r2, [r1]
 8009674:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009676:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009678:	2b00      	cmp	r3, #0
 800967a:	d1e4      	bne.n	8009646 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	3308      	adds	r3, #8
 8009682:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009686:	e853 3f00 	ldrex	r3, [r3]
 800968a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800968c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800968e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009692:	f023 0301 	bic.w	r3, r3, #1
 8009696:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	3308      	adds	r3, #8
 800969e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80096a0:	657a      	str	r2, [r7, #84]	; 0x54
 80096a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80096a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80096a8:	e841 2300 	strex	r3, r2, [r1]
 80096ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80096ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1e3      	bne.n	800967c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2220      	movs	r2, #32
 80096b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d12e      	bne.n	8009728 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d8:	e853 3f00 	ldrex	r3, [r3]
 80096dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80096de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e0:	f023 0310 	bic.w	r3, r3, #16
 80096e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	461a      	mov	r2, r3
 80096ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096ee:	643b      	str	r3, [r7, #64]	; 0x40
 80096f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80096f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096f6:	e841 2300 	strex	r3, r2, [r1]
 80096fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80096fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1e6      	bne.n	80096d0 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	69db      	ldr	r3, [r3, #28]
 8009708:	f003 0310 	and.w	r3, r3, #16
 800970c:	2b10      	cmp	r3, #16
 800970e:	d103      	bne.n	8009718 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2210      	movs	r2, #16
 8009716:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800971e:	4619      	mov	r1, r3
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f7fe fff3 	bl	800870c <HAL_UARTEx_RxEventCallback>
 8009726:	e002      	b.n	800972e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f7f8 fc4f 	bl	8001fcc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800972e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009732:	2b00      	cmp	r3, #0
 8009734:	d006      	beq.n	8009744 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009736:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800973a:	f003 0320 	and.w	r3, r3, #32
 800973e:	2b00      	cmp	r3, #0
 8009740:	f47f aefe 	bne.w	8009540 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800974a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800974e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009752:	2b00      	cmp	r3, #0
 8009754:	d045      	beq.n	80097e2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800975c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009760:	429a      	cmp	r2, r3
 8009762:	d23e      	bcs.n	80097e2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	3308      	adds	r3, #8
 800976a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976c:	6a3b      	ldr	r3, [r7, #32]
 800976e:	e853 3f00 	ldrex	r3, [r3]
 8009772:	61fb      	str	r3, [r7, #28]
   return(result);
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800977a:	673b      	str	r3, [r7, #112]	; 0x70
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3308      	adds	r3, #8
 8009782:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009784:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009786:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009788:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800978a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800978c:	e841 2300 	strex	r3, r2, [r1]
 8009790:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1e5      	bne.n	8009764 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a14      	ldr	r2, [pc, #80]	; (80097ec <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800979c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	e853 3f00 	ldrex	r3, [r3]
 80097aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	f043 0320 	orr.w	r3, r3, #32
 80097b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	461a      	mov	r2, r3
 80097ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097bc:	61bb      	str	r3, [r7, #24]
 80097be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c0:	6979      	ldr	r1, [r7, #20]
 80097c2:	69ba      	ldr	r2, [r7, #24]
 80097c4:	e841 2300 	strex	r3, r2, [r1]
 80097c8:	613b      	str	r3, [r7, #16]
   return(result);
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1e6      	bne.n	800979e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80097d0:	e007      	b.n	80097e2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	699a      	ldr	r2, [r3, #24]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f042 0208 	orr.w	r2, r2, #8
 80097e0:	619a      	str	r2, [r3, #24]
}
 80097e2:	bf00      	nop
 80097e4:	3798      	adds	r7, #152	; 0x98
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	08009237 	.word	0x08009237

080097f0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b0a8      	sub	sp, #160	; 0xa0
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80097fe:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	69db      	ldr	r3, [r3, #28]
 8009808:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009826:	2b22      	cmp	r3, #34	; 0x22
 8009828:	f040 8153 	bne.w	8009ad2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009832:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009836:	e0fa      	b.n	8009a2e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009846:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800984a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800984e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009852:	4013      	ands	r3, r2
 8009854:	b29a      	uxth	r2, r3
 8009856:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800985a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009860:	1c9a      	adds	r2, r3, #2
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800986c:	b29b      	uxth	r3, r3
 800986e:	3b01      	subs	r3, #1
 8009870:	b29a      	uxth	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	69db      	ldr	r3, [r3, #28]
 800987e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009882:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009886:	f003 0307 	and.w	r3, r3, #7
 800988a:	2b00      	cmp	r3, #0
 800988c:	d053      	beq.n	8009936 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800988e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009892:	f003 0301 	and.w	r3, r3, #1
 8009896:	2b00      	cmp	r3, #0
 8009898:	d011      	beq.n	80098be <UART_RxISR_16BIT_FIFOEN+0xce>
 800989a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800989e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00b      	beq.n	80098be <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2201      	movs	r2, #1
 80098ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098b4:	f043 0201 	orr.w	r2, r3, #1
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098c2:	f003 0302 	and.w	r3, r3, #2
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d011      	beq.n	80098ee <UART_RxISR_16BIT_FIFOEN+0xfe>
 80098ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098ce:	f003 0301 	and.w	r3, r3, #1
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d00b      	beq.n	80098ee <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2202      	movs	r2, #2
 80098dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098e4:	f043 0204 	orr.w	r2, r3, #4
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098f2:	f003 0304 	and.w	r3, r3, #4
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d011      	beq.n	800991e <UART_RxISR_16BIT_FIFOEN+0x12e>
 80098fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098fe:	f003 0301 	and.w	r3, r3, #1
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00b      	beq.n	800991e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2204      	movs	r2, #4
 800990c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009914:	f043 0202 	orr.w	r2, r3, #2
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009924:	2b00      	cmp	r3, #0
 8009926:	d006      	beq.n	8009936 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f7fe fee5 	bl	80086f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800993c:	b29b      	uxth	r3, r3
 800993e:	2b00      	cmp	r3, #0
 8009940:	d175      	bne.n	8009a2e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009948:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800994a:	e853 3f00 	ldrex	r3, [r3]
 800994e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009952:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009956:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	461a      	mov	r2, r3
 8009960:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009964:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009966:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009968:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800996a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800996c:	e841 2300 	strex	r3, r2, [r1]
 8009970:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009972:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1e4      	bne.n	8009942 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	3308      	adds	r3, #8
 800997e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009982:	e853 3f00 	ldrex	r3, [r3]
 8009986:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800998a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800998e:	f023 0301 	bic.w	r3, r3, #1
 8009992:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	3308      	adds	r3, #8
 800999c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80099a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80099a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80099a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80099a8:	e841 2300 	strex	r3, r2, [r1]
 80099ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80099ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1e1      	bne.n	8009978 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2220      	movs	r2, #32
 80099b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d12e      	bne.n	8009a28 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d8:	e853 3f00 	ldrex	r3, [r3]
 80099dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80099de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e0:	f023 0310 	bic.w	r3, r3, #16
 80099e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	461a      	mov	r2, r3
 80099ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80099ee:	647b      	str	r3, [r7, #68]	; 0x44
 80099f0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80099f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099f6:	e841 2300 	strex	r3, r2, [r1]
 80099fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80099fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d1e6      	bne.n	80099d0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	69db      	ldr	r3, [r3, #28]
 8009a08:	f003 0310 	and.w	r3, r3, #16
 8009a0c:	2b10      	cmp	r3, #16
 8009a0e:	d103      	bne.n	8009a18 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2210      	movs	r2, #16
 8009a16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a1e:	4619      	mov	r1, r3
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f7fe fe73 	bl	800870c <HAL_UARTEx_RxEventCallback>
 8009a26:	e002      	b.n	8009a2e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f7f8 facf 	bl	8001fcc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a2e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d006      	beq.n	8009a44 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009a36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a3a:	f003 0320 	and.w	r3, r3, #32
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	f47f aefa 	bne.w	8009838 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a4a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009a4e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d045      	beq.n	8009ae2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a5c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d23e      	bcs.n	8009ae2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	3308      	adds	r3, #8
 8009a6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6e:	e853 3f00 	ldrex	r3, [r3]
 8009a72:	623b      	str	r3, [r7, #32]
   return(result);
 8009a74:	6a3b      	ldr	r3, [r7, #32]
 8009a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a7a:	677b      	str	r3, [r7, #116]	; 0x74
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	3308      	adds	r3, #8
 8009a82:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009a84:	633a      	str	r2, [r7, #48]	; 0x30
 8009a86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a8c:	e841 2300 	strex	r3, r2, [r1]
 8009a90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d1e5      	bne.n	8009a64 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a14      	ldr	r2, [pc, #80]	; (8009aec <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009a9c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	e853 3f00 	ldrex	r3, [r3]
 8009aaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f043 0320 	orr.w	r3, r3, #32
 8009ab2:	673b      	str	r3, [r7, #112]	; 0x70
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	461a      	mov	r2, r3
 8009aba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009abc:	61fb      	str	r3, [r7, #28]
 8009abe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac0:	69b9      	ldr	r1, [r7, #24]
 8009ac2:	69fa      	ldr	r2, [r7, #28]
 8009ac4:	e841 2300 	strex	r3, r2, [r1]
 8009ac8:	617b      	str	r3, [r7, #20]
   return(result);
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d1e6      	bne.n	8009a9e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ad0:	e007      	b.n	8009ae2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	699a      	ldr	r2, [r3, #24]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f042 0208 	orr.w	r2, r2, #8
 8009ae0:	619a      	str	r2, [r3, #24]
}
 8009ae2:	bf00      	nop
 8009ae4:	37a0      	adds	r7, #160	; 0xa0
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	08009397 	.word	0x08009397

08009af0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009af8:	bf00      	nop
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009b0c:	bf00      	nop
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009b20:	bf00      	nop
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b085      	sub	sp, #20
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d101      	bne.n	8009b42 <HAL_UARTEx_DisableFifoMode+0x16>
 8009b3e:	2302      	movs	r3, #2
 8009b40:	e027      	b.n	8009b92 <HAL_UARTEx_DisableFifoMode+0x66>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2201      	movs	r2, #1
 8009b46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2224      	movs	r2, #36	; 0x24
 8009b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f022 0201 	bic.w	r2, r2, #1
 8009b68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009b70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	68fa      	ldr	r2, [r7, #12]
 8009b7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2220      	movs	r2, #32
 8009b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b90:	2300      	movs	r3, #0
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3714      	adds	r7, #20
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr

08009b9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b084      	sub	sp, #16
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
 8009ba6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d101      	bne.n	8009bb6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009bb2:	2302      	movs	r3, #2
 8009bb4:	e02d      	b.n	8009c12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2224      	movs	r2, #36	; 0x24
 8009bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f022 0201 	bic.w	r2, r2, #1
 8009bdc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	683a      	ldr	r2, [r7, #0]
 8009bee:	430a      	orrs	r2, r1
 8009bf0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 f850 	bl	8009c98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2220      	movs	r2, #32
 8009c04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b084      	sub	sp, #16
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
 8009c22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d101      	bne.n	8009c32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c2e:	2302      	movs	r3, #2
 8009c30:	e02d      	b.n	8009c8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2201      	movs	r2, #1
 8009c36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2224      	movs	r2, #36	; 0x24
 8009c3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f022 0201 	bic.w	r2, r2, #1
 8009c58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	683a      	ldr	r2, [r7, #0]
 8009c6a:	430a      	orrs	r2, r1
 8009c6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 f812 	bl	8009c98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	68fa      	ldr	r2, [r7, #12]
 8009c7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2220      	movs	r2, #32
 8009c80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
	...

08009c98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d108      	bne.n	8009cba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009cb8:	e031      	b.n	8009d1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009cba:	2308      	movs	r3, #8
 8009cbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009cbe:	2308      	movs	r3, #8
 8009cc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	0e5b      	lsrs	r3, r3, #25
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	f003 0307 	and.w	r3, r3, #7
 8009cd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	0f5b      	lsrs	r3, r3, #29
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	f003 0307 	and.w	r3, r3, #7
 8009ce0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ce2:	7bbb      	ldrb	r3, [r7, #14]
 8009ce4:	7b3a      	ldrb	r2, [r7, #12]
 8009ce6:	4911      	ldr	r1, [pc, #68]	; (8009d2c <UARTEx_SetNbDataToProcess+0x94>)
 8009ce8:	5c8a      	ldrb	r2, [r1, r2]
 8009cea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009cee:	7b3a      	ldrb	r2, [r7, #12]
 8009cf0:	490f      	ldr	r1, [pc, #60]	; (8009d30 <UARTEx_SetNbDataToProcess+0x98>)
 8009cf2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cf4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cf8:	b29a      	uxth	r2, r3
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d00:	7bfb      	ldrb	r3, [r7, #15]
 8009d02:	7b7a      	ldrb	r2, [r7, #13]
 8009d04:	4909      	ldr	r1, [pc, #36]	; (8009d2c <UARTEx_SetNbDataToProcess+0x94>)
 8009d06:	5c8a      	ldrb	r2, [r1, r2]
 8009d08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d0c:	7b7a      	ldrb	r2, [r7, #13]
 8009d0e:	4908      	ldr	r1, [pc, #32]	; (8009d30 <UARTEx_SetNbDataToProcess+0x98>)
 8009d10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d12:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009d1e:	bf00      	nop
 8009d20:	3714      	adds	r7, #20
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr
 8009d2a:	bf00      	nop
 8009d2c:	0800d0a0 	.word	0x0800d0a0
 8009d30:	0800d0a8 	.word	0x0800d0a8

08009d34 <__errno>:
 8009d34:	4b01      	ldr	r3, [pc, #4]	; (8009d3c <__errno+0x8>)
 8009d36:	6818      	ldr	r0, [r3, #0]
 8009d38:	4770      	bx	lr
 8009d3a:	bf00      	nop
 8009d3c:	20000040 	.word	0x20000040

08009d40 <__libc_init_array>:
 8009d40:	b570      	push	{r4, r5, r6, lr}
 8009d42:	4d0d      	ldr	r5, [pc, #52]	; (8009d78 <__libc_init_array+0x38>)
 8009d44:	4c0d      	ldr	r4, [pc, #52]	; (8009d7c <__libc_init_array+0x3c>)
 8009d46:	1b64      	subs	r4, r4, r5
 8009d48:	10a4      	asrs	r4, r4, #2
 8009d4a:	2600      	movs	r6, #0
 8009d4c:	42a6      	cmp	r6, r4
 8009d4e:	d109      	bne.n	8009d64 <__libc_init_array+0x24>
 8009d50:	4d0b      	ldr	r5, [pc, #44]	; (8009d80 <__libc_init_array+0x40>)
 8009d52:	4c0c      	ldr	r4, [pc, #48]	; (8009d84 <__libc_init_array+0x44>)
 8009d54:	f002 ff04 	bl	800cb60 <_init>
 8009d58:	1b64      	subs	r4, r4, r5
 8009d5a:	10a4      	asrs	r4, r4, #2
 8009d5c:	2600      	movs	r6, #0
 8009d5e:	42a6      	cmp	r6, r4
 8009d60:	d105      	bne.n	8009d6e <__libc_init_array+0x2e>
 8009d62:	bd70      	pop	{r4, r5, r6, pc}
 8009d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d68:	4798      	blx	r3
 8009d6a:	3601      	adds	r6, #1
 8009d6c:	e7ee      	b.n	8009d4c <__libc_init_array+0xc>
 8009d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d72:	4798      	blx	r3
 8009d74:	3601      	adds	r6, #1
 8009d76:	e7f2      	b.n	8009d5e <__libc_init_array+0x1e>
 8009d78:	0800d494 	.word	0x0800d494
 8009d7c:	0800d494 	.word	0x0800d494
 8009d80:	0800d494 	.word	0x0800d494
 8009d84:	0800d498 	.word	0x0800d498

08009d88 <memset>:
 8009d88:	4402      	add	r2, r0
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d100      	bne.n	8009d92 <memset+0xa>
 8009d90:	4770      	bx	lr
 8009d92:	f803 1b01 	strb.w	r1, [r3], #1
 8009d96:	e7f9      	b.n	8009d8c <memset+0x4>

08009d98 <__cvt>:
 8009d98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d9c:	ec55 4b10 	vmov	r4, r5, d0
 8009da0:	2d00      	cmp	r5, #0
 8009da2:	460e      	mov	r6, r1
 8009da4:	4619      	mov	r1, r3
 8009da6:	462b      	mov	r3, r5
 8009da8:	bfbb      	ittet	lt
 8009daa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009dae:	461d      	movlt	r5, r3
 8009db0:	2300      	movge	r3, #0
 8009db2:	232d      	movlt	r3, #45	; 0x2d
 8009db4:	700b      	strb	r3, [r1, #0]
 8009db6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009db8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009dbc:	4691      	mov	r9, r2
 8009dbe:	f023 0820 	bic.w	r8, r3, #32
 8009dc2:	bfbc      	itt	lt
 8009dc4:	4622      	movlt	r2, r4
 8009dc6:	4614      	movlt	r4, r2
 8009dc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009dcc:	d005      	beq.n	8009dda <__cvt+0x42>
 8009dce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009dd2:	d100      	bne.n	8009dd6 <__cvt+0x3e>
 8009dd4:	3601      	adds	r6, #1
 8009dd6:	2102      	movs	r1, #2
 8009dd8:	e000      	b.n	8009ddc <__cvt+0x44>
 8009dda:	2103      	movs	r1, #3
 8009ddc:	ab03      	add	r3, sp, #12
 8009dde:	9301      	str	r3, [sp, #4]
 8009de0:	ab02      	add	r3, sp, #8
 8009de2:	9300      	str	r3, [sp, #0]
 8009de4:	ec45 4b10 	vmov	d0, r4, r5
 8009de8:	4653      	mov	r3, sl
 8009dea:	4632      	mov	r2, r6
 8009dec:	f000 fcec 	bl	800a7c8 <_dtoa_r>
 8009df0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009df4:	4607      	mov	r7, r0
 8009df6:	d102      	bne.n	8009dfe <__cvt+0x66>
 8009df8:	f019 0f01 	tst.w	r9, #1
 8009dfc:	d022      	beq.n	8009e44 <__cvt+0xac>
 8009dfe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009e02:	eb07 0906 	add.w	r9, r7, r6
 8009e06:	d110      	bne.n	8009e2a <__cvt+0x92>
 8009e08:	783b      	ldrb	r3, [r7, #0]
 8009e0a:	2b30      	cmp	r3, #48	; 0x30
 8009e0c:	d10a      	bne.n	8009e24 <__cvt+0x8c>
 8009e0e:	2200      	movs	r2, #0
 8009e10:	2300      	movs	r3, #0
 8009e12:	4620      	mov	r0, r4
 8009e14:	4629      	mov	r1, r5
 8009e16:	f7f6 fe3f 	bl	8000a98 <__aeabi_dcmpeq>
 8009e1a:	b918      	cbnz	r0, 8009e24 <__cvt+0x8c>
 8009e1c:	f1c6 0601 	rsb	r6, r6, #1
 8009e20:	f8ca 6000 	str.w	r6, [sl]
 8009e24:	f8da 3000 	ldr.w	r3, [sl]
 8009e28:	4499      	add	r9, r3
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	4620      	mov	r0, r4
 8009e30:	4629      	mov	r1, r5
 8009e32:	f7f6 fe31 	bl	8000a98 <__aeabi_dcmpeq>
 8009e36:	b108      	cbz	r0, 8009e3c <__cvt+0xa4>
 8009e38:	f8cd 900c 	str.w	r9, [sp, #12]
 8009e3c:	2230      	movs	r2, #48	; 0x30
 8009e3e:	9b03      	ldr	r3, [sp, #12]
 8009e40:	454b      	cmp	r3, r9
 8009e42:	d307      	bcc.n	8009e54 <__cvt+0xbc>
 8009e44:	9b03      	ldr	r3, [sp, #12]
 8009e46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e48:	1bdb      	subs	r3, r3, r7
 8009e4a:	4638      	mov	r0, r7
 8009e4c:	6013      	str	r3, [r2, #0]
 8009e4e:	b004      	add	sp, #16
 8009e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e54:	1c59      	adds	r1, r3, #1
 8009e56:	9103      	str	r1, [sp, #12]
 8009e58:	701a      	strb	r2, [r3, #0]
 8009e5a:	e7f0      	b.n	8009e3e <__cvt+0xa6>

08009e5c <__exponent>:
 8009e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2900      	cmp	r1, #0
 8009e62:	bfb8      	it	lt
 8009e64:	4249      	neglt	r1, r1
 8009e66:	f803 2b02 	strb.w	r2, [r3], #2
 8009e6a:	bfb4      	ite	lt
 8009e6c:	222d      	movlt	r2, #45	; 0x2d
 8009e6e:	222b      	movge	r2, #43	; 0x2b
 8009e70:	2909      	cmp	r1, #9
 8009e72:	7042      	strb	r2, [r0, #1]
 8009e74:	dd2a      	ble.n	8009ecc <__exponent+0x70>
 8009e76:	f10d 0407 	add.w	r4, sp, #7
 8009e7a:	46a4      	mov	ip, r4
 8009e7c:	270a      	movs	r7, #10
 8009e7e:	46a6      	mov	lr, r4
 8009e80:	460a      	mov	r2, r1
 8009e82:	fb91 f6f7 	sdiv	r6, r1, r7
 8009e86:	fb07 1516 	mls	r5, r7, r6, r1
 8009e8a:	3530      	adds	r5, #48	; 0x30
 8009e8c:	2a63      	cmp	r2, #99	; 0x63
 8009e8e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009e92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009e96:	4631      	mov	r1, r6
 8009e98:	dcf1      	bgt.n	8009e7e <__exponent+0x22>
 8009e9a:	3130      	adds	r1, #48	; 0x30
 8009e9c:	f1ae 0502 	sub.w	r5, lr, #2
 8009ea0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009ea4:	1c44      	adds	r4, r0, #1
 8009ea6:	4629      	mov	r1, r5
 8009ea8:	4561      	cmp	r1, ip
 8009eaa:	d30a      	bcc.n	8009ec2 <__exponent+0x66>
 8009eac:	f10d 0209 	add.w	r2, sp, #9
 8009eb0:	eba2 020e 	sub.w	r2, r2, lr
 8009eb4:	4565      	cmp	r5, ip
 8009eb6:	bf88      	it	hi
 8009eb8:	2200      	movhi	r2, #0
 8009eba:	4413      	add	r3, r2
 8009ebc:	1a18      	subs	r0, r3, r0
 8009ebe:	b003      	add	sp, #12
 8009ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ec6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009eca:	e7ed      	b.n	8009ea8 <__exponent+0x4c>
 8009ecc:	2330      	movs	r3, #48	; 0x30
 8009ece:	3130      	adds	r1, #48	; 0x30
 8009ed0:	7083      	strb	r3, [r0, #2]
 8009ed2:	70c1      	strb	r1, [r0, #3]
 8009ed4:	1d03      	adds	r3, r0, #4
 8009ed6:	e7f1      	b.n	8009ebc <__exponent+0x60>

08009ed8 <_printf_float>:
 8009ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009edc:	ed2d 8b02 	vpush	{d8}
 8009ee0:	b08d      	sub	sp, #52	; 0x34
 8009ee2:	460c      	mov	r4, r1
 8009ee4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009ee8:	4616      	mov	r6, r2
 8009eea:	461f      	mov	r7, r3
 8009eec:	4605      	mov	r5, r0
 8009eee:	f001 fa59 	bl	800b3a4 <_localeconv_r>
 8009ef2:	f8d0 a000 	ldr.w	sl, [r0]
 8009ef6:	4650      	mov	r0, sl
 8009ef8:	f7f6 f94c 	bl	8000194 <strlen>
 8009efc:	2300      	movs	r3, #0
 8009efe:	930a      	str	r3, [sp, #40]	; 0x28
 8009f00:	6823      	ldr	r3, [r4, #0]
 8009f02:	9305      	str	r3, [sp, #20]
 8009f04:	f8d8 3000 	ldr.w	r3, [r8]
 8009f08:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009f0c:	3307      	adds	r3, #7
 8009f0e:	f023 0307 	bic.w	r3, r3, #7
 8009f12:	f103 0208 	add.w	r2, r3, #8
 8009f16:	f8c8 2000 	str.w	r2, [r8]
 8009f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009f22:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009f26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009f2a:	9307      	str	r3, [sp, #28]
 8009f2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009f30:	ee08 0a10 	vmov	s16, r0
 8009f34:	4b9f      	ldr	r3, [pc, #636]	; (800a1b4 <_printf_float+0x2dc>)
 8009f36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f3e:	f7f6 fddd 	bl	8000afc <__aeabi_dcmpun>
 8009f42:	bb88      	cbnz	r0, 8009fa8 <_printf_float+0xd0>
 8009f44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f48:	4b9a      	ldr	r3, [pc, #616]	; (800a1b4 <_printf_float+0x2dc>)
 8009f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f4e:	f7f6 fdb7 	bl	8000ac0 <__aeabi_dcmple>
 8009f52:	bb48      	cbnz	r0, 8009fa8 <_printf_float+0xd0>
 8009f54:	2200      	movs	r2, #0
 8009f56:	2300      	movs	r3, #0
 8009f58:	4640      	mov	r0, r8
 8009f5a:	4649      	mov	r1, r9
 8009f5c:	f7f6 fda6 	bl	8000aac <__aeabi_dcmplt>
 8009f60:	b110      	cbz	r0, 8009f68 <_printf_float+0x90>
 8009f62:	232d      	movs	r3, #45	; 0x2d
 8009f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f68:	4b93      	ldr	r3, [pc, #588]	; (800a1b8 <_printf_float+0x2e0>)
 8009f6a:	4894      	ldr	r0, [pc, #592]	; (800a1bc <_printf_float+0x2e4>)
 8009f6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009f70:	bf94      	ite	ls
 8009f72:	4698      	movls	r8, r3
 8009f74:	4680      	movhi	r8, r0
 8009f76:	2303      	movs	r3, #3
 8009f78:	6123      	str	r3, [r4, #16]
 8009f7a:	9b05      	ldr	r3, [sp, #20]
 8009f7c:	f023 0204 	bic.w	r2, r3, #4
 8009f80:	6022      	str	r2, [r4, #0]
 8009f82:	f04f 0900 	mov.w	r9, #0
 8009f86:	9700      	str	r7, [sp, #0]
 8009f88:	4633      	mov	r3, r6
 8009f8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009f8c:	4621      	mov	r1, r4
 8009f8e:	4628      	mov	r0, r5
 8009f90:	f000 f9d8 	bl	800a344 <_printf_common>
 8009f94:	3001      	adds	r0, #1
 8009f96:	f040 8090 	bne.w	800a0ba <_printf_float+0x1e2>
 8009f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f9e:	b00d      	add	sp, #52	; 0x34
 8009fa0:	ecbd 8b02 	vpop	{d8}
 8009fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa8:	4642      	mov	r2, r8
 8009faa:	464b      	mov	r3, r9
 8009fac:	4640      	mov	r0, r8
 8009fae:	4649      	mov	r1, r9
 8009fb0:	f7f6 fda4 	bl	8000afc <__aeabi_dcmpun>
 8009fb4:	b140      	cbz	r0, 8009fc8 <_printf_float+0xf0>
 8009fb6:	464b      	mov	r3, r9
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	bfbc      	itt	lt
 8009fbc:	232d      	movlt	r3, #45	; 0x2d
 8009fbe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009fc2:	487f      	ldr	r0, [pc, #508]	; (800a1c0 <_printf_float+0x2e8>)
 8009fc4:	4b7f      	ldr	r3, [pc, #508]	; (800a1c4 <_printf_float+0x2ec>)
 8009fc6:	e7d1      	b.n	8009f6c <_printf_float+0x94>
 8009fc8:	6863      	ldr	r3, [r4, #4]
 8009fca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009fce:	9206      	str	r2, [sp, #24]
 8009fd0:	1c5a      	adds	r2, r3, #1
 8009fd2:	d13f      	bne.n	800a054 <_printf_float+0x17c>
 8009fd4:	2306      	movs	r3, #6
 8009fd6:	6063      	str	r3, [r4, #4]
 8009fd8:	9b05      	ldr	r3, [sp, #20]
 8009fda:	6861      	ldr	r1, [r4, #4]
 8009fdc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	9303      	str	r3, [sp, #12]
 8009fe4:	ab0a      	add	r3, sp, #40	; 0x28
 8009fe6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009fea:	ab09      	add	r3, sp, #36	; 0x24
 8009fec:	ec49 8b10 	vmov	d0, r8, r9
 8009ff0:	9300      	str	r3, [sp, #0]
 8009ff2:	6022      	str	r2, [r4, #0]
 8009ff4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	f7ff fecd 	bl	8009d98 <__cvt>
 8009ffe:	9b06      	ldr	r3, [sp, #24]
 800a000:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a002:	2b47      	cmp	r3, #71	; 0x47
 800a004:	4680      	mov	r8, r0
 800a006:	d108      	bne.n	800a01a <_printf_float+0x142>
 800a008:	1cc8      	adds	r0, r1, #3
 800a00a:	db02      	blt.n	800a012 <_printf_float+0x13a>
 800a00c:	6863      	ldr	r3, [r4, #4]
 800a00e:	4299      	cmp	r1, r3
 800a010:	dd41      	ble.n	800a096 <_printf_float+0x1be>
 800a012:	f1ab 0b02 	sub.w	fp, fp, #2
 800a016:	fa5f fb8b 	uxtb.w	fp, fp
 800a01a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a01e:	d820      	bhi.n	800a062 <_printf_float+0x18a>
 800a020:	3901      	subs	r1, #1
 800a022:	465a      	mov	r2, fp
 800a024:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a028:	9109      	str	r1, [sp, #36]	; 0x24
 800a02a:	f7ff ff17 	bl	8009e5c <__exponent>
 800a02e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a030:	1813      	adds	r3, r2, r0
 800a032:	2a01      	cmp	r2, #1
 800a034:	4681      	mov	r9, r0
 800a036:	6123      	str	r3, [r4, #16]
 800a038:	dc02      	bgt.n	800a040 <_printf_float+0x168>
 800a03a:	6822      	ldr	r2, [r4, #0]
 800a03c:	07d2      	lsls	r2, r2, #31
 800a03e:	d501      	bpl.n	800a044 <_printf_float+0x16c>
 800a040:	3301      	adds	r3, #1
 800a042:	6123      	str	r3, [r4, #16]
 800a044:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d09c      	beq.n	8009f86 <_printf_float+0xae>
 800a04c:	232d      	movs	r3, #45	; 0x2d
 800a04e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a052:	e798      	b.n	8009f86 <_printf_float+0xae>
 800a054:	9a06      	ldr	r2, [sp, #24]
 800a056:	2a47      	cmp	r2, #71	; 0x47
 800a058:	d1be      	bne.n	8009fd8 <_printf_float+0x100>
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d1bc      	bne.n	8009fd8 <_printf_float+0x100>
 800a05e:	2301      	movs	r3, #1
 800a060:	e7b9      	b.n	8009fd6 <_printf_float+0xfe>
 800a062:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a066:	d118      	bne.n	800a09a <_printf_float+0x1c2>
 800a068:	2900      	cmp	r1, #0
 800a06a:	6863      	ldr	r3, [r4, #4]
 800a06c:	dd0b      	ble.n	800a086 <_printf_float+0x1ae>
 800a06e:	6121      	str	r1, [r4, #16]
 800a070:	b913      	cbnz	r3, 800a078 <_printf_float+0x1a0>
 800a072:	6822      	ldr	r2, [r4, #0]
 800a074:	07d0      	lsls	r0, r2, #31
 800a076:	d502      	bpl.n	800a07e <_printf_float+0x1a6>
 800a078:	3301      	adds	r3, #1
 800a07a:	440b      	add	r3, r1
 800a07c:	6123      	str	r3, [r4, #16]
 800a07e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a080:	f04f 0900 	mov.w	r9, #0
 800a084:	e7de      	b.n	800a044 <_printf_float+0x16c>
 800a086:	b913      	cbnz	r3, 800a08e <_printf_float+0x1b6>
 800a088:	6822      	ldr	r2, [r4, #0]
 800a08a:	07d2      	lsls	r2, r2, #31
 800a08c:	d501      	bpl.n	800a092 <_printf_float+0x1ba>
 800a08e:	3302      	adds	r3, #2
 800a090:	e7f4      	b.n	800a07c <_printf_float+0x1a4>
 800a092:	2301      	movs	r3, #1
 800a094:	e7f2      	b.n	800a07c <_printf_float+0x1a4>
 800a096:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a09a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a09c:	4299      	cmp	r1, r3
 800a09e:	db05      	blt.n	800a0ac <_printf_float+0x1d4>
 800a0a0:	6823      	ldr	r3, [r4, #0]
 800a0a2:	6121      	str	r1, [r4, #16]
 800a0a4:	07d8      	lsls	r0, r3, #31
 800a0a6:	d5ea      	bpl.n	800a07e <_printf_float+0x1a6>
 800a0a8:	1c4b      	adds	r3, r1, #1
 800a0aa:	e7e7      	b.n	800a07c <_printf_float+0x1a4>
 800a0ac:	2900      	cmp	r1, #0
 800a0ae:	bfd4      	ite	le
 800a0b0:	f1c1 0202 	rsble	r2, r1, #2
 800a0b4:	2201      	movgt	r2, #1
 800a0b6:	4413      	add	r3, r2
 800a0b8:	e7e0      	b.n	800a07c <_printf_float+0x1a4>
 800a0ba:	6823      	ldr	r3, [r4, #0]
 800a0bc:	055a      	lsls	r2, r3, #21
 800a0be:	d407      	bmi.n	800a0d0 <_printf_float+0x1f8>
 800a0c0:	6923      	ldr	r3, [r4, #16]
 800a0c2:	4642      	mov	r2, r8
 800a0c4:	4631      	mov	r1, r6
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	47b8      	blx	r7
 800a0ca:	3001      	adds	r0, #1
 800a0cc:	d12c      	bne.n	800a128 <_printf_float+0x250>
 800a0ce:	e764      	b.n	8009f9a <_printf_float+0xc2>
 800a0d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a0d4:	f240 80e0 	bls.w	800a298 <_printf_float+0x3c0>
 800a0d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0dc:	2200      	movs	r2, #0
 800a0de:	2300      	movs	r3, #0
 800a0e0:	f7f6 fcda 	bl	8000a98 <__aeabi_dcmpeq>
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	d034      	beq.n	800a152 <_printf_float+0x27a>
 800a0e8:	4a37      	ldr	r2, [pc, #220]	; (800a1c8 <_printf_float+0x2f0>)
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	4631      	mov	r1, r6
 800a0ee:	4628      	mov	r0, r5
 800a0f0:	47b8      	blx	r7
 800a0f2:	3001      	adds	r0, #1
 800a0f4:	f43f af51 	beq.w	8009f9a <_printf_float+0xc2>
 800a0f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	db02      	blt.n	800a106 <_printf_float+0x22e>
 800a100:	6823      	ldr	r3, [r4, #0]
 800a102:	07d8      	lsls	r0, r3, #31
 800a104:	d510      	bpl.n	800a128 <_printf_float+0x250>
 800a106:	ee18 3a10 	vmov	r3, s16
 800a10a:	4652      	mov	r2, sl
 800a10c:	4631      	mov	r1, r6
 800a10e:	4628      	mov	r0, r5
 800a110:	47b8      	blx	r7
 800a112:	3001      	adds	r0, #1
 800a114:	f43f af41 	beq.w	8009f9a <_printf_float+0xc2>
 800a118:	f04f 0800 	mov.w	r8, #0
 800a11c:	f104 091a 	add.w	r9, r4, #26
 800a120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a122:	3b01      	subs	r3, #1
 800a124:	4543      	cmp	r3, r8
 800a126:	dc09      	bgt.n	800a13c <_printf_float+0x264>
 800a128:	6823      	ldr	r3, [r4, #0]
 800a12a:	079b      	lsls	r3, r3, #30
 800a12c:	f100 8105 	bmi.w	800a33a <_printf_float+0x462>
 800a130:	68e0      	ldr	r0, [r4, #12]
 800a132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a134:	4298      	cmp	r0, r3
 800a136:	bfb8      	it	lt
 800a138:	4618      	movlt	r0, r3
 800a13a:	e730      	b.n	8009f9e <_printf_float+0xc6>
 800a13c:	2301      	movs	r3, #1
 800a13e:	464a      	mov	r2, r9
 800a140:	4631      	mov	r1, r6
 800a142:	4628      	mov	r0, r5
 800a144:	47b8      	blx	r7
 800a146:	3001      	adds	r0, #1
 800a148:	f43f af27 	beq.w	8009f9a <_printf_float+0xc2>
 800a14c:	f108 0801 	add.w	r8, r8, #1
 800a150:	e7e6      	b.n	800a120 <_printf_float+0x248>
 800a152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a154:	2b00      	cmp	r3, #0
 800a156:	dc39      	bgt.n	800a1cc <_printf_float+0x2f4>
 800a158:	4a1b      	ldr	r2, [pc, #108]	; (800a1c8 <_printf_float+0x2f0>)
 800a15a:	2301      	movs	r3, #1
 800a15c:	4631      	mov	r1, r6
 800a15e:	4628      	mov	r0, r5
 800a160:	47b8      	blx	r7
 800a162:	3001      	adds	r0, #1
 800a164:	f43f af19 	beq.w	8009f9a <_printf_float+0xc2>
 800a168:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a16c:	4313      	orrs	r3, r2
 800a16e:	d102      	bne.n	800a176 <_printf_float+0x29e>
 800a170:	6823      	ldr	r3, [r4, #0]
 800a172:	07d9      	lsls	r1, r3, #31
 800a174:	d5d8      	bpl.n	800a128 <_printf_float+0x250>
 800a176:	ee18 3a10 	vmov	r3, s16
 800a17a:	4652      	mov	r2, sl
 800a17c:	4631      	mov	r1, r6
 800a17e:	4628      	mov	r0, r5
 800a180:	47b8      	blx	r7
 800a182:	3001      	adds	r0, #1
 800a184:	f43f af09 	beq.w	8009f9a <_printf_float+0xc2>
 800a188:	f04f 0900 	mov.w	r9, #0
 800a18c:	f104 0a1a 	add.w	sl, r4, #26
 800a190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a192:	425b      	negs	r3, r3
 800a194:	454b      	cmp	r3, r9
 800a196:	dc01      	bgt.n	800a19c <_printf_float+0x2c4>
 800a198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a19a:	e792      	b.n	800a0c2 <_printf_float+0x1ea>
 800a19c:	2301      	movs	r3, #1
 800a19e:	4652      	mov	r2, sl
 800a1a0:	4631      	mov	r1, r6
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	47b8      	blx	r7
 800a1a6:	3001      	adds	r0, #1
 800a1a8:	f43f aef7 	beq.w	8009f9a <_printf_float+0xc2>
 800a1ac:	f109 0901 	add.w	r9, r9, #1
 800a1b0:	e7ee      	b.n	800a190 <_printf_float+0x2b8>
 800a1b2:	bf00      	nop
 800a1b4:	7fefffff 	.word	0x7fefffff
 800a1b8:	0800d0b4 	.word	0x0800d0b4
 800a1bc:	0800d0b8 	.word	0x0800d0b8
 800a1c0:	0800d0c0 	.word	0x0800d0c0
 800a1c4:	0800d0bc 	.word	0x0800d0bc
 800a1c8:	0800d0c4 	.word	0x0800d0c4
 800a1cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	bfa8      	it	ge
 800a1d4:	461a      	movge	r2, r3
 800a1d6:	2a00      	cmp	r2, #0
 800a1d8:	4691      	mov	r9, r2
 800a1da:	dc37      	bgt.n	800a24c <_printf_float+0x374>
 800a1dc:	f04f 0b00 	mov.w	fp, #0
 800a1e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1e4:	f104 021a 	add.w	r2, r4, #26
 800a1e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1ea:	9305      	str	r3, [sp, #20]
 800a1ec:	eba3 0309 	sub.w	r3, r3, r9
 800a1f0:	455b      	cmp	r3, fp
 800a1f2:	dc33      	bgt.n	800a25c <_printf_float+0x384>
 800a1f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	db3b      	blt.n	800a274 <_printf_float+0x39c>
 800a1fc:	6823      	ldr	r3, [r4, #0]
 800a1fe:	07da      	lsls	r2, r3, #31
 800a200:	d438      	bmi.n	800a274 <_printf_float+0x39c>
 800a202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a204:	9a05      	ldr	r2, [sp, #20]
 800a206:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a208:	1a9a      	subs	r2, r3, r2
 800a20a:	eba3 0901 	sub.w	r9, r3, r1
 800a20e:	4591      	cmp	r9, r2
 800a210:	bfa8      	it	ge
 800a212:	4691      	movge	r9, r2
 800a214:	f1b9 0f00 	cmp.w	r9, #0
 800a218:	dc35      	bgt.n	800a286 <_printf_float+0x3ae>
 800a21a:	f04f 0800 	mov.w	r8, #0
 800a21e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a222:	f104 0a1a 	add.w	sl, r4, #26
 800a226:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a22a:	1a9b      	subs	r3, r3, r2
 800a22c:	eba3 0309 	sub.w	r3, r3, r9
 800a230:	4543      	cmp	r3, r8
 800a232:	f77f af79 	ble.w	800a128 <_printf_float+0x250>
 800a236:	2301      	movs	r3, #1
 800a238:	4652      	mov	r2, sl
 800a23a:	4631      	mov	r1, r6
 800a23c:	4628      	mov	r0, r5
 800a23e:	47b8      	blx	r7
 800a240:	3001      	adds	r0, #1
 800a242:	f43f aeaa 	beq.w	8009f9a <_printf_float+0xc2>
 800a246:	f108 0801 	add.w	r8, r8, #1
 800a24a:	e7ec      	b.n	800a226 <_printf_float+0x34e>
 800a24c:	4613      	mov	r3, r2
 800a24e:	4631      	mov	r1, r6
 800a250:	4642      	mov	r2, r8
 800a252:	4628      	mov	r0, r5
 800a254:	47b8      	blx	r7
 800a256:	3001      	adds	r0, #1
 800a258:	d1c0      	bne.n	800a1dc <_printf_float+0x304>
 800a25a:	e69e      	b.n	8009f9a <_printf_float+0xc2>
 800a25c:	2301      	movs	r3, #1
 800a25e:	4631      	mov	r1, r6
 800a260:	4628      	mov	r0, r5
 800a262:	9205      	str	r2, [sp, #20]
 800a264:	47b8      	blx	r7
 800a266:	3001      	adds	r0, #1
 800a268:	f43f ae97 	beq.w	8009f9a <_printf_float+0xc2>
 800a26c:	9a05      	ldr	r2, [sp, #20]
 800a26e:	f10b 0b01 	add.w	fp, fp, #1
 800a272:	e7b9      	b.n	800a1e8 <_printf_float+0x310>
 800a274:	ee18 3a10 	vmov	r3, s16
 800a278:	4652      	mov	r2, sl
 800a27a:	4631      	mov	r1, r6
 800a27c:	4628      	mov	r0, r5
 800a27e:	47b8      	blx	r7
 800a280:	3001      	adds	r0, #1
 800a282:	d1be      	bne.n	800a202 <_printf_float+0x32a>
 800a284:	e689      	b.n	8009f9a <_printf_float+0xc2>
 800a286:	9a05      	ldr	r2, [sp, #20]
 800a288:	464b      	mov	r3, r9
 800a28a:	4442      	add	r2, r8
 800a28c:	4631      	mov	r1, r6
 800a28e:	4628      	mov	r0, r5
 800a290:	47b8      	blx	r7
 800a292:	3001      	adds	r0, #1
 800a294:	d1c1      	bne.n	800a21a <_printf_float+0x342>
 800a296:	e680      	b.n	8009f9a <_printf_float+0xc2>
 800a298:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a29a:	2a01      	cmp	r2, #1
 800a29c:	dc01      	bgt.n	800a2a2 <_printf_float+0x3ca>
 800a29e:	07db      	lsls	r3, r3, #31
 800a2a0:	d538      	bpl.n	800a314 <_printf_float+0x43c>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	4642      	mov	r2, r8
 800a2a6:	4631      	mov	r1, r6
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	47b8      	blx	r7
 800a2ac:	3001      	adds	r0, #1
 800a2ae:	f43f ae74 	beq.w	8009f9a <_printf_float+0xc2>
 800a2b2:	ee18 3a10 	vmov	r3, s16
 800a2b6:	4652      	mov	r2, sl
 800a2b8:	4631      	mov	r1, r6
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	47b8      	blx	r7
 800a2be:	3001      	adds	r0, #1
 800a2c0:	f43f ae6b 	beq.w	8009f9a <_printf_float+0xc2>
 800a2c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	f7f6 fbe4 	bl	8000a98 <__aeabi_dcmpeq>
 800a2d0:	b9d8      	cbnz	r0, 800a30a <_printf_float+0x432>
 800a2d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2d4:	f108 0201 	add.w	r2, r8, #1
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	4631      	mov	r1, r6
 800a2dc:	4628      	mov	r0, r5
 800a2de:	47b8      	blx	r7
 800a2e0:	3001      	adds	r0, #1
 800a2e2:	d10e      	bne.n	800a302 <_printf_float+0x42a>
 800a2e4:	e659      	b.n	8009f9a <_printf_float+0xc2>
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	4652      	mov	r2, sl
 800a2ea:	4631      	mov	r1, r6
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	47b8      	blx	r7
 800a2f0:	3001      	adds	r0, #1
 800a2f2:	f43f ae52 	beq.w	8009f9a <_printf_float+0xc2>
 800a2f6:	f108 0801 	add.w	r8, r8, #1
 800a2fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	4543      	cmp	r3, r8
 800a300:	dcf1      	bgt.n	800a2e6 <_printf_float+0x40e>
 800a302:	464b      	mov	r3, r9
 800a304:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a308:	e6dc      	b.n	800a0c4 <_printf_float+0x1ec>
 800a30a:	f04f 0800 	mov.w	r8, #0
 800a30e:	f104 0a1a 	add.w	sl, r4, #26
 800a312:	e7f2      	b.n	800a2fa <_printf_float+0x422>
 800a314:	2301      	movs	r3, #1
 800a316:	4642      	mov	r2, r8
 800a318:	e7df      	b.n	800a2da <_printf_float+0x402>
 800a31a:	2301      	movs	r3, #1
 800a31c:	464a      	mov	r2, r9
 800a31e:	4631      	mov	r1, r6
 800a320:	4628      	mov	r0, r5
 800a322:	47b8      	blx	r7
 800a324:	3001      	adds	r0, #1
 800a326:	f43f ae38 	beq.w	8009f9a <_printf_float+0xc2>
 800a32a:	f108 0801 	add.w	r8, r8, #1
 800a32e:	68e3      	ldr	r3, [r4, #12]
 800a330:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a332:	1a5b      	subs	r3, r3, r1
 800a334:	4543      	cmp	r3, r8
 800a336:	dcf0      	bgt.n	800a31a <_printf_float+0x442>
 800a338:	e6fa      	b.n	800a130 <_printf_float+0x258>
 800a33a:	f04f 0800 	mov.w	r8, #0
 800a33e:	f104 0919 	add.w	r9, r4, #25
 800a342:	e7f4      	b.n	800a32e <_printf_float+0x456>

0800a344 <_printf_common>:
 800a344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a348:	4616      	mov	r6, r2
 800a34a:	4699      	mov	r9, r3
 800a34c:	688a      	ldr	r2, [r1, #8]
 800a34e:	690b      	ldr	r3, [r1, #16]
 800a350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a354:	4293      	cmp	r3, r2
 800a356:	bfb8      	it	lt
 800a358:	4613      	movlt	r3, r2
 800a35a:	6033      	str	r3, [r6, #0]
 800a35c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a360:	4607      	mov	r7, r0
 800a362:	460c      	mov	r4, r1
 800a364:	b10a      	cbz	r2, 800a36a <_printf_common+0x26>
 800a366:	3301      	adds	r3, #1
 800a368:	6033      	str	r3, [r6, #0]
 800a36a:	6823      	ldr	r3, [r4, #0]
 800a36c:	0699      	lsls	r1, r3, #26
 800a36e:	bf42      	ittt	mi
 800a370:	6833      	ldrmi	r3, [r6, #0]
 800a372:	3302      	addmi	r3, #2
 800a374:	6033      	strmi	r3, [r6, #0]
 800a376:	6825      	ldr	r5, [r4, #0]
 800a378:	f015 0506 	ands.w	r5, r5, #6
 800a37c:	d106      	bne.n	800a38c <_printf_common+0x48>
 800a37e:	f104 0a19 	add.w	sl, r4, #25
 800a382:	68e3      	ldr	r3, [r4, #12]
 800a384:	6832      	ldr	r2, [r6, #0]
 800a386:	1a9b      	subs	r3, r3, r2
 800a388:	42ab      	cmp	r3, r5
 800a38a:	dc26      	bgt.n	800a3da <_printf_common+0x96>
 800a38c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a390:	1e13      	subs	r3, r2, #0
 800a392:	6822      	ldr	r2, [r4, #0]
 800a394:	bf18      	it	ne
 800a396:	2301      	movne	r3, #1
 800a398:	0692      	lsls	r2, r2, #26
 800a39a:	d42b      	bmi.n	800a3f4 <_printf_common+0xb0>
 800a39c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3a0:	4649      	mov	r1, r9
 800a3a2:	4638      	mov	r0, r7
 800a3a4:	47c0      	blx	r8
 800a3a6:	3001      	adds	r0, #1
 800a3a8:	d01e      	beq.n	800a3e8 <_printf_common+0xa4>
 800a3aa:	6823      	ldr	r3, [r4, #0]
 800a3ac:	68e5      	ldr	r5, [r4, #12]
 800a3ae:	6832      	ldr	r2, [r6, #0]
 800a3b0:	f003 0306 	and.w	r3, r3, #6
 800a3b4:	2b04      	cmp	r3, #4
 800a3b6:	bf08      	it	eq
 800a3b8:	1aad      	subeq	r5, r5, r2
 800a3ba:	68a3      	ldr	r3, [r4, #8]
 800a3bc:	6922      	ldr	r2, [r4, #16]
 800a3be:	bf0c      	ite	eq
 800a3c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3c4:	2500      	movne	r5, #0
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	bfc4      	itt	gt
 800a3ca:	1a9b      	subgt	r3, r3, r2
 800a3cc:	18ed      	addgt	r5, r5, r3
 800a3ce:	2600      	movs	r6, #0
 800a3d0:	341a      	adds	r4, #26
 800a3d2:	42b5      	cmp	r5, r6
 800a3d4:	d11a      	bne.n	800a40c <_printf_common+0xc8>
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	e008      	b.n	800a3ec <_printf_common+0xa8>
 800a3da:	2301      	movs	r3, #1
 800a3dc:	4652      	mov	r2, sl
 800a3de:	4649      	mov	r1, r9
 800a3e0:	4638      	mov	r0, r7
 800a3e2:	47c0      	blx	r8
 800a3e4:	3001      	adds	r0, #1
 800a3e6:	d103      	bne.n	800a3f0 <_printf_common+0xac>
 800a3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3f0:	3501      	adds	r5, #1
 800a3f2:	e7c6      	b.n	800a382 <_printf_common+0x3e>
 800a3f4:	18e1      	adds	r1, r4, r3
 800a3f6:	1c5a      	adds	r2, r3, #1
 800a3f8:	2030      	movs	r0, #48	; 0x30
 800a3fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3fe:	4422      	add	r2, r4
 800a400:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a404:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a408:	3302      	adds	r3, #2
 800a40a:	e7c7      	b.n	800a39c <_printf_common+0x58>
 800a40c:	2301      	movs	r3, #1
 800a40e:	4622      	mov	r2, r4
 800a410:	4649      	mov	r1, r9
 800a412:	4638      	mov	r0, r7
 800a414:	47c0      	blx	r8
 800a416:	3001      	adds	r0, #1
 800a418:	d0e6      	beq.n	800a3e8 <_printf_common+0xa4>
 800a41a:	3601      	adds	r6, #1
 800a41c:	e7d9      	b.n	800a3d2 <_printf_common+0x8e>
	...

0800a420 <_printf_i>:
 800a420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a424:	7e0f      	ldrb	r7, [r1, #24]
 800a426:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a428:	2f78      	cmp	r7, #120	; 0x78
 800a42a:	4691      	mov	r9, r2
 800a42c:	4680      	mov	r8, r0
 800a42e:	460c      	mov	r4, r1
 800a430:	469a      	mov	sl, r3
 800a432:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a436:	d807      	bhi.n	800a448 <_printf_i+0x28>
 800a438:	2f62      	cmp	r7, #98	; 0x62
 800a43a:	d80a      	bhi.n	800a452 <_printf_i+0x32>
 800a43c:	2f00      	cmp	r7, #0
 800a43e:	f000 80d8 	beq.w	800a5f2 <_printf_i+0x1d2>
 800a442:	2f58      	cmp	r7, #88	; 0x58
 800a444:	f000 80a3 	beq.w	800a58e <_printf_i+0x16e>
 800a448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a44c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a450:	e03a      	b.n	800a4c8 <_printf_i+0xa8>
 800a452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a456:	2b15      	cmp	r3, #21
 800a458:	d8f6      	bhi.n	800a448 <_printf_i+0x28>
 800a45a:	a101      	add	r1, pc, #4	; (adr r1, 800a460 <_printf_i+0x40>)
 800a45c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a460:	0800a4b9 	.word	0x0800a4b9
 800a464:	0800a4cd 	.word	0x0800a4cd
 800a468:	0800a449 	.word	0x0800a449
 800a46c:	0800a449 	.word	0x0800a449
 800a470:	0800a449 	.word	0x0800a449
 800a474:	0800a449 	.word	0x0800a449
 800a478:	0800a4cd 	.word	0x0800a4cd
 800a47c:	0800a449 	.word	0x0800a449
 800a480:	0800a449 	.word	0x0800a449
 800a484:	0800a449 	.word	0x0800a449
 800a488:	0800a449 	.word	0x0800a449
 800a48c:	0800a5d9 	.word	0x0800a5d9
 800a490:	0800a4fd 	.word	0x0800a4fd
 800a494:	0800a5bb 	.word	0x0800a5bb
 800a498:	0800a449 	.word	0x0800a449
 800a49c:	0800a449 	.word	0x0800a449
 800a4a0:	0800a5fb 	.word	0x0800a5fb
 800a4a4:	0800a449 	.word	0x0800a449
 800a4a8:	0800a4fd 	.word	0x0800a4fd
 800a4ac:	0800a449 	.word	0x0800a449
 800a4b0:	0800a449 	.word	0x0800a449
 800a4b4:	0800a5c3 	.word	0x0800a5c3
 800a4b8:	682b      	ldr	r3, [r5, #0]
 800a4ba:	1d1a      	adds	r2, r3, #4
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	602a      	str	r2, [r5, #0]
 800a4c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	e0a3      	b.n	800a614 <_printf_i+0x1f4>
 800a4cc:	6820      	ldr	r0, [r4, #0]
 800a4ce:	6829      	ldr	r1, [r5, #0]
 800a4d0:	0606      	lsls	r6, r0, #24
 800a4d2:	f101 0304 	add.w	r3, r1, #4
 800a4d6:	d50a      	bpl.n	800a4ee <_printf_i+0xce>
 800a4d8:	680e      	ldr	r6, [r1, #0]
 800a4da:	602b      	str	r3, [r5, #0]
 800a4dc:	2e00      	cmp	r6, #0
 800a4de:	da03      	bge.n	800a4e8 <_printf_i+0xc8>
 800a4e0:	232d      	movs	r3, #45	; 0x2d
 800a4e2:	4276      	negs	r6, r6
 800a4e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4e8:	485e      	ldr	r0, [pc, #376]	; (800a664 <_printf_i+0x244>)
 800a4ea:	230a      	movs	r3, #10
 800a4ec:	e019      	b.n	800a522 <_printf_i+0x102>
 800a4ee:	680e      	ldr	r6, [r1, #0]
 800a4f0:	602b      	str	r3, [r5, #0]
 800a4f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a4f6:	bf18      	it	ne
 800a4f8:	b236      	sxthne	r6, r6
 800a4fa:	e7ef      	b.n	800a4dc <_printf_i+0xbc>
 800a4fc:	682b      	ldr	r3, [r5, #0]
 800a4fe:	6820      	ldr	r0, [r4, #0]
 800a500:	1d19      	adds	r1, r3, #4
 800a502:	6029      	str	r1, [r5, #0]
 800a504:	0601      	lsls	r1, r0, #24
 800a506:	d501      	bpl.n	800a50c <_printf_i+0xec>
 800a508:	681e      	ldr	r6, [r3, #0]
 800a50a:	e002      	b.n	800a512 <_printf_i+0xf2>
 800a50c:	0646      	lsls	r6, r0, #25
 800a50e:	d5fb      	bpl.n	800a508 <_printf_i+0xe8>
 800a510:	881e      	ldrh	r6, [r3, #0]
 800a512:	4854      	ldr	r0, [pc, #336]	; (800a664 <_printf_i+0x244>)
 800a514:	2f6f      	cmp	r7, #111	; 0x6f
 800a516:	bf0c      	ite	eq
 800a518:	2308      	moveq	r3, #8
 800a51a:	230a      	movne	r3, #10
 800a51c:	2100      	movs	r1, #0
 800a51e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a522:	6865      	ldr	r5, [r4, #4]
 800a524:	60a5      	str	r5, [r4, #8]
 800a526:	2d00      	cmp	r5, #0
 800a528:	bfa2      	ittt	ge
 800a52a:	6821      	ldrge	r1, [r4, #0]
 800a52c:	f021 0104 	bicge.w	r1, r1, #4
 800a530:	6021      	strge	r1, [r4, #0]
 800a532:	b90e      	cbnz	r6, 800a538 <_printf_i+0x118>
 800a534:	2d00      	cmp	r5, #0
 800a536:	d04d      	beq.n	800a5d4 <_printf_i+0x1b4>
 800a538:	4615      	mov	r5, r2
 800a53a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a53e:	fb03 6711 	mls	r7, r3, r1, r6
 800a542:	5dc7      	ldrb	r7, [r0, r7]
 800a544:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a548:	4637      	mov	r7, r6
 800a54a:	42bb      	cmp	r3, r7
 800a54c:	460e      	mov	r6, r1
 800a54e:	d9f4      	bls.n	800a53a <_printf_i+0x11a>
 800a550:	2b08      	cmp	r3, #8
 800a552:	d10b      	bne.n	800a56c <_printf_i+0x14c>
 800a554:	6823      	ldr	r3, [r4, #0]
 800a556:	07de      	lsls	r6, r3, #31
 800a558:	d508      	bpl.n	800a56c <_printf_i+0x14c>
 800a55a:	6923      	ldr	r3, [r4, #16]
 800a55c:	6861      	ldr	r1, [r4, #4]
 800a55e:	4299      	cmp	r1, r3
 800a560:	bfde      	ittt	le
 800a562:	2330      	movle	r3, #48	; 0x30
 800a564:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a568:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a56c:	1b52      	subs	r2, r2, r5
 800a56e:	6122      	str	r2, [r4, #16]
 800a570:	f8cd a000 	str.w	sl, [sp]
 800a574:	464b      	mov	r3, r9
 800a576:	aa03      	add	r2, sp, #12
 800a578:	4621      	mov	r1, r4
 800a57a:	4640      	mov	r0, r8
 800a57c:	f7ff fee2 	bl	800a344 <_printf_common>
 800a580:	3001      	adds	r0, #1
 800a582:	d14c      	bne.n	800a61e <_printf_i+0x1fe>
 800a584:	f04f 30ff 	mov.w	r0, #4294967295
 800a588:	b004      	add	sp, #16
 800a58a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a58e:	4835      	ldr	r0, [pc, #212]	; (800a664 <_printf_i+0x244>)
 800a590:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a594:	6829      	ldr	r1, [r5, #0]
 800a596:	6823      	ldr	r3, [r4, #0]
 800a598:	f851 6b04 	ldr.w	r6, [r1], #4
 800a59c:	6029      	str	r1, [r5, #0]
 800a59e:	061d      	lsls	r5, r3, #24
 800a5a0:	d514      	bpl.n	800a5cc <_printf_i+0x1ac>
 800a5a2:	07df      	lsls	r7, r3, #31
 800a5a4:	bf44      	itt	mi
 800a5a6:	f043 0320 	orrmi.w	r3, r3, #32
 800a5aa:	6023      	strmi	r3, [r4, #0]
 800a5ac:	b91e      	cbnz	r6, 800a5b6 <_printf_i+0x196>
 800a5ae:	6823      	ldr	r3, [r4, #0]
 800a5b0:	f023 0320 	bic.w	r3, r3, #32
 800a5b4:	6023      	str	r3, [r4, #0]
 800a5b6:	2310      	movs	r3, #16
 800a5b8:	e7b0      	b.n	800a51c <_printf_i+0xfc>
 800a5ba:	6823      	ldr	r3, [r4, #0]
 800a5bc:	f043 0320 	orr.w	r3, r3, #32
 800a5c0:	6023      	str	r3, [r4, #0]
 800a5c2:	2378      	movs	r3, #120	; 0x78
 800a5c4:	4828      	ldr	r0, [pc, #160]	; (800a668 <_printf_i+0x248>)
 800a5c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5ca:	e7e3      	b.n	800a594 <_printf_i+0x174>
 800a5cc:	0659      	lsls	r1, r3, #25
 800a5ce:	bf48      	it	mi
 800a5d0:	b2b6      	uxthmi	r6, r6
 800a5d2:	e7e6      	b.n	800a5a2 <_printf_i+0x182>
 800a5d4:	4615      	mov	r5, r2
 800a5d6:	e7bb      	b.n	800a550 <_printf_i+0x130>
 800a5d8:	682b      	ldr	r3, [r5, #0]
 800a5da:	6826      	ldr	r6, [r4, #0]
 800a5dc:	6961      	ldr	r1, [r4, #20]
 800a5de:	1d18      	adds	r0, r3, #4
 800a5e0:	6028      	str	r0, [r5, #0]
 800a5e2:	0635      	lsls	r5, r6, #24
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	d501      	bpl.n	800a5ec <_printf_i+0x1cc>
 800a5e8:	6019      	str	r1, [r3, #0]
 800a5ea:	e002      	b.n	800a5f2 <_printf_i+0x1d2>
 800a5ec:	0670      	lsls	r0, r6, #25
 800a5ee:	d5fb      	bpl.n	800a5e8 <_printf_i+0x1c8>
 800a5f0:	8019      	strh	r1, [r3, #0]
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	6123      	str	r3, [r4, #16]
 800a5f6:	4615      	mov	r5, r2
 800a5f8:	e7ba      	b.n	800a570 <_printf_i+0x150>
 800a5fa:	682b      	ldr	r3, [r5, #0]
 800a5fc:	1d1a      	adds	r2, r3, #4
 800a5fe:	602a      	str	r2, [r5, #0]
 800a600:	681d      	ldr	r5, [r3, #0]
 800a602:	6862      	ldr	r2, [r4, #4]
 800a604:	2100      	movs	r1, #0
 800a606:	4628      	mov	r0, r5
 800a608:	f7f5 fdd2 	bl	80001b0 <memchr>
 800a60c:	b108      	cbz	r0, 800a612 <_printf_i+0x1f2>
 800a60e:	1b40      	subs	r0, r0, r5
 800a610:	6060      	str	r0, [r4, #4]
 800a612:	6863      	ldr	r3, [r4, #4]
 800a614:	6123      	str	r3, [r4, #16]
 800a616:	2300      	movs	r3, #0
 800a618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a61c:	e7a8      	b.n	800a570 <_printf_i+0x150>
 800a61e:	6923      	ldr	r3, [r4, #16]
 800a620:	462a      	mov	r2, r5
 800a622:	4649      	mov	r1, r9
 800a624:	4640      	mov	r0, r8
 800a626:	47d0      	blx	sl
 800a628:	3001      	adds	r0, #1
 800a62a:	d0ab      	beq.n	800a584 <_printf_i+0x164>
 800a62c:	6823      	ldr	r3, [r4, #0]
 800a62e:	079b      	lsls	r3, r3, #30
 800a630:	d413      	bmi.n	800a65a <_printf_i+0x23a>
 800a632:	68e0      	ldr	r0, [r4, #12]
 800a634:	9b03      	ldr	r3, [sp, #12]
 800a636:	4298      	cmp	r0, r3
 800a638:	bfb8      	it	lt
 800a63a:	4618      	movlt	r0, r3
 800a63c:	e7a4      	b.n	800a588 <_printf_i+0x168>
 800a63e:	2301      	movs	r3, #1
 800a640:	4632      	mov	r2, r6
 800a642:	4649      	mov	r1, r9
 800a644:	4640      	mov	r0, r8
 800a646:	47d0      	blx	sl
 800a648:	3001      	adds	r0, #1
 800a64a:	d09b      	beq.n	800a584 <_printf_i+0x164>
 800a64c:	3501      	adds	r5, #1
 800a64e:	68e3      	ldr	r3, [r4, #12]
 800a650:	9903      	ldr	r1, [sp, #12]
 800a652:	1a5b      	subs	r3, r3, r1
 800a654:	42ab      	cmp	r3, r5
 800a656:	dcf2      	bgt.n	800a63e <_printf_i+0x21e>
 800a658:	e7eb      	b.n	800a632 <_printf_i+0x212>
 800a65a:	2500      	movs	r5, #0
 800a65c:	f104 0619 	add.w	r6, r4, #25
 800a660:	e7f5      	b.n	800a64e <_printf_i+0x22e>
 800a662:	bf00      	nop
 800a664:	0800d0c6 	.word	0x0800d0c6
 800a668:	0800d0d7 	.word	0x0800d0d7

0800a66c <siprintf>:
 800a66c:	b40e      	push	{r1, r2, r3}
 800a66e:	b500      	push	{lr}
 800a670:	b09c      	sub	sp, #112	; 0x70
 800a672:	ab1d      	add	r3, sp, #116	; 0x74
 800a674:	9002      	str	r0, [sp, #8]
 800a676:	9006      	str	r0, [sp, #24]
 800a678:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a67c:	4809      	ldr	r0, [pc, #36]	; (800a6a4 <siprintf+0x38>)
 800a67e:	9107      	str	r1, [sp, #28]
 800a680:	9104      	str	r1, [sp, #16]
 800a682:	4909      	ldr	r1, [pc, #36]	; (800a6a8 <siprintf+0x3c>)
 800a684:	f853 2b04 	ldr.w	r2, [r3], #4
 800a688:	9105      	str	r1, [sp, #20]
 800a68a:	6800      	ldr	r0, [r0, #0]
 800a68c:	9301      	str	r3, [sp, #4]
 800a68e:	a902      	add	r1, sp, #8
 800a690:	f001 fb78 	bl	800bd84 <_svfiprintf_r>
 800a694:	9b02      	ldr	r3, [sp, #8]
 800a696:	2200      	movs	r2, #0
 800a698:	701a      	strb	r2, [r3, #0]
 800a69a:	b01c      	add	sp, #112	; 0x70
 800a69c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6a0:	b003      	add	sp, #12
 800a6a2:	4770      	bx	lr
 800a6a4:	20000040 	.word	0x20000040
 800a6a8:	ffff0208 	.word	0xffff0208

0800a6ac <quorem>:
 800a6ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b0:	6903      	ldr	r3, [r0, #16]
 800a6b2:	690c      	ldr	r4, [r1, #16]
 800a6b4:	42a3      	cmp	r3, r4
 800a6b6:	4607      	mov	r7, r0
 800a6b8:	f2c0 8081 	blt.w	800a7be <quorem+0x112>
 800a6bc:	3c01      	subs	r4, #1
 800a6be:	f101 0814 	add.w	r8, r1, #20
 800a6c2:	f100 0514 	add.w	r5, r0, #20
 800a6c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6ca:	9301      	str	r3, [sp, #4]
 800a6cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a6d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a6dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a6e0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a6e4:	d331      	bcc.n	800a74a <quorem+0x9e>
 800a6e6:	f04f 0e00 	mov.w	lr, #0
 800a6ea:	4640      	mov	r0, r8
 800a6ec:	46ac      	mov	ip, r5
 800a6ee:	46f2      	mov	sl, lr
 800a6f0:	f850 2b04 	ldr.w	r2, [r0], #4
 800a6f4:	b293      	uxth	r3, r2
 800a6f6:	fb06 e303 	mla	r3, r6, r3, lr
 800a6fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	ebaa 0303 	sub.w	r3, sl, r3
 800a704:	f8dc a000 	ldr.w	sl, [ip]
 800a708:	0c12      	lsrs	r2, r2, #16
 800a70a:	fa13 f38a 	uxtah	r3, r3, sl
 800a70e:	fb06 e202 	mla	r2, r6, r2, lr
 800a712:	9300      	str	r3, [sp, #0]
 800a714:	9b00      	ldr	r3, [sp, #0]
 800a716:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a71a:	b292      	uxth	r2, r2
 800a71c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a720:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a724:	f8bd 3000 	ldrh.w	r3, [sp]
 800a728:	4581      	cmp	r9, r0
 800a72a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a72e:	f84c 3b04 	str.w	r3, [ip], #4
 800a732:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a736:	d2db      	bcs.n	800a6f0 <quorem+0x44>
 800a738:	f855 300b 	ldr.w	r3, [r5, fp]
 800a73c:	b92b      	cbnz	r3, 800a74a <quorem+0x9e>
 800a73e:	9b01      	ldr	r3, [sp, #4]
 800a740:	3b04      	subs	r3, #4
 800a742:	429d      	cmp	r5, r3
 800a744:	461a      	mov	r2, r3
 800a746:	d32e      	bcc.n	800a7a6 <quorem+0xfa>
 800a748:	613c      	str	r4, [r7, #16]
 800a74a:	4638      	mov	r0, r7
 800a74c:	f001 f8c6 	bl	800b8dc <__mcmp>
 800a750:	2800      	cmp	r0, #0
 800a752:	db24      	blt.n	800a79e <quorem+0xf2>
 800a754:	3601      	adds	r6, #1
 800a756:	4628      	mov	r0, r5
 800a758:	f04f 0c00 	mov.w	ip, #0
 800a75c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a760:	f8d0 e000 	ldr.w	lr, [r0]
 800a764:	b293      	uxth	r3, r2
 800a766:	ebac 0303 	sub.w	r3, ip, r3
 800a76a:	0c12      	lsrs	r2, r2, #16
 800a76c:	fa13 f38e 	uxtah	r3, r3, lr
 800a770:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a774:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a778:	b29b      	uxth	r3, r3
 800a77a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a77e:	45c1      	cmp	r9, r8
 800a780:	f840 3b04 	str.w	r3, [r0], #4
 800a784:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a788:	d2e8      	bcs.n	800a75c <quorem+0xb0>
 800a78a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a78e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a792:	b922      	cbnz	r2, 800a79e <quorem+0xf2>
 800a794:	3b04      	subs	r3, #4
 800a796:	429d      	cmp	r5, r3
 800a798:	461a      	mov	r2, r3
 800a79a:	d30a      	bcc.n	800a7b2 <quorem+0x106>
 800a79c:	613c      	str	r4, [r7, #16]
 800a79e:	4630      	mov	r0, r6
 800a7a0:	b003      	add	sp, #12
 800a7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a6:	6812      	ldr	r2, [r2, #0]
 800a7a8:	3b04      	subs	r3, #4
 800a7aa:	2a00      	cmp	r2, #0
 800a7ac:	d1cc      	bne.n	800a748 <quorem+0x9c>
 800a7ae:	3c01      	subs	r4, #1
 800a7b0:	e7c7      	b.n	800a742 <quorem+0x96>
 800a7b2:	6812      	ldr	r2, [r2, #0]
 800a7b4:	3b04      	subs	r3, #4
 800a7b6:	2a00      	cmp	r2, #0
 800a7b8:	d1f0      	bne.n	800a79c <quorem+0xf0>
 800a7ba:	3c01      	subs	r4, #1
 800a7bc:	e7eb      	b.n	800a796 <quorem+0xea>
 800a7be:	2000      	movs	r0, #0
 800a7c0:	e7ee      	b.n	800a7a0 <quorem+0xf4>
 800a7c2:	0000      	movs	r0, r0
 800a7c4:	0000      	movs	r0, r0
	...

0800a7c8 <_dtoa_r>:
 800a7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7cc:	ed2d 8b04 	vpush	{d8-d9}
 800a7d0:	ec57 6b10 	vmov	r6, r7, d0
 800a7d4:	b093      	sub	sp, #76	; 0x4c
 800a7d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a7d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a7dc:	9106      	str	r1, [sp, #24]
 800a7de:	ee10 aa10 	vmov	sl, s0
 800a7e2:	4604      	mov	r4, r0
 800a7e4:	9209      	str	r2, [sp, #36]	; 0x24
 800a7e6:	930c      	str	r3, [sp, #48]	; 0x30
 800a7e8:	46bb      	mov	fp, r7
 800a7ea:	b975      	cbnz	r5, 800a80a <_dtoa_r+0x42>
 800a7ec:	2010      	movs	r0, #16
 800a7ee:	f000 fddd 	bl	800b3ac <malloc>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	6260      	str	r0, [r4, #36]	; 0x24
 800a7f6:	b920      	cbnz	r0, 800a802 <_dtoa_r+0x3a>
 800a7f8:	4ba7      	ldr	r3, [pc, #668]	; (800aa98 <_dtoa_r+0x2d0>)
 800a7fa:	21ea      	movs	r1, #234	; 0xea
 800a7fc:	48a7      	ldr	r0, [pc, #668]	; (800aa9c <_dtoa_r+0x2d4>)
 800a7fe:	f001 fbd1 	bl	800bfa4 <__assert_func>
 800a802:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a806:	6005      	str	r5, [r0, #0]
 800a808:	60c5      	str	r5, [r0, #12]
 800a80a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a80c:	6819      	ldr	r1, [r3, #0]
 800a80e:	b151      	cbz	r1, 800a826 <_dtoa_r+0x5e>
 800a810:	685a      	ldr	r2, [r3, #4]
 800a812:	604a      	str	r2, [r1, #4]
 800a814:	2301      	movs	r3, #1
 800a816:	4093      	lsls	r3, r2
 800a818:	608b      	str	r3, [r1, #8]
 800a81a:	4620      	mov	r0, r4
 800a81c:	f000 fe1c 	bl	800b458 <_Bfree>
 800a820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a822:	2200      	movs	r2, #0
 800a824:	601a      	str	r2, [r3, #0]
 800a826:	1e3b      	subs	r3, r7, #0
 800a828:	bfaa      	itet	ge
 800a82a:	2300      	movge	r3, #0
 800a82c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a830:	f8c8 3000 	strge.w	r3, [r8]
 800a834:	4b9a      	ldr	r3, [pc, #616]	; (800aaa0 <_dtoa_r+0x2d8>)
 800a836:	bfbc      	itt	lt
 800a838:	2201      	movlt	r2, #1
 800a83a:	f8c8 2000 	strlt.w	r2, [r8]
 800a83e:	ea33 030b 	bics.w	r3, r3, fp
 800a842:	d11b      	bne.n	800a87c <_dtoa_r+0xb4>
 800a844:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a846:	f242 730f 	movw	r3, #9999	; 0x270f
 800a84a:	6013      	str	r3, [r2, #0]
 800a84c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a850:	4333      	orrs	r3, r6
 800a852:	f000 8592 	beq.w	800b37a <_dtoa_r+0xbb2>
 800a856:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a858:	b963      	cbnz	r3, 800a874 <_dtoa_r+0xac>
 800a85a:	4b92      	ldr	r3, [pc, #584]	; (800aaa4 <_dtoa_r+0x2dc>)
 800a85c:	e022      	b.n	800a8a4 <_dtoa_r+0xdc>
 800a85e:	4b92      	ldr	r3, [pc, #584]	; (800aaa8 <_dtoa_r+0x2e0>)
 800a860:	9301      	str	r3, [sp, #4]
 800a862:	3308      	adds	r3, #8
 800a864:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a866:	6013      	str	r3, [r2, #0]
 800a868:	9801      	ldr	r0, [sp, #4]
 800a86a:	b013      	add	sp, #76	; 0x4c
 800a86c:	ecbd 8b04 	vpop	{d8-d9}
 800a870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a874:	4b8b      	ldr	r3, [pc, #556]	; (800aaa4 <_dtoa_r+0x2dc>)
 800a876:	9301      	str	r3, [sp, #4]
 800a878:	3303      	adds	r3, #3
 800a87a:	e7f3      	b.n	800a864 <_dtoa_r+0x9c>
 800a87c:	2200      	movs	r2, #0
 800a87e:	2300      	movs	r3, #0
 800a880:	4650      	mov	r0, sl
 800a882:	4659      	mov	r1, fp
 800a884:	f7f6 f908 	bl	8000a98 <__aeabi_dcmpeq>
 800a888:	ec4b ab19 	vmov	d9, sl, fp
 800a88c:	4680      	mov	r8, r0
 800a88e:	b158      	cbz	r0, 800a8a8 <_dtoa_r+0xe0>
 800a890:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a892:	2301      	movs	r3, #1
 800a894:	6013      	str	r3, [r2, #0]
 800a896:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f000 856b 	beq.w	800b374 <_dtoa_r+0xbac>
 800a89e:	4883      	ldr	r0, [pc, #524]	; (800aaac <_dtoa_r+0x2e4>)
 800a8a0:	6018      	str	r0, [r3, #0]
 800a8a2:	1e43      	subs	r3, r0, #1
 800a8a4:	9301      	str	r3, [sp, #4]
 800a8a6:	e7df      	b.n	800a868 <_dtoa_r+0xa0>
 800a8a8:	ec4b ab10 	vmov	d0, sl, fp
 800a8ac:	aa10      	add	r2, sp, #64	; 0x40
 800a8ae:	a911      	add	r1, sp, #68	; 0x44
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	f001 f8b9 	bl	800ba28 <__d2b>
 800a8b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a8ba:	ee08 0a10 	vmov	s16, r0
 800a8be:	2d00      	cmp	r5, #0
 800a8c0:	f000 8084 	beq.w	800a9cc <_dtoa_r+0x204>
 800a8c4:	ee19 3a90 	vmov	r3, s19
 800a8c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a8d0:	4656      	mov	r6, sl
 800a8d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a8d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a8da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a8de:	4b74      	ldr	r3, [pc, #464]	; (800aab0 <_dtoa_r+0x2e8>)
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	4639      	mov	r1, r7
 800a8e6:	f7f5 fcb7 	bl	8000258 <__aeabi_dsub>
 800a8ea:	a365      	add	r3, pc, #404	; (adr r3, 800aa80 <_dtoa_r+0x2b8>)
 800a8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f0:	f7f5 fe6a 	bl	80005c8 <__aeabi_dmul>
 800a8f4:	a364      	add	r3, pc, #400	; (adr r3, 800aa88 <_dtoa_r+0x2c0>)
 800a8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fa:	f7f5 fcaf 	bl	800025c <__adddf3>
 800a8fe:	4606      	mov	r6, r0
 800a900:	4628      	mov	r0, r5
 800a902:	460f      	mov	r7, r1
 800a904:	f7f5 fdf6 	bl	80004f4 <__aeabi_i2d>
 800a908:	a361      	add	r3, pc, #388	; (adr r3, 800aa90 <_dtoa_r+0x2c8>)
 800a90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90e:	f7f5 fe5b 	bl	80005c8 <__aeabi_dmul>
 800a912:	4602      	mov	r2, r0
 800a914:	460b      	mov	r3, r1
 800a916:	4630      	mov	r0, r6
 800a918:	4639      	mov	r1, r7
 800a91a:	f7f5 fc9f 	bl	800025c <__adddf3>
 800a91e:	4606      	mov	r6, r0
 800a920:	460f      	mov	r7, r1
 800a922:	f7f6 f901 	bl	8000b28 <__aeabi_d2iz>
 800a926:	2200      	movs	r2, #0
 800a928:	9000      	str	r0, [sp, #0]
 800a92a:	2300      	movs	r3, #0
 800a92c:	4630      	mov	r0, r6
 800a92e:	4639      	mov	r1, r7
 800a930:	f7f6 f8bc 	bl	8000aac <__aeabi_dcmplt>
 800a934:	b150      	cbz	r0, 800a94c <_dtoa_r+0x184>
 800a936:	9800      	ldr	r0, [sp, #0]
 800a938:	f7f5 fddc 	bl	80004f4 <__aeabi_i2d>
 800a93c:	4632      	mov	r2, r6
 800a93e:	463b      	mov	r3, r7
 800a940:	f7f6 f8aa 	bl	8000a98 <__aeabi_dcmpeq>
 800a944:	b910      	cbnz	r0, 800a94c <_dtoa_r+0x184>
 800a946:	9b00      	ldr	r3, [sp, #0]
 800a948:	3b01      	subs	r3, #1
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	9b00      	ldr	r3, [sp, #0]
 800a94e:	2b16      	cmp	r3, #22
 800a950:	d85a      	bhi.n	800aa08 <_dtoa_r+0x240>
 800a952:	9a00      	ldr	r2, [sp, #0]
 800a954:	4b57      	ldr	r3, [pc, #348]	; (800aab4 <_dtoa_r+0x2ec>)
 800a956:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95e:	ec51 0b19 	vmov	r0, r1, d9
 800a962:	f7f6 f8a3 	bl	8000aac <__aeabi_dcmplt>
 800a966:	2800      	cmp	r0, #0
 800a968:	d050      	beq.n	800aa0c <_dtoa_r+0x244>
 800a96a:	9b00      	ldr	r3, [sp, #0]
 800a96c:	3b01      	subs	r3, #1
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	2300      	movs	r3, #0
 800a972:	930b      	str	r3, [sp, #44]	; 0x2c
 800a974:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a976:	1b5d      	subs	r5, r3, r5
 800a978:	1e6b      	subs	r3, r5, #1
 800a97a:	9305      	str	r3, [sp, #20]
 800a97c:	bf45      	ittet	mi
 800a97e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a982:	9304      	strmi	r3, [sp, #16]
 800a984:	2300      	movpl	r3, #0
 800a986:	2300      	movmi	r3, #0
 800a988:	bf4c      	ite	mi
 800a98a:	9305      	strmi	r3, [sp, #20]
 800a98c:	9304      	strpl	r3, [sp, #16]
 800a98e:	9b00      	ldr	r3, [sp, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	db3d      	blt.n	800aa10 <_dtoa_r+0x248>
 800a994:	9b05      	ldr	r3, [sp, #20]
 800a996:	9a00      	ldr	r2, [sp, #0]
 800a998:	920a      	str	r2, [sp, #40]	; 0x28
 800a99a:	4413      	add	r3, r2
 800a99c:	9305      	str	r3, [sp, #20]
 800a99e:	2300      	movs	r3, #0
 800a9a0:	9307      	str	r3, [sp, #28]
 800a9a2:	9b06      	ldr	r3, [sp, #24]
 800a9a4:	2b09      	cmp	r3, #9
 800a9a6:	f200 8089 	bhi.w	800aabc <_dtoa_r+0x2f4>
 800a9aa:	2b05      	cmp	r3, #5
 800a9ac:	bfc4      	itt	gt
 800a9ae:	3b04      	subgt	r3, #4
 800a9b0:	9306      	strgt	r3, [sp, #24]
 800a9b2:	9b06      	ldr	r3, [sp, #24]
 800a9b4:	f1a3 0302 	sub.w	r3, r3, #2
 800a9b8:	bfcc      	ite	gt
 800a9ba:	2500      	movgt	r5, #0
 800a9bc:	2501      	movle	r5, #1
 800a9be:	2b03      	cmp	r3, #3
 800a9c0:	f200 8087 	bhi.w	800aad2 <_dtoa_r+0x30a>
 800a9c4:	e8df f003 	tbb	[pc, r3]
 800a9c8:	59383a2d 	.word	0x59383a2d
 800a9cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a9d0:	441d      	add	r5, r3
 800a9d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a9d6:	2b20      	cmp	r3, #32
 800a9d8:	bfc1      	itttt	gt
 800a9da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a9de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a9e2:	fa0b f303 	lslgt.w	r3, fp, r3
 800a9e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a9ea:	bfda      	itte	le
 800a9ec:	f1c3 0320 	rsble	r3, r3, #32
 800a9f0:	fa06 f003 	lslle.w	r0, r6, r3
 800a9f4:	4318      	orrgt	r0, r3
 800a9f6:	f7f5 fd6d 	bl	80004d4 <__aeabi_ui2d>
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	4606      	mov	r6, r0
 800a9fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800aa02:	3d01      	subs	r5, #1
 800aa04:	930e      	str	r3, [sp, #56]	; 0x38
 800aa06:	e76a      	b.n	800a8de <_dtoa_r+0x116>
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e7b2      	b.n	800a972 <_dtoa_r+0x1aa>
 800aa0c:	900b      	str	r0, [sp, #44]	; 0x2c
 800aa0e:	e7b1      	b.n	800a974 <_dtoa_r+0x1ac>
 800aa10:	9b04      	ldr	r3, [sp, #16]
 800aa12:	9a00      	ldr	r2, [sp, #0]
 800aa14:	1a9b      	subs	r3, r3, r2
 800aa16:	9304      	str	r3, [sp, #16]
 800aa18:	4253      	negs	r3, r2
 800aa1a:	9307      	str	r3, [sp, #28]
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	930a      	str	r3, [sp, #40]	; 0x28
 800aa20:	e7bf      	b.n	800a9a2 <_dtoa_r+0x1da>
 800aa22:	2300      	movs	r3, #0
 800aa24:	9308      	str	r3, [sp, #32]
 800aa26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	dc55      	bgt.n	800aad8 <_dtoa_r+0x310>
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aa32:	461a      	mov	r2, r3
 800aa34:	9209      	str	r2, [sp, #36]	; 0x24
 800aa36:	e00c      	b.n	800aa52 <_dtoa_r+0x28a>
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e7f3      	b.n	800aa24 <_dtoa_r+0x25c>
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa40:	9308      	str	r3, [sp, #32]
 800aa42:	9b00      	ldr	r3, [sp, #0]
 800aa44:	4413      	add	r3, r2
 800aa46:	9302      	str	r3, [sp, #8]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	9303      	str	r3, [sp, #12]
 800aa4e:	bfb8      	it	lt
 800aa50:	2301      	movlt	r3, #1
 800aa52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800aa54:	2200      	movs	r2, #0
 800aa56:	6042      	str	r2, [r0, #4]
 800aa58:	2204      	movs	r2, #4
 800aa5a:	f102 0614 	add.w	r6, r2, #20
 800aa5e:	429e      	cmp	r6, r3
 800aa60:	6841      	ldr	r1, [r0, #4]
 800aa62:	d93d      	bls.n	800aae0 <_dtoa_r+0x318>
 800aa64:	4620      	mov	r0, r4
 800aa66:	f000 fcb7 	bl	800b3d8 <_Balloc>
 800aa6a:	9001      	str	r0, [sp, #4]
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	d13b      	bne.n	800aae8 <_dtoa_r+0x320>
 800aa70:	4b11      	ldr	r3, [pc, #68]	; (800aab8 <_dtoa_r+0x2f0>)
 800aa72:	4602      	mov	r2, r0
 800aa74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aa78:	e6c0      	b.n	800a7fc <_dtoa_r+0x34>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e7df      	b.n	800aa3e <_dtoa_r+0x276>
 800aa7e:	bf00      	nop
 800aa80:	636f4361 	.word	0x636f4361
 800aa84:	3fd287a7 	.word	0x3fd287a7
 800aa88:	8b60c8b3 	.word	0x8b60c8b3
 800aa8c:	3fc68a28 	.word	0x3fc68a28
 800aa90:	509f79fb 	.word	0x509f79fb
 800aa94:	3fd34413 	.word	0x3fd34413
 800aa98:	0800d0f5 	.word	0x0800d0f5
 800aa9c:	0800d10c 	.word	0x0800d10c
 800aaa0:	7ff00000 	.word	0x7ff00000
 800aaa4:	0800d0f1 	.word	0x0800d0f1
 800aaa8:	0800d0e8 	.word	0x0800d0e8
 800aaac:	0800d0c5 	.word	0x0800d0c5
 800aab0:	3ff80000 	.word	0x3ff80000
 800aab4:	0800d200 	.word	0x0800d200
 800aab8:	0800d167 	.word	0x0800d167
 800aabc:	2501      	movs	r5, #1
 800aabe:	2300      	movs	r3, #0
 800aac0:	9306      	str	r3, [sp, #24]
 800aac2:	9508      	str	r5, [sp, #32]
 800aac4:	f04f 33ff 	mov.w	r3, #4294967295
 800aac8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aacc:	2200      	movs	r2, #0
 800aace:	2312      	movs	r3, #18
 800aad0:	e7b0      	b.n	800aa34 <_dtoa_r+0x26c>
 800aad2:	2301      	movs	r3, #1
 800aad4:	9308      	str	r3, [sp, #32]
 800aad6:	e7f5      	b.n	800aac4 <_dtoa_r+0x2fc>
 800aad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aada:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aade:	e7b8      	b.n	800aa52 <_dtoa_r+0x28a>
 800aae0:	3101      	adds	r1, #1
 800aae2:	6041      	str	r1, [r0, #4]
 800aae4:	0052      	lsls	r2, r2, #1
 800aae6:	e7b8      	b.n	800aa5a <_dtoa_r+0x292>
 800aae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aaea:	9a01      	ldr	r2, [sp, #4]
 800aaec:	601a      	str	r2, [r3, #0]
 800aaee:	9b03      	ldr	r3, [sp, #12]
 800aaf0:	2b0e      	cmp	r3, #14
 800aaf2:	f200 809d 	bhi.w	800ac30 <_dtoa_r+0x468>
 800aaf6:	2d00      	cmp	r5, #0
 800aaf8:	f000 809a 	beq.w	800ac30 <_dtoa_r+0x468>
 800aafc:	9b00      	ldr	r3, [sp, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	dd32      	ble.n	800ab68 <_dtoa_r+0x3a0>
 800ab02:	4ab7      	ldr	r2, [pc, #732]	; (800ade0 <_dtoa_r+0x618>)
 800ab04:	f003 030f 	and.w	r3, r3, #15
 800ab08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ab0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab10:	9b00      	ldr	r3, [sp, #0]
 800ab12:	05d8      	lsls	r0, r3, #23
 800ab14:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ab18:	d516      	bpl.n	800ab48 <_dtoa_r+0x380>
 800ab1a:	4bb2      	ldr	r3, [pc, #712]	; (800ade4 <_dtoa_r+0x61c>)
 800ab1c:	ec51 0b19 	vmov	r0, r1, d9
 800ab20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab24:	f7f5 fe7a 	bl	800081c <__aeabi_ddiv>
 800ab28:	f007 070f 	and.w	r7, r7, #15
 800ab2c:	4682      	mov	sl, r0
 800ab2e:	468b      	mov	fp, r1
 800ab30:	2503      	movs	r5, #3
 800ab32:	4eac      	ldr	r6, [pc, #688]	; (800ade4 <_dtoa_r+0x61c>)
 800ab34:	b957      	cbnz	r7, 800ab4c <_dtoa_r+0x384>
 800ab36:	4642      	mov	r2, r8
 800ab38:	464b      	mov	r3, r9
 800ab3a:	4650      	mov	r0, sl
 800ab3c:	4659      	mov	r1, fp
 800ab3e:	f7f5 fe6d 	bl	800081c <__aeabi_ddiv>
 800ab42:	4682      	mov	sl, r0
 800ab44:	468b      	mov	fp, r1
 800ab46:	e028      	b.n	800ab9a <_dtoa_r+0x3d2>
 800ab48:	2502      	movs	r5, #2
 800ab4a:	e7f2      	b.n	800ab32 <_dtoa_r+0x36a>
 800ab4c:	07f9      	lsls	r1, r7, #31
 800ab4e:	d508      	bpl.n	800ab62 <_dtoa_r+0x39a>
 800ab50:	4640      	mov	r0, r8
 800ab52:	4649      	mov	r1, r9
 800ab54:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ab58:	f7f5 fd36 	bl	80005c8 <__aeabi_dmul>
 800ab5c:	3501      	adds	r5, #1
 800ab5e:	4680      	mov	r8, r0
 800ab60:	4689      	mov	r9, r1
 800ab62:	107f      	asrs	r7, r7, #1
 800ab64:	3608      	adds	r6, #8
 800ab66:	e7e5      	b.n	800ab34 <_dtoa_r+0x36c>
 800ab68:	f000 809b 	beq.w	800aca2 <_dtoa_r+0x4da>
 800ab6c:	9b00      	ldr	r3, [sp, #0]
 800ab6e:	4f9d      	ldr	r7, [pc, #628]	; (800ade4 <_dtoa_r+0x61c>)
 800ab70:	425e      	negs	r6, r3
 800ab72:	4b9b      	ldr	r3, [pc, #620]	; (800ade0 <_dtoa_r+0x618>)
 800ab74:	f006 020f 	and.w	r2, r6, #15
 800ab78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab80:	ec51 0b19 	vmov	r0, r1, d9
 800ab84:	f7f5 fd20 	bl	80005c8 <__aeabi_dmul>
 800ab88:	1136      	asrs	r6, r6, #4
 800ab8a:	4682      	mov	sl, r0
 800ab8c:	468b      	mov	fp, r1
 800ab8e:	2300      	movs	r3, #0
 800ab90:	2502      	movs	r5, #2
 800ab92:	2e00      	cmp	r6, #0
 800ab94:	d17a      	bne.n	800ac8c <_dtoa_r+0x4c4>
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d1d3      	bne.n	800ab42 <_dtoa_r+0x37a>
 800ab9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f000 8082 	beq.w	800aca6 <_dtoa_r+0x4de>
 800aba2:	4b91      	ldr	r3, [pc, #580]	; (800ade8 <_dtoa_r+0x620>)
 800aba4:	2200      	movs	r2, #0
 800aba6:	4650      	mov	r0, sl
 800aba8:	4659      	mov	r1, fp
 800abaa:	f7f5 ff7f 	bl	8000aac <__aeabi_dcmplt>
 800abae:	2800      	cmp	r0, #0
 800abb0:	d079      	beq.n	800aca6 <_dtoa_r+0x4de>
 800abb2:	9b03      	ldr	r3, [sp, #12]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d076      	beq.n	800aca6 <_dtoa_r+0x4de>
 800abb8:	9b02      	ldr	r3, [sp, #8]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	dd36      	ble.n	800ac2c <_dtoa_r+0x464>
 800abbe:	9b00      	ldr	r3, [sp, #0]
 800abc0:	4650      	mov	r0, sl
 800abc2:	4659      	mov	r1, fp
 800abc4:	1e5f      	subs	r7, r3, #1
 800abc6:	2200      	movs	r2, #0
 800abc8:	4b88      	ldr	r3, [pc, #544]	; (800adec <_dtoa_r+0x624>)
 800abca:	f7f5 fcfd 	bl	80005c8 <__aeabi_dmul>
 800abce:	9e02      	ldr	r6, [sp, #8]
 800abd0:	4682      	mov	sl, r0
 800abd2:	468b      	mov	fp, r1
 800abd4:	3501      	adds	r5, #1
 800abd6:	4628      	mov	r0, r5
 800abd8:	f7f5 fc8c 	bl	80004f4 <__aeabi_i2d>
 800abdc:	4652      	mov	r2, sl
 800abde:	465b      	mov	r3, fp
 800abe0:	f7f5 fcf2 	bl	80005c8 <__aeabi_dmul>
 800abe4:	4b82      	ldr	r3, [pc, #520]	; (800adf0 <_dtoa_r+0x628>)
 800abe6:	2200      	movs	r2, #0
 800abe8:	f7f5 fb38 	bl	800025c <__adddf3>
 800abec:	46d0      	mov	r8, sl
 800abee:	46d9      	mov	r9, fp
 800abf0:	4682      	mov	sl, r0
 800abf2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800abf6:	2e00      	cmp	r6, #0
 800abf8:	d158      	bne.n	800acac <_dtoa_r+0x4e4>
 800abfa:	4b7e      	ldr	r3, [pc, #504]	; (800adf4 <_dtoa_r+0x62c>)
 800abfc:	2200      	movs	r2, #0
 800abfe:	4640      	mov	r0, r8
 800ac00:	4649      	mov	r1, r9
 800ac02:	f7f5 fb29 	bl	8000258 <__aeabi_dsub>
 800ac06:	4652      	mov	r2, sl
 800ac08:	465b      	mov	r3, fp
 800ac0a:	4680      	mov	r8, r0
 800ac0c:	4689      	mov	r9, r1
 800ac0e:	f7f5 ff6b 	bl	8000ae8 <__aeabi_dcmpgt>
 800ac12:	2800      	cmp	r0, #0
 800ac14:	f040 8295 	bne.w	800b142 <_dtoa_r+0x97a>
 800ac18:	4652      	mov	r2, sl
 800ac1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ac1e:	4640      	mov	r0, r8
 800ac20:	4649      	mov	r1, r9
 800ac22:	f7f5 ff43 	bl	8000aac <__aeabi_dcmplt>
 800ac26:	2800      	cmp	r0, #0
 800ac28:	f040 8289 	bne.w	800b13e <_dtoa_r+0x976>
 800ac2c:	ec5b ab19 	vmov	sl, fp, d9
 800ac30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	f2c0 8148 	blt.w	800aec8 <_dtoa_r+0x700>
 800ac38:	9a00      	ldr	r2, [sp, #0]
 800ac3a:	2a0e      	cmp	r2, #14
 800ac3c:	f300 8144 	bgt.w	800aec8 <_dtoa_r+0x700>
 800ac40:	4b67      	ldr	r3, [pc, #412]	; (800ade0 <_dtoa_r+0x618>)
 800ac42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac46:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	f280 80d5 	bge.w	800adfc <_dtoa_r+0x634>
 800ac52:	9b03      	ldr	r3, [sp, #12]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	f300 80d1 	bgt.w	800adfc <_dtoa_r+0x634>
 800ac5a:	f040 826f 	bne.w	800b13c <_dtoa_r+0x974>
 800ac5e:	4b65      	ldr	r3, [pc, #404]	; (800adf4 <_dtoa_r+0x62c>)
 800ac60:	2200      	movs	r2, #0
 800ac62:	4640      	mov	r0, r8
 800ac64:	4649      	mov	r1, r9
 800ac66:	f7f5 fcaf 	bl	80005c8 <__aeabi_dmul>
 800ac6a:	4652      	mov	r2, sl
 800ac6c:	465b      	mov	r3, fp
 800ac6e:	f7f5 ff31 	bl	8000ad4 <__aeabi_dcmpge>
 800ac72:	9e03      	ldr	r6, [sp, #12]
 800ac74:	4637      	mov	r7, r6
 800ac76:	2800      	cmp	r0, #0
 800ac78:	f040 8245 	bne.w	800b106 <_dtoa_r+0x93e>
 800ac7c:	9d01      	ldr	r5, [sp, #4]
 800ac7e:	2331      	movs	r3, #49	; 0x31
 800ac80:	f805 3b01 	strb.w	r3, [r5], #1
 800ac84:	9b00      	ldr	r3, [sp, #0]
 800ac86:	3301      	adds	r3, #1
 800ac88:	9300      	str	r3, [sp, #0]
 800ac8a:	e240      	b.n	800b10e <_dtoa_r+0x946>
 800ac8c:	07f2      	lsls	r2, r6, #31
 800ac8e:	d505      	bpl.n	800ac9c <_dtoa_r+0x4d4>
 800ac90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac94:	f7f5 fc98 	bl	80005c8 <__aeabi_dmul>
 800ac98:	3501      	adds	r5, #1
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	1076      	asrs	r6, r6, #1
 800ac9e:	3708      	adds	r7, #8
 800aca0:	e777      	b.n	800ab92 <_dtoa_r+0x3ca>
 800aca2:	2502      	movs	r5, #2
 800aca4:	e779      	b.n	800ab9a <_dtoa_r+0x3d2>
 800aca6:	9f00      	ldr	r7, [sp, #0]
 800aca8:	9e03      	ldr	r6, [sp, #12]
 800acaa:	e794      	b.n	800abd6 <_dtoa_r+0x40e>
 800acac:	9901      	ldr	r1, [sp, #4]
 800acae:	4b4c      	ldr	r3, [pc, #304]	; (800ade0 <_dtoa_r+0x618>)
 800acb0:	4431      	add	r1, r6
 800acb2:	910d      	str	r1, [sp, #52]	; 0x34
 800acb4:	9908      	ldr	r1, [sp, #32]
 800acb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800acba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800acbe:	2900      	cmp	r1, #0
 800acc0:	d043      	beq.n	800ad4a <_dtoa_r+0x582>
 800acc2:	494d      	ldr	r1, [pc, #308]	; (800adf8 <_dtoa_r+0x630>)
 800acc4:	2000      	movs	r0, #0
 800acc6:	f7f5 fda9 	bl	800081c <__aeabi_ddiv>
 800acca:	4652      	mov	r2, sl
 800accc:	465b      	mov	r3, fp
 800acce:	f7f5 fac3 	bl	8000258 <__aeabi_dsub>
 800acd2:	9d01      	ldr	r5, [sp, #4]
 800acd4:	4682      	mov	sl, r0
 800acd6:	468b      	mov	fp, r1
 800acd8:	4649      	mov	r1, r9
 800acda:	4640      	mov	r0, r8
 800acdc:	f7f5 ff24 	bl	8000b28 <__aeabi_d2iz>
 800ace0:	4606      	mov	r6, r0
 800ace2:	f7f5 fc07 	bl	80004f4 <__aeabi_i2d>
 800ace6:	4602      	mov	r2, r0
 800ace8:	460b      	mov	r3, r1
 800acea:	4640      	mov	r0, r8
 800acec:	4649      	mov	r1, r9
 800acee:	f7f5 fab3 	bl	8000258 <__aeabi_dsub>
 800acf2:	3630      	adds	r6, #48	; 0x30
 800acf4:	f805 6b01 	strb.w	r6, [r5], #1
 800acf8:	4652      	mov	r2, sl
 800acfa:	465b      	mov	r3, fp
 800acfc:	4680      	mov	r8, r0
 800acfe:	4689      	mov	r9, r1
 800ad00:	f7f5 fed4 	bl	8000aac <__aeabi_dcmplt>
 800ad04:	2800      	cmp	r0, #0
 800ad06:	d163      	bne.n	800add0 <_dtoa_r+0x608>
 800ad08:	4642      	mov	r2, r8
 800ad0a:	464b      	mov	r3, r9
 800ad0c:	4936      	ldr	r1, [pc, #216]	; (800ade8 <_dtoa_r+0x620>)
 800ad0e:	2000      	movs	r0, #0
 800ad10:	f7f5 faa2 	bl	8000258 <__aeabi_dsub>
 800ad14:	4652      	mov	r2, sl
 800ad16:	465b      	mov	r3, fp
 800ad18:	f7f5 fec8 	bl	8000aac <__aeabi_dcmplt>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	f040 80b5 	bne.w	800ae8c <_dtoa_r+0x6c4>
 800ad22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad24:	429d      	cmp	r5, r3
 800ad26:	d081      	beq.n	800ac2c <_dtoa_r+0x464>
 800ad28:	4b30      	ldr	r3, [pc, #192]	; (800adec <_dtoa_r+0x624>)
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	4650      	mov	r0, sl
 800ad2e:	4659      	mov	r1, fp
 800ad30:	f7f5 fc4a 	bl	80005c8 <__aeabi_dmul>
 800ad34:	4b2d      	ldr	r3, [pc, #180]	; (800adec <_dtoa_r+0x624>)
 800ad36:	4682      	mov	sl, r0
 800ad38:	468b      	mov	fp, r1
 800ad3a:	4640      	mov	r0, r8
 800ad3c:	4649      	mov	r1, r9
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f7f5 fc42 	bl	80005c8 <__aeabi_dmul>
 800ad44:	4680      	mov	r8, r0
 800ad46:	4689      	mov	r9, r1
 800ad48:	e7c6      	b.n	800acd8 <_dtoa_r+0x510>
 800ad4a:	4650      	mov	r0, sl
 800ad4c:	4659      	mov	r1, fp
 800ad4e:	f7f5 fc3b 	bl	80005c8 <__aeabi_dmul>
 800ad52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad54:	9d01      	ldr	r5, [sp, #4]
 800ad56:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad58:	4682      	mov	sl, r0
 800ad5a:	468b      	mov	fp, r1
 800ad5c:	4649      	mov	r1, r9
 800ad5e:	4640      	mov	r0, r8
 800ad60:	f7f5 fee2 	bl	8000b28 <__aeabi_d2iz>
 800ad64:	4606      	mov	r6, r0
 800ad66:	f7f5 fbc5 	bl	80004f4 <__aeabi_i2d>
 800ad6a:	3630      	adds	r6, #48	; 0x30
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	460b      	mov	r3, r1
 800ad70:	4640      	mov	r0, r8
 800ad72:	4649      	mov	r1, r9
 800ad74:	f7f5 fa70 	bl	8000258 <__aeabi_dsub>
 800ad78:	f805 6b01 	strb.w	r6, [r5], #1
 800ad7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad7e:	429d      	cmp	r5, r3
 800ad80:	4680      	mov	r8, r0
 800ad82:	4689      	mov	r9, r1
 800ad84:	f04f 0200 	mov.w	r2, #0
 800ad88:	d124      	bne.n	800add4 <_dtoa_r+0x60c>
 800ad8a:	4b1b      	ldr	r3, [pc, #108]	; (800adf8 <_dtoa_r+0x630>)
 800ad8c:	4650      	mov	r0, sl
 800ad8e:	4659      	mov	r1, fp
 800ad90:	f7f5 fa64 	bl	800025c <__adddf3>
 800ad94:	4602      	mov	r2, r0
 800ad96:	460b      	mov	r3, r1
 800ad98:	4640      	mov	r0, r8
 800ad9a:	4649      	mov	r1, r9
 800ad9c:	f7f5 fea4 	bl	8000ae8 <__aeabi_dcmpgt>
 800ada0:	2800      	cmp	r0, #0
 800ada2:	d173      	bne.n	800ae8c <_dtoa_r+0x6c4>
 800ada4:	4652      	mov	r2, sl
 800ada6:	465b      	mov	r3, fp
 800ada8:	4913      	ldr	r1, [pc, #76]	; (800adf8 <_dtoa_r+0x630>)
 800adaa:	2000      	movs	r0, #0
 800adac:	f7f5 fa54 	bl	8000258 <__aeabi_dsub>
 800adb0:	4602      	mov	r2, r0
 800adb2:	460b      	mov	r3, r1
 800adb4:	4640      	mov	r0, r8
 800adb6:	4649      	mov	r1, r9
 800adb8:	f7f5 fe78 	bl	8000aac <__aeabi_dcmplt>
 800adbc:	2800      	cmp	r0, #0
 800adbe:	f43f af35 	beq.w	800ac2c <_dtoa_r+0x464>
 800adc2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800adc4:	1e6b      	subs	r3, r5, #1
 800adc6:	930f      	str	r3, [sp, #60]	; 0x3c
 800adc8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800adcc:	2b30      	cmp	r3, #48	; 0x30
 800adce:	d0f8      	beq.n	800adc2 <_dtoa_r+0x5fa>
 800add0:	9700      	str	r7, [sp, #0]
 800add2:	e049      	b.n	800ae68 <_dtoa_r+0x6a0>
 800add4:	4b05      	ldr	r3, [pc, #20]	; (800adec <_dtoa_r+0x624>)
 800add6:	f7f5 fbf7 	bl	80005c8 <__aeabi_dmul>
 800adda:	4680      	mov	r8, r0
 800addc:	4689      	mov	r9, r1
 800adde:	e7bd      	b.n	800ad5c <_dtoa_r+0x594>
 800ade0:	0800d200 	.word	0x0800d200
 800ade4:	0800d1d8 	.word	0x0800d1d8
 800ade8:	3ff00000 	.word	0x3ff00000
 800adec:	40240000 	.word	0x40240000
 800adf0:	401c0000 	.word	0x401c0000
 800adf4:	40140000 	.word	0x40140000
 800adf8:	3fe00000 	.word	0x3fe00000
 800adfc:	9d01      	ldr	r5, [sp, #4]
 800adfe:	4656      	mov	r6, sl
 800ae00:	465f      	mov	r7, fp
 800ae02:	4642      	mov	r2, r8
 800ae04:	464b      	mov	r3, r9
 800ae06:	4630      	mov	r0, r6
 800ae08:	4639      	mov	r1, r7
 800ae0a:	f7f5 fd07 	bl	800081c <__aeabi_ddiv>
 800ae0e:	f7f5 fe8b 	bl	8000b28 <__aeabi_d2iz>
 800ae12:	4682      	mov	sl, r0
 800ae14:	f7f5 fb6e 	bl	80004f4 <__aeabi_i2d>
 800ae18:	4642      	mov	r2, r8
 800ae1a:	464b      	mov	r3, r9
 800ae1c:	f7f5 fbd4 	bl	80005c8 <__aeabi_dmul>
 800ae20:	4602      	mov	r2, r0
 800ae22:	460b      	mov	r3, r1
 800ae24:	4630      	mov	r0, r6
 800ae26:	4639      	mov	r1, r7
 800ae28:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ae2c:	f7f5 fa14 	bl	8000258 <__aeabi_dsub>
 800ae30:	f805 6b01 	strb.w	r6, [r5], #1
 800ae34:	9e01      	ldr	r6, [sp, #4]
 800ae36:	9f03      	ldr	r7, [sp, #12]
 800ae38:	1bae      	subs	r6, r5, r6
 800ae3a:	42b7      	cmp	r7, r6
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	460b      	mov	r3, r1
 800ae40:	d135      	bne.n	800aeae <_dtoa_r+0x6e6>
 800ae42:	f7f5 fa0b 	bl	800025c <__adddf3>
 800ae46:	4642      	mov	r2, r8
 800ae48:	464b      	mov	r3, r9
 800ae4a:	4606      	mov	r6, r0
 800ae4c:	460f      	mov	r7, r1
 800ae4e:	f7f5 fe4b 	bl	8000ae8 <__aeabi_dcmpgt>
 800ae52:	b9d0      	cbnz	r0, 800ae8a <_dtoa_r+0x6c2>
 800ae54:	4642      	mov	r2, r8
 800ae56:	464b      	mov	r3, r9
 800ae58:	4630      	mov	r0, r6
 800ae5a:	4639      	mov	r1, r7
 800ae5c:	f7f5 fe1c 	bl	8000a98 <__aeabi_dcmpeq>
 800ae60:	b110      	cbz	r0, 800ae68 <_dtoa_r+0x6a0>
 800ae62:	f01a 0f01 	tst.w	sl, #1
 800ae66:	d110      	bne.n	800ae8a <_dtoa_r+0x6c2>
 800ae68:	4620      	mov	r0, r4
 800ae6a:	ee18 1a10 	vmov	r1, s16
 800ae6e:	f000 faf3 	bl	800b458 <_Bfree>
 800ae72:	2300      	movs	r3, #0
 800ae74:	9800      	ldr	r0, [sp, #0]
 800ae76:	702b      	strb	r3, [r5, #0]
 800ae78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae7a:	3001      	adds	r0, #1
 800ae7c:	6018      	str	r0, [r3, #0]
 800ae7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	f43f acf1 	beq.w	800a868 <_dtoa_r+0xa0>
 800ae86:	601d      	str	r5, [r3, #0]
 800ae88:	e4ee      	b.n	800a868 <_dtoa_r+0xa0>
 800ae8a:	9f00      	ldr	r7, [sp, #0]
 800ae8c:	462b      	mov	r3, r5
 800ae8e:	461d      	mov	r5, r3
 800ae90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae94:	2a39      	cmp	r2, #57	; 0x39
 800ae96:	d106      	bne.n	800aea6 <_dtoa_r+0x6de>
 800ae98:	9a01      	ldr	r2, [sp, #4]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d1f7      	bne.n	800ae8e <_dtoa_r+0x6c6>
 800ae9e:	9901      	ldr	r1, [sp, #4]
 800aea0:	2230      	movs	r2, #48	; 0x30
 800aea2:	3701      	adds	r7, #1
 800aea4:	700a      	strb	r2, [r1, #0]
 800aea6:	781a      	ldrb	r2, [r3, #0]
 800aea8:	3201      	adds	r2, #1
 800aeaa:	701a      	strb	r2, [r3, #0]
 800aeac:	e790      	b.n	800add0 <_dtoa_r+0x608>
 800aeae:	4ba6      	ldr	r3, [pc, #664]	; (800b148 <_dtoa_r+0x980>)
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f7f5 fb89 	bl	80005c8 <__aeabi_dmul>
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	2300      	movs	r3, #0
 800aeba:	4606      	mov	r6, r0
 800aebc:	460f      	mov	r7, r1
 800aebe:	f7f5 fdeb 	bl	8000a98 <__aeabi_dcmpeq>
 800aec2:	2800      	cmp	r0, #0
 800aec4:	d09d      	beq.n	800ae02 <_dtoa_r+0x63a>
 800aec6:	e7cf      	b.n	800ae68 <_dtoa_r+0x6a0>
 800aec8:	9a08      	ldr	r2, [sp, #32]
 800aeca:	2a00      	cmp	r2, #0
 800aecc:	f000 80d7 	beq.w	800b07e <_dtoa_r+0x8b6>
 800aed0:	9a06      	ldr	r2, [sp, #24]
 800aed2:	2a01      	cmp	r2, #1
 800aed4:	f300 80ba 	bgt.w	800b04c <_dtoa_r+0x884>
 800aed8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aeda:	2a00      	cmp	r2, #0
 800aedc:	f000 80b2 	beq.w	800b044 <_dtoa_r+0x87c>
 800aee0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aee4:	9e07      	ldr	r6, [sp, #28]
 800aee6:	9d04      	ldr	r5, [sp, #16]
 800aee8:	9a04      	ldr	r2, [sp, #16]
 800aeea:	441a      	add	r2, r3
 800aeec:	9204      	str	r2, [sp, #16]
 800aeee:	9a05      	ldr	r2, [sp, #20]
 800aef0:	2101      	movs	r1, #1
 800aef2:	441a      	add	r2, r3
 800aef4:	4620      	mov	r0, r4
 800aef6:	9205      	str	r2, [sp, #20]
 800aef8:	f000 fb66 	bl	800b5c8 <__i2b>
 800aefc:	4607      	mov	r7, r0
 800aefe:	2d00      	cmp	r5, #0
 800af00:	dd0c      	ble.n	800af1c <_dtoa_r+0x754>
 800af02:	9b05      	ldr	r3, [sp, #20]
 800af04:	2b00      	cmp	r3, #0
 800af06:	dd09      	ble.n	800af1c <_dtoa_r+0x754>
 800af08:	42ab      	cmp	r3, r5
 800af0a:	9a04      	ldr	r2, [sp, #16]
 800af0c:	bfa8      	it	ge
 800af0e:	462b      	movge	r3, r5
 800af10:	1ad2      	subs	r2, r2, r3
 800af12:	9204      	str	r2, [sp, #16]
 800af14:	9a05      	ldr	r2, [sp, #20]
 800af16:	1aed      	subs	r5, r5, r3
 800af18:	1ad3      	subs	r3, r2, r3
 800af1a:	9305      	str	r3, [sp, #20]
 800af1c:	9b07      	ldr	r3, [sp, #28]
 800af1e:	b31b      	cbz	r3, 800af68 <_dtoa_r+0x7a0>
 800af20:	9b08      	ldr	r3, [sp, #32]
 800af22:	2b00      	cmp	r3, #0
 800af24:	f000 80af 	beq.w	800b086 <_dtoa_r+0x8be>
 800af28:	2e00      	cmp	r6, #0
 800af2a:	dd13      	ble.n	800af54 <_dtoa_r+0x78c>
 800af2c:	4639      	mov	r1, r7
 800af2e:	4632      	mov	r2, r6
 800af30:	4620      	mov	r0, r4
 800af32:	f000 fc09 	bl	800b748 <__pow5mult>
 800af36:	ee18 2a10 	vmov	r2, s16
 800af3a:	4601      	mov	r1, r0
 800af3c:	4607      	mov	r7, r0
 800af3e:	4620      	mov	r0, r4
 800af40:	f000 fb58 	bl	800b5f4 <__multiply>
 800af44:	ee18 1a10 	vmov	r1, s16
 800af48:	4680      	mov	r8, r0
 800af4a:	4620      	mov	r0, r4
 800af4c:	f000 fa84 	bl	800b458 <_Bfree>
 800af50:	ee08 8a10 	vmov	s16, r8
 800af54:	9b07      	ldr	r3, [sp, #28]
 800af56:	1b9a      	subs	r2, r3, r6
 800af58:	d006      	beq.n	800af68 <_dtoa_r+0x7a0>
 800af5a:	ee18 1a10 	vmov	r1, s16
 800af5e:	4620      	mov	r0, r4
 800af60:	f000 fbf2 	bl	800b748 <__pow5mult>
 800af64:	ee08 0a10 	vmov	s16, r0
 800af68:	2101      	movs	r1, #1
 800af6a:	4620      	mov	r0, r4
 800af6c:	f000 fb2c 	bl	800b5c8 <__i2b>
 800af70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af72:	2b00      	cmp	r3, #0
 800af74:	4606      	mov	r6, r0
 800af76:	f340 8088 	ble.w	800b08a <_dtoa_r+0x8c2>
 800af7a:	461a      	mov	r2, r3
 800af7c:	4601      	mov	r1, r0
 800af7e:	4620      	mov	r0, r4
 800af80:	f000 fbe2 	bl	800b748 <__pow5mult>
 800af84:	9b06      	ldr	r3, [sp, #24]
 800af86:	2b01      	cmp	r3, #1
 800af88:	4606      	mov	r6, r0
 800af8a:	f340 8081 	ble.w	800b090 <_dtoa_r+0x8c8>
 800af8e:	f04f 0800 	mov.w	r8, #0
 800af92:	6933      	ldr	r3, [r6, #16]
 800af94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800af98:	6918      	ldr	r0, [r3, #16]
 800af9a:	f000 fac5 	bl	800b528 <__hi0bits>
 800af9e:	f1c0 0020 	rsb	r0, r0, #32
 800afa2:	9b05      	ldr	r3, [sp, #20]
 800afa4:	4418      	add	r0, r3
 800afa6:	f010 001f 	ands.w	r0, r0, #31
 800afaa:	f000 8092 	beq.w	800b0d2 <_dtoa_r+0x90a>
 800afae:	f1c0 0320 	rsb	r3, r0, #32
 800afb2:	2b04      	cmp	r3, #4
 800afb4:	f340 808a 	ble.w	800b0cc <_dtoa_r+0x904>
 800afb8:	f1c0 001c 	rsb	r0, r0, #28
 800afbc:	9b04      	ldr	r3, [sp, #16]
 800afbe:	4403      	add	r3, r0
 800afc0:	9304      	str	r3, [sp, #16]
 800afc2:	9b05      	ldr	r3, [sp, #20]
 800afc4:	4403      	add	r3, r0
 800afc6:	4405      	add	r5, r0
 800afc8:	9305      	str	r3, [sp, #20]
 800afca:	9b04      	ldr	r3, [sp, #16]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	dd07      	ble.n	800afe0 <_dtoa_r+0x818>
 800afd0:	ee18 1a10 	vmov	r1, s16
 800afd4:	461a      	mov	r2, r3
 800afd6:	4620      	mov	r0, r4
 800afd8:	f000 fc10 	bl	800b7fc <__lshift>
 800afdc:	ee08 0a10 	vmov	s16, r0
 800afe0:	9b05      	ldr	r3, [sp, #20]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	dd05      	ble.n	800aff2 <_dtoa_r+0x82a>
 800afe6:	4631      	mov	r1, r6
 800afe8:	461a      	mov	r2, r3
 800afea:	4620      	mov	r0, r4
 800afec:	f000 fc06 	bl	800b7fc <__lshift>
 800aff0:	4606      	mov	r6, r0
 800aff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d06e      	beq.n	800b0d6 <_dtoa_r+0x90e>
 800aff8:	ee18 0a10 	vmov	r0, s16
 800affc:	4631      	mov	r1, r6
 800affe:	f000 fc6d 	bl	800b8dc <__mcmp>
 800b002:	2800      	cmp	r0, #0
 800b004:	da67      	bge.n	800b0d6 <_dtoa_r+0x90e>
 800b006:	9b00      	ldr	r3, [sp, #0]
 800b008:	3b01      	subs	r3, #1
 800b00a:	ee18 1a10 	vmov	r1, s16
 800b00e:	9300      	str	r3, [sp, #0]
 800b010:	220a      	movs	r2, #10
 800b012:	2300      	movs	r3, #0
 800b014:	4620      	mov	r0, r4
 800b016:	f000 fa41 	bl	800b49c <__multadd>
 800b01a:	9b08      	ldr	r3, [sp, #32]
 800b01c:	ee08 0a10 	vmov	s16, r0
 800b020:	2b00      	cmp	r3, #0
 800b022:	f000 81b1 	beq.w	800b388 <_dtoa_r+0xbc0>
 800b026:	2300      	movs	r3, #0
 800b028:	4639      	mov	r1, r7
 800b02a:	220a      	movs	r2, #10
 800b02c:	4620      	mov	r0, r4
 800b02e:	f000 fa35 	bl	800b49c <__multadd>
 800b032:	9b02      	ldr	r3, [sp, #8]
 800b034:	2b00      	cmp	r3, #0
 800b036:	4607      	mov	r7, r0
 800b038:	f300 808e 	bgt.w	800b158 <_dtoa_r+0x990>
 800b03c:	9b06      	ldr	r3, [sp, #24]
 800b03e:	2b02      	cmp	r3, #2
 800b040:	dc51      	bgt.n	800b0e6 <_dtoa_r+0x91e>
 800b042:	e089      	b.n	800b158 <_dtoa_r+0x990>
 800b044:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b046:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b04a:	e74b      	b.n	800aee4 <_dtoa_r+0x71c>
 800b04c:	9b03      	ldr	r3, [sp, #12]
 800b04e:	1e5e      	subs	r6, r3, #1
 800b050:	9b07      	ldr	r3, [sp, #28]
 800b052:	42b3      	cmp	r3, r6
 800b054:	bfbf      	itttt	lt
 800b056:	9b07      	ldrlt	r3, [sp, #28]
 800b058:	9607      	strlt	r6, [sp, #28]
 800b05a:	1af2      	sublt	r2, r6, r3
 800b05c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b05e:	bfb6      	itet	lt
 800b060:	189b      	addlt	r3, r3, r2
 800b062:	1b9e      	subge	r6, r3, r6
 800b064:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b066:	9b03      	ldr	r3, [sp, #12]
 800b068:	bfb8      	it	lt
 800b06a:	2600      	movlt	r6, #0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	bfb7      	itett	lt
 800b070:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b074:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b078:	1a9d      	sublt	r5, r3, r2
 800b07a:	2300      	movlt	r3, #0
 800b07c:	e734      	b.n	800aee8 <_dtoa_r+0x720>
 800b07e:	9e07      	ldr	r6, [sp, #28]
 800b080:	9d04      	ldr	r5, [sp, #16]
 800b082:	9f08      	ldr	r7, [sp, #32]
 800b084:	e73b      	b.n	800aefe <_dtoa_r+0x736>
 800b086:	9a07      	ldr	r2, [sp, #28]
 800b088:	e767      	b.n	800af5a <_dtoa_r+0x792>
 800b08a:	9b06      	ldr	r3, [sp, #24]
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	dc18      	bgt.n	800b0c2 <_dtoa_r+0x8fa>
 800b090:	f1ba 0f00 	cmp.w	sl, #0
 800b094:	d115      	bne.n	800b0c2 <_dtoa_r+0x8fa>
 800b096:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b09a:	b993      	cbnz	r3, 800b0c2 <_dtoa_r+0x8fa>
 800b09c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b0a0:	0d1b      	lsrs	r3, r3, #20
 800b0a2:	051b      	lsls	r3, r3, #20
 800b0a4:	b183      	cbz	r3, 800b0c8 <_dtoa_r+0x900>
 800b0a6:	9b04      	ldr	r3, [sp, #16]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	9304      	str	r3, [sp, #16]
 800b0ac:	9b05      	ldr	r3, [sp, #20]
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	9305      	str	r3, [sp, #20]
 800b0b2:	f04f 0801 	mov.w	r8, #1
 800b0b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	f47f af6a 	bne.w	800af92 <_dtoa_r+0x7ca>
 800b0be:	2001      	movs	r0, #1
 800b0c0:	e76f      	b.n	800afa2 <_dtoa_r+0x7da>
 800b0c2:	f04f 0800 	mov.w	r8, #0
 800b0c6:	e7f6      	b.n	800b0b6 <_dtoa_r+0x8ee>
 800b0c8:	4698      	mov	r8, r3
 800b0ca:	e7f4      	b.n	800b0b6 <_dtoa_r+0x8ee>
 800b0cc:	f43f af7d 	beq.w	800afca <_dtoa_r+0x802>
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	301c      	adds	r0, #28
 800b0d4:	e772      	b.n	800afbc <_dtoa_r+0x7f4>
 800b0d6:	9b03      	ldr	r3, [sp, #12]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	dc37      	bgt.n	800b14c <_dtoa_r+0x984>
 800b0dc:	9b06      	ldr	r3, [sp, #24]
 800b0de:	2b02      	cmp	r3, #2
 800b0e0:	dd34      	ble.n	800b14c <_dtoa_r+0x984>
 800b0e2:	9b03      	ldr	r3, [sp, #12]
 800b0e4:	9302      	str	r3, [sp, #8]
 800b0e6:	9b02      	ldr	r3, [sp, #8]
 800b0e8:	b96b      	cbnz	r3, 800b106 <_dtoa_r+0x93e>
 800b0ea:	4631      	mov	r1, r6
 800b0ec:	2205      	movs	r2, #5
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f000 f9d4 	bl	800b49c <__multadd>
 800b0f4:	4601      	mov	r1, r0
 800b0f6:	4606      	mov	r6, r0
 800b0f8:	ee18 0a10 	vmov	r0, s16
 800b0fc:	f000 fbee 	bl	800b8dc <__mcmp>
 800b100:	2800      	cmp	r0, #0
 800b102:	f73f adbb 	bgt.w	800ac7c <_dtoa_r+0x4b4>
 800b106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b108:	9d01      	ldr	r5, [sp, #4]
 800b10a:	43db      	mvns	r3, r3
 800b10c:	9300      	str	r3, [sp, #0]
 800b10e:	f04f 0800 	mov.w	r8, #0
 800b112:	4631      	mov	r1, r6
 800b114:	4620      	mov	r0, r4
 800b116:	f000 f99f 	bl	800b458 <_Bfree>
 800b11a:	2f00      	cmp	r7, #0
 800b11c:	f43f aea4 	beq.w	800ae68 <_dtoa_r+0x6a0>
 800b120:	f1b8 0f00 	cmp.w	r8, #0
 800b124:	d005      	beq.n	800b132 <_dtoa_r+0x96a>
 800b126:	45b8      	cmp	r8, r7
 800b128:	d003      	beq.n	800b132 <_dtoa_r+0x96a>
 800b12a:	4641      	mov	r1, r8
 800b12c:	4620      	mov	r0, r4
 800b12e:	f000 f993 	bl	800b458 <_Bfree>
 800b132:	4639      	mov	r1, r7
 800b134:	4620      	mov	r0, r4
 800b136:	f000 f98f 	bl	800b458 <_Bfree>
 800b13a:	e695      	b.n	800ae68 <_dtoa_r+0x6a0>
 800b13c:	2600      	movs	r6, #0
 800b13e:	4637      	mov	r7, r6
 800b140:	e7e1      	b.n	800b106 <_dtoa_r+0x93e>
 800b142:	9700      	str	r7, [sp, #0]
 800b144:	4637      	mov	r7, r6
 800b146:	e599      	b.n	800ac7c <_dtoa_r+0x4b4>
 800b148:	40240000 	.word	0x40240000
 800b14c:	9b08      	ldr	r3, [sp, #32]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f000 80ca 	beq.w	800b2e8 <_dtoa_r+0xb20>
 800b154:	9b03      	ldr	r3, [sp, #12]
 800b156:	9302      	str	r3, [sp, #8]
 800b158:	2d00      	cmp	r5, #0
 800b15a:	dd05      	ble.n	800b168 <_dtoa_r+0x9a0>
 800b15c:	4639      	mov	r1, r7
 800b15e:	462a      	mov	r2, r5
 800b160:	4620      	mov	r0, r4
 800b162:	f000 fb4b 	bl	800b7fc <__lshift>
 800b166:	4607      	mov	r7, r0
 800b168:	f1b8 0f00 	cmp.w	r8, #0
 800b16c:	d05b      	beq.n	800b226 <_dtoa_r+0xa5e>
 800b16e:	6879      	ldr	r1, [r7, #4]
 800b170:	4620      	mov	r0, r4
 800b172:	f000 f931 	bl	800b3d8 <_Balloc>
 800b176:	4605      	mov	r5, r0
 800b178:	b928      	cbnz	r0, 800b186 <_dtoa_r+0x9be>
 800b17a:	4b87      	ldr	r3, [pc, #540]	; (800b398 <_dtoa_r+0xbd0>)
 800b17c:	4602      	mov	r2, r0
 800b17e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b182:	f7ff bb3b 	b.w	800a7fc <_dtoa_r+0x34>
 800b186:	693a      	ldr	r2, [r7, #16]
 800b188:	3202      	adds	r2, #2
 800b18a:	0092      	lsls	r2, r2, #2
 800b18c:	f107 010c 	add.w	r1, r7, #12
 800b190:	300c      	adds	r0, #12
 800b192:	f000 f913 	bl	800b3bc <memcpy>
 800b196:	2201      	movs	r2, #1
 800b198:	4629      	mov	r1, r5
 800b19a:	4620      	mov	r0, r4
 800b19c:	f000 fb2e 	bl	800b7fc <__lshift>
 800b1a0:	9b01      	ldr	r3, [sp, #4]
 800b1a2:	f103 0901 	add.w	r9, r3, #1
 800b1a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	9305      	str	r3, [sp, #20]
 800b1ae:	f00a 0301 	and.w	r3, sl, #1
 800b1b2:	46b8      	mov	r8, r7
 800b1b4:	9304      	str	r3, [sp, #16]
 800b1b6:	4607      	mov	r7, r0
 800b1b8:	4631      	mov	r1, r6
 800b1ba:	ee18 0a10 	vmov	r0, s16
 800b1be:	f7ff fa75 	bl	800a6ac <quorem>
 800b1c2:	4641      	mov	r1, r8
 800b1c4:	9002      	str	r0, [sp, #8]
 800b1c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b1ca:	ee18 0a10 	vmov	r0, s16
 800b1ce:	f000 fb85 	bl	800b8dc <__mcmp>
 800b1d2:	463a      	mov	r2, r7
 800b1d4:	9003      	str	r0, [sp, #12]
 800b1d6:	4631      	mov	r1, r6
 800b1d8:	4620      	mov	r0, r4
 800b1da:	f000 fb9b 	bl	800b914 <__mdiff>
 800b1de:	68c2      	ldr	r2, [r0, #12]
 800b1e0:	f109 3bff 	add.w	fp, r9, #4294967295
 800b1e4:	4605      	mov	r5, r0
 800b1e6:	bb02      	cbnz	r2, 800b22a <_dtoa_r+0xa62>
 800b1e8:	4601      	mov	r1, r0
 800b1ea:	ee18 0a10 	vmov	r0, s16
 800b1ee:	f000 fb75 	bl	800b8dc <__mcmp>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	4629      	mov	r1, r5
 800b1f6:	4620      	mov	r0, r4
 800b1f8:	9207      	str	r2, [sp, #28]
 800b1fa:	f000 f92d 	bl	800b458 <_Bfree>
 800b1fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b202:	ea43 0102 	orr.w	r1, r3, r2
 800b206:	9b04      	ldr	r3, [sp, #16]
 800b208:	430b      	orrs	r3, r1
 800b20a:	464d      	mov	r5, r9
 800b20c:	d10f      	bne.n	800b22e <_dtoa_r+0xa66>
 800b20e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b212:	d02a      	beq.n	800b26a <_dtoa_r+0xaa2>
 800b214:	9b03      	ldr	r3, [sp, #12]
 800b216:	2b00      	cmp	r3, #0
 800b218:	dd02      	ble.n	800b220 <_dtoa_r+0xa58>
 800b21a:	9b02      	ldr	r3, [sp, #8]
 800b21c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b220:	f88b a000 	strb.w	sl, [fp]
 800b224:	e775      	b.n	800b112 <_dtoa_r+0x94a>
 800b226:	4638      	mov	r0, r7
 800b228:	e7ba      	b.n	800b1a0 <_dtoa_r+0x9d8>
 800b22a:	2201      	movs	r2, #1
 800b22c:	e7e2      	b.n	800b1f4 <_dtoa_r+0xa2c>
 800b22e:	9b03      	ldr	r3, [sp, #12]
 800b230:	2b00      	cmp	r3, #0
 800b232:	db04      	blt.n	800b23e <_dtoa_r+0xa76>
 800b234:	9906      	ldr	r1, [sp, #24]
 800b236:	430b      	orrs	r3, r1
 800b238:	9904      	ldr	r1, [sp, #16]
 800b23a:	430b      	orrs	r3, r1
 800b23c:	d122      	bne.n	800b284 <_dtoa_r+0xabc>
 800b23e:	2a00      	cmp	r2, #0
 800b240:	ddee      	ble.n	800b220 <_dtoa_r+0xa58>
 800b242:	ee18 1a10 	vmov	r1, s16
 800b246:	2201      	movs	r2, #1
 800b248:	4620      	mov	r0, r4
 800b24a:	f000 fad7 	bl	800b7fc <__lshift>
 800b24e:	4631      	mov	r1, r6
 800b250:	ee08 0a10 	vmov	s16, r0
 800b254:	f000 fb42 	bl	800b8dc <__mcmp>
 800b258:	2800      	cmp	r0, #0
 800b25a:	dc03      	bgt.n	800b264 <_dtoa_r+0xa9c>
 800b25c:	d1e0      	bne.n	800b220 <_dtoa_r+0xa58>
 800b25e:	f01a 0f01 	tst.w	sl, #1
 800b262:	d0dd      	beq.n	800b220 <_dtoa_r+0xa58>
 800b264:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b268:	d1d7      	bne.n	800b21a <_dtoa_r+0xa52>
 800b26a:	2339      	movs	r3, #57	; 0x39
 800b26c:	f88b 3000 	strb.w	r3, [fp]
 800b270:	462b      	mov	r3, r5
 800b272:	461d      	mov	r5, r3
 800b274:	3b01      	subs	r3, #1
 800b276:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b27a:	2a39      	cmp	r2, #57	; 0x39
 800b27c:	d071      	beq.n	800b362 <_dtoa_r+0xb9a>
 800b27e:	3201      	adds	r2, #1
 800b280:	701a      	strb	r2, [r3, #0]
 800b282:	e746      	b.n	800b112 <_dtoa_r+0x94a>
 800b284:	2a00      	cmp	r2, #0
 800b286:	dd07      	ble.n	800b298 <_dtoa_r+0xad0>
 800b288:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b28c:	d0ed      	beq.n	800b26a <_dtoa_r+0xaa2>
 800b28e:	f10a 0301 	add.w	r3, sl, #1
 800b292:	f88b 3000 	strb.w	r3, [fp]
 800b296:	e73c      	b.n	800b112 <_dtoa_r+0x94a>
 800b298:	9b05      	ldr	r3, [sp, #20]
 800b29a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b29e:	4599      	cmp	r9, r3
 800b2a0:	d047      	beq.n	800b332 <_dtoa_r+0xb6a>
 800b2a2:	ee18 1a10 	vmov	r1, s16
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	220a      	movs	r2, #10
 800b2aa:	4620      	mov	r0, r4
 800b2ac:	f000 f8f6 	bl	800b49c <__multadd>
 800b2b0:	45b8      	cmp	r8, r7
 800b2b2:	ee08 0a10 	vmov	s16, r0
 800b2b6:	f04f 0300 	mov.w	r3, #0
 800b2ba:	f04f 020a 	mov.w	r2, #10
 800b2be:	4641      	mov	r1, r8
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	d106      	bne.n	800b2d2 <_dtoa_r+0xb0a>
 800b2c4:	f000 f8ea 	bl	800b49c <__multadd>
 800b2c8:	4680      	mov	r8, r0
 800b2ca:	4607      	mov	r7, r0
 800b2cc:	f109 0901 	add.w	r9, r9, #1
 800b2d0:	e772      	b.n	800b1b8 <_dtoa_r+0x9f0>
 800b2d2:	f000 f8e3 	bl	800b49c <__multadd>
 800b2d6:	4639      	mov	r1, r7
 800b2d8:	4680      	mov	r8, r0
 800b2da:	2300      	movs	r3, #0
 800b2dc:	220a      	movs	r2, #10
 800b2de:	4620      	mov	r0, r4
 800b2e0:	f000 f8dc 	bl	800b49c <__multadd>
 800b2e4:	4607      	mov	r7, r0
 800b2e6:	e7f1      	b.n	800b2cc <_dtoa_r+0xb04>
 800b2e8:	9b03      	ldr	r3, [sp, #12]
 800b2ea:	9302      	str	r3, [sp, #8]
 800b2ec:	9d01      	ldr	r5, [sp, #4]
 800b2ee:	ee18 0a10 	vmov	r0, s16
 800b2f2:	4631      	mov	r1, r6
 800b2f4:	f7ff f9da 	bl	800a6ac <quorem>
 800b2f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b2fc:	9b01      	ldr	r3, [sp, #4]
 800b2fe:	f805 ab01 	strb.w	sl, [r5], #1
 800b302:	1aea      	subs	r2, r5, r3
 800b304:	9b02      	ldr	r3, [sp, #8]
 800b306:	4293      	cmp	r3, r2
 800b308:	dd09      	ble.n	800b31e <_dtoa_r+0xb56>
 800b30a:	ee18 1a10 	vmov	r1, s16
 800b30e:	2300      	movs	r3, #0
 800b310:	220a      	movs	r2, #10
 800b312:	4620      	mov	r0, r4
 800b314:	f000 f8c2 	bl	800b49c <__multadd>
 800b318:	ee08 0a10 	vmov	s16, r0
 800b31c:	e7e7      	b.n	800b2ee <_dtoa_r+0xb26>
 800b31e:	9b02      	ldr	r3, [sp, #8]
 800b320:	2b00      	cmp	r3, #0
 800b322:	bfc8      	it	gt
 800b324:	461d      	movgt	r5, r3
 800b326:	9b01      	ldr	r3, [sp, #4]
 800b328:	bfd8      	it	le
 800b32a:	2501      	movle	r5, #1
 800b32c:	441d      	add	r5, r3
 800b32e:	f04f 0800 	mov.w	r8, #0
 800b332:	ee18 1a10 	vmov	r1, s16
 800b336:	2201      	movs	r2, #1
 800b338:	4620      	mov	r0, r4
 800b33a:	f000 fa5f 	bl	800b7fc <__lshift>
 800b33e:	4631      	mov	r1, r6
 800b340:	ee08 0a10 	vmov	s16, r0
 800b344:	f000 faca 	bl	800b8dc <__mcmp>
 800b348:	2800      	cmp	r0, #0
 800b34a:	dc91      	bgt.n	800b270 <_dtoa_r+0xaa8>
 800b34c:	d102      	bne.n	800b354 <_dtoa_r+0xb8c>
 800b34e:	f01a 0f01 	tst.w	sl, #1
 800b352:	d18d      	bne.n	800b270 <_dtoa_r+0xaa8>
 800b354:	462b      	mov	r3, r5
 800b356:	461d      	mov	r5, r3
 800b358:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b35c:	2a30      	cmp	r2, #48	; 0x30
 800b35e:	d0fa      	beq.n	800b356 <_dtoa_r+0xb8e>
 800b360:	e6d7      	b.n	800b112 <_dtoa_r+0x94a>
 800b362:	9a01      	ldr	r2, [sp, #4]
 800b364:	429a      	cmp	r2, r3
 800b366:	d184      	bne.n	800b272 <_dtoa_r+0xaaa>
 800b368:	9b00      	ldr	r3, [sp, #0]
 800b36a:	3301      	adds	r3, #1
 800b36c:	9300      	str	r3, [sp, #0]
 800b36e:	2331      	movs	r3, #49	; 0x31
 800b370:	7013      	strb	r3, [r2, #0]
 800b372:	e6ce      	b.n	800b112 <_dtoa_r+0x94a>
 800b374:	4b09      	ldr	r3, [pc, #36]	; (800b39c <_dtoa_r+0xbd4>)
 800b376:	f7ff ba95 	b.w	800a8a4 <_dtoa_r+0xdc>
 800b37a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	f47f aa6e 	bne.w	800a85e <_dtoa_r+0x96>
 800b382:	4b07      	ldr	r3, [pc, #28]	; (800b3a0 <_dtoa_r+0xbd8>)
 800b384:	f7ff ba8e 	b.w	800a8a4 <_dtoa_r+0xdc>
 800b388:	9b02      	ldr	r3, [sp, #8]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	dcae      	bgt.n	800b2ec <_dtoa_r+0xb24>
 800b38e:	9b06      	ldr	r3, [sp, #24]
 800b390:	2b02      	cmp	r3, #2
 800b392:	f73f aea8 	bgt.w	800b0e6 <_dtoa_r+0x91e>
 800b396:	e7a9      	b.n	800b2ec <_dtoa_r+0xb24>
 800b398:	0800d167 	.word	0x0800d167
 800b39c:	0800d0c4 	.word	0x0800d0c4
 800b3a0:	0800d0e8 	.word	0x0800d0e8

0800b3a4 <_localeconv_r>:
 800b3a4:	4800      	ldr	r0, [pc, #0]	; (800b3a8 <_localeconv_r+0x4>)
 800b3a6:	4770      	bx	lr
 800b3a8:	20000194 	.word	0x20000194

0800b3ac <malloc>:
 800b3ac:	4b02      	ldr	r3, [pc, #8]	; (800b3b8 <malloc+0xc>)
 800b3ae:	4601      	mov	r1, r0
 800b3b0:	6818      	ldr	r0, [r3, #0]
 800b3b2:	f000 bc17 	b.w	800bbe4 <_malloc_r>
 800b3b6:	bf00      	nop
 800b3b8:	20000040 	.word	0x20000040

0800b3bc <memcpy>:
 800b3bc:	440a      	add	r2, r1
 800b3be:	4291      	cmp	r1, r2
 800b3c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3c4:	d100      	bne.n	800b3c8 <memcpy+0xc>
 800b3c6:	4770      	bx	lr
 800b3c8:	b510      	push	{r4, lr}
 800b3ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3d2:	4291      	cmp	r1, r2
 800b3d4:	d1f9      	bne.n	800b3ca <memcpy+0xe>
 800b3d6:	bd10      	pop	{r4, pc}

0800b3d8 <_Balloc>:
 800b3d8:	b570      	push	{r4, r5, r6, lr}
 800b3da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b3dc:	4604      	mov	r4, r0
 800b3de:	460d      	mov	r5, r1
 800b3e0:	b976      	cbnz	r6, 800b400 <_Balloc+0x28>
 800b3e2:	2010      	movs	r0, #16
 800b3e4:	f7ff ffe2 	bl	800b3ac <malloc>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	6260      	str	r0, [r4, #36]	; 0x24
 800b3ec:	b920      	cbnz	r0, 800b3f8 <_Balloc+0x20>
 800b3ee:	4b18      	ldr	r3, [pc, #96]	; (800b450 <_Balloc+0x78>)
 800b3f0:	4818      	ldr	r0, [pc, #96]	; (800b454 <_Balloc+0x7c>)
 800b3f2:	2166      	movs	r1, #102	; 0x66
 800b3f4:	f000 fdd6 	bl	800bfa4 <__assert_func>
 800b3f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3fc:	6006      	str	r6, [r0, #0]
 800b3fe:	60c6      	str	r6, [r0, #12]
 800b400:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b402:	68f3      	ldr	r3, [r6, #12]
 800b404:	b183      	cbz	r3, 800b428 <_Balloc+0x50>
 800b406:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b40e:	b9b8      	cbnz	r0, 800b440 <_Balloc+0x68>
 800b410:	2101      	movs	r1, #1
 800b412:	fa01 f605 	lsl.w	r6, r1, r5
 800b416:	1d72      	adds	r2, r6, #5
 800b418:	0092      	lsls	r2, r2, #2
 800b41a:	4620      	mov	r0, r4
 800b41c:	f000 fb60 	bl	800bae0 <_calloc_r>
 800b420:	b160      	cbz	r0, 800b43c <_Balloc+0x64>
 800b422:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b426:	e00e      	b.n	800b446 <_Balloc+0x6e>
 800b428:	2221      	movs	r2, #33	; 0x21
 800b42a:	2104      	movs	r1, #4
 800b42c:	4620      	mov	r0, r4
 800b42e:	f000 fb57 	bl	800bae0 <_calloc_r>
 800b432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b434:	60f0      	str	r0, [r6, #12]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d1e4      	bne.n	800b406 <_Balloc+0x2e>
 800b43c:	2000      	movs	r0, #0
 800b43e:	bd70      	pop	{r4, r5, r6, pc}
 800b440:	6802      	ldr	r2, [r0, #0]
 800b442:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b446:	2300      	movs	r3, #0
 800b448:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b44c:	e7f7      	b.n	800b43e <_Balloc+0x66>
 800b44e:	bf00      	nop
 800b450:	0800d0f5 	.word	0x0800d0f5
 800b454:	0800d178 	.word	0x0800d178

0800b458 <_Bfree>:
 800b458:	b570      	push	{r4, r5, r6, lr}
 800b45a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b45c:	4605      	mov	r5, r0
 800b45e:	460c      	mov	r4, r1
 800b460:	b976      	cbnz	r6, 800b480 <_Bfree+0x28>
 800b462:	2010      	movs	r0, #16
 800b464:	f7ff ffa2 	bl	800b3ac <malloc>
 800b468:	4602      	mov	r2, r0
 800b46a:	6268      	str	r0, [r5, #36]	; 0x24
 800b46c:	b920      	cbnz	r0, 800b478 <_Bfree+0x20>
 800b46e:	4b09      	ldr	r3, [pc, #36]	; (800b494 <_Bfree+0x3c>)
 800b470:	4809      	ldr	r0, [pc, #36]	; (800b498 <_Bfree+0x40>)
 800b472:	218a      	movs	r1, #138	; 0x8a
 800b474:	f000 fd96 	bl	800bfa4 <__assert_func>
 800b478:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b47c:	6006      	str	r6, [r0, #0]
 800b47e:	60c6      	str	r6, [r0, #12]
 800b480:	b13c      	cbz	r4, 800b492 <_Bfree+0x3a>
 800b482:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b484:	6862      	ldr	r2, [r4, #4]
 800b486:	68db      	ldr	r3, [r3, #12]
 800b488:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b48c:	6021      	str	r1, [r4, #0]
 800b48e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b492:	bd70      	pop	{r4, r5, r6, pc}
 800b494:	0800d0f5 	.word	0x0800d0f5
 800b498:	0800d178 	.word	0x0800d178

0800b49c <__multadd>:
 800b49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4a0:	690d      	ldr	r5, [r1, #16]
 800b4a2:	4607      	mov	r7, r0
 800b4a4:	460c      	mov	r4, r1
 800b4a6:	461e      	mov	r6, r3
 800b4a8:	f101 0c14 	add.w	ip, r1, #20
 800b4ac:	2000      	movs	r0, #0
 800b4ae:	f8dc 3000 	ldr.w	r3, [ip]
 800b4b2:	b299      	uxth	r1, r3
 800b4b4:	fb02 6101 	mla	r1, r2, r1, r6
 800b4b8:	0c1e      	lsrs	r6, r3, #16
 800b4ba:	0c0b      	lsrs	r3, r1, #16
 800b4bc:	fb02 3306 	mla	r3, r2, r6, r3
 800b4c0:	b289      	uxth	r1, r1
 800b4c2:	3001      	adds	r0, #1
 800b4c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b4c8:	4285      	cmp	r5, r0
 800b4ca:	f84c 1b04 	str.w	r1, [ip], #4
 800b4ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b4d2:	dcec      	bgt.n	800b4ae <__multadd+0x12>
 800b4d4:	b30e      	cbz	r6, 800b51a <__multadd+0x7e>
 800b4d6:	68a3      	ldr	r3, [r4, #8]
 800b4d8:	42ab      	cmp	r3, r5
 800b4da:	dc19      	bgt.n	800b510 <__multadd+0x74>
 800b4dc:	6861      	ldr	r1, [r4, #4]
 800b4de:	4638      	mov	r0, r7
 800b4e0:	3101      	adds	r1, #1
 800b4e2:	f7ff ff79 	bl	800b3d8 <_Balloc>
 800b4e6:	4680      	mov	r8, r0
 800b4e8:	b928      	cbnz	r0, 800b4f6 <__multadd+0x5a>
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	4b0c      	ldr	r3, [pc, #48]	; (800b520 <__multadd+0x84>)
 800b4ee:	480d      	ldr	r0, [pc, #52]	; (800b524 <__multadd+0x88>)
 800b4f0:	21b5      	movs	r1, #181	; 0xb5
 800b4f2:	f000 fd57 	bl	800bfa4 <__assert_func>
 800b4f6:	6922      	ldr	r2, [r4, #16]
 800b4f8:	3202      	adds	r2, #2
 800b4fa:	f104 010c 	add.w	r1, r4, #12
 800b4fe:	0092      	lsls	r2, r2, #2
 800b500:	300c      	adds	r0, #12
 800b502:	f7ff ff5b 	bl	800b3bc <memcpy>
 800b506:	4621      	mov	r1, r4
 800b508:	4638      	mov	r0, r7
 800b50a:	f7ff ffa5 	bl	800b458 <_Bfree>
 800b50e:	4644      	mov	r4, r8
 800b510:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b514:	3501      	adds	r5, #1
 800b516:	615e      	str	r6, [r3, #20]
 800b518:	6125      	str	r5, [r4, #16]
 800b51a:	4620      	mov	r0, r4
 800b51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b520:	0800d167 	.word	0x0800d167
 800b524:	0800d178 	.word	0x0800d178

0800b528 <__hi0bits>:
 800b528:	0c03      	lsrs	r3, r0, #16
 800b52a:	041b      	lsls	r3, r3, #16
 800b52c:	b9d3      	cbnz	r3, 800b564 <__hi0bits+0x3c>
 800b52e:	0400      	lsls	r0, r0, #16
 800b530:	2310      	movs	r3, #16
 800b532:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b536:	bf04      	itt	eq
 800b538:	0200      	lsleq	r0, r0, #8
 800b53a:	3308      	addeq	r3, #8
 800b53c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b540:	bf04      	itt	eq
 800b542:	0100      	lsleq	r0, r0, #4
 800b544:	3304      	addeq	r3, #4
 800b546:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b54a:	bf04      	itt	eq
 800b54c:	0080      	lsleq	r0, r0, #2
 800b54e:	3302      	addeq	r3, #2
 800b550:	2800      	cmp	r0, #0
 800b552:	db05      	blt.n	800b560 <__hi0bits+0x38>
 800b554:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b558:	f103 0301 	add.w	r3, r3, #1
 800b55c:	bf08      	it	eq
 800b55e:	2320      	moveq	r3, #32
 800b560:	4618      	mov	r0, r3
 800b562:	4770      	bx	lr
 800b564:	2300      	movs	r3, #0
 800b566:	e7e4      	b.n	800b532 <__hi0bits+0xa>

0800b568 <__lo0bits>:
 800b568:	6803      	ldr	r3, [r0, #0]
 800b56a:	f013 0207 	ands.w	r2, r3, #7
 800b56e:	4601      	mov	r1, r0
 800b570:	d00b      	beq.n	800b58a <__lo0bits+0x22>
 800b572:	07da      	lsls	r2, r3, #31
 800b574:	d423      	bmi.n	800b5be <__lo0bits+0x56>
 800b576:	0798      	lsls	r0, r3, #30
 800b578:	bf49      	itett	mi
 800b57a:	085b      	lsrmi	r3, r3, #1
 800b57c:	089b      	lsrpl	r3, r3, #2
 800b57e:	2001      	movmi	r0, #1
 800b580:	600b      	strmi	r3, [r1, #0]
 800b582:	bf5c      	itt	pl
 800b584:	600b      	strpl	r3, [r1, #0]
 800b586:	2002      	movpl	r0, #2
 800b588:	4770      	bx	lr
 800b58a:	b298      	uxth	r0, r3
 800b58c:	b9a8      	cbnz	r0, 800b5ba <__lo0bits+0x52>
 800b58e:	0c1b      	lsrs	r3, r3, #16
 800b590:	2010      	movs	r0, #16
 800b592:	b2da      	uxtb	r2, r3
 800b594:	b90a      	cbnz	r2, 800b59a <__lo0bits+0x32>
 800b596:	3008      	adds	r0, #8
 800b598:	0a1b      	lsrs	r3, r3, #8
 800b59a:	071a      	lsls	r2, r3, #28
 800b59c:	bf04      	itt	eq
 800b59e:	091b      	lsreq	r3, r3, #4
 800b5a0:	3004      	addeq	r0, #4
 800b5a2:	079a      	lsls	r2, r3, #30
 800b5a4:	bf04      	itt	eq
 800b5a6:	089b      	lsreq	r3, r3, #2
 800b5a8:	3002      	addeq	r0, #2
 800b5aa:	07da      	lsls	r2, r3, #31
 800b5ac:	d403      	bmi.n	800b5b6 <__lo0bits+0x4e>
 800b5ae:	085b      	lsrs	r3, r3, #1
 800b5b0:	f100 0001 	add.w	r0, r0, #1
 800b5b4:	d005      	beq.n	800b5c2 <__lo0bits+0x5a>
 800b5b6:	600b      	str	r3, [r1, #0]
 800b5b8:	4770      	bx	lr
 800b5ba:	4610      	mov	r0, r2
 800b5bc:	e7e9      	b.n	800b592 <__lo0bits+0x2a>
 800b5be:	2000      	movs	r0, #0
 800b5c0:	4770      	bx	lr
 800b5c2:	2020      	movs	r0, #32
 800b5c4:	4770      	bx	lr
	...

0800b5c8 <__i2b>:
 800b5c8:	b510      	push	{r4, lr}
 800b5ca:	460c      	mov	r4, r1
 800b5cc:	2101      	movs	r1, #1
 800b5ce:	f7ff ff03 	bl	800b3d8 <_Balloc>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	b928      	cbnz	r0, 800b5e2 <__i2b+0x1a>
 800b5d6:	4b05      	ldr	r3, [pc, #20]	; (800b5ec <__i2b+0x24>)
 800b5d8:	4805      	ldr	r0, [pc, #20]	; (800b5f0 <__i2b+0x28>)
 800b5da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b5de:	f000 fce1 	bl	800bfa4 <__assert_func>
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	6144      	str	r4, [r0, #20]
 800b5e6:	6103      	str	r3, [r0, #16]
 800b5e8:	bd10      	pop	{r4, pc}
 800b5ea:	bf00      	nop
 800b5ec:	0800d167 	.word	0x0800d167
 800b5f0:	0800d178 	.word	0x0800d178

0800b5f4 <__multiply>:
 800b5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f8:	4691      	mov	r9, r2
 800b5fa:	690a      	ldr	r2, [r1, #16]
 800b5fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b600:	429a      	cmp	r2, r3
 800b602:	bfb8      	it	lt
 800b604:	460b      	movlt	r3, r1
 800b606:	460c      	mov	r4, r1
 800b608:	bfbc      	itt	lt
 800b60a:	464c      	movlt	r4, r9
 800b60c:	4699      	movlt	r9, r3
 800b60e:	6927      	ldr	r7, [r4, #16]
 800b610:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b614:	68a3      	ldr	r3, [r4, #8]
 800b616:	6861      	ldr	r1, [r4, #4]
 800b618:	eb07 060a 	add.w	r6, r7, sl
 800b61c:	42b3      	cmp	r3, r6
 800b61e:	b085      	sub	sp, #20
 800b620:	bfb8      	it	lt
 800b622:	3101      	addlt	r1, #1
 800b624:	f7ff fed8 	bl	800b3d8 <_Balloc>
 800b628:	b930      	cbnz	r0, 800b638 <__multiply+0x44>
 800b62a:	4602      	mov	r2, r0
 800b62c:	4b44      	ldr	r3, [pc, #272]	; (800b740 <__multiply+0x14c>)
 800b62e:	4845      	ldr	r0, [pc, #276]	; (800b744 <__multiply+0x150>)
 800b630:	f240 115d 	movw	r1, #349	; 0x15d
 800b634:	f000 fcb6 	bl	800bfa4 <__assert_func>
 800b638:	f100 0514 	add.w	r5, r0, #20
 800b63c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b640:	462b      	mov	r3, r5
 800b642:	2200      	movs	r2, #0
 800b644:	4543      	cmp	r3, r8
 800b646:	d321      	bcc.n	800b68c <__multiply+0x98>
 800b648:	f104 0314 	add.w	r3, r4, #20
 800b64c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b650:	f109 0314 	add.w	r3, r9, #20
 800b654:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b658:	9202      	str	r2, [sp, #8]
 800b65a:	1b3a      	subs	r2, r7, r4
 800b65c:	3a15      	subs	r2, #21
 800b65e:	f022 0203 	bic.w	r2, r2, #3
 800b662:	3204      	adds	r2, #4
 800b664:	f104 0115 	add.w	r1, r4, #21
 800b668:	428f      	cmp	r7, r1
 800b66a:	bf38      	it	cc
 800b66c:	2204      	movcc	r2, #4
 800b66e:	9201      	str	r2, [sp, #4]
 800b670:	9a02      	ldr	r2, [sp, #8]
 800b672:	9303      	str	r3, [sp, #12]
 800b674:	429a      	cmp	r2, r3
 800b676:	d80c      	bhi.n	800b692 <__multiply+0x9e>
 800b678:	2e00      	cmp	r6, #0
 800b67a:	dd03      	ble.n	800b684 <__multiply+0x90>
 800b67c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b680:	2b00      	cmp	r3, #0
 800b682:	d05a      	beq.n	800b73a <__multiply+0x146>
 800b684:	6106      	str	r6, [r0, #16]
 800b686:	b005      	add	sp, #20
 800b688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b68c:	f843 2b04 	str.w	r2, [r3], #4
 800b690:	e7d8      	b.n	800b644 <__multiply+0x50>
 800b692:	f8b3 a000 	ldrh.w	sl, [r3]
 800b696:	f1ba 0f00 	cmp.w	sl, #0
 800b69a:	d024      	beq.n	800b6e6 <__multiply+0xf2>
 800b69c:	f104 0e14 	add.w	lr, r4, #20
 800b6a0:	46a9      	mov	r9, r5
 800b6a2:	f04f 0c00 	mov.w	ip, #0
 800b6a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b6aa:	f8d9 1000 	ldr.w	r1, [r9]
 800b6ae:	fa1f fb82 	uxth.w	fp, r2
 800b6b2:	b289      	uxth	r1, r1
 800b6b4:	fb0a 110b 	mla	r1, sl, fp, r1
 800b6b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b6bc:	f8d9 2000 	ldr.w	r2, [r9]
 800b6c0:	4461      	add	r1, ip
 800b6c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b6c6:	fb0a c20b 	mla	r2, sl, fp, ip
 800b6ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b6ce:	b289      	uxth	r1, r1
 800b6d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b6d4:	4577      	cmp	r7, lr
 800b6d6:	f849 1b04 	str.w	r1, [r9], #4
 800b6da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b6de:	d8e2      	bhi.n	800b6a6 <__multiply+0xb2>
 800b6e0:	9a01      	ldr	r2, [sp, #4]
 800b6e2:	f845 c002 	str.w	ip, [r5, r2]
 800b6e6:	9a03      	ldr	r2, [sp, #12]
 800b6e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b6ec:	3304      	adds	r3, #4
 800b6ee:	f1b9 0f00 	cmp.w	r9, #0
 800b6f2:	d020      	beq.n	800b736 <__multiply+0x142>
 800b6f4:	6829      	ldr	r1, [r5, #0]
 800b6f6:	f104 0c14 	add.w	ip, r4, #20
 800b6fa:	46ae      	mov	lr, r5
 800b6fc:	f04f 0a00 	mov.w	sl, #0
 800b700:	f8bc b000 	ldrh.w	fp, [ip]
 800b704:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b708:	fb09 220b 	mla	r2, r9, fp, r2
 800b70c:	4492      	add	sl, r2
 800b70e:	b289      	uxth	r1, r1
 800b710:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b714:	f84e 1b04 	str.w	r1, [lr], #4
 800b718:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b71c:	f8be 1000 	ldrh.w	r1, [lr]
 800b720:	0c12      	lsrs	r2, r2, #16
 800b722:	fb09 1102 	mla	r1, r9, r2, r1
 800b726:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b72a:	4567      	cmp	r7, ip
 800b72c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b730:	d8e6      	bhi.n	800b700 <__multiply+0x10c>
 800b732:	9a01      	ldr	r2, [sp, #4]
 800b734:	50a9      	str	r1, [r5, r2]
 800b736:	3504      	adds	r5, #4
 800b738:	e79a      	b.n	800b670 <__multiply+0x7c>
 800b73a:	3e01      	subs	r6, #1
 800b73c:	e79c      	b.n	800b678 <__multiply+0x84>
 800b73e:	bf00      	nop
 800b740:	0800d167 	.word	0x0800d167
 800b744:	0800d178 	.word	0x0800d178

0800b748 <__pow5mult>:
 800b748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b74c:	4615      	mov	r5, r2
 800b74e:	f012 0203 	ands.w	r2, r2, #3
 800b752:	4606      	mov	r6, r0
 800b754:	460f      	mov	r7, r1
 800b756:	d007      	beq.n	800b768 <__pow5mult+0x20>
 800b758:	4c25      	ldr	r4, [pc, #148]	; (800b7f0 <__pow5mult+0xa8>)
 800b75a:	3a01      	subs	r2, #1
 800b75c:	2300      	movs	r3, #0
 800b75e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b762:	f7ff fe9b 	bl	800b49c <__multadd>
 800b766:	4607      	mov	r7, r0
 800b768:	10ad      	asrs	r5, r5, #2
 800b76a:	d03d      	beq.n	800b7e8 <__pow5mult+0xa0>
 800b76c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b76e:	b97c      	cbnz	r4, 800b790 <__pow5mult+0x48>
 800b770:	2010      	movs	r0, #16
 800b772:	f7ff fe1b 	bl	800b3ac <malloc>
 800b776:	4602      	mov	r2, r0
 800b778:	6270      	str	r0, [r6, #36]	; 0x24
 800b77a:	b928      	cbnz	r0, 800b788 <__pow5mult+0x40>
 800b77c:	4b1d      	ldr	r3, [pc, #116]	; (800b7f4 <__pow5mult+0xac>)
 800b77e:	481e      	ldr	r0, [pc, #120]	; (800b7f8 <__pow5mult+0xb0>)
 800b780:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b784:	f000 fc0e 	bl	800bfa4 <__assert_func>
 800b788:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b78c:	6004      	str	r4, [r0, #0]
 800b78e:	60c4      	str	r4, [r0, #12]
 800b790:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b794:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b798:	b94c      	cbnz	r4, 800b7ae <__pow5mult+0x66>
 800b79a:	f240 2171 	movw	r1, #625	; 0x271
 800b79e:	4630      	mov	r0, r6
 800b7a0:	f7ff ff12 	bl	800b5c8 <__i2b>
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b7aa:	4604      	mov	r4, r0
 800b7ac:	6003      	str	r3, [r0, #0]
 800b7ae:	f04f 0900 	mov.w	r9, #0
 800b7b2:	07eb      	lsls	r3, r5, #31
 800b7b4:	d50a      	bpl.n	800b7cc <__pow5mult+0x84>
 800b7b6:	4639      	mov	r1, r7
 800b7b8:	4622      	mov	r2, r4
 800b7ba:	4630      	mov	r0, r6
 800b7bc:	f7ff ff1a 	bl	800b5f4 <__multiply>
 800b7c0:	4639      	mov	r1, r7
 800b7c2:	4680      	mov	r8, r0
 800b7c4:	4630      	mov	r0, r6
 800b7c6:	f7ff fe47 	bl	800b458 <_Bfree>
 800b7ca:	4647      	mov	r7, r8
 800b7cc:	106d      	asrs	r5, r5, #1
 800b7ce:	d00b      	beq.n	800b7e8 <__pow5mult+0xa0>
 800b7d0:	6820      	ldr	r0, [r4, #0]
 800b7d2:	b938      	cbnz	r0, 800b7e4 <__pow5mult+0x9c>
 800b7d4:	4622      	mov	r2, r4
 800b7d6:	4621      	mov	r1, r4
 800b7d8:	4630      	mov	r0, r6
 800b7da:	f7ff ff0b 	bl	800b5f4 <__multiply>
 800b7de:	6020      	str	r0, [r4, #0]
 800b7e0:	f8c0 9000 	str.w	r9, [r0]
 800b7e4:	4604      	mov	r4, r0
 800b7e6:	e7e4      	b.n	800b7b2 <__pow5mult+0x6a>
 800b7e8:	4638      	mov	r0, r7
 800b7ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7ee:	bf00      	nop
 800b7f0:	0800d2c8 	.word	0x0800d2c8
 800b7f4:	0800d0f5 	.word	0x0800d0f5
 800b7f8:	0800d178 	.word	0x0800d178

0800b7fc <__lshift>:
 800b7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b800:	460c      	mov	r4, r1
 800b802:	6849      	ldr	r1, [r1, #4]
 800b804:	6923      	ldr	r3, [r4, #16]
 800b806:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b80a:	68a3      	ldr	r3, [r4, #8]
 800b80c:	4607      	mov	r7, r0
 800b80e:	4691      	mov	r9, r2
 800b810:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b814:	f108 0601 	add.w	r6, r8, #1
 800b818:	42b3      	cmp	r3, r6
 800b81a:	db0b      	blt.n	800b834 <__lshift+0x38>
 800b81c:	4638      	mov	r0, r7
 800b81e:	f7ff fddb 	bl	800b3d8 <_Balloc>
 800b822:	4605      	mov	r5, r0
 800b824:	b948      	cbnz	r0, 800b83a <__lshift+0x3e>
 800b826:	4602      	mov	r2, r0
 800b828:	4b2a      	ldr	r3, [pc, #168]	; (800b8d4 <__lshift+0xd8>)
 800b82a:	482b      	ldr	r0, [pc, #172]	; (800b8d8 <__lshift+0xdc>)
 800b82c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b830:	f000 fbb8 	bl	800bfa4 <__assert_func>
 800b834:	3101      	adds	r1, #1
 800b836:	005b      	lsls	r3, r3, #1
 800b838:	e7ee      	b.n	800b818 <__lshift+0x1c>
 800b83a:	2300      	movs	r3, #0
 800b83c:	f100 0114 	add.w	r1, r0, #20
 800b840:	f100 0210 	add.w	r2, r0, #16
 800b844:	4618      	mov	r0, r3
 800b846:	4553      	cmp	r3, sl
 800b848:	db37      	blt.n	800b8ba <__lshift+0xbe>
 800b84a:	6920      	ldr	r0, [r4, #16]
 800b84c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b850:	f104 0314 	add.w	r3, r4, #20
 800b854:	f019 091f 	ands.w	r9, r9, #31
 800b858:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b85c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b860:	d02f      	beq.n	800b8c2 <__lshift+0xc6>
 800b862:	f1c9 0e20 	rsb	lr, r9, #32
 800b866:	468a      	mov	sl, r1
 800b868:	f04f 0c00 	mov.w	ip, #0
 800b86c:	681a      	ldr	r2, [r3, #0]
 800b86e:	fa02 f209 	lsl.w	r2, r2, r9
 800b872:	ea42 020c 	orr.w	r2, r2, ip
 800b876:	f84a 2b04 	str.w	r2, [sl], #4
 800b87a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b87e:	4298      	cmp	r0, r3
 800b880:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b884:	d8f2      	bhi.n	800b86c <__lshift+0x70>
 800b886:	1b03      	subs	r3, r0, r4
 800b888:	3b15      	subs	r3, #21
 800b88a:	f023 0303 	bic.w	r3, r3, #3
 800b88e:	3304      	adds	r3, #4
 800b890:	f104 0215 	add.w	r2, r4, #21
 800b894:	4290      	cmp	r0, r2
 800b896:	bf38      	it	cc
 800b898:	2304      	movcc	r3, #4
 800b89a:	f841 c003 	str.w	ip, [r1, r3]
 800b89e:	f1bc 0f00 	cmp.w	ip, #0
 800b8a2:	d001      	beq.n	800b8a8 <__lshift+0xac>
 800b8a4:	f108 0602 	add.w	r6, r8, #2
 800b8a8:	3e01      	subs	r6, #1
 800b8aa:	4638      	mov	r0, r7
 800b8ac:	612e      	str	r6, [r5, #16]
 800b8ae:	4621      	mov	r1, r4
 800b8b0:	f7ff fdd2 	bl	800b458 <_Bfree>
 800b8b4:	4628      	mov	r0, r5
 800b8b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800b8be:	3301      	adds	r3, #1
 800b8c0:	e7c1      	b.n	800b846 <__lshift+0x4a>
 800b8c2:	3904      	subs	r1, #4
 800b8c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b8cc:	4298      	cmp	r0, r3
 800b8ce:	d8f9      	bhi.n	800b8c4 <__lshift+0xc8>
 800b8d0:	e7ea      	b.n	800b8a8 <__lshift+0xac>
 800b8d2:	bf00      	nop
 800b8d4:	0800d167 	.word	0x0800d167
 800b8d8:	0800d178 	.word	0x0800d178

0800b8dc <__mcmp>:
 800b8dc:	b530      	push	{r4, r5, lr}
 800b8de:	6902      	ldr	r2, [r0, #16]
 800b8e0:	690c      	ldr	r4, [r1, #16]
 800b8e2:	1b12      	subs	r2, r2, r4
 800b8e4:	d10e      	bne.n	800b904 <__mcmp+0x28>
 800b8e6:	f100 0314 	add.w	r3, r0, #20
 800b8ea:	3114      	adds	r1, #20
 800b8ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b8f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b8f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b8f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b8fc:	42a5      	cmp	r5, r4
 800b8fe:	d003      	beq.n	800b908 <__mcmp+0x2c>
 800b900:	d305      	bcc.n	800b90e <__mcmp+0x32>
 800b902:	2201      	movs	r2, #1
 800b904:	4610      	mov	r0, r2
 800b906:	bd30      	pop	{r4, r5, pc}
 800b908:	4283      	cmp	r3, r0
 800b90a:	d3f3      	bcc.n	800b8f4 <__mcmp+0x18>
 800b90c:	e7fa      	b.n	800b904 <__mcmp+0x28>
 800b90e:	f04f 32ff 	mov.w	r2, #4294967295
 800b912:	e7f7      	b.n	800b904 <__mcmp+0x28>

0800b914 <__mdiff>:
 800b914:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b918:	460c      	mov	r4, r1
 800b91a:	4606      	mov	r6, r0
 800b91c:	4611      	mov	r1, r2
 800b91e:	4620      	mov	r0, r4
 800b920:	4690      	mov	r8, r2
 800b922:	f7ff ffdb 	bl	800b8dc <__mcmp>
 800b926:	1e05      	subs	r5, r0, #0
 800b928:	d110      	bne.n	800b94c <__mdiff+0x38>
 800b92a:	4629      	mov	r1, r5
 800b92c:	4630      	mov	r0, r6
 800b92e:	f7ff fd53 	bl	800b3d8 <_Balloc>
 800b932:	b930      	cbnz	r0, 800b942 <__mdiff+0x2e>
 800b934:	4b3a      	ldr	r3, [pc, #232]	; (800ba20 <__mdiff+0x10c>)
 800b936:	4602      	mov	r2, r0
 800b938:	f240 2132 	movw	r1, #562	; 0x232
 800b93c:	4839      	ldr	r0, [pc, #228]	; (800ba24 <__mdiff+0x110>)
 800b93e:	f000 fb31 	bl	800bfa4 <__assert_func>
 800b942:	2301      	movs	r3, #1
 800b944:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b948:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b94c:	bfa4      	itt	ge
 800b94e:	4643      	movge	r3, r8
 800b950:	46a0      	movge	r8, r4
 800b952:	4630      	mov	r0, r6
 800b954:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b958:	bfa6      	itte	ge
 800b95a:	461c      	movge	r4, r3
 800b95c:	2500      	movge	r5, #0
 800b95e:	2501      	movlt	r5, #1
 800b960:	f7ff fd3a 	bl	800b3d8 <_Balloc>
 800b964:	b920      	cbnz	r0, 800b970 <__mdiff+0x5c>
 800b966:	4b2e      	ldr	r3, [pc, #184]	; (800ba20 <__mdiff+0x10c>)
 800b968:	4602      	mov	r2, r0
 800b96a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b96e:	e7e5      	b.n	800b93c <__mdiff+0x28>
 800b970:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b974:	6926      	ldr	r6, [r4, #16]
 800b976:	60c5      	str	r5, [r0, #12]
 800b978:	f104 0914 	add.w	r9, r4, #20
 800b97c:	f108 0514 	add.w	r5, r8, #20
 800b980:	f100 0e14 	add.w	lr, r0, #20
 800b984:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b988:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b98c:	f108 0210 	add.w	r2, r8, #16
 800b990:	46f2      	mov	sl, lr
 800b992:	2100      	movs	r1, #0
 800b994:	f859 3b04 	ldr.w	r3, [r9], #4
 800b998:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b99c:	fa1f f883 	uxth.w	r8, r3
 800b9a0:	fa11 f18b 	uxtah	r1, r1, fp
 800b9a4:	0c1b      	lsrs	r3, r3, #16
 800b9a6:	eba1 0808 	sub.w	r8, r1, r8
 800b9aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b9ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b9b2:	fa1f f888 	uxth.w	r8, r8
 800b9b6:	1419      	asrs	r1, r3, #16
 800b9b8:	454e      	cmp	r6, r9
 800b9ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b9be:	f84a 3b04 	str.w	r3, [sl], #4
 800b9c2:	d8e7      	bhi.n	800b994 <__mdiff+0x80>
 800b9c4:	1b33      	subs	r3, r6, r4
 800b9c6:	3b15      	subs	r3, #21
 800b9c8:	f023 0303 	bic.w	r3, r3, #3
 800b9cc:	3304      	adds	r3, #4
 800b9ce:	3415      	adds	r4, #21
 800b9d0:	42a6      	cmp	r6, r4
 800b9d2:	bf38      	it	cc
 800b9d4:	2304      	movcc	r3, #4
 800b9d6:	441d      	add	r5, r3
 800b9d8:	4473      	add	r3, lr
 800b9da:	469e      	mov	lr, r3
 800b9dc:	462e      	mov	r6, r5
 800b9de:	4566      	cmp	r6, ip
 800b9e0:	d30e      	bcc.n	800ba00 <__mdiff+0xec>
 800b9e2:	f10c 0203 	add.w	r2, ip, #3
 800b9e6:	1b52      	subs	r2, r2, r5
 800b9e8:	f022 0203 	bic.w	r2, r2, #3
 800b9ec:	3d03      	subs	r5, #3
 800b9ee:	45ac      	cmp	ip, r5
 800b9f0:	bf38      	it	cc
 800b9f2:	2200      	movcc	r2, #0
 800b9f4:	441a      	add	r2, r3
 800b9f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b9fa:	b17b      	cbz	r3, 800ba1c <__mdiff+0x108>
 800b9fc:	6107      	str	r7, [r0, #16]
 800b9fe:	e7a3      	b.n	800b948 <__mdiff+0x34>
 800ba00:	f856 8b04 	ldr.w	r8, [r6], #4
 800ba04:	fa11 f288 	uxtah	r2, r1, r8
 800ba08:	1414      	asrs	r4, r2, #16
 800ba0a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ba0e:	b292      	uxth	r2, r2
 800ba10:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ba14:	f84e 2b04 	str.w	r2, [lr], #4
 800ba18:	1421      	asrs	r1, r4, #16
 800ba1a:	e7e0      	b.n	800b9de <__mdiff+0xca>
 800ba1c:	3f01      	subs	r7, #1
 800ba1e:	e7ea      	b.n	800b9f6 <__mdiff+0xe2>
 800ba20:	0800d167 	.word	0x0800d167
 800ba24:	0800d178 	.word	0x0800d178

0800ba28 <__d2b>:
 800ba28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba2c:	4689      	mov	r9, r1
 800ba2e:	2101      	movs	r1, #1
 800ba30:	ec57 6b10 	vmov	r6, r7, d0
 800ba34:	4690      	mov	r8, r2
 800ba36:	f7ff fccf 	bl	800b3d8 <_Balloc>
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	b930      	cbnz	r0, 800ba4c <__d2b+0x24>
 800ba3e:	4602      	mov	r2, r0
 800ba40:	4b25      	ldr	r3, [pc, #148]	; (800bad8 <__d2b+0xb0>)
 800ba42:	4826      	ldr	r0, [pc, #152]	; (800badc <__d2b+0xb4>)
 800ba44:	f240 310a 	movw	r1, #778	; 0x30a
 800ba48:	f000 faac 	bl	800bfa4 <__assert_func>
 800ba4c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ba50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ba54:	bb35      	cbnz	r5, 800baa4 <__d2b+0x7c>
 800ba56:	2e00      	cmp	r6, #0
 800ba58:	9301      	str	r3, [sp, #4]
 800ba5a:	d028      	beq.n	800baae <__d2b+0x86>
 800ba5c:	4668      	mov	r0, sp
 800ba5e:	9600      	str	r6, [sp, #0]
 800ba60:	f7ff fd82 	bl	800b568 <__lo0bits>
 800ba64:	9900      	ldr	r1, [sp, #0]
 800ba66:	b300      	cbz	r0, 800baaa <__d2b+0x82>
 800ba68:	9a01      	ldr	r2, [sp, #4]
 800ba6a:	f1c0 0320 	rsb	r3, r0, #32
 800ba6e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba72:	430b      	orrs	r3, r1
 800ba74:	40c2      	lsrs	r2, r0
 800ba76:	6163      	str	r3, [r4, #20]
 800ba78:	9201      	str	r2, [sp, #4]
 800ba7a:	9b01      	ldr	r3, [sp, #4]
 800ba7c:	61a3      	str	r3, [r4, #24]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	bf14      	ite	ne
 800ba82:	2202      	movne	r2, #2
 800ba84:	2201      	moveq	r2, #1
 800ba86:	6122      	str	r2, [r4, #16]
 800ba88:	b1d5      	cbz	r5, 800bac0 <__d2b+0x98>
 800ba8a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ba8e:	4405      	add	r5, r0
 800ba90:	f8c9 5000 	str.w	r5, [r9]
 800ba94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ba98:	f8c8 0000 	str.w	r0, [r8]
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	b003      	add	sp, #12
 800baa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800baa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800baa8:	e7d5      	b.n	800ba56 <__d2b+0x2e>
 800baaa:	6161      	str	r1, [r4, #20]
 800baac:	e7e5      	b.n	800ba7a <__d2b+0x52>
 800baae:	a801      	add	r0, sp, #4
 800bab0:	f7ff fd5a 	bl	800b568 <__lo0bits>
 800bab4:	9b01      	ldr	r3, [sp, #4]
 800bab6:	6163      	str	r3, [r4, #20]
 800bab8:	2201      	movs	r2, #1
 800baba:	6122      	str	r2, [r4, #16]
 800babc:	3020      	adds	r0, #32
 800babe:	e7e3      	b.n	800ba88 <__d2b+0x60>
 800bac0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bac4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bac8:	f8c9 0000 	str.w	r0, [r9]
 800bacc:	6918      	ldr	r0, [r3, #16]
 800bace:	f7ff fd2b 	bl	800b528 <__hi0bits>
 800bad2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bad6:	e7df      	b.n	800ba98 <__d2b+0x70>
 800bad8:	0800d167 	.word	0x0800d167
 800badc:	0800d178 	.word	0x0800d178

0800bae0 <_calloc_r>:
 800bae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bae2:	fba1 2402 	umull	r2, r4, r1, r2
 800bae6:	b94c      	cbnz	r4, 800bafc <_calloc_r+0x1c>
 800bae8:	4611      	mov	r1, r2
 800baea:	9201      	str	r2, [sp, #4]
 800baec:	f000 f87a 	bl	800bbe4 <_malloc_r>
 800baf0:	9a01      	ldr	r2, [sp, #4]
 800baf2:	4605      	mov	r5, r0
 800baf4:	b930      	cbnz	r0, 800bb04 <_calloc_r+0x24>
 800baf6:	4628      	mov	r0, r5
 800baf8:	b003      	add	sp, #12
 800bafa:	bd30      	pop	{r4, r5, pc}
 800bafc:	220c      	movs	r2, #12
 800bafe:	6002      	str	r2, [r0, #0]
 800bb00:	2500      	movs	r5, #0
 800bb02:	e7f8      	b.n	800baf6 <_calloc_r+0x16>
 800bb04:	4621      	mov	r1, r4
 800bb06:	f7fe f93f 	bl	8009d88 <memset>
 800bb0a:	e7f4      	b.n	800baf6 <_calloc_r+0x16>

0800bb0c <_free_r>:
 800bb0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb0e:	2900      	cmp	r1, #0
 800bb10:	d044      	beq.n	800bb9c <_free_r+0x90>
 800bb12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb16:	9001      	str	r0, [sp, #4]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	f1a1 0404 	sub.w	r4, r1, #4
 800bb1e:	bfb8      	it	lt
 800bb20:	18e4      	addlt	r4, r4, r3
 800bb22:	f000 fa9b 	bl	800c05c <__malloc_lock>
 800bb26:	4a1e      	ldr	r2, [pc, #120]	; (800bba0 <_free_r+0x94>)
 800bb28:	9801      	ldr	r0, [sp, #4]
 800bb2a:	6813      	ldr	r3, [r2, #0]
 800bb2c:	b933      	cbnz	r3, 800bb3c <_free_r+0x30>
 800bb2e:	6063      	str	r3, [r4, #4]
 800bb30:	6014      	str	r4, [r2, #0]
 800bb32:	b003      	add	sp, #12
 800bb34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb38:	f000 ba96 	b.w	800c068 <__malloc_unlock>
 800bb3c:	42a3      	cmp	r3, r4
 800bb3e:	d908      	bls.n	800bb52 <_free_r+0x46>
 800bb40:	6825      	ldr	r5, [r4, #0]
 800bb42:	1961      	adds	r1, r4, r5
 800bb44:	428b      	cmp	r3, r1
 800bb46:	bf01      	itttt	eq
 800bb48:	6819      	ldreq	r1, [r3, #0]
 800bb4a:	685b      	ldreq	r3, [r3, #4]
 800bb4c:	1949      	addeq	r1, r1, r5
 800bb4e:	6021      	streq	r1, [r4, #0]
 800bb50:	e7ed      	b.n	800bb2e <_free_r+0x22>
 800bb52:	461a      	mov	r2, r3
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	b10b      	cbz	r3, 800bb5c <_free_r+0x50>
 800bb58:	42a3      	cmp	r3, r4
 800bb5a:	d9fa      	bls.n	800bb52 <_free_r+0x46>
 800bb5c:	6811      	ldr	r1, [r2, #0]
 800bb5e:	1855      	adds	r5, r2, r1
 800bb60:	42a5      	cmp	r5, r4
 800bb62:	d10b      	bne.n	800bb7c <_free_r+0x70>
 800bb64:	6824      	ldr	r4, [r4, #0]
 800bb66:	4421      	add	r1, r4
 800bb68:	1854      	adds	r4, r2, r1
 800bb6a:	42a3      	cmp	r3, r4
 800bb6c:	6011      	str	r1, [r2, #0]
 800bb6e:	d1e0      	bne.n	800bb32 <_free_r+0x26>
 800bb70:	681c      	ldr	r4, [r3, #0]
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	6053      	str	r3, [r2, #4]
 800bb76:	4421      	add	r1, r4
 800bb78:	6011      	str	r1, [r2, #0]
 800bb7a:	e7da      	b.n	800bb32 <_free_r+0x26>
 800bb7c:	d902      	bls.n	800bb84 <_free_r+0x78>
 800bb7e:	230c      	movs	r3, #12
 800bb80:	6003      	str	r3, [r0, #0]
 800bb82:	e7d6      	b.n	800bb32 <_free_r+0x26>
 800bb84:	6825      	ldr	r5, [r4, #0]
 800bb86:	1961      	adds	r1, r4, r5
 800bb88:	428b      	cmp	r3, r1
 800bb8a:	bf04      	itt	eq
 800bb8c:	6819      	ldreq	r1, [r3, #0]
 800bb8e:	685b      	ldreq	r3, [r3, #4]
 800bb90:	6063      	str	r3, [r4, #4]
 800bb92:	bf04      	itt	eq
 800bb94:	1949      	addeq	r1, r1, r5
 800bb96:	6021      	streq	r1, [r4, #0]
 800bb98:	6054      	str	r4, [r2, #4]
 800bb9a:	e7ca      	b.n	800bb32 <_free_r+0x26>
 800bb9c:	b003      	add	sp, #12
 800bb9e:	bd30      	pop	{r4, r5, pc}
 800bba0:	20000670 	.word	0x20000670

0800bba4 <sbrk_aligned>:
 800bba4:	b570      	push	{r4, r5, r6, lr}
 800bba6:	4e0e      	ldr	r6, [pc, #56]	; (800bbe0 <sbrk_aligned+0x3c>)
 800bba8:	460c      	mov	r4, r1
 800bbaa:	6831      	ldr	r1, [r6, #0]
 800bbac:	4605      	mov	r5, r0
 800bbae:	b911      	cbnz	r1, 800bbb6 <sbrk_aligned+0x12>
 800bbb0:	f000 f9e8 	bl	800bf84 <_sbrk_r>
 800bbb4:	6030      	str	r0, [r6, #0]
 800bbb6:	4621      	mov	r1, r4
 800bbb8:	4628      	mov	r0, r5
 800bbba:	f000 f9e3 	bl	800bf84 <_sbrk_r>
 800bbbe:	1c43      	adds	r3, r0, #1
 800bbc0:	d00a      	beq.n	800bbd8 <sbrk_aligned+0x34>
 800bbc2:	1cc4      	adds	r4, r0, #3
 800bbc4:	f024 0403 	bic.w	r4, r4, #3
 800bbc8:	42a0      	cmp	r0, r4
 800bbca:	d007      	beq.n	800bbdc <sbrk_aligned+0x38>
 800bbcc:	1a21      	subs	r1, r4, r0
 800bbce:	4628      	mov	r0, r5
 800bbd0:	f000 f9d8 	bl	800bf84 <_sbrk_r>
 800bbd4:	3001      	adds	r0, #1
 800bbd6:	d101      	bne.n	800bbdc <sbrk_aligned+0x38>
 800bbd8:	f04f 34ff 	mov.w	r4, #4294967295
 800bbdc:	4620      	mov	r0, r4
 800bbde:	bd70      	pop	{r4, r5, r6, pc}
 800bbe0:	20000674 	.word	0x20000674

0800bbe4 <_malloc_r>:
 800bbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbe8:	1ccd      	adds	r5, r1, #3
 800bbea:	f025 0503 	bic.w	r5, r5, #3
 800bbee:	3508      	adds	r5, #8
 800bbf0:	2d0c      	cmp	r5, #12
 800bbf2:	bf38      	it	cc
 800bbf4:	250c      	movcc	r5, #12
 800bbf6:	2d00      	cmp	r5, #0
 800bbf8:	4607      	mov	r7, r0
 800bbfa:	db01      	blt.n	800bc00 <_malloc_r+0x1c>
 800bbfc:	42a9      	cmp	r1, r5
 800bbfe:	d905      	bls.n	800bc0c <_malloc_r+0x28>
 800bc00:	230c      	movs	r3, #12
 800bc02:	603b      	str	r3, [r7, #0]
 800bc04:	2600      	movs	r6, #0
 800bc06:	4630      	mov	r0, r6
 800bc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc0c:	4e2e      	ldr	r6, [pc, #184]	; (800bcc8 <_malloc_r+0xe4>)
 800bc0e:	f000 fa25 	bl	800c05c <__malloc_lock>
 800bc12:	6833      	ldr	r3, [r6, #0]
 800bc14:	461c      	mov	r4, r3
 800bc16:	bb34      	cbnz	r4, 800bc66 <_malloc_r+0x82>
 800bc18:	4629      	mov	r1, r5
 800bc1a:	4638      	mov	r0, r7
 800bc1c:	f7ff ffc2 	bl	800bba4 <sbrk_aligned>
 800bc20:	1c43      	adds	r3, r0, #1
 800bc22:	4604      	mov	r4, r0
 800bc24:	d14d      	bne.n	800bcc2 <_malloc_r+0xde>
 800bc26:	6834      	ldr	r4, [r6, #0]
 800bc28:	4626      	mov	r6, r4
 800bc2a:	2e00      	cmp	r6, #0
 800bc2c:	d140      	bne.n	800bcb0 <_malloc_r+0xcc>
 800bc2e:	6823      	ldr	r3, [r4, #0]
 800bc30:	4631      	mov	r1, r6
 800bc32:	4638      	mov	r0, r7
 800bc34:	eb04 0803 	add.w	r8, r4, r3
 800bc38:	f000 f9a4 	bl	800bf84 <_sbrk_r>
 800bc3c:	4580      	cmp	r8, r0
 800bc3e:	d13a      	bne.n	800bcb6 <_malloc_r+0xd2>
 800bc40:	6821      	ldr	r1, [r4, #0]
 800bc42:	3503      	adds	r5, #3
 800bc44:	1a6d      	subs	r5, r5, r1
 800bc46:	f025 0503 	bic.w	r5, r5, #3
 800bc4a:	3508      	adds	r5, #8
 800bc4c:	2d0c      	cmp	r5, #12
 800bc4e:	bf38      	it	cc
 800bc50:	250c      	movcc	r5, #12
 800bc52:	4629      	mov	r1, r5
 800bc54:	4638      	mov	r0, r7
 800bc56:	f7ff ffa5 	bl	800bba4 <sbrk_aligned>
 800bc5a:	3001      	adds	r0, #1
 800bc5c:	d02b      	beq.n	800bcb6 <_malloc_r+0xd2>
 800bc5e:	6823      	ldr	r3, [r4, #0]
 800bc60:	442b      	add	r3, r5
 800bc62:	6023      	str	r3, [r4, #0]
 800bc64:	e00e      	b.n	800bc84 <_malloc_r+0xa0>
 800bc66:	6822      	ldr	r2, [r4, #0]
 800bc68:	1b52      	subs	r2, r2, r5
 800bc6a:	d41e      	bmi.n	800bcaa <_malloc_r+0xc6>
 800bc6c:	2a0b      	cmp	r2, #11
 800bc6e:	d916      	bls.n	800bc9e <_malloc_r+0xba>
 800bc70:	1961      	adds	r1, r4, r5
 800bc72:	42a3      	cmp	r3, r4
 800bc74:	6025      	str	r5, [r4, #0]
 800bc76:	bf18      	it	ne
 800bc78:	6059      	strne	r1, [r3, #4]
 800bc7a:	6863      	ldr	r3, [r4, #4]
 800bc7c:	bf08      	it	eq
 800bc7e:	6031      	streq	r1, [r6, #0]
 800bc80:	5162      	str	r2, [r4, r5]
 800bc82:	604b      	str	r3, [r1, #4]
 800bc84:	4638      	mov	r0, r7
 800bc86:	f104 060b 	add.w	r6, r4, #11
 800bc8a:	f000 f9ed 	bl	800c068 <__malloc_unlock>
 800bc8e:	f026 0607 	bic.w	r6, r6, #7
 800bc92:	1d23      	adds	r3, r4, #4
 800bc94:	1af2      	subs	r2, r6, r3
 800bc96:	d0b6      	beq.n	800bc06 <_malloc_r+0x22>
 800bc98:	1b9b      	subs	r3, r3, r6
 800bc9a:	50a3      	str	r3, [r4, r2]
 800bc9c:	e7b3      	b.n	800bc06 <_malloc_r+0x22>
 800bc9e:	6862      	ldr	r2, [r4, #4]
 800bca0:	42a3      	cmp	r3, r4
 800bca2:	bf0c      	ite	eq
 800bca4:	6032      	streq	r2, [r6, #0]
 800bca6:	605a      	strne	r2, [r3, #4]
 800bca8:	e7ec      	b.n	800bc84 <_malloc_r+0xa0>
 800bcaa:	4623      	mov	r3, r4
 800bcac:	6864      	ldr	r4, [r4, #4]
 800bcae:	e7b2      	b.n	800bc16 <_malloc_r+0x32>
 800bcb0:	4634      	mov	r4, r6
 800bcb2:	6876      	ldr	r6, [r6, #4]
 800bcb4:	e7b9      	b.n	800bc2a <_malloc_r+0x46>
 800bcb6:	230c      	movs	r3, #12
 800bcb8:	603b      	str	r3, [r7, #0]
 800bcba:	4638      	mov	r0, r7
 800bcbc:	f000 f9d4 	bl	800c068 <__malloc_unlock>
 800bcc0:	e7a1      	b.n	800bc06 <_malloc_r+0x22>
 800bcc2:	6025      	str	r5, [r4, #0]
 800bcc4:	e7de      	b.n	800bc84 <_malloc_r+0xa0>
 800bcc6:	bf00      	nop
 800bcc8:	20000670 	.word	0x20000670

0800bccc <__ssputs_r>:
 800bccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcd0:	688e      	ldr	r6, [r1, #8]
 800bcd2:	429e      	cmp	r6, r3
 800bcd4:	4682      	mov	sl, r0
 800bcd6:	460c      	mov	r4, r1
 800bcd8:	4690      	mov	r8, r2
 800bcda:	461f      	mov	r7, r3
 800bcdc:	d838      	bhi.n	800bd50 <__ssputs_r+0x84>
 800bcde:	898a      	ldrh	r2, [r1, #12]
 800bce0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bce4:	d032      	beq.n	800bd4c <__ssputs_r+0x80>
 800bce6:	6825      	ldr	r5, [r4, #0]
 800bce8:	6909      	ldr	r1, [r1, #16]
 800bcea:	eba5 0901 	sub.w	r9, r5, r1
 800bcee:	6965      	ldr	r5, [r4, #20]
 800bcf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bcf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	444b      	add	r3, r9
 800bcfc:	106d      	asrs	r5, r5, #1
 800bcfe:	429d      	cmp	r5, r3
 800bd00:	bf38      	it	cc
 800bd02:	461d      	movcc	r5, r3
 800bd04:	0553      	lsls	r3, r2, #21
 800bd06:	d531      	bpl.n	800bd6c <__ssputs_r+0xa0>
 800bd08:	4629      	mov	r1, r5
 800bd0a:	f7ff ff6b 	bl	800bbe4 <_malloc_r>
 800bd0e:	4606      	mov	r6, r0
 800bd10:	b950      	cbnz	r0, 800bd28 <__ssputs_r+0x5c>
 800bd12:	230c      	movs	r3, #12
 800bd14:	f8ca 3000 	str.w	r3, [sl]
 800bd18:	89a3      	ldrh	r3, [r4, #12]
 800bd1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd1e:	81a3      	strh	r3, [r4, #12]
 800bd20:	f04f 30ff 	mov.w	r0, #4294967295
 800bd24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd28:	6921      	ldr	r1, [r4, #16]
 800bd2a:	464a      	mov	r2, r9
 800bd2c:	f7ff fb46 	bl	800b3bc <memcpy>
 800bd30:	89a3      	ldrh	r3, [r4, #12]
 800bd32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd3a:	81a3      	strh	r3, [r4, #12]
 800bd3c:	6126      	str	r6, [r4, #16]
 800bd3e:	6165      	str	r5, [r4, #20]
 800bd40:	444e      	add	r6, r9
 800bd42:	eba5 0509 	sub.w	r5, r5, r9
 800bd46:	6026      	str	r6, [r4, #0]
 800bd48:	60a5      	str	r5, [r4, #8]
 800bd4a:	463e      	mov	r6, r7
 800bd4c:	42be      	cmp	r6, r7
 800bd4e:	d900      	bls.n	800bd52 <__ssputs_r+0x86>
 800bd50:	463e      	mov	r6, r7
 800bd52:	6820      	ldr	r0, [r4, #0]
 800bd54:	4632      	mov	r2, r6
 800bd56:	4641      	mov	r1, r8
 800bd58:	f000 f966 	bl	800c028 <memmove>
 800bd5c:	68a3      	ldr	r3, [r4, #8]
 800bd5e:	1b9b      	subs	r3, r3, r6
 800bd60:	60a3      	str	r3, [r4, #8]
 800bd62:	6823      	ldr	r3, [r4, #0]
 800bd64:	4433      	add	r3, r6
 800bd66:	6023      	str	r3, [r4, #0]
 800bd68:	2000      	movs	r0, #0
 800bd6a:	e7db      	b.n	800bd24 <__ssputs_r+0x58>
 800bd6c:	462a      	mov	r2, r5
 800bd6e:	f000 f981 	bl	800c074 <_realloc_r>
 800bd72:	4606      	mov	r6, r0
 800bd74:	2800      	cmp	r0, #0
 800bd76:	d1e1      	bne.n	800bd3c <__ssputs_r+0x70>
 800bd78:	6921      	ldr	r1, [r4, #16]
 800bd7a:	4650      	mov	r0, sl
 800bd7c:	f7ff fec6 	bl	800bb0c <_free_r>
 800bd80:	e7c7      	b.n	800bd12 <__ssputs_r+0x46>
	...

0800bd84 <_svfiprintf_r>:
 800bd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd88:	4698      	mov	r8, r3
 800bd8a:	898b      	ldrh	r3, [r1, #12]
 800bd8c:	061b      	lsls	r3, r3, #24
 800bd8e:	b09d      	sub	sp, #116	; 0x74
 800bd90:	4607      	mov	r7, r0
 800bd92:	460d      	mov	r5, r1
 800bd94:	4614      	mov	r4, r2
 800bd96:	d50e      	bpl.n	800bdb6 <_svfiprintf_r+0x32>
 800bd98:	690b      	ldr	r3, [r1, #16]
 800bd9a:	b963      	cbnz	r3, 800bdb6 <_svfiprintf_r+0x32>
 800bd9c:	2140      	movs	r1, #64	; 0x40
 800bd9e:	f7ff ff21 	bl	800bbe4 <_malloc_r>
 800bda2:	6028      	str	r0, [r5, #0]
 800bda4:	6128      	str	r0, [r5, #16]
 800bda6:	b920      	cbnz	r0, 800bdb2 <_svfiprintf_r+0x2e>
 800bda8:	230c      	movs	r3, #12
 800bdaa:	603b      	str	r3, [r7, #0]
 800bdac:	f04f 30ff 	mov.w	r0, #4294967295
 800bdb0:	e0d1      	b.n	800bf56 <_svfiprintf_r+0x1d2>
 800bdb2:	2340      	movs	r3, #64	; 0x40
 800bdb4:	616b      	str	r3, [r5, #20]
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	9309      	str	r3, [sp, #36]	; 0x24
 800bdba:	2320      	movs	r3, #32
 800bdbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdc0:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdc4:	2330      	movs	r3, #48	; 0x30
 800bdc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bf70 <_svfiprintf_r+0x1ec>
 800bdca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdce:	f04f 0901 	mov.w	r9, #1
 800bdd2:	4623      	mov	r3, r4
 800bdd4:	469a      	mov	sl, r3
 800bdd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdda:	b10a      	cbz	r2, 800bde0 <_svfiprintf_r+0x5c>
 800bddc:	2a25      	cmp	r2, #37	; 0x25
 800bdde:	d1f9      	bne.n	800bdd4 <_svfiprintf_r+0x50>
 800bde0:	ebba 0b04 	subs.w	fp, sl, r4
 800bde4:	d00b      	beq.n	800bdfe <_svfiprintf_r+0x7a>
 800bde6:	465b      	mov	r3, fp
 800bde8:	4622      	mov	r2, r4
 800bdea:	4629      	mov	r1, r5
 800bdec:	4638      	mov	r0, r7
 800bdee:	f7ff ff6d 	bl	800bccc <__ssputs_r>
 800bdf2:	3001      	adds	r0, #1
 800bdf4:	f000 80aa 	beq.w	800bf4c <_svfiprintf_r+0x1c8>
 800bdf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdfa:	445a      	add	r2, fp
 800bdfc:	9209      	str	r2, [sp, #36]	; 0x24
 800bdfe:	f89a 3000 	ldrb.w	r3, [sl]
 800be02:	2b00      	cmp	r3, #0
 800be04:	f000 80a2 	beq.w	800bf4c <_svfiprintf_r+0x1c8>
 800be08:	2300      	movs	r3, #0
 800be0a:	f04f 32ff 	mov.w	r2, #4294967295
 800be0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be12:	f10a 0a01 	add.w	sl, sl, #1
 800be16:	9304      	str	r3, [sp, #16]
 800be18:	9307      	str	r3, [sp, #28]
 800be1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be1e:	931a      	str	r3, [sp, #104]	; 0x68
 800be20:	4654      	mov	r4, sl
 800be22:	2205      	movs	r2, #5
 800be24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be28:	4851      	ldr	r0, [pc, #324]	; (800bf70 <_svfiprintf_r+0x1ec>)
 800be2a:	f7f4 f9c1 	bl	80001b0 <memchr>
 800be2e:	9a04      	ldr	r2, [sp, #16]
 800be30:	b9d8      	cbnz	r0, 800be6a <_svfiprintf_r+0xe6>
 800be32:	06d0      	lsls	r0, r2, #27
 800be34:	bf44      	itt	mi
 800be36:	2320      	movmi	r3, #32
 800be38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be3c:	0711      	lsls	r1, r2, #28
 800be3e:	bf44      	itt	mi
 800be40:	232b      	movmi	r3, #43	; 0x2b
 800be42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be46:	f89a 3000 	ldrb.w	r3, [sl]
 800be4a:	2b2a      	cmp	r3, #42	; 0x2a
 800be4c:	d015      	beq.n	800be7a <_svfiprintf_r+0xf6>
 800be4e:	9a07      	ldr	r2, [sp, #28]
 800be50:	4654      	mov	r4, sl
 800be52:	2000      	movs	r0, #0
 800be54:	f04f 0c0a 	mov.w	ip, #10
 800be58:	4621      	mov	r1, r4
 800be5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be5e:	3b30      	subs	r3, #48	; 0x30
 800be60:	2b09      	cmp	r3, #9
 800be62:	d94e      	bls.n	800bf02 <_svfiprintf_r+0x17e>
 800be64:	b1b0      	cbz	r0, 800be94 <_svfiprintf_r+0x110>
 800be66:	9207      	str	r2, [sp, #28]
 800be68:	e014      	b.n	800be94 <_svfiprintf_r+0x110>
 800be6a:	eba0 0308 	sub.w	r3, r0, r8
 800be6e:	fa09 f303 	lsl.w	r3, r9, r3
 800be72:	4313      	orrs	r3, r2
 800be74:	9304      	str	r3, [sp, #16]
 800be76:	46a2      	mov	sl, r4
 800be78:	e7d2      	b.n	800be20 <_svfiprintf_r+0x9c>
 800be7a:	9b03      	ldr	r3, [sp, #12]
 800be7c:	1d19      	adds	r1, r3, #4
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	9103      	str	r1, [sp, #12]
 800be82:	2b00      	cmp	r3, #0
 800be84:	bfbb      	ittet	lt
 800be86:	425b      	neglt	r3, r3
 800be88:	f042 0202 	orrlt.w	r2, r2, #2
 800be8c:	9307      	strge	r3, [sp, #28]
 800be8e:	9307      	strlt	r3, [sp, #28]
 800be90:	bfb8      	it	lt
 800be92:	9204      	strlt	r2, [sp, #16]
 800be94:	7823      	ldrb	r3, [r4, #0]
 800be96:	2b2e      	cmp	r3, #46	; 0x2e
 800be98:	d10c      	bne.n	800beb4 <_svfiprintf_r+0x130>
 800be9a:	7863      	ldrb	r3, [r4, #1]
 800be9c:	2b2a      	cmp	r3, #42	; 0x2a
 800be9e:	d135      	bne.n	800bf0c <_svfiprintf_r+0x188>
 800bea0:	9b03      	ldr	r3, [sp, #12]
 800bea2:	1d1a      	adds	r2, r3, #4
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	9203      	str	r2, [sp, #12]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	bfb8      	it	lt
 800beac:	f04f 33ff 	movlt.w	r3, #4294967295
 800beb0:	3402      	adds	r4, #2
 800beb2:	9305      	str	r3, [sp, #20]
 800beb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bf80 <_svfiprintf_r+0x1fc>
 800beb8:	7821      	ldrb	r1, [r4, #0]
 800beba:	2203      	movs	r2, #3
 800bebc:	4650      	mov	r0, sl
 800bebe:	f7f4 f977 	bl	80001b0 <memchr>
 800bec2:	b140      	cbz	r0, 800bed6 <_svfiprintf_r+0x152>
 800bec4:	2340      	movs	r3, #64	; 0x40
 800bec6:	eba0 000a 	sub.w	r0, r0, sl
 800beca:	fa03 f000 	lsl.w	r0, r3, r0
 800bece:	9b04      	ldr	r3, [sp, #16]
 800bed0:	4303      	orrs	r3, r0
 800bed2:	3401      	adds	r4, #1
 800bed4:	9304      	str	r3, [sp, #16]
 800bed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beda:	4826      	ldr	r0, [pc, #152]	; (800bf74 <_svfiprintf_r+0x1f0>)
 800bedc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bee0:	2206      	movs	r2, #6
 800bee2:	f7f4 f965 	bl	80001b0 <memchr>
 800bee6:	2800      	cmp	r0, #0
 800bee8:	d038      	beq.n	800bf5c <_svfiprintf_r+0x1d8>
 800beea:	4b23      	ldr	r3, [pc, #140]	; (800bf78 <_svfiprintf_r+0x1f4>)
 800beec:	bb1b      	cbnz	r3, 800bf36 <_svfiprintf_r+0x1b2>
 800beee:	9b03      	ldr	r3, [sp, #12]
 800bef0:	3307      	adds	r3, #7
 800bef2:	f023 0307 	bic.w	r3, r3, #7
 800bef6:	3308      	adds	r3, #8
 800bef8:	9303      	str	r3, [sp, #12]
 800befa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800befc:	4433      	add	r3, r6
 800befe:	9309      	str	r3, [sp, #36]	; 0x24
 800bf00:	e767      	b.n	800bdd2 <_svfiprintf_r+0x4e>
 800bf02:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf06:	460c      	mov	r4, r1
 800bf08:	2001      	movs	r0, #1
 800bf0a:	e7a5      	b.n	800be58 <_svfiprintf_r+0xd4>
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	3401      	adds	r4, #1
 800bf10:	9305      	str	r3, [sp, #20]
 800bf12:	4619      	mov	r1, r3
 800bf14:	f04f 0c0a 	mov.w	ip, #10
 800bf18:	4620      	mov	r0, r4
 800bf1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf1e:	3a30      	subs	r2, #48	; 0x30
 800bf20:	2a09      	cmp	r2, #9
 800bf22:	d903      	bls.n	800bf2c <_svfiprintf_r+0x1a8>
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d0c5      	beq.n	800beb4 <_svfiprintf_r+0x130>
 800bf28:	9105      	str	r1, [sp, #20]
 800bf2a:	e7c3      	b.n	800beb4 <_svfiprintf_r+0x130>
 800bf2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf30:	4604      	mov	r4, r0
 800bf32:	2301      	movs	r3, #1
 800bf34:	e7f0      	b.n	800bf18 <_svfiprintf_r+0x194>
 800bf36:	ab03      	add	r3, sp, #12
 800bf38:	9300      	str	r3, [sp, #0]
 800bf3a:	462a      	mov	r2, r5
 800bf3c:	4b0f      	ldr	r3, [pc, #60]	; (800bf7c <_svfiprintf_r+0x1f8>)
 800bf3e:	a904      	add	r1, sp, #16
 800bf40:	4638      	mov	r0, r7
 800bf42:	f7fd ffc9 	bl	8009ed8 <_printf_float>
 800bf46:	1c42      	adds	r2, r0, #1
 800bf48:	4606      	mov	r6, r0
 800bf4a:	d1d6      	bne.n	800befa <_svfiprintf_r+0x176>
 800bf4c:	89ab      	ldrh	r3, [r5, #12]
 800bf4e:	065b      	lsls	r3, r3, #25
 800bf50:	f53f af2c 	bmi.w	800bdac <_svfiprintf_r+0x28>
 800bf54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf56:	b01d      	add	sp, #116	; 0x74
 800bf58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf5c:	ab03      	add	r3, sp, #12
 800bf5e:	9300      	str	r3, [sp, #0]
 800bf60:	462a      	mov	r2, r5
 800bf62:	4b06      	ldr	r3, [pc, #24]	; (800bf7c <_svfiprintf_r+0x1f8>)
 800bf64:	a904      	add	r1, sp, #16
 800bf66:	4638      	mov	r0, r7
 800bf68:	f7fe fa5a 	bl	800a420 <_printf_i>
 800bf6c:	e7eb      	b.n	800bf46 <_svfiprintf_r+0x1c2>
 800bf6e:	bf00      	nop
 800bf70:	0800d2d4 	.word	0x0800d2d4
 800bf74:	0800d2de 	.word	0x0800d2de
 800bf78:	08009ed9 	.word	0x08009ed9
 800bf7c:	0800bccd 	.word	0x0800bccd
 800bf80:	0800d2da 	.word	0x0800d2da

0800bf84 <_sbrk_r>:
 800bf84:	b538      	push	{r3, r4, r5, lr}
 800bf86:	4d06      	ldr	r5, [pc, #24]	; (800bfa0 <_sbrk_r+0x1c>)
 800bf88:	2300      	movs	r3, #0
 800bf8a:	4604      	mov	r4, r0
 800bf8c:	4608      	mov	r0, r1
 800bf8e:	602b      	str	r3, [r5, #0]
 800bf90:	f7f7 fca8 	bl	80038e4 <_sbrk>
 800bf94:	1c43      	adds	r3, r0, #1
 800bf96:	d102      	bne.n	800bf9e <_sbrk_r+0x1a>
 800bf98:	682b      	ldr	r3, [r5, #0]
 800bf9a:	b103      	cbz	r3, 800bf9e <_sbrk_r+0x1a>
 800bf9c:	6023      	str	r3, [r4, #0]
 800bf9e:	bd38      	pop	{r3, r4, r5, pc}
 800bfa0:	20000678 	.word	0x20000678

0800bfa4 <__assert_func>:
 800bfa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bfa6:	4614      	mov	r4, r2
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	4b09      	ldr	r3, [pc, #36]	; (800bfd0 <__assert_func+0x2c>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	4605      	mov	r5, r0
 800bfb0:	68d8      	ldr	r0, [r3, #12]
 800bfb2:	b14c      	cbz	r4, 800bfc8 <__assert_func+0x24>
 800bfb4:	4b07      	ldr	r3, [pc, #28]	; (800bfd4 <__assert_func+0x30>)
 800bfb6:	9100      	str	r1, [sp, #0]
 800bfb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bfbc:	4906      	ldr	r1, [pc, #24]	; (800bfd8 <__assert_func+0x34>)
 800bfbe:	462b      	mov	r3, r5
 800bfc0:	f000 f80e 	bl	800bfe0 <fiprintf>
 800bfc4:	f000 faac 	bl	800c520 <abort>
 800bfc8:	4b04      	ldr	r3, [pc, #16]	; (800bfdc <__assert_func+0x38>)
 800bfca:	461c      	mov	r4, r3
 800bfcc:	e7f3      	b.n	800bfb6 <__assert_func+0x12>
 800bfce:	bf00      	nop
 800bfd0:	20000040 	.word	0x20000040
 800bfd4:	0800d2e5 	.word	0x0800d2e5
 800bfd8:	0800d2f2 	.word	0x0800d2f2
 800bfdc:	0800d320 	.word	0x0800d320

0800bfe0 <fiprintf>:
 800bfe0:	b40e      	push	{r1, r2, r3}
 800bfe2:	b503      	push	{r0, r1, lr}
 800bfe4:	4601      	mov	r1, r0
 800bfe6:	ab03      	add	r3, sp, #12
 800bfe8:	4805      	ldr	r0, [pc, #20]	; (800c000 <fiprintf+0x20>)
 800bfea:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfee:	6800      	ldr	r0, [r0, #0]
 800bff0:	9301      	str	r3, [sp, #4]
 800bff2:	f000 f897 	bl	800c124 <_vfiprintf_r>
 800bff6:	b002      	add	sp, #8
 800bff8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bffc:	b003      	add	sp, #12
 800bffe:	4770      	bx	lr
 800c000:	20000040 	.word	0x20000040

0800c004 <__ascii_mbtowc>:
 800c004:	b082      	sub	sp, #8
 800c006:	b901      	cbnz	r1, 800c00a <__ascii_mbtowc+0x6>
 800c008:	a901      	add	r1, sp, #4
 800c00a:	b142      	cbz	r2, 800c01e <__ascii_mbtowc+0x1a>
 800c00c:	b14b      	cbz	r3, 800c022 <__ascii_mbtowc+0x1e>
 800c00e:	7813      	ldrb	r3, [r2, #0]
 800c010:	600b      	str	r3, [r1, #0]
 800c012:	7812      	ldrb	r2, [r2, #0]
 800c014:	1e10      	subs	r0, r2, #0
 800c016:	bf18      	it	ne
 800c018:	2001      	movne	r0, #1
 800c01a:	b002      	add	sp, #8
 800c01c:	4770      	bx	lr
 800c01e:	4610      	mov	r0, r2
 800c020:	e7fb      	b.n	800c01a <__ascii_mbtowc+0x16>
 800c022:	f06f 0001 	mvn.w	r0, #1
 800c026:	e7f8      	b.n	800c01a <__ascii_mbtowc+0x16>

0800c028 <memmove>:
 800c028:	4288      	cmp	r0, r1
 800c02a:	b510      	push	{r4, lr}
 800c02c:	eb01 0402 	add.w	r4, r1, r2
 800c030:	d902      	bls.n	800c038 <memmove+0x10>
 800c032:	4284      	cmp	r4, r0
 800c034:	4623      	mov	r3, r4
 800c036:	d807      	bhi.n	800c048 <memmove+0x20>
 800c038:	1e43      	subs	r3, r0, #1
 800c03a:	42a1      	cmp	r1, r4
 800c03c:	d008      	beq.n	800c050 <memmove+0x28>
 800c03e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c042:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c046:	e7f8      	b.n	800c03a <memmove+0x12>
 800c048:	4402      	add	r2, r0
 800c04a:	4601      	mov	r1, r0
 800c04c:	428a      	cmp	r2, r1
 800c04e:	d100      	bne.n	800c052 <memmove+0x2a>
 800c050:	bd10      	pop	{r4, pc}
 800c052:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c056:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c05a:	e7f7      	b.n	800c04c <memmove+0x24>

0800c05c <__malloc_lock>:
 800c05c:	4801      	ldr	r0, [pc, #4]	; (800c064 <__malloc_lock+0x8>)
 800c05e:	f000 bc1f 	b.w	800c8a0 <__retarget_lock_acquire_recursive>
 800c062:	bf00      	nop
 800c064:	2000067c 	.word	0x2000067c

0800c068 <__malloc_unlock>:
 800c068:	4801      	ldr	r0, [pc, #4]	; (800c070 <__malloc_unlock+0x8>)
 800c06a:	f000 bc1a 	b.w	800c8a2 <__retarget_lock_release_recursive>
 800c06e:	bf00      	nop
 800c070:	2000067c 	.word	0x2000067c

0800c074 <_realloc_r>:
 800c074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c078:	4680      	mov	r8, r0
 800c07a:	4614      	mov	r4, r2
 800c07c:	460e      	mov	r6, r1
 800c07e:	b921      	cbnz	r1, 800c08a <_realloc_r+0x16>
 800c080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c084:	4611      	mov	r1, r2
 800c086:	f7ff bdad 	b.w	800bbe4 <_malloc_r>
 800c08a:	b92a      	cbnz	r2, 800c098 <_realloc_r+0x24>
 800c08c:	f7ff fd3e 	bl	800bb0c <_free_r>
 800c090:	4625      	mov	r5, r4
 800c092:	4628      	mov	r0, r5
 800c094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c098:	f000 fc6a 	bl	800c970 <_malloc_usable_size_r>
 800c09c:	4284      	cmp	r4, r0
 800c09e:	4607      	mov	r7, r0
 800c0a0:	d802      	bhi.n	800c0a8 <_realloc_r+0x34>
 800c0a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c0a6:	d812      	bhi.n	800c0ce <_realloc_r+0x5a>
 800c0a8:	4621      	mov	r1, r4
 800c0aa:	4640      	mov	r0, r8
 800c0ac:	f7ff fd9a 	bl	800bbe4 <_malloc_r>
 800c0b0:	4605      	mov	r5, r0
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	d0ed      	beq.n	800c092 <_realloc_r+0x1e>
 800c0b6:	42bc      	cmp	r4, r7
 800c0b8:	4622      	mov	r2, r4
 800c0ba:	4631      	mov	r1, r6
 800c0bc:	bf28      	it	cs
 800c0be:	463a      	movcs	r2, r7
 800c0c0:	f7ff f97c 	bl	800b3bc <memcpy>
 800c0c4:	4631      	mov	r1, r6
 800c0c6:	4640      	mov	r0, r8
 800c0c8:	f7ff fd20 	bl	800bb0c <_free_r>
 800c0cc:	e7e1      	b.n	800c092 <_realloc_r+0x1e>
 800c0ce:	4635      	mov	r5, r6
 800c0d0:	e7df      	b.n	800c092 <_realloc_r+0x1e>

0800c0d2 <__sfputc_r>:
 800c0d2:	6893      	ldr	r3, [r2, #8]
 800c0d4:	3b01      	subs	r3, #1
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	b410      	push	{r4}
 800c0da:	6093      	str	r3, [r2, #8]
 800c0dc:	da08      	bge.n	800c0f0 <__sfputc_r+0x1e>
 800c0de:	6994      	ldr	r4, [r2, #24]
 800c0e0:	42a3      	cmp	r3, r4
 800c0e2:	db01      	blt.n	800c0e8 <__sfputc_r+0x16>
 800c0e4:	290a      	cmp	r1, #10
 800c0e6:	d103      	bne.n	800c0f0 <__sfputc_r+0x1e>
 800c0e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0ec:	f000 b94a 	b.w	800c384 <__swbuf_r>
 800c0f0:	6813      	ldr	r3, [r2, #0]
 800c0f2:	1c58      	adds	r0, r3, #1
 800c0f4:	6010      	str	r0, [r2, #0]
 800c0f6:	7019      	strb	r1, [r3, #0]
 800c0f8:	4608      	mov	r0, r1
 800c0fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <__sfputs_r>:
 800c100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c102:	4606      	mov	r6, r0
 800c104:	460f      	mov	r7, r1
 800c106:	4614      	mov	r4, r2
 800c108:	18d5      	adds	r5, r2, r3
 800c10a:	42ac      	cmp	r4, r5
 800c10c:	d101      	bne.n	800c112 <__sfputs_r+0x12>
 800c10e:	2000      	movs	r0, #0
 800c110:	e007      	b.n	800c122 <__sfputs_r+0x22>
 800c112:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c116:	463a      	mov	r2, r7
 800c118:	4630      	mov	r0, r6
 800c11a:	f7ff ffda 	bl	800c0d2 <__sfputc_r>
 800c11e:	1c43      	adds	r3, r0, #1
 800c120:	d1f3      	bne.n	800c10a <__sfputs_r+0xa>
 800c122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c124 <_vfiprintf_r>:
 800c124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c128:	460d      	mov	r5, r1
 800c12a:	b09d      	sub	sp, #116	; 0x74
 800c12c:	4614      	mov	r4, r2
 800c12e:	4698      	mov	r8, r3
 800c130:	4606      	mov	r6, r0
 800c132:	b118      	cbz	r0, 800c13c <_vfiprintf_r+0x18>
 800c134:	6983      	ldr	r3, [r0, #24]
 800c136:	b90b      	cbnz	r3, 800c13c <_vfiprintf_r+0x18>
 800c138:	f000 fb14 	bl	800c764 <__sinit>
 800c13c:	4b89      	ldr	r3, [pc, #548]	; (800c364 <_vfiprintf_r+0x240>)
 800c13e:	429d      	cmp	r5, r3
 800c140:	d11b      	bne.n	800c17a <_vfiprintf_r+0x56>
 800c142:	6875      	ldr	r5, [r6, #4]
 800c144:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c146:	07d9      	lsls	r1, r3, #31
 800c148:	d405      	bmi.n	800c156 <_vfiprintf_r+0x32>
 800c14a:	89ab      	ldrh	r3, [r5, #12]
 800c14c:	059a      	lsls	r2, r3, #22
 800c14e:	d402      	bmi.n	800c156 <_vfiprintf_r+0x32>
 800c150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c152:	f000 fba5 	bl	800c8a0 <__retarget_lock_acquire_recursive>
 800c156:	89ab      	ldrh	r3, [r5, #12]
 800c158:	071b      	lsls	r3, r3, #28
 800c15a:	d501      	bpl.n	800c160 <_vfiprintf_r+0x3c>
 800c15c:	692b      	ldr	r3, [r5, #16]
 800c15e:	b9eb      	cbnz	r3, 800c19c <_vfiprintf_r+0x78>
 800c160:	4629      	mov	r1, r5
 800c162:	4630      	mov	r0, r6
 800c164:	f000 f96e 	bl	800c444 <__swsetup_r>
 800c168:	b1c0      	cbz	r0, 800c19c <_vfiprintf_r+0x78>
 800c16a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c16c:	07dc      	lsls	r4, r3, #31
 800c16e:	d50e      	bpl.n	800c18e <_vfiprintf_r+0x6a>
 800c170:	f04f 30ff 	mov.w	r0, #4294967295
 800c174:	b01d      	add	sp, #116	; 0x74
 800c176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c17a:	4b7b      	ldr	r3, [pc, #492]	; (800c368 <_vfiprintf_r+0x244>)
 800c17c:	429d      	cmp	r5, r3
 800c17e:	d101      	bne.n	800c184 <_vfiprintf_r+0x60>
 800c180:	68b5      	ldr	r5, [r6, #8]
 800c182:	e7df      	b.n	800c144 <_vfiprintf_r+0x20>
 800c184:	4b79      	ldr	r3, [pc, #484]	; (800c36c <_vfiprintf_r+0x248>)
 800c186:	429d      	cmp	r5, r3
 800c188:	bf08      	it	eq
 800c18a:	68f5      	ldreq	r5, [r6, #12]
 800c18c:	e7da      	b.n	800c144 <_vfiprintf_r+0x20>
 800c18e:	89ab      	ldrh	r3, [r5, #12]
 800c190:	0598      	lsls	r0, r3, #22
 800c192:	d4ed      	bmi.n	800c170 <_vfiprintf_r+0x4c>
 800c194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c196:	f000 fb84 	bl	800c8a2 <__retarget_lock_release_recursive>
 800c19a:	e7e9      	b.n	800c170 <_vfiprintf_r+0x4c>
 800c19c:	2300      	movs	r3, #0
 800c19e:	9309      	str	r3, [sp, #36]	; 0x24
 800c1a0:	2320      	movs	r3, #32
 800c1a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1aa:	2330      	movs	r3, #48	; 0x30
 800c1ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c370 <_vfiprintf_r+0x24c>
 800c1b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1b4:	f04f 0901 	mov.w	r9, #1
 800c1b8:	4623      	mov	r3, r4
 800c1ba:	469a      	mov	sl, r3
 800c1bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1c0:	b10a      	cbz	r2, 800c1c6 <_vfiprintf_r+0xa2>
 800c1c2:	2a25      	cmp	r2, #37	; 0x25
 800c1c4:	d1f9      	bne.n	800c1ba <_vfiprintf_r+0x96>
 800c1c6:	ebba 0b04 	subs.w	fp, sl, r4
 800c1ca:	d00b      	beq.n	800c1e4 <_vfiprintf_r+0xc0>
 800c1cc:	465b      	mov	r3, fp
 800c1ce:	4622      	mov	r2, r4
 800c1d0:	4629      	mov	r1, r5
 800c1d2:	4630      	mov	r0, r6
 800c1d4:	f7ff ff94 	bl	800c100 <__sfputs_r>
 800c1d8:	3001      	adds	r0, #1
 800c1da:	f000 80aa 	beq.w	800c332 <_vfiprintf_r+0x20e>
 800c1de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1e0:	445a      	add	r2, fp
 800c1e2:	9209      	str	r2, [sp, #36]	; 0x24
 800c1e4:	f89a 3000 	ldrb.w	r3, [sl]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	f000 80a2 	beq.w	800c332 <_vfiprintf_r+0x20e>
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	f04f 32ff 	mov.w	r2, #4294967295
 800c1f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1f8:	f10a 0a01 	add.w	sl, sl, #1
 800c1fc:	9304      	str	r3, [sp, #16]
 800c1fe:	9307      	str	r3, [sp, #28]
 800c200:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c204:	931a      	str	r3, [sp, #104]	; 0x68
 800c206:	4654      	mov	r4, sl
 800c208:	2205      	movs	r2, #5
 800c20a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c20e:	4858      	ldr	r0, [pc, #352]	; (800c370 <_vfiprintf_r+0x24c>)
 800c210:	f7f3 ffce 	bl	80001b0 <memchr>
 800c214:	9a04      	ldr	r2, [sp, #16]
 800c216:	b9d8      	cbnz	r0, 800c250 <_vfiprintf_r+0x12c>
 800c218:	06d1      	lsls	r1, r2, #27
 800c21a:	bf44      	itt	mi
 800c21c:	2320      	movmi	r3, #32
 800c21e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c222:	0713      	lsls	r3, r2, #28
 800c224:	bf44      	itt	mi
 800c226:	232b      	movmi	r3, #43	; 0x2b
 800c228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c22c:	f89a 3000 	ldrb.w	r3, [sl]
 800c230:	2b2a      	cmp	r3, #42	; 0x2a
 800c232:	d015      	beq.n	800c260 <_vfiprintf_r+0x13c>
 800c234:	9a07      	ldr	r2, [sp, #28]
 800c236:	4654      	mov	r4, sl
 800c238:	2000      	movs	r0, #0
 800c23a:	f04f 0c0a 	mov.w	ip, #10
 800c23e:	4621      	mov	r1, r4
 800c240:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c244:	3b30      	subs	r3, #48	; 0x30
 800c246:	2b09      	cmp	r3, #9
 800c248:	d94e      	bls.n	800c2e8 <_vfiprintf_r+0x1c4>
 800c24a:	b1b0      	cbz	r0, 800c27a <_vfiprintf_r+0x156>
 800c24c:	9207      	str	r2, [sp, #28]
 800c24e:	e014      	b.n	800c27a <_vfiprintf_r+0x156>
 800c250:	eba0 0308 	sub.w	r3, r0, r8
 800c254:	fa09 f303 	lsl.w	r3, r9, r3
 800c258:	4313      	orrs	r3, r2
 800c25a:	9304      	str	r3, [sp, #16]
 800c25c:	46a2      	mov	sl, r4
 800c25e:	e7d2      	b.n	800c206 <_vfiprintf_r+0xe2>
 800c260:	9b03      	ldr	r3, [sp, #12]
 800c262:	1d19      	adds	r1, r3, #4
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	9103      	str	r1, [sp, #12]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	bfbb      	ittet	lt
 800c26c:	425b      	neglt	r3, r3
 800c26e:	f042 0202 	orrlt.w	r2, r2, #2
 800c272:	9307      	strge	r3, [sp, #28]
 800c274:	9307      	strlt	r3, [sp, #28]
 800c276:	bfb8      	it	lt
 800c278:	9204      	strlt	r2, [sp, #16]
 800c27a:	7823      	ldrb	r3, [r4, #0]
 800c27c:	2b2e      	cmp	r3, #46	; 0x2e
 800c27e:	d10c      	bne.n	800c29a <_vfiprintf_r+0x176>
 800c280:	7863      	ldrb	r3, [r4, #1]
 800c282:	2b2a      	cmp	r3, #42	; 0x2a
 800c284:	d135      	bne.n	800c2f2 <_vfiprintf_r+0x1ce>
 800c286:	9b03      	ldr	r3, [sp, #12]
 800c288:	1d1a      	adds	r2, r3, #4
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	9203      	str	r2, [sp, #12]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	bfb8      	it	lt
 800c292:	f04f 33ff 	movlt.w	r3, #4294967295
 800c296:	3402      	adds	r4, #2
 800c298:	9305      	str	r3, [sp, #20]
 800c29a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c380 <_vfiprintf_r+0x25c>
 800c29e:	7821      	ldrb	r1, [r4, #0]
 800c2a0:	2203      	movs	r2, #3
 800c2a2:	4650      	mov	r0, sl
 800c2a4:	f7f3 ff84 	bl	80001b0 <memchr>
 800c2a8:	b140      	cbz	r0, 800c2bc <_vfiprintf_r+0x198>
 800c2aa:	2340      	movs	r3, #64	; 0x40
 800c2ac:	eba0 000a 	sub.w	r0, r0, sl
 800c2b0:	fa03 f000 	lsl.w	r0, r3, r0
 800c2b4:	9b04      	ldr	r3, [sp, #16]
 800c2b6:	4303      	orrs	r3, r0
 800c2b8:	3401      	adds	r4, #1
 800c2ba:	9304      	str	r3, [sp, #16]
 800c2bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2c0:	482c      	ldr	r0, [pc, #176]	; (800c374 <_vfiprintf_r+0x250>)
 800c2c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2c6:	2206      	movs	r2, #6
 800c2c8:	f7f3 ff72 	bl	80001b0 <memchr>
 800c2cc:	2800      	cmp	r0, #0
 800c2ce:	d03f      	beq.n	800c350 <_vfiprintf_r+0x22c>
 800c2d0:	4b29      	ldr	r3, [pc, #164]	; (800c378 <_vfiprintf_r+0x254>)
 800c2d2:	bb1b      	cbnz	r3, 800c31c <_vfiprintf_r+0x1f8>
 800c2d4:	9b03      	ldr	r3, [sp, #12]
 800c2d6:	3307      	adds	r3, #7
 800c2d8:	f023 0307 	bic.w	r3, r3, #7
 800c2dc:	3308      	adds	r3, #8
 800c2de:	9303      	str	r3, [sp, #12]
 800c2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2e2:	443b      	add	r3, r7
 800c2e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c2e6:	e767      	b.n	800c1b8 <_vfiprintf_r+0x94>
 800c2e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2ec:	460c      	mov	r4, r1
 800c2ee:	2001      	movs	r0, #1
 800c2f0:	e7a5      	b.n	800c23e <_vfiprintf_r+0x11a>
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	3401      	adds	r4, #1
 800c2f6:	9305      	str	r3, [sp, #20]
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	f04f 0c0a 	mov.w	ip, #10
 800c2fe:	4620      	mov	r0, r4
 800c300:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c304:	3a30      	subs	r2, #48	; 0x30
 800c306:	2a09      	cmp	r2, #9
 800c308:	d903      	bls.n	800c312 <_vfiprintf_r+0x1ee>
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d0c5      	beq.n	800c29a <_vfiprintf_r+0x176>
 800c30e:	9105      	str	r1, [sp, #20]
 800c310:	e7c3      	b.n	800c29a <_vfiprintf_r+0x176>
 800c312:	fb0c 2101 	mla	r1, ip, r1, r2
 800c316:	4604      	mov	r4, r0
 800c318:	2301      	movs	r3, #1
 800c31a:	e7f0      	b.n	800c2fe <_vfiprintf_r+0x1da>
 800c31c:	ab03      	add	r3, sp, #12
 800c31e:	9300      	str	r3, [sp, #0]
 800c320:	462a      	mov	r2, r5
 800c322:	4b16      	ldr	r3, [pc, #88]	; (800c37c <_vfiprintf_r+0x258>)
 800c324:	a904      	add	r1, sp, #16
 800c326:	4630      	mov	r0, r6
 800c328:	f7fd fdd6 	bl	8009ed8 <_printf_float>
 800c32c:	4607      	mov	r7, r0
 800c32e:	1c78      	adds	r0, r7, #1
 800c330:	d1d6      	bne.n	800c2e0 <_vfiprintf_r+0x1bc>
 800c332:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c334:	07d9      	lsls	r1, r3, #31
 800c336:	d405      	bmi.n	800c344 <_vfiprintf_r+0x220>
 800c338:	89ab      	ldrh	r3, [r5, #12]
 800c33a:	059a      	lsls	r2, r3, #22
 800c33c:	d402      	bmi.n	800c344 <_vfiprintf_r+0x220>
 800c33e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c340:	f000 faaf 	bl	800c8a2 <__retarget_lock_release_recursive>
 800c344:	89ab      	ldrh	r3, [r5, #12]
 800c346:	065b      	lsls	r3, r3, #25
 800c348:	f53f af12 	bmi.w	800c170 <_vfiprintf_r+0x4c>
 800c34c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c34e:	e711      	b.n	800c174 <_vfiprintf_r+0x50>
 800c350:	ab03      	add	r3, sp, #12
 800c352:	9300      	str	r3, [sp, #0]
 800c354:	462a      	mov	r2, r5
 800c356:	4b09      	ldr	r3, [pc, #36]	; (800c37c <_vfiprintf_r+0x258>)
 800c358:	a904      	add	r1, sp, #16
 800c35a:	4630      	mov	r0, r6
 800c35c:	f7fe f860 	bl	800a420 <_printf_i>
 800c360:	e7e4      	b.n	800c32c <_vfiprintf_r+0x208>
 800c362:	bf00      	nop
 800c364:	0800d44c 	.word	0x0800d44c
 800c368:	0800d46c 	.word	0x0800d46c
 800c36c:	0800d42c 	.word	0x0800d42c
 800c370:	0800d2d4 	.word	0x0800d2d4
 800c374:	0800d2de 	.word	0x0800d2de
 800c378:	08009ed9 	.word	0x08009ed9
 800c37c:	0800c101 	.word	0x0800c101
 800c380:	0800d2da 	.word	0x0800d2da

0800c384 <__swbuf_r>:
 800c384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c386:	460e      	mov	r6, r1
 800c388:	4614      	mov	r4, r2
 800c38a:	4605      	mov	r5, r0
 800c38c:	b118      	cbz	r0, 800c396 <__swbuf_r+0x12>
 800c38e:	6983      	ldr	r3, [r0, #24]
 800c390:	b90b      	cbnz	r3, 800c396 <__swbuf_r+0x12>
 800c392:	f000 f9e7 	bl	800c764 <__sinit>
 800c396:	4b21      	ldr	r3, [pc, #132]	; (800c41c <__swbuf_r+0x98>)
 800c398:	429c      	cmp	r4, r3
 800c39a:	d12b      	bne.n	800c3f4 <__swbuf_r+0x70>
 800c39c:	686c      	ldr	r4, [r5, #4]
 800c39e:	69a3      	ldr	r3, [r4, #24]
 800c3a0:	60a3      	str	r3, [r4, #8]
 800c3a2:	89a3      	ldrh	r3, [r4, #12]
 800c3a4:	071a      	lsls	r2, r3, #28
 800c3a6:	d52f      	bpl.n	800c408 <__swbuf_r+0x84>
 800c3a8:	6923      	ldr	r3, [r4, #16]
 800c3aa:	b36b      	cbz	r3, 800c408 <__swbuf_r+0x84>
 800c3ac:	6923      	ldr	r3, [r4, #16]
 800c3ae:	6820      	ldr	r0, [r4, #0]
 800c3b0:	1ac0      	subs	r0, r0, r3
 800c3b2:	6963      	ldr	r3, [r4, #20]
 800c3b4:	b2f6      	uxtb	r6, r6
 800c3b6:	4283      	cmp	r3, r0
 800c3b8:	4637      	mov	r7, r6
 800c3ba:	dc04      	bgt.n	800c3c6 <__swbuf_r+0x42>
 800c3bc:	4621      	mov	r1, r4
 800c3be:	4628      	mov	r0, r5
 800c3c0:	f000 f93c 	bl	800c63c <_fflush_r>
 800c3c4:	bb30      	cbnz	r0, 800c414 <__swbuf_r+0x90>
 800c3c6:	68a3      	ldr	r3, [r4, #8]
 800c3c8:	3b01      	subs	r3, #1
 800c3ca:	60a3      	str	r3, [r4, #8]
 800c3cc:	6823      	ldr	r3, [r4, #0]
 800c3ce:	1c5a      	adds	r2, r3, #1
 800c3d0:	6022      	str	r2, [r4, #0]
 800c3d2:	701e      	strb	r6, [r3, #0]
 800c3d4:	6963      	ldr	r3, [r4, #20]
 800c3d6:	3001      	adds	r0, #1
 800c3d8:	4283      	cmp	r3, r0
 800c3da:	d004      	beq.n	800c3e6 <__swbuf_r+0x62>
 800c3dc:	89a3      	ldrh	r3, [r4, #12]
 800c3de:	07db      	lsls	r3, r3, #31
 800c3e0:	d506      	bpl.n	800c3f0 <__swbuf_r+0x6c>
 800c3e2:	2e0a      	cmp	r6, #10
 800c3e4:	d104      	bne.n	800c3f0 <__swbuf_r+0x6c>
 800c3e6:	4621      	mov	r1, r4
 800c3e8:	4628      	mov	r0, r5
 800c3ea:	f000 f927 	bl	800c63c <_fflush_r>
 800c3ee:	b988      	cbnz	r0, 800c414 <__swbuf_r+0x90>
 800c3f0:	4638      	mov	r0, r7
 800c3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3f4:	4b0a      	ldr	r3, [pc, #40]	; (800c420 <__swbuf_r+0x9c>)
 800c3f6:	429c      	cmp	r4, r3
 800c3f8:	d101      	bne.n	800c3fe <__swbuf_r+0x7a>
 800c3fa:	68ac      	ldr	r4, [r5, #8]
 800c3fc:	e7cf      	b.n	800c39e <__swbuf_r+0x1a>
 800c3fe:	4b09      	ldr	r3, [pc, #36]	; (800c424 <__swbuf_r+0xa0>)
 800c400:	429c      	cmp	r4, r3
 800c402:	bf08      	it	eq
 800c404:	68ec      	ldreq	r4, [r5, #12]
 800c406:	e7ca      	b.n	800c39e <__swbuf_r+0x1a>
 800c408:	4621      	mov	r1, r4
 800c40a:	4628      	mov	r0, r5
 800c40c:	f000 f81a 	bl	800c444 <__swsetup_r>
 800c410:	2800      	cmp	r0, #0
 800c412:	d0cb      	beq.n	800c3ac <__swbuf_r+0x28>
 800c414:	f04f 37ff 	mov.w	r7, #4294967295
 800c418:	e7ea      	b.n	800c3f0 <__swbuf_r+0x6c>
 800c41a:	bf00      	nop
 800c41c:	0800d44c 	.word	0x0800d44c
 800c420:	0800d46c 	.word	0x0800d46c
 800c424:	0800d42c 	.word	0x0800d42c

0800c428 <__ascii_wctomb>:
 800c428:	b149      	cbz	r1, 800c43e <__ascii_wctomb+0x16>
 800c42a:	2aff      	cmp	r2, #255	; 0xff
 800c42c:	bf85      	ittet	hi
 800c42e:	238a      	movhi	r3, #138	; 0x8a
 800c430:	6003      	strhi	r3, [r0, #0]
 800c432:	700a      	strbls	r2, [r1, #0]
 800c434:	f04f 30ff 	movhi.w	r0, #4294967295
 800c438:	bf98      	it	ls
 800c43a:	2001      	movls	r0, #1
 800c43c:	4770      	bx	lr
 800c43e:	4608      	mov	r0, r1
 800c440:	4770      	bx	lr
	...

0800c444 <__swsetup_r>:
 800c444:	4b32      	ldr	r3, [pc, #200]	; (800c510 <__swsetup_r+0xcc>)
 800c446:	b570      	push	{r4, r5, r6, lr}
 800c448:	681d      	ldr	r5, [r3, #0]
 800c44a:	4606      	mov	r6, r0
 800c44c:	460c      	mov	r4, r1
 800c44e:	b125      	cbz	r5, 800c45a <__swsetup_r+0x16>
 800c450:	69ab      	ldr	r3, [r5, #24]
 800c452:	b913      	cbnz	r3, 800c45a <__swsetup_r+0x16>
 800c454:	4628      	mov	r0, r5
 800c456:	f000 f985 	bl	800c764 <__sinit>
 800c45a:	4b2e      	ldr	r3, [pc, #184]	; (800c514 <__swsetup_r+0xd0>)
 800c45c:	429c      	cmp	r4, r3
 800c45e:	d10f      	bne.n	800c480 <__swsetup_r+0x3c>
 800c460:	686c      	ldr	r4, [r5, #4]
 800c462:	89a3      	ldrh	r3, [r4, #12]
 800c464:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c468:	0719      	lsls	r1, r3, #28
 800c46a:	d42c      	bmi.n	800c4c6 <__swsetup_r+0x82>
 800c46c:	06dd      	lsls	r5, r3, #27
 800c46e:	d411      	bmi.n	800c494 <__swsetup_r+0x50>
 800c470:	2309      	movs	r3, #9
 800c472:	6033      	str	r3, [r6, #0]
 800c474:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c478:	81a3      	strh	r3, [r4, #12]
 800c47a:	f04f 30ff 	mov.w	r0, #4294967295
 800c47e:	e03e      	b.n	800c4fe <__swsetup_r+0xba>
 800c480:	4b25      	ldr	r3, [pc, #148]	; (800c518 <__swsetup_r+0xd4>)
 800c482:	429c      	cmp	r4, r3
 800c484:	d101      	bne.n	800c48a <__swsetup_r+0x46>
 800c486:	68ac      	ldr	r4, [r5, #8]
 800c488:	e7eb      	b.n	800c462 <__swsetup_r+0x1e>
 800c48a:	4b24      	ldr	r3, [pc, #144]	; (800c51c <__swsetup_r+0xd8>)
 800c48c:	429c      	cmp	r4, r3
 800c48e:	bf08      	it	eq
 800c490:	68ec      	ldreq	r4, [r5, #12]
 800c492:	e7e6      	b.n	800c462 <__swsetup_r+0x1e>
 800c494:	0758      	lsls	r0, r3, #29
 800c496:	d512      	bpl.n	800c4be <__swsetup_r+0x7a>
 800c498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c49a:	b141      	cbz	r1, 800c4ae <__swsetup_r+0x6a>
 800c49c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4a0:	4299      	cmp	r1, r3
 800c4a2:	d002      	beq.n	800c4aa <__swsetup_r+0x66>
 800c4a4:	4630      	mov	r0, r6
 800c4a6:	f7ff fb31 	bl	800bb0c <_free_r>
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	6363      	str	r3, [r4, #52]	; 0x34
 800c4ae:	89a3      	ldrh	r3, [r4, #12]
 800c4b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c4b4:	81a3      	strh	r3, [r4, #12]
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	6063      	str	r3, [r4, #4]
 800c4ba:	6923      	ldr	r3, [r4, #16]
 800c4bc:	6023      	str	r3, [r4, #0]
 800c4be:	89a3      	ldrh	r3, [r4, #12]
 800c4c0:	f043 0308 	orr.w	r3, r3, #8
 800c4c4:	81a3      	strh	r3, [r4, #12]
 800c4c6:	6923      	ldr	r3, [r4, #16]
 800c4c8:	b94b      	cbnz	r3, 800c4de <__swsetup_r+0x9a>
 800c4ca:	89a3      	ldrh	r3, [r4, #12]
 800c4cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c4d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4d4:	d003      	beq.n	800c4de <__swsetup_r+0x9a>
 800c4d6:	4621      	mov	r1, r4
 800c4d8:	4630      	mov	r0, r6
 800c4da:	f000 fa09 	bl	800c8f0 <__smakebuf_r>
 800c4de:	89a0      	ldrh	r0, [r4, #12]
 800c4e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4e4:	f010 0301 	ands.w	r3, r0, #1
 800c4e8:	d00a      	beq.n	800c500 <__swsetup_r+0xbc>
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	60a3      	str	r3, [r4, #8]
 800c4ee:	6963      	ldr	r3, [r4, #20]
 800c4f0:	425b      	negs	r3, r3
 800c4f2:	61a3      	str	r3, [r4, #24]
 800c4f4:	6923      	ldr	r3, [r4, #16]
 800c4f6:	b943      	cbnz	r3, 800c50a <__swsetup_r+0xc6>
 800c4f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c4fc:	d1ba      	bne.n	800c474 <__swsetup_r+0x30>
 800c4fe:	bd70      	pop	{r4, r5, r6, pc}
 800c500:	0781      	lsls	r1, r0, #30
 800c502:	bf58      	it	pl
 800c504:	6963      	ldrpl	r3, [r4, #20]
 800c506:	60a3      	str	r3, [r4, #8]
 800c508:	e7f4      	b.n	800c4f4 <__swsetup_r+0xb0>
 800c50a:	2000      	movs	r0, #0
 800c50c:	e7f7      	b.n	800c4fe <__swsetup_r+0xba>
 800c50e:	bf00      	nop
 800c510:	20000040 	.word	0x20000040
 800c514:	0800d44c 	.word	0x0800d44c
 800c518:	0800d46c 	.word	0x0800d46c
 800c51c:	0800d42c 	.word	0x0800d42c

0800c520 <abort>:
 800c520:	b508      	push	{r3, lr}
 800c522:	2006      	movs	r0, #6
 800c524:	f000 fa54 	bl	800c9d0 <raise>
 800c528:	2001      	movs	r0, #1
 800c52a:	f7f7 f963 	bl	80037f4 <_exit>
	...

0800c530 <__sflush_r>:
 800c530:	898a      	ldrh	r2, [r1, #12]
 800c532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c536:	4605      	mov	r5, r0
 800c538:	0710      	lsls	r0, r2, #28
 800c53a:	460c      	mov	r4, r1
 800c53c:	d458      	bmi.n	800c5f0 <__sflush_r+0xc0>
 800c53e:	684b      	ldr	r3, [r1, #4]
 800c540:	2b00      	cmp	r3, #0
 800c542:	dc05      	bgt.n	800c550 <__sflush_r+0x20>
 800c544:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c546:	2b00      	cmp	r3, #0
 800c548:	dc02      	bgt.n	800c550 <__sflush_r+0x20>
 800c54a:	2000      	movs	r0, #0
 800c54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c550:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c552:	2e00      	cmp	r6, #0
 800c554:	d0f9      	beq.n	800c54a <__sflush_r+0x1a>
 800c556:	2300      	movs	r3, #0
 800c558:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c55c:	682f      	ldr	r7, [r5, #0]
 800c55e:	602b      	str	r3, [r5, #0]
 800c560:	d032      	beq.n	800c5c8 <__sflush_r+0x98>
 800c562:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c564:	89a3      	ldrh	r3, [r4, #12]
 800c566:	075a      	lsls	r2, r3, #29
 800c568:	d505      	bpl.n	800c576 <__sflush_r+0x46>
 800c56a:	6863      	ldr	r3, [r4, #4]
 800c56c:	1ac0      	subs	r0, r0, r3
 800c56e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c570:	b10b      	cbz	r3, 800c576 <__sflush_r+0x46>
 800c572:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c574:	1ac0      	subs	r0, r0, r3
 800c576:	2300      	movs	r3, #0
 800c578:	4602      	mov	r2, r0
 800c57a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c57c:	6a21      	ldr	r1, [r4, #32]
 800c57e:	4628      	mov	r0, r5
 800c580:	47b0      	blx	r6
 800c582:	1c43      	adds	r3, r0, #1
 800c584:	89a3      	ldrh	r3, [r4, #12]
 800c586:	d106      	bne.n	800c596 <__sflush_r+0x66>
 800c588:	6829      	ldr	r1, [r5, #0]
 800c58a:	291d      	cmp	r1, #29
 800c58c:	d82c      	bhi.n	800c5e8 <__sflush_r+0xb8>
 800c58e:	4a2a      	ldr	r2, [pc, #168]	; (800c638 <__sflush_r+0x108>)
 800c590:	40ca      	lsrs	r2, r1
 800c592:	07d6      	lsls	r6, r2, #31
 800c594:	d528      	bpl.n	800c5e8 <__sflush_r+0xb8>
 800c596:	2200      	movs	r2, #0
 800c598:	6062      	str	r2, [r4, #4]
 800c59a:	04d9      	lsls	r1, r3, #19
 800c59c:	6922      	ldr	r2, [r4, #16]
 800c59e:	6022      	str	r2, [r4, #0]
 800c5a0:	d504      	bpl.n	800c5ac <__sflush_r+0x7c>
 800c5a2:	1c42      	adds	r2, r0, #1
 800c5a4:	d101      	bne.n	800c5aa <__sflush_r+0x7a>
 800c5a6:	682b      	ldr	r3, [r5, #0]
 800c5a8:	b903      	cbnz	r3, 800c5ac <__sflush_r+0x7c>
 800c5aa:	6560      	str	r0, [r4, #84]	; 0x54
 800c5ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5ae:	602f      	str	r7, [r5, #0]
 800c5b0:	2900      	cmp	r1, #0
 800c5b2:	d0ca      	beq.n	800c54a <__sflush_r+0x1a>
 800c5b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5b8:	4299      	cmp	r1, r3
 800c5ba:	d002      	beq.n	800c5c2 <__sflush_r+0x92>
 800c5bc:	4628      	mov	r0, r5
 800c5be:	f7ff faa5 	bl	800bb0c <_free_r>
 800c5c2:	2000      	movs	r0, #0
 800c5c4:	6360      	str	r0, [r4, #52]	; 0x34
 800c5c6:	e7c1      	b.n	800c54c <__sflush_r+0x1c>
 800c5c8:	6a21      	ldr	r1, [r4, #32]
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	4628      	mov	r0, r5
 800c5ce:	47b0      	blx	r6
 800c5d0:	1c41      	adds	r1, r0, #1
 800c5d2:	d1c7      	bne.n	800c564 <__sflush_r+0x34>
 800c5d4:	682b      	ldr	r3, [r5, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d0c4      	beq.n	800c564 <__sflush_r+0x34>
 800c5da:	2b1d      	cmp	r3, #29
 800c5dc:	d001      	beq.n	800c5e2 <__sflush_r+0xb2>
 800c5de:	2b16      	cmp	r3, #22
 800c5e0:	d101      	bne.n	800c5e6 <__sflush_r+0xb6>
 800c5e2:	602f      	str	r7, [r5, #0]
 800c5e4:	e7b1      	b.n	800c54a <__sflush_r+0x1a>
 800c5e6:	89a3      	ldrh	r3, [r4, #12]
 800c5e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5ec:	81a3      	strh	r3, [r4, #12]
 800c5ee:	e7ad      	b.n	800c54c <__sflush_r+0x1c>
 800c5f0:	690f      	ldr	r7, [r1, #16]
 800c5f2:	2f00      	cmp	r7, #0
 800c5f4:	d0a9      	beq.n	800c54a <__sflush_r+0x1a>
 800c5f6:	0793      	lsls	r3, r2, #30
 800c5f8:	680e      	ldr	r6, [r1, #0]
 800c5fa:	bf08      	it	eq
 800c5fc:	694b      	ldreq	r3, [r1, #20]
 800c5fe:	600f      	str	r7, [r1, #0]
 800c600:	bf18      	it	ne
 800c602:	2300      	movne	r3, #0
 800c604:	eba6 0807 	sub.w	r8, r6, r7
 800c608:	608b      	str	r3, [r1, #8]
 800c60a:	f1b8 0f00 	cmp.w	r8, #0
 800c60e:	dd9c      	ble.n	800c54a <__sflush_r+0x1a>
 800c610:	6a21      	ldr	r1, [r4, #32]
 800c612:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c614:	4643      	mov	r3, r8
 800c616:	463a      	mov	r2, r7
 800c618:	4628      	mov	r0, r5
 800c61a:	47b0      	blx	r6
 800c61c:	2800      	cmp	r0, #0
 800c61e:	dc06      	bgt.n	800c62e <__sflush_r+0xfe>
 800c620:	89a3      	ldrh	r3, [r4, #12]
 800c622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c626:	81a3      	strh	r3, [r4, #12]
 800c628:	f04f 30ff 	mov.w	r0, #4294967295
 800c62c:	e78e      	b.n	800c54c <__sflush_r+0x1c>
 800c62e:	4407      	add	r7, r0
 800c630:	eba8 0800 	sub.w	r8, r8, r0
 800c634:	e7e9      	b.n	800c60a <__sflush_r+0xda>
 800c636:	bf00      	nop
 800c638:	20400001 	.word	0x20400001

0800c63c <_fflush_r>:
 800c63c:	b538      	push	{r3, r4, r5, lr}
 800c63e:	690b      	ldr	r3, [r1, #16]
 800c640:	4605      	mov	r5, r0
 800c642:	460c      	mov	r4, r1
 800c644:	b913      	cbnz	r3, 800c64c <_fflush_r+0x10>
 800c646:	2500      	movs	r5, #0
 800c648:	4628      	mov	r0, r5
 800c64a:	bd38      	pop	{r3, r4, r5, pc}
 800c64c:	b118      	cbz	r0, 800c656 <_fflush_r+0x1a>
 800c64e:	6983      	ldr	r3, [r0, #24]
 800c650:	b90b      	cbnz	r3, 800c656 <_fflush_r+0x1a>
 800c652:	f000 f887 	bl	800c764 <__sinit>
 800c656:	4b14      	ldr	r3, [pc, #80]	; (800c6a8 <_fflush_r+0x6c>)
 800c658:	429c      	cmp	r4, r3
 800c65a:	d11b      	bne.n	800c694 <_fflush_r+0x58>
 800c65c:	686c      	ldr	r4, [r5, #4]
 800c65e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d0ef      	beq.n	800c646 <_fflush_r+0xa>
 800c666:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c668:	07d0      	lsls	r0, r2, #31
 800c66a:	d404      	bmi.n	800c676 <_fflush_r+0x3a>
 800c66c:	0599      	lsls	r1, r3, #22
 800c66e:	d402      	bmi.n	800c676 <_fflush_r+0x3a>
 800c670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c672:	f000 f915 	bl	800c8a0 <__retarget_lock_acquire_recursive>
 800c676:	4628      	mov	r0, r5
 800c678:	4621      	mov	r1, r4
 800c67a:	f7ff ff59 	bl	800c530 <__sflush_r>
 800c67e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c680:	07da      	lsls	r2, r3, #31
 800c682:	4605      	mov	r5, r0
 800c684:	d4e0      	bmi.n	800c648 <_fflush_r+0xc>
 800c686:	89a3      	ldrh	r3, [r4, #12]
 800c688:	059b      	lsls	r3, r3, #22
 800c68a:	d4dd      	bmi.n	800c648 <_fflush_r+0xc>
 800c68c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c68e:	f000 f908 	bl	800c8a2 <__retarget_lock_release_recursive>
 800c692:	e7d9      	b.n	800c648 <_fflush_r+0xc>
 800c694:	4b05      	ldr	r3, [pc, #20]	; (800c6ac <_fflush_r+0x70>)
 800c696:	429c      	cmp	r4, r3
 800c698:	d101      	bne.n	800c69e <_fflush_r+0x62>
 800c69a:	68ac      	ldr	r4, [r5, #8]
 800c69c:	e7df      	b.n	800c65e <_fflush_r+0x22>
 800c69e:	4b04      	ldr	r3, [pc, #16]	; (800c6b0 <_fflush_r+0x74>)
 800c6a0:	429c      	cmp	r4, r3
 800c6a2:	bf08      	it	eq
 800c6a4:	68ec      	ldreq	r4, [r5, #12]
 800c6a6:	e7da      	b.n	800c65e <_fflush_r+0x22>
 800c6a8:	0800d44c 	.word	0x0800d44c
 800c6ac:	0800d46c 	.word	0x0800d46c
 800c6b0:	0800d42c 	.word	0x0800d42c

0800c6b4 <std>:
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	b510      	push	{r4, lr}
 800c6b8:	4604      	mov	r4, r0
 800c6ba:	e9c0 3300 	strd	r3, r3, [r0]
 800c6be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c6c2:	6083      	str	r3, [r0, #8]
 800c6c4:	8181      	strh	r1, [r0, #12]
 800c6c6:	6643      	str	r3, [r0, #100]	; 0x64
 800c6c8:	81c2      	strh	r2, [r0, #14]
 800c6ca:	6183      	str	r3, [r0, #24]
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	2208      	movs	r2, #8
 800c6d0:	305c      	adds	r0, #92	; 0x5c
 800c6d2:	f7fd fb59 	bl	8009d88 <memset>
 800c6d6:	4b05      	ldr	r3, [pc, #20]	; (800c6ec <std+0x38>)
 800c6d8:	6263      	str	r3, [r4, #36]	; 0x24
 800c6da:	4b05      	ldr	r3, [pc, #20]	; (800c6f0 <std+0x3c>)
 800c6dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800c6de:	4b05      	ldr	r3, [pc, #20]	; (800c6f4 <std+0x40>)
 800c6e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c6e2:	4b05      	ldr	r3, [pc, #20]	; (800c6f8 <std+0x44>)
 800c6e4:	6224      	str	r4, [r4, #32]
 800c6e6:	6323      	str	r3, [r4, #48]	; 0x30
 800c6e8:	bd10      	pop	{r4, pc}
 800c6ea:	bf00      	nop
 800c6ec:	0800ca09 	.word	0x0800ca09
 800c6f0:	0800ca2b 	.word	0x0800ca2b
 800c6f4:	0800ca63 	.word	0x0800ca63
 800c6f8:	0800ca87 	.word	0x0800ca87

0800c6fc <_cleanup_r>:
 800c6fc:	4901      	ldr	r1, [pc, #4]	; (800c704 <_cleanup_r+0x8>)
 800c6fe:	f000 b8af 	b.w	800c860 <_fwalk_reent>
 800c702:	bf00      	nop
 800c704:	0800c63d 	.word	0x0800c63d

0800c708 <__sfmoreglue>:
 800c708:	b570      	push	{r4, r5, r6, lr}
 800c70a:	2268      	movs	r2, #104	; 0x68
 800c70c:	1e4d      	subs	r5, r1, #1
 800c70e:	4355      	muls	r5, r2
 800c710:	460e      	mov	r6, r1
 800c712:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c716:	f7ff fa65 	bl	800bbe4 <_malloc_r>
 800c71a:	4604      	mov	r4, r0
 800c71c:	b140      	cbz	r0, 800c730 <__sfmoreglue+0x28>
 800c71e:	2100      	movs	r1, #0
 800c720:	e9c0 1600 	strd	r1, r6, [r0]
 800c724:	300c      	adds	r0, #12
 800c726:	60a0      	str	r0, [r4, #8]
 800c728:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c72c:	f7fd fb2c 	bl	8009d88 <memset>
 800c730:	4620      	mov	r0, r4
 800c732:	bd70      	pop	{r4, r5, r6, pc}

0800c734 <__sfp_lock_acquire>:
 800c734:	4801      	ldr	r0, [pc, #4]	; (800c73c <__sfp_lock_acquire+0x8>)
 800c736:	f000 b8b3 	b.w	800c8a0 <__retarget_lock_acquire_recursive>
 800c73a:	bf00      	nop
 800c73c:	2000067d 	.word	0x2000067d

0800c740 <__sfp_lock_release>:
 800c740:	4801      	ldr	r0, [pc, #4]	; (800c748 <__sfp_lock_release+0x8>)
 800c742:	f000 b8ae 	b.w	800c8a2 <__retarget_lock_release_recursive>
 800c746:	bf00      	nop
 800c748:	2000067d 	.word	0x2000067d

0800c74c <__sinit_lock_acquire>:
 800c74c:	4801      	ldr	r0, [pc, #4]	; (800c754 <__sinit_lock_acquire+0x8>)
 800c74e:	f000 b8a7 	b.w	800c8a0 <__retarget_lock_acquire_recursive>
 800c752:	bf00      	nop
 800c754:	2000067e 	.word	0x2000067e

0800c758 <__sinit_lock_release>:
 800c758:	4801      	ldr	r0, [pc, #4]	; (800c760 <__sinit_lock_release+0x8>)
 800c75a:	f000 b8a2 	b.w	800c8a2 <__retarget_lock_release_recursive>
 800c75e:	bf00      	nop
 800c760:	2000067e 	.word	0x2000067e

0800c764 <__sinit>:
 800c764:	b510      	push	{r4, lr}
 800c766:	4604      	mov	r4, r0
 800c768:	f7ff fff0 	bl	800c74c <__sinit_lock_acquire>
 800c76c:	69a3      	ldr	r3, [r4, #24]
 800c76e:	b11b      	cbz	r3, 800c778 <__sinit+0x14>
 800c770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c774:	f7ff bff0 	b.w	800c758 <__sinit_lock_release>
 800c778:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c77c:	6523      	str	r3, [r4, #80]	; 0x50
 800c77e:	4b13      	ldr	r3, [pc, #76]	; (800c7cc <__sinit+0x68>)
 800c780:	4a13      	ldr	r2, [pc, #76]	; (800c7d0 <__sinit+0x6c>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	62a2      	str	r2, [r4, #40]	; 0x28
 800c786:	42a3      	cmp	r3, r4
 800c788:	bf04      	itt	eq
 800c78a:	2301      	moveq	r3, #1
 800c78c:	61a3      	streq	r3, [r4, #24]
 800c78e:	4620      	mov	r0, r4
 800c790:	f000 f820 	bl	800c7d4 <__sfp>
 800c794:	6060      	str	r0, [r4, #4]
 800c796:	4620      	mov	r0, r4
 800c798:	f000 f81c 	bl	800c7d4 <__sfp>
 800c79c:	60a0      	str	r0, [r4, #8]
 800c79e:	4620      	mov	r0, r4
 800c7a0:	f000 f818 	bl	800c7d4 <__sfp>
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	60e0      	str	r0, [r4, #12]
 800c7a8:	2104      	movs	r1, #4
 800c7aa:	6860      	ldr	r0, [r4, #4]
 800c7ac:	f7ff ff82 	bl	800c6b4 <std>
 800c7b0:	68a0      	ldr	r0, [r4, #8]
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	2109      	movs	r1, #9
 800c7b6:	f7ff ff7d 	bl	800c6b4 <std>
 800c7ba:	68e0      	ldr	r0, [r4, #12]
 800c7bc:	2202      	movs	r2, #2
 800c7be:	2112      	movs	r1, #18
 800c7c0:	f7ff ff78 	bl	800c6b4 <std>
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	61a3      	str	r3, [r4, #24]
 800c7c8:	e7d2      	b.n	800c770 <__sinit+0xc>
 800c7ca:	bf00      	nop
 800c7cc:	0800d0b0 	.word	0x0800d0b0
 800c7d0:	0800c6fd 	.word	0x0800c6fd

0800c7d4 <__sfp>:
 800c7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7d6:	4607      	mov	r7, r0
 800c7d8:	f7ff ffac 	bl	800c734 <__sfp_lock_acquire>
 800c7dc:	4b1e      	ldr	r3, [pc, #120]	; (800c858 <__sfp+0x84>)
 800c7de:	681e      	ldr	r6, [r3, #0]
 800c7e0:	69b3      	ldr	r3, [r6, #24]
 800c7e2:	b913      	cbnz	r3, 800c7ea <__sfp+0x16>
 800c7e4:	4630      	mov	r0, r6
 800c7e6:	f7ff ffbd 	bl	800c764 <__sinit>
 800c7ea:	3648      	adds	r6, #72	; 0x48
 800c7ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c7f0:	3b01      	subs	r3, #1
 800c7f2:	d503      	bpl.n	800c7fc <__sfp+0x28>
 800c7f4:	6833      	ldr	r3, [r6, #0]
 800c7f6:	b30b      	cbz	r3, 800c83c <__sfp+0x68>
 800c7f8:	6836      	ldr	r6, [r6, #0]
 800c7fa:	e7f7      	b.n	800c7ec <__sfp+0x18>
 800c7fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c800:	b9d5      	cbnz	r5, 800c838 <__sfp+0x64>
 800c802:	4b16      	ldr	r3, [pc, #88]	; (800c85c <__sfp+0x88>)
 800c804:	60e3      	str	r3, [r4, #12]
 800c806:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c80a:	6665      	str	r5, [r4, #100]	; 0x64
 800c80c:	f000 f847 	bl	800c89e <__retarget_lock_init_recursive>
 800c810:	f7ff ff96 	bl	800c740 <__sfp_lock_release>
 800c814:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c818:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c81c:	6025      	str	r5, [r4, #0]
 800c81e:	61a5      	str	r5, [r4, #24]
 800c820:	2208      	movs	r2, #8
 800c822:	4629      	mov	r1, r5
 800c824:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c828:	f7fd faae 	bl	8009d88 <memset>
 800c82c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c830:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c834:	4620      	mov	r0, r4
 800c836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c838:	3468      	adds	r4, #104	; 0x68
 800c83a:	e7d9      	b.n	800c7f0 <__sfp+0x1c>
 800c83c:	2104      	movs	r1, #4
 800c83e:	4638      	mov	r0, r7
 800c840:	f7ff ff62 	bl	800c708 <__sfmoreglue>
 800c844:	4604      	mov	r4, r0
 800c846:	6030      	str	r0, [r6, #0]
 800c848:	2800      	cmp	r0, #0
 800c84a:	d1d5      	bne.n	800c7f8 <__sfp+0x24>
 800c84c:	f7ff ff78 	bl	800c740 <__sfp_lock_release>
 800c850:	230c      	movs	r3, #12
 800c852:	603b      	str	r3, [r7, #0]
 800c854:	e7ee      	b.n	800c834 <__sfp+0x60>
 800c856:	bf00      	nop
 800c858:	0800d0b0 	.word	0x0800d0b0
 800c85c:	ffff0001 	.word	0xffff0001

0800c860 <_fwalk_reent>:
 800c860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c864:	4606      	mov	r6, r0
 800c866:	4688      	mov	r8, r1
 800c868:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c86c:	2700      	movs	r7, #0
 800c86e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c872:	f1b9 0901 	subs.w	r9, r9, #1
 800c876:	d505      	bpl.n	800c884 <_fwalk_reent+0x24>
 800c878:	6824      	ldr	r4, [r4, #0]
 800c87a:	2c00      	cmp	r4, #0
 800c87c:	d1f7      	bne.n	800c86e <_fwalk_reent+0xe>
 800c87e:	4638      	mov	r0, r7
 800c880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c884:	89ab      	ldrh	r3, [r5, #12]
 800c886:	2b01      	cmp	r3, #1
 800c888:	d907      	bls.n	800c89a <_fwalk_reent+0x3a>
 800c88a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c88e:	3301      	adds	r3, #1
 800c890:	d003      	beq.n	800c89a <_fwalk_reent+0x3a>
 800c892:	4629      	mov	r1, r5
 800c894:	4630      	mov	r0, r6
 800c896:	47c0      	blx	r8
 800c898:	4307      	orrs	r7, r0
 800c89a:	3568      	adds	r5, #104	; 0x68
 800c89c:	e7e9      	b.n	800c872 <_fwalk_reent+0x12>

0800c89e <__retarget_lock_init_recursive>:
 800c89e:	4770      	bx	lr

0800c8a0 <__retarget_lock_acquire_recursive>:
 800c8a0:	4770      	bx	lr

0800c8a2 <__retarget_lock_release_recursive>:
 800c8a2:	4770      	bx	lr

0800c8a4 <__swhatbuf_r>:
 800c8a4:	b570      	push	{r4, r5, r6, lr}
 800c8a6:	460e      	mov	r6, r1
 800c8a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8ac:	2900      	cmp	r1, #0
 800c8ae:	b096      	sub	sp, #88	; 0x58
 800c8b0:	4614      	mov	r4, r2
 800c8b2:	461d      	mov	r5, r3
 800c8b4:	da08      	bge.n	800c8c8 <__swhatbuf_r+0x24>
 800c8b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	602a      	str	r2, [r5, #0]
 800c8be:	061a      	lsls	r2, r3, #24
 800c8c0:	d410      	bmi.n	800c8e4 <__swhatbuf_r+0x40>
 800c8c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8c6:	e00e      	b.n	800c8e6 <__swhatbuf_r+0x42>
 800c8c8:	466a      	mov	r2, sp
 800c8ca:	f000 f903 	bl	800cad4 <_fstat_r>
 800c8ce:	2800      	cmp	r0, #0
 800c8d0:	dbf1      	blt.n	800c8b6 <__swhatbuf_r+0x12>
 800c8d2:	9a01      	ldr	r2, [sp, #4]
 800c8d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c8d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c8dc:	425a      	negs	r2, r3
 800c8de:	415a      	adcs	r2, r3
 800c8e0:	602a      	str	r2, [r5, #0]
 800c8e2:	e7ee      	b.n	800c8c2 <__swhatbuf_r+0x1e>
 800c8e4:	2340      	movs	r3, #64	; 0x40
 800c8e6:	2000      	movs	r0, #0
 800c8e8:	6023      	str	r3, [r4, #0]
 800c8ea:	b016      	add	sp, #88	; 0x58
 800c8ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c8f0 <__smakebuf_r>:
 800c8f0:	898b      	ldrh	r3, [r1, #12]
 800c8f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c8f4:	079d      	lsls	r5, r3, #30
 800c8f6:	4606      	mov	r6, r0
 800c8f8:	460c      	mov	r4, r1
 800c8fa:	d507      	bpl.n	800c90c <__smakebuf_r+0x1c>
 800c8fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c900:	6023      	str	r3, [r4, #0]
 800c902:	6123      	str	r3, [r4, #16]
 800c904:	2301      	movs	r3, #1
 800c906:	6163      	str	r3, [r4, #20]
 800c908:	b002      	add	sp, #8
 800c90a:	bd70      	pop	{r4, r5, r6, pc}
 800c90c:	ab01      	add	r3, sp, #4
 800c90e:	466a      	mov	r2, sp
 800c910:	f7ff ffc8 	bl	800c8a4 <__swhatbuf_r>
 800c914:	9900      	ldr	r1, [sp, #0]
 800c916:	4605      	mov	r5, r0
 800c918:	4630      	mov	r0, r6
 800c91a:	f7ff f963 	bl	800bbe4 <_malloc_r>
 800c91e:	b948      	cbnz	r0, 800c934 <__smakebuf_r+0x44>
 800c920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c924:	059a      	lsls	r2, r3, #22
 800c926:	d4ef      	bmi.n	800c908 <__smakebuf_r+0x18>
 800c928:	f023 0303 	bic.w	r3, r3, #3
 800c92c:	f043 0302 	orr.w	r3, r3, #2
 800c930:	81a3      	strh	r3, [r4, #12]
 800c932:	e7e3      	b.n	800c8fc <__smakebuf_r+0xc>
 800c934:	4b0d      	ldr	r3, [pc, #52]	; (800c96c <__smakebuf_r+0x7c>)
 800c936:	62b3      	str	r3, [r6, #40]	; 0x28
 800c938:	89a3      	ldrh	r3, [r4, #12]
 800c93a:	6020      	str	r0, [r4, #0]
 800c93c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c940:	81a3      	strh	r3, [r4, #12]
 800c942:	9b00      	ldr	r3, [sp, #0]
 800c944:	6163      	str	r3, [r4, #20]
 800c946:	9b01      	ldr	r3, [sp, #4]
 800c948:	6120      	str	r0, [r4, #16]
 800c94a:	b15b      	cbz	r3, 800c964 <__smakebuf_r+0x74>
 800c94c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c950:	4630      	mov	r0, r6
 800c952:	f000 f8d1 	bl	800caf8 <_isatty_r>
 800c956:	b128      	cbz	r0, 800c964 <__smakebuf_r+0x74>
 800c958:	89a3      	ldrh	r3, [r4, #12]
 800c95a:	f023 0303 	bic.w	r3, r3, #3
 800c95e:	f043 0301 	orr.w	r3, r3, #1
 800c962:	81a3      	strh	r3, [r4, #12]
 800c964:	89a0      	ldrh	r0, [r4, #12]
 800c966:	4305      	orrs	r5, r0
 800c968:	81a5      	strh	r5, [r4, #12]
 800c96a:	e7cd      	b.n	800c908 <__smakebuf_r+0x18>
 800c96c:	0800c6fd 	.word	0x0800c6fd

0800c970 <_malloc_usable_size_r>:
 800c970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c974:	1f18      	subs	r0, r3, #4
 800c976:	2b00      	cmp	r3, #0
 800c978:	bfbc      	itt	lt
 800c97a:	580b      	ldrlt	r3, [r1, r0]
 800c97c:	18c0      	addlt	r0, r0, r3
 800c97e:	4770      	bx	lr

0800c980 <_raise_r>:
 800c980:	291f      	cmp	r1, #31
 800c982:	b538      	push	{r3, r4, r5, lr}
 800c984:	4604      	mov	r4, r0
 800c986:	460d      	mov	r5, r1
 800c988:	d904      	bls.n	800c994 <_raise_r+0x14>
 800c98a:	2316      	movs	r3, #22
 800c98c:	6003      	str	r3, [r0, #0]
 800c98e:	f04f 30ff 	mov.w	r0, #4294967295
 800c992:	bd38      	pop	{r3, r4, r5, pc}
 800c994:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c996:	b112      	cbz	r2, 800c99e <_raise_r+0x1e>
 800c998:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c99c:	b94b      	cbnz	r3, 800c9b2 <_raise_r+0x32>
 800c99e:	4620      	mov	r0, r4
 800c9a0:	f000 f830 	bl	800ca04 <_getpid_r>
 800c9a4:	462a      	mov	r2, r5
 800c9a6:	4601      	mov	r1, r0
 800c9a8:	4620      	mov	r0, r4
 800c9aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9ae:	f000 b817 	b.w	800c9e0 <_kill_r>
 800c9b2:	2b01      	cmp	r3, #1
 800c9b4:	d00a      	beq.n	800c9cc <_raise_r+0x4c>
 800c9b6:	1c59      	adds	r1, r3, #1
 800c9b8:	d103      	bne.n	800c9c2 <_raise_r+0x42>
 800c9ba:	2316      	movs	r3, #22
 800c9bc:	6003      	str	r3, [r0, #0]
 800c9be:	2001      	movs	r0, #1
 800c9c0:	e7e7      	b.n	800c992 <_raise_r+0x12>
 800c9c2:	2400      	movs	r4, #0
 800c9c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c9c8:	4628      	mov	r0, r5
 800c9ca:	4798      	blx	r3
 800c9cc:	2000      	movs	r0, #0
 800c9ce:	e7e0      	b.n	800c992 <_raise_r+0x12>

0800c9d0 <raise>:
 800c9d0:	4b02      	ldr	r3, [pc, #8]	; (800c9dc <raise+0xc>)
 800c9d2:	4601      	mov	r1, r0
 800c9d4:	6818      	ldr	r0, [r3, #0]
 800c9d6:	f7ff bfd3 	b.w	800c980 <_raise_r>
 800c9da:	bf00      	nop
 800c9dc:	20000040 	.word	0x20000040

0800c9e0 <_kill_r>:
 800c9e0:	b538      	push	{r3, r4, r5, lr}
 800c9e2:	4d07      	ldr	r5, [pc, #28]	; (800ca00 <_kill_r+0x20>)
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	4604      	mov	r4, r0
 800c9e8:	4608      	mov	r0, r1
 800c9ea:	4611      	mov	r1, r2
 800c9ec:	602b      	str	r3, [r5, #0]
 800c9ee:	f7f6 fef1 	bl	80037d4 <_kill>
 800c9f2:	1c43      	adds	r3, r0, #1
 800c9f4:	d102      	bne.n	800c9fc <_kill_r+0x1c>
 800c9f6:	682b      	ldr	r3, [r5, #0]
 800c9f8:	b103      	cbz	r3, 800c9fc <_kill_r+0x1c>
 800c9fa:	6023      	str	r3, [r4, #0]
 800c9fc:	bd38      	pop	{r3, r4, r5, pc}
 800c9fe:	bf00      	nop
 800ca00:	20000678 	.word	0x20000678

0800ca04 <_getpid_r>:
 800ca04:	f7f6 bede 	b.w	80037c4 <_getpid>

0800ca08 <__sread>:
 800ca08:	b510      	push	{r4, lr}
 800ca0a:	460c      	mov	r4, r1
 800ca0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca10:	f000 f894 	bl	800cb3c <_read_r>
 800ca14:	2800      	cmp	r0, #0
 800ca16:	bfab      	itete	ge
 800ca18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ca1a:	89a3      	ldrhlt	r3, [r4, #12]
 800ca1c:	181b      	addge	r3, r3, r0
 800ca1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ca22:	bfac      	ite	ge
 800ca24:	6563      	strge	r3, [r4, #84]	; 0x54
 800ca26:	81a3      	strhlt	r3, [r4, #12]
 800ca28:	bd10      	pop	{r4, pc}

0800ca2a <__swrite>:
 800ca2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca2e:	461f      	mov	r7, r3
 800ca30:	898b      	ldrh	r3, [r1, #12]
 800ca32:	05db      	lsls	r3, r3, #23
 800ca34:	4605      	mov	r5, r0
 800ca36:	460c      	mov	r4, r1
 800ca38:	4616      	mov	r6, r2
 800ca3a:	d505      	bpl.n	800ca48 <__swrite+0x1e>
 800ca3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca40:	2302      	movs	r3, #2
 800ca42:	2200      	movs	r2, #0
 800ca44:	f000 f868 	bl	800cb18 <_lseek_r>
 800ca48:	89a3      	ldrh	r3, [r4, #12]
 800ca4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ca52:	81a3      	strh	r3, [r4, #12]
 800ca54:	4632      	mov	r2, r6
 800ca56:	463b      	mov	r3, r7
 800ca58:	4628      	mov	r0, r5
 800ca5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca5e:	f000 b817 	b.w	800ca90 <_write_r>

0800ca62 <__sseek>:
 800ca62:	b510      	push	{r4, lr}
 800ca64:	460c      	mov	r4, r1
 800ca66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca6a:	f000 f855 	bl	800cb18 <_lseek_r>
 800ca6e:	1c43      	adds	r3, r0, #1
 800ca70:	89a3      	ldrh	r3, [r4, #12]
 800ca72:	bf15      	itete	ne
 800ca74:	6560      	strne	r0, [r4, #84]	; 0x54
 800ca76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ca7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ca7e:	81a3      	strheq	r3, [r4, #12]
 800ca80:	bf18      	it	ne
 800ca82:	81a3      	strhne	r3, [r4, #12]
 800ca84:	bd10      	pop	{r4, pc}

0800ca86 <__sclose>:
 800ca86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca8a:	f000 b813 	b.w	800cab4 <_close_r>
	...

0800ca90 <_write_r>:
 800ca90:	b538      	push	{r3, r4, r5, lr}
 800ca92:	4d07      	ldr	r5, [pc, #28]	; (800cab0 <_write_r+0x20>)
 800ca94:	4604      	mov	r4, r0
 800ca96:	4608      	mov	r0, r1
 800ca98:	4611      	mov	r1, r2
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	602a      	str	r2, [r5, #0]
 800ca9e:	461a      	mov	r2, r3
 800caa0:	f7f6 fecf 	bl	8003842 <_write>
 800caa4:	1c43      	adds	r3, r0, #1
 800caa6:	d102      	bne.n	800caae <_write_r+0x1e>
 800caa8:	682b      	ldr	r3, [r5, #0]
 800caaa:	b103      	cbz	r3, 800caae <_write_r+0x1e>
 800caac:	6023      	str	r3, [r4, #0]
 800caae:	bd38      	pop	{r3, r4, r5, pc}
 800cab0:	20000678 	.word	0x20000678

0800cab4 <_close_r>:
 800cab4:	b538      	push	{r3, r4, r5, lr}
 800cab6:	4d06      	ldr	r5, [pc, #24]	; (800cad0 <_close_r+0x1c>)
 800cab8:	2300      	movs	r3, #0
 800caba:	4604      	mov	r4, r0
 800cabc:	4608      	mov	r0, r1
 800cabe:	602b      	str	r3, [r5, #0]
 800cac0:	f7f6 fedb 	bl	800387a <_close>
 800cac4:	1c43      	adds	r3, r0, #1
 800cac6:	d102      	bne.n	800cace <_close_r+0x1a>
 800cac8:	682b      	ldr	r3, [r5, #0]
 800caca:	b103      	cbz	r3, 800cace <_close_r+0x1a>
 800cacc:	6023      	str	r3, [r4, #0]
 800cace:	bd38      	pop	{r3, r4, r5, pc}
 800cad0:	20000678 	.word	0x20000678

0800cad4 <_fstat_r>:
 800cad4:	b538      	push	{r3, r4, r5, lr}
 800cad6:	4d07      	ldr	r5, [pc, #28]	; (800caf4 <_fstat_r+0x20>)
 800cad8:	2300      	movs	r3, #0
 800cada:	4604      	mov	r4, r0
 800cadc:	4608      	mov	r0, r1
 800cade:	4611      	mov	r1, r2
 800cae0:	602b      	str	r3, [r5, #0]
 800cae2:	f7f6 fed6 	bl	8003892 <_fstat>
 800cae6:	1c43      	adds	r3, r0, #1
 800cae8:	d102      	bne.n	800caf0 <_fstat_r+0x1c>
 800caea:	682b      	ldr	r3, [r5, #0]
 800caec:	b103      	cbz	r3, 800caf0 <_fstat_r+0x1c>
 800caee:	6023      	str	r3, [r4, #0]
 800caf0:	bd38      	pop	{r3, r4, r5, pc}
 800caf2:	bf00      	nop
 800caf4:	20000678 	.word	0x20000678

0800caf8 <_isatty_r>:
 800caf8:	b538      	push	{r3, r4, r5, lr}
 800cafa:	4d06      	ldr	r5, [pc, #24]	; (800cb14 <_isatty_r+0x1c>)
 800cafc:	2300      	movs	r3, #0
 800cafe:	4604      	mov	r4, r0
 800cb00:	4608      	mov	r0, r1
 800cb02:	602b      	str	r3, [r5, #0]
 800cb04:	f7f6 fed5 	bl	80038b2 <_isatty>
 800cb08:	1c43      	adds	r3, r0, #1
 800cb0a:	d102      	bne.n	800cb12 <_isatty_r+0x1a>
 800cb0c:	682b      	ldr	r3, [r5, #0]
 800cb0e:	b103      	cbz	r3, 800cb12 <_isatty_r+0x1a>
 800cb10:	6023      	str	r3, [r4, #0]
 800cb12:	bd38      	pop	{r3, r4, r5, pc}
 800cb14:	20000678 	.word	0x20000678

0800cb18 <_lseek_r>:
 800cb18:	b538      	push	{r3, r4, r5, lr}
 800cb1a:	4d07      	ldr	r5, [pc, #28]	; (800cb38 <_lseek_r+0x20>)
 800cb1c:	4604      	mov	r4, r0
 800cb1e:	4608      	mov	r0, r1
 800cb20:	4611      	mov	r1, r2
 800cb22:	2200      	movs	r2, #0
 800cb24:	602a      	str	r2, [r5, #0]
 800cb26:	461a      	mov	r2, r3
 800cb28:	f7f6 fece 	bl	80038c8 <_lseek>
 800cb2c:	1c43      	adds	r3, r0, #1
 800cb2e:	d102      	bne.n	800cb36 <_lseek_r+0x1e>
 800cb30:	682b      	ldr	r3, [r5, #0]
 800cb32:	b103      	cbz	r3, 800cb36 <_lseek_r+0x1e>
 800cb34:	6023      	str	r3, [r4, #0]
 800cb36:	bd38      	pop	{r3, r4, r5, pc}
 800cb38:	20000678 	.word	0x20000678

0800cb3c <_read_r>:
 800cb3c:	b538      	push	{r3, r4, r5, lr}
 800cb3e:	4d07      	ldr	r5, [pc, #28]	; (800cb5c <_read_r+0x20>)
 800cb40:	4604      	mov	r4, r0
 800cb42:	4608      	mov	r0, r1
 800cb44:	4611      	mov	r1, r2
 800cb46:	2200      	movs	r2, #0
 800cb48:	602a      	str	r2, [r5, #0]
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	f7f6 fe5c 	bl	8003808 <_read>
 800cb50:	1c43      	adds	r3, r0, #1
 800cb52:	d102      	bne.n	800cb5a <_read_r+0x1e>
 800cb54:	682b      	ldr	r3, [r5, #0]
 800cb56:	b103      	cbz	r3, 800cb5a <_read_r+0x1e>
 800cb58:	6023      	str	r3, [r4, #0]
 800cb5a:	bd38      	pop	{r3, r4, r5, pc}
 800cb5c:	20000678 	.word	0x20000678

0800cb60 <_init>:
 800cb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb62:	bf00      	nop
 800cb64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb66:	bc08      	pop	{r3}
 800cb68:	469e      	mov	lr, r3
 800cb6a:	4770      	bx	lr

0800cb6c <_fini>:
 800cb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb6e:	bf00      	nop
 800cb70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb72:	bc08      	pop	{r3}
 800cb74:	469e      	mov	lr, r3
 800cb76:	4770      	bx	lr
