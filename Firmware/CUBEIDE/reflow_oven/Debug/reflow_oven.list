
reflow_oven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c498  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000092c  0800c5d8  0800c5d8  0001c5d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cf04  0800cf04  0001cf04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cf0c  0800cf0c  0001cf0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800cf10  0800cf10  0001cf10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000210  20000004  0800cf14  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000484  20000214  0800d124  00020214  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000698  0800d124  00020698  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b55b  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003214  00000000  00000000  0003b79f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001bc8  00000000  00000000  0003e9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001a90  00000000  00000000  00040580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00023f59  00000000  00000000  00042010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019aa3  00000000  00000000  00065f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e55f6  00000000  00000000  0007fa0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00165002  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008794  00000000  00000000  00165054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000214 	.word	0x20000214
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c5c0 	.word	0x0800c5c0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000218 	.word	0x20000218
 800017c:	0800c5c0 	.word	0x0800c5c0

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b974 	b.w	8000e78 <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9d08      	ldr	r5, [sp, #32]
 8000bae:	4604      	mov	r4, r0
 8000bb0:	468e      	mov	lr, r1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d14d      	bne.n	8000c52 <__udivmoddi4+0xaa>
 8000bb6:	428a      	cmp	r2, r1
 8000bb8:	4694      	mov	ip, r2
 8000bba:	d969      	bls.n	8000c90 <__udivmoddi4+0xe8>
 8000bbc:	fab2 f282 	clz	r2, r2
 8000bc0:	b152      	cbz	r2, 8000bd8 <__udivmoddi4+0x30>
 8000bc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bc6:	f1c2 0120 	rsb	r1, r2, #32
 8000bca:	fa20 f101 	lsr.w	r1, r0, r1
 8000bce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bd6:	4094      	lsls	r4, r2
 8000bd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bdc:	0c21      	lsrs	r1, r4, #16
 8000bde:	fbbe f6f8 	udiv	r6, lr, r8
 8000be2:	fa1f f78c 	uxth.w	r7, ip
 8000be6:	fb08 e316 	mls	r3, r8, r6, lr
 8000bea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bee:	fb06 f107 	mul.w	r1, r6, r7
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	d90a      	bls.n	8000c0c <__udivmoddi4+0x64>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bfe:	f080 811f 	bcs.w	8000e40 <__udivmoddi4+0x298>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 811c 	bls.w	8000e40 <__udivmoddi4+0x298>
 8000c08:	3e02      	subs	r6, #2
 8000c0a:	4463      	add	r3, ip
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1c:	fb00 f707 	mul.w	r7, r0, r7
 8000c20:	42a7      	cmp	r7, r4
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x92>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2c:	f080 810a 	bcs.w	8000e44 <__udivmoddi4+0x29c>
 8000c30:	42a7      	cmp	r7, r4
 8000c32:	f240 8107 	bls.w	8000e44 <__udivmoddi4+0x29c>
 8000c36:	4464      	add	r4, ip
 8000c38:	3802      	subs	r0, #2
 8000c3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3e:	1be4      	subs	r4, r4, r7
 8000c40:	2600      	movs	r6, #0
 8000c42:	b11d      	cbz	r5, 8000c4c <__udivmoddi4+0xa4>
 8000c44:	40d4      	lsrs	r4, r2
 8000c46:	2300      	movs	r3, #0
 8000c48:	e9c5 4300 	strd	r4, r3, [r5]
 8000c4c:	4631      	mov	r1, r6
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0xc2>
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	f000 80ef 	beq.w	8000e3a <__udivmoddi4+0x292>
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c62:	4630      	mov	r0, r6
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	fab3 f683 	clz	r6, r3
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d14a      	bne.n	8000d08 <__udivmoddi4+0x160>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d302      	bcc.n	8000c7c <__udivmoddi4+0xd4>
 8000c76:	4282      	cmp	r2, r0
 8000c78:	f200 80f9 	bhi.w	8000e6e <__udivmoddi4+0x2c6>
 8000c7c:	1a84      	subs	r4, r0, r2
 8000c7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c82:	2001      	movs	r0, #1
 8000c84:	469e      	mov	lr, r3
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	d0e0      	beq.n	8000c4c <__udivmoddi4+0xa4>
 8000c8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c8e:	e7dd      	b.n	8000c4c <__udivmoddi4+0xa4>
 8000c90:	b902      	cbnz	r2, 8000c94 <__udivmoddi4+0xec>
 8000c92:	deff      	udf	#255	; 0xff
 8000c94:	fab2 f282 	clz	r2, r2
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	f040 8092 	bne.w	8000dc2 <__udivmoddi4+0x21a>
 8000c9e:	eba1 010c 	sub.w	r1, r1, ip
 8000ca2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca6:	fa1f fe8c 	uxth.w	lr, ip
 8000caa:	2601      	movs	r6, #1
 8000cac:	0c20      	lsrs	r0, r4, #16
 8000cae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cb2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cb6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cba:	fb0e f003 	mul.w	r0, lr, r3
 8000cbe:	4288      	cmp	r0, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x12c>
 8000cc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x12a>
 8000ccc:	4288      	cmp	r0, r1
 8000cce:	f200 80cb 	bhi.w	8000e68 <__udivmoddi4+0x2c0>
 8000cd2:	4643      	mov	r3, r8
 8000cd4:	1a09      	subs	r1, r1, r0
 8000cd6:	b2a4      	uxth	r4, r4
 8000cd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cdc:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce8:	45a6      	cmp	lr, r4
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x156>
 8000cec:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf4:	d202      	bcs.n	8000cfc <__udivmoddi4+0x154>
 8000cf6:	45a6      	cmp	lr, r4
 8000cf8:	f200 80bb 	bhi.w	8000e72 <__udivmoddi4+0x2ca>
 8000cfc:	4608      	mov	r0, r1
 8000cfe:	eba4 040e 	sub.w	r4, r4, lr
 8000d02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d06:	e79c      	b.n	8000c42 <__udivmoddi4+0x9a>
 8000d08:	f1c6 0720 	rsb	r7, r6, #32
 8000d0c:	40b3      	lsls	r3, r6
 8000d0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d16:	fa20 f407 	lsr.w	r4, r0, r7
 8000d1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d1e:	431c      	orrs	r4, r3
 8000d20:	40f9      	lsrs	r1, r7
 8000d22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d26:	fa00 f306 	lsl.w	r3, r0, r6
 8000d2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d2e:	0c20      	lsrs	r0, r4, #16
 8000d30:	fa1f fe8c 	uxth.w	lr, ip
 8000d34:	fb09 1118 	mls	r1, r9, r8, r1
 8000d38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d40:	4288      	cmp	r0, r1
 8000d42:	fa02 f206 	lsl.w	r2, r2, r6
 8000d46:	d90b      	bls.n	8000d60 <__udivmoddi4+0x1b8>
 8000d48:	eb1c 0101 	adds.w	r1, ip, r1
 8000d4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d50:	f080 8088 	bcs.w	8000e64 <__udivmoddi4+0x2bc>
 8000d54:	4288      	cmp	r0, r1
 8000d56:	f240 8085 	bls.w	8000e64 <__udivmoddi4+0x2bc>
 8000d5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	1a09      	subs	r1, r1, r0
 8000d62:	b2a4      	uxth	r4, r4
 8000d64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d68:	fb09 1110 	mls	r1, r9, r0, r1
 8000d6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d74:	458e      	cmp	lr, r1
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x1e2>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d80:	d26c      	bcs.n	8000e5c <__udivmoddi4+0x2b4>
 8000d82:	458e      	cmp	lr, r1
 8000d84:	d96a      	bls.n	8000e5c <__udivmoddi4+0x2b4>
 8000d86:	3802      	subs	r0, #2
 8000d88:	4461      	add	r1, ip
 8000d8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d92:	eba1 010e 	sub.w	r1, r1, lr
 8000d96:	42a1      	cmp	r1, r4
 8000d98:	46c8      	mov	r8, r9
 8000d9a:	46a6      	mov	lr, r4
 8000d9c:	d356      	bcc.n	8000e4c <__udivmoddi4+0x2a4>
 8000d9e:	d053      	beq.n	8000e48 <__udivmoddi4+0x2a0>
 8000da0:	b15d      	cbz	r5, 8000dba <__udivmoddi4+0x212>
 8000da2:	ebb3 0208 	subs.w	r2, r3, r8
 8000da6:	eb61 010e 	sbc.w	r1, r1, lr
 8000daa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dae:	fa22 f306 	lsr.w	r3, r2, r6
 8000db2:	40f1      	lsrs	r1, r6
 8000db4:	431f      	orrs	r7, r3
 8000db6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dba:	2600      	movs	r6, #0
 8000dbc:	4631      	mov	r1, r6
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	f1c2 0320 	rsb	r3, r2, #32
 8000dc6:	40d8      	lsrs	r0, r3
 8000dc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dcc:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd0:	4091      	lsls	r1, r2
 8000dd2:	4301      	orrs	r1, r0
 8000dd4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd8:	fa1f fe8c 	uxth.w	lr, ip
 8000ddc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de0:	fb07 3610 	mls	r6, r7, r0, r3
 8000de4:	0c0b      	lsrs	r3, r1, #16
 8000de6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dea:	fb00 f60e 	mul.w	r6, r0, lr
 8000dee:	429e      	cmp	r6, r3
 8000df0:	fa04 f402 	lsl.w	r4, r4, r2
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x260>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dfe:	d22f      	bcs.n	8000e60 <__udivmoddi4+0x2b8>
 8000e00:	429e      	cmp	r6, r3
 8000e02:	d92d      	bls.n	8000e60 <__udivmoddi4+0x2b8>
 8000e04:	3802      	subs	r0, #2
 8000e06:	4463      	add	r3, ip
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	b289      	uxth	r1, r1
 8000e0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e10:	fb07 3316 	mls	r3, r7, r6, r3
 8000e14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e18:	fb06 f30e 	mul.w	r3, r6, lr
 8000e1c:	428b      	cmp	r3, r1
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x28a>
 8000e20:	eb1c 0101 	adds.w	r1, ip, r1
 8000e24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e28:	d216      	bcs.n	8000e58 <__udivmoddi4+0x2b0>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d914      	bls.n	8000e58 <__udivmoddi4+0x2b0>
 8000e2e:	3e02      	subs	r6, #2
 8000e30:	4461      	add	r1, ip
 8000e32:	1ac9      	subs	r1, r1, r3
 8000e34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e38:	e738      	b.n	8000cac <__udivmoddi4+0x104>
 8000e3a:	462e      	mov	r6, r5
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	e705      	b.n	8000c4c <__udivmoddi4+0xa4>
 8000e40:	4606      	mov	r6, r0
 8000e42:	e6e3      	b.n	8000c0c <__udivmoddi4+0x64>
 8000e44:	4618      	mov	r0, r3
 8000e46:	e6f8      	b.n	8000c3a <__udivmoddi4+0x92>
 8000e48:	454b      	cmp	r3, r9
 8000e4a:	d2a9      	bcs.n	8000da0 <__udivmoddi4+0x1f8>
 8000e4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e54:	3801      	subs	r0, #1
 8000e56:	e7a3      	b.n	8000da0 <__udivmoddi4+0x1f8>
 8000e58:	4646      	mov	r6, r8
 8000e5a:	e7ea      	b.n	8000e32 <__udivmoddi4+0x28a>
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	e794      	b.n	8000d8a <__udivmoddi4+0x1e2>
 8000e60:	4640      	mov	r0, r8
 8000e62:	e7d1      	b.n	8000e08 <__udivmoddi4+0x260>
 8000e64:	46d0      	mov	r8, sl
 8000e66:	e77b      	b.n	8000d60 <__udivmoddi4+0x1b8>
 8000e68:	3b02      	subs	r3, #2
 8000e6a:	4461      	add	r1, ip
 8000e6c:	e732      	b.n	8000cd4 <__udivmoddi4+0x12c>
 8000e6e:	4630      	mov	r0, r6
 8000e70:	e709      	b.n	8000c86 <__udivmoddi4+0xde>
 8000e72:	4464      	add	r4, ip
 8000e74:	3802      	subs	r0, #2
 8000e76:	e742      	b.n	8000cfe <__udivmoddi4+0x156>

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <MAX31855_init>:
 */

#include "main.h"
#include "MAX31855.h"

void MAX31855_init(max31855_t* dev, GPIO_TypeDef* gpio, uint16_t pin, SPI_HandleTypeDef* spi) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	80fb      	strh	r3, [r7, #6]
	dev->gpio = NSS_GPIO_Port;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e92:	60da      	str	r2, [r3, #12]
	dev->pin = NSS_Pin;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2210      	movs	r2, #16
 8000e98:	821a      	strh	r2, [r3, #16]
	dev->spi = spi;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	683a      	ldr	r2, [r7, #0]
 8000e9e:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(dev->gpio, dev->pin, GPIO_PIN_SET);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	68d8      	ldr	r0, [r3, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	8a1b      	ldrh	r3, [r3, #16]
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f002 fed4 	bl	8003c58 <HAL_GPIO_WritePin>

}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <MAX31855_read_celsius>:


float MAX31855_read_celsius(max31855_t* dev) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(dev->gpio, dev->pin, GPIO_PIN_RESET);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68d8      	ldr	r0, [r3, #12]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	8a1b      	ldrh	r3, [r3, #16]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f002 fec4 	bl	8003c58 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(dev->spi, dev->buf, 4, 1000);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6818      	ldr	r0, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	1d19      	adds	r1, r3, #4
 8000ed8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000edc:	2204      	movs	r2, #4
 8000ede:	f004 fd5c 	bl	800599a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(dev->gpio, dev->pin, GPIO_PIN_SET);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	68d8      	ldr	r0, [r3, #12]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	8a1b      	ldrh	r3, [r3, #16]
 8000eea:	2201      	movs	r2, #1
 8000eec:	4619      	mov	r1, r3
 8000eee:	f002 feb3 	bl	8003c58 <HAL_GPIO_WritePin>

	dev->rawData = dev->buf[3] | ( dev->buf[2] << 8 ) | ( dev->buf[1] << 16 ) | ( dev->buf[0] << 24 );
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	79db      	ldrb	r3, [r3, #7]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	799b      	ldrb	r3, [r3, #6]
 8000efc:	021b      	lsls	r3, r3, #8
 8000efe:	431a      	orrs	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	795b      	ldrb	r3, [r3, #5]
 8000f04:	041b      	lsls	r3, r3, #16
 8000f06:	431a      	orrs	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	791b      	ldrb	r3, [r3, #4]
 8000f0c:	061b      	lsls	r3, r3, #24
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	615a      	str	r2, [r3, #20]

	if (dev->rawData & 0x80000000) {
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	da0a      	bge.n	8000f32 <MAX31855_read_celsius+0x7a>
		// Negative value, drop the lower 18 bits and explicitly extend sign bits.
		dev->rawData = 0xFFFFC000 | ((dev->rawData >> 18) & 0x00003FFF);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	0c9b      	lsrs	r3, r3, #18
 8000f22:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8000f26:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	615a      	str	r2, [r3, #20]
 8000f30:	e004      	b.n	8000f3c <MAX31855_read_celsius+0x84>
	} else {
		dev->rawData >>= 18;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	149a      	asrs	r2, r3, #18
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	615a      	str	r2, [r3, #20]
	}

	dev->temp = dev->rawData;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	ee07 3a90 	vmov	s15, r3
 8000f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	edc3 7a06 	vstr	s15, [r3, #24]
	// LSB = 0.25 degrees C
	dev->temp *= 0.25;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f54:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000f58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	edc3 7a06 	vstr	s15, [r3, #24]
	return dev->temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	ee07 3a90 	vmov	s15, r3
}
 8000f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4013      	ands	r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f98:	68fb      	ldr	r3, [r7, #12]
}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <clear_buffer>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void clear_buffer(uint8_t* buf, uint32_t len)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b085      	sub	sp, #20
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
	for(int z = 0; z < len; z++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	e007      	b.n	8000fc6 <clear_buffer+0x20>
	{
		buf[z] = '\0';
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	4413      	add	r3, r2
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
	for(int z = 0; z < len; z++)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d8f3      	bhi.n	8000fb6 <clear_buffer+0x10>
	}
}
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <beep_IT>:

void beep_IT(rfo_t* dev, uint8_t numBeeps) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	70fb      	strb	r3, [r7, #3]
	dev->numBeeps = numBeeps;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	78fa      	ldrb	r2, [r7, #3]
 8000fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	dev->cntBeeps = 0;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	__HAL_TIM_SET_COMPARE(dev->buzPwmTim, TIM_CHANNEL_1, 2);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2202      	movs	r2, #2
 8001000:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_CLEAR_FLAG(dev->buzElapsTim, TIM_SR_UIF);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f06f 0201 	mvn.w	r2, #1
 800100c:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(dev->buzElapsTim);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001012:	4618      	mov	r0, r3
 8001014:	f005 fb38 	bl	8006688 <HAL_TIM_Base_Start_IT>

}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <assign_reflow_temps_from_lut>:

void assign_reflow_temps_from_lut(rfo_paste_t* config, const float* lut) {
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
	config->PREHEAT_START_TIME 	= lut[0];
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	601a      	str	r2, [r3, #0]
	config->PREHEAT_DURATION	= lut[1];
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	605a      	str	r2, [r3, #4]
	config->PREHEAT_START_TEMP	= lut[2];
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	609a      	str	r2, [r3, #8]
	config->PREHEAT_END_TEMP	= lut[3];
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	60da      	str	r2, [r3, #12]

	config->SOAK_START_TIME		= lut[4];
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	691a      	ldr	r2, [r3, #16]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	61da      	str	r2, [r3, #28]
	config->SOAK_DURATION		= lut[5];
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	695a      	ldr	r2, [r3, #20]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	611a      	str	r2, [r3, #16]
	config->SOAK_START_TEMP		= lut[6];
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	699a      	ldr	r2, [r3, #24]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	615a      	str	r2, [r3, #20]
	config->SOAK_END_TEMP		= lut[7];
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	69da      	ldr	r2, [r3, #28]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	619a      	str	r2, [r3, #24]

	config->RAMP_START_TIME		= lut[8];
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	6a1a      	ldr	r2, [r3, #32]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	62da      	str	r2, [r3, #44]	; 0x2c
	config->RAMP_DURATION		= lut[9];
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	621a      	str	r2, [r3, #32]
	config->RAMP_START_TEMP		= lut[10];
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	625a      	str	r2, [r3, #36]	; 0x24
	config->RAMP_END_TEMP		= lut[11];
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	629a      	str	r2, [r3, #40]	; 0x28

	config->REFLOW_START_TIME	= lut[12];
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	63da      	str	r2, [r3, #60]	; 0x3c
	config->REFLOW_DURATION		= lut[13];
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	631a      	str	r2, [r3, #48]	; 0x30
	config->REFLOW_START_TEMP	= lut[14];
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	635a      	str	r2, [r3, #52]	; 0x34
	config->REFLOW_END_TEMP		= lut[15];
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	639a      	str	r2, [r3, #56]	; 0x38

	config->COOL_START_TIME		= lut[16];
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	649a      	str	r2, [r3, #72]	; 0x48
	config->COOL_DURATION		= lut[17];
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	641a      	str	r2, [r3, #64]	; 0x40
	config->COOL_END_TEMP		= lut[18];
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	645a      	str	r2, [r3, #68]	; 0x44

	config->PREHEAT_TEMP_INCREASE	= lut[19];
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	64da      	str	r2, [r3, #76]	; 0x4c
	config->SOAK_TEMP_INCREASE		= lut[20];
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	651a      	str	r2, [r3, #80]	; 0x50
	config->RAMP_TEMP_INCREASE		= lut[21];
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	655a      	str	r2, [r3, #84]	; 0x54
	config->REFLOW_TEMP_INCREASE	= lut[22];
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	659a      	str	r2, [r3, #88]	; 0x58
	config->COOL_TEMP_DECREASE		= lut[23];
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b09b      	sub	sp, #108	; 0x6c
 80010fc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010fe:	f002 f9c3 	bl	8003488 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001102:	f000 fc41 	bl	8001988 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001106:	f000 fca3 	bl	8001a50 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800110a:	f000 fedd 	bl	8001ec8 <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 800110e:	f000 fcbd 	bl	8001a8c <MX_LPUART1_UART_Init>
	MX_SPI1_Init();
 8001112:	f000 fd53 	bl	8001bbc <MX_SPI1_Init>
	MX_TIM16_Init();
 8001116:	f000 fe89 	bl	8001e2c <MX_TIM16_Init>
	MX_TIM2_Init();
 800111a:	f000 fe2d 	bl	8001d78 <MX_TIM2_Init>
	MX_TIM17_Init();
 800111e:	f000 fead 	bl	8001e7c <MX_TIM17_Init>
	MX_TIM1_Init();
 8001122:	f000 fd89 	bl	8001c38 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 8001126:	f000 fcfd 	bl	8001b24 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	_RFO_INIT(dev, &hlpuart1, &hspi1 ,&htim2, &htim17, &htim2, RFO_DEFAULT_DUTY, RFO_DEFAULT_PWM_FREQ_KHZ);
 800112a:	4bad      	ldr	r3, [pc, #692]	; (80013e0 <main+0x2e8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4aad      	ldr	r2, [pc, #692]	; (80013e4 <main+0x2ec>)
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	4bab      	ldr	r3, [pc, #684]	; (80013e0 <main+0x2e8>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4aac      	ldr	r2, [pc, #688]	; (80013e8 <main+0x2f0>)
 8001138:	62da      	str	r2, [r3, #44]	; 0x2c
 800113a:	4ba9      	ldr	r3, [pc, #676]	; (80013e0 <main+0x2e8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4aab      	ldr	r2, [pc, #684]	; (80013ec <main+0x2f4>)
 8001140:	635a      	str	r2, [r3, #52]	; 0x34
 8001142:	4ba7      	ldr	r3, [pc, #668]	; (80013e0 <main+0x2e8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4aaa      	ldr	r2, [pc, #680]	; (80013f0 <main+0x2f8>)
 8001148:	639a      	str	r2, [r3, #56]	; 0x38
 800114a:	4ba5      	ldr	r3, [pc, #660]	; (80013e0 <main+0x2e8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4aa7      	ldr	r2, [pc, #668]	; (80013ec <main+0x2f4>)
 8001150:	63da      	str	r2, [r3, #60]	; 0x3c
 8001152:	4ba3      	ldr	r3, [pc, #652]	; (80013e0 <main+0x2e8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800115c:	4ba0      	ldr	r3, [pc, #640]	; (80013e0 <main+0x2e8>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001166:	4b9e      	ldr	r3, [pc, #632]	; (80013e0 <main+0x2e8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2200      	movs	r2, #0
 800116c:	861a      	strh	r2, [r3, #48]	; 0x30
 800116e:	4b9c      	ldr	r3, [pc, #624]	; (80013e0 <main+0x2e8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001178:	4b99      	ldr	r3, [pc, #612]	; (80013e0 <main+0x2e8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2200      	movs	r2, #0
 800117e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001180:	4b97      	ldr	r3, [pc, #604]	; (80013e0 <main+0x2e8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	649a      	str	r2, [r3, #72]	; 0x48
 800118a:	4b95      	ldr	r3, [pc, #596]	; (80013e0 <main+0x2e8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001194:	4b92      	ldr	r3, [pc, #584]	; (80013e0 <main+0x2e8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800119e:	4b90      	ldr	r3, [pc, #576]	; (80013e0 <main+0x2e8>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	655a      	str	r2, [r3, #84]	; 0x54
 80011a8:	4b8d      	ldr	r3, [pc, #564]	; (80013e0 <main+0x2e8>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2232      	movs	r2, #50	; 0x32
 80011ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80011b2:	4b8b      	ldr	r3, [pc, #556]	; (80013e0 <main+0x2e8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	220a      	movs	r2, #10
 80011b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80011bc:	4b88      	ldr	r3, [pc, #544]	; (80013e0 <main+0x2e8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	_RFO_FSM_INIT(fsm);
 80011c6:	4b8b      	ldr	r3, [pc, #556]	; (80013f4 <main+0x2fc>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2200      	movs	r2, #0
 80011cc:	709a      	strb	r2, [r3, #2]
 80011ce:	4b89      	ldr	r3, [pc, #548]	; (80013f4 <main+0x2fc>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
 80011d6:	4b87      	ldr	r3, [pc, #540]	; (80013f4 <main+0x2fc>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2200      	movs	r2, #0
 80011dc:	705a      	strb	r2, [r3, #1]

	//assign_reflow_temps_from_lut(config, TS391LT50);
	assign_reflow_temps_from_lut(config, SMD291AX50T3);
 80011de:	4b86      	ldr	r3, [pc, #536]	; (80013f8 <main+0x300>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4986      	ldr	r1, [pc, #536]	; (80013fc <main+0x304>)
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff1b 	bl	8001020 <assign_reflow_temps_from_lut>

	HAL_UART_Receive(&huart1, dp->rcv, 50, 1000); // Resets UART buffers, so isr is not fired on boot
 80011ea:	4b85      	ldr	r3, [pc, #532]	; (8001400 <main+0x308>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f103 0108 	add.w	r1, r3, #8
 80011f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f6:	2232      	movs	r2, #50	; 0x32
 80011f8:	4882      	ldr	r0, [pc, #520]	; (8001404 <main+0x30c>)
 80011fa:	f006 fb6b 	bl	80078d4 <HAL_UART_Receive>
	HAL_UART_Receive_IT(&huart1, dp->rcv, 4);
 80011fe:	4b80      	ldr	r3, [pc, #512]	; (8001400 <main+0x308>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3308      	adds	r3, #8
 8001204:	2204      	movs	r2, #4
 8001206:	4619      	mov	r1, r3
 8001208:	487e      	ldr	r0, [pc, #504]	; (8001404 <main+0x30c>)
 800120a:	f006 fc37 	bl	8007a7c <HAL_UART_Receive_IT>


	nextion_init(dp, &huart1);
 800120e:	4b7c      	ldr	r3, [pc, #496]	; (8001400 <main+0x308>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	497c      	ldr	r1, [pc, #496]	; (8001404 <main+0x30c>)
 8001214:	4618      	mov	r0, r3
 8001216:	f001 fc61 	bl	8002adc <nextion_init>
	char buf[100];

	dp->write_id_val(dp, "j0", 0);
 800121a:	4b79      	ldr	r3, [pc, #484]	; (8001400 <main+0x308>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001220:	4a77      	ldr	r2, [pc, #476]	; (8001400 <main+0x308>)
 8001222:	6810      	ldr	r0, [r2, #0]
 8001224:	2200      	movs	r2, #0
 8001226:	4978      	ldr	r1, [pc, #480]	; (8001408 <main+0x310>)
 8001228:	4798      	blx	r3

	_RFO_PERIPHERAL_INIT();
 800122a:	4b6d      	ldr	r3, [pc, #436]	; (80013e0 <main+0x2e8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	3304      	adds	r3, #4
 8001230:	2201      	movs	r2, #1
 8001232:	4619      	mov	r1, r3
 8001234:	486b      	ldr	r0, [pc, #428]	; (80013e4 <main+0x2ec>)
 8001236:	f006 fc21 	bl	8007a7c <HAL_UART_Receive_IT>
 800123a:	4b6c      	ldr	r3, [pc, #432]	; (80013ec <main+0x2f4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2200      	movs	r2, #0
 8001240:	635a      	str	r2, [r3, #52]	; 0x34
 8001242:	2100      	movs	r1, #0
 8001244:	4869      	ldr	r0, [pc, #420]	; (80013ec <main+0x2f4>)
 8001246:	f005 faf3 	bl	8006830 <HAL_TIM_PWM_Start>
 800124a:	4b70      	ldr	r3, [pc, #448]	; (800140c <main+0x314>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2200      	movs	r2, #0
 8001250:	635a      	str	r2, [r3, #52]	; 0x34
 8001252:	4b6e      	ldr	r3, [pc, #440]	; (800140c <main+0x314>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2200      	movs	r2, #0
 8001258:	639a      	str	r2, [r3, #56]	; 0x38
 800125a:	2100      	movs	r1, #0
 800125c:	486b      	ldr	r0, [pc, #428]	; (800140c <main+0x314>)
 800125e:	f005 fae7 	bl	8006830 <HAL_TIM_PWM_Start>
 8001262:	2104      	movs	r1, #4
 8001264:	4869      	ldr	r0, [pc, #420]	; (800140c <main+0x314>)
 8001266:	f005 fae3 	bl	8006830 <HAL_TIM_PWM_Start>

	MAX31855_init(tempSens, NSS_GPIO_Port, NSS_Pin, &hspi1);
 800126a:	4b69      	ldr	r3, [pc, #420]	; (8001410 <main+0x318>)
 800126c:	6818      	ldr	r0, [r3, #0]
 800126e:	4b5e      	ldr	r3, [pc, #376]	; (80013e8 <main+0x2f0>)
 8001270:	2210      	movs	r2, #16
 8001272:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001276:	f7ff fe01 	bl	8000e7c <MAX31855_init>

	PIDController_Init(pid, kP, kI, kD, SAMPLE_TIME, tau, limMin, limMax, limMinInt, limMaxInt);
 800127a:	4b66      	ldr	r3, [pc, #408]	; (8001414 <main+0x31c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	eddf 7a66 	vldr	s15, [pc, #408]	; 8001418 <main+0x320>
 8001282:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001286:	eddf 6a65 	vldr	s13, [pc, #404]	; 800141c <main+0x324>
 800128a:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8001420 <main+0x328>
 800128e:	eddf 5a65 	vldr	s11, [pc, #404]	; 8001424 <main+0x32c>
 8001292:	ed9f 5a65 	vldr	s10, [pc, #404]	; 8001428 <main+0x330>
 8001296:	eddf 4a65 	vldr	s9, [pc, #404]	; 800142c <main+0x334>
 800129a:	ed9f 4a65 	vldr	s8, [pc, #404]	; 8001430 <main+0x338>
 800129e:	eef0 3a64 	vmov.f32	s7, s9
 80012a2:	eeb0 3a45 	vmov.f32	s6, s10
 80012a6:	eef0 2a65 	vmov.f32	s5, s11
 80012aa:	eeb0 2a46 	vmov.f32	s4, s12
 80012ae:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 80012b2:	eeb0 1a66 	vmov.f32	s2, s13
 80012b6:	eef0 0a47 	vmov.f32	s1, s14
 80012ba:	eeb0 0a67 	vmov.f32	s0, s15
 80012be:	4618      	mov	r0, r3
 80012c0:	f001 fc30 	bl	8002b24 <PIDController_Init>

	dp->write_id_val(dp, "j0", 100);
 80012c4:	4b4e      	ldr	r3, [pc, #312]	; (8001400 <main+0x308>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012ca:	4a4d      	ldr	r2, [pc, #308]	; (8001400 <main+0x308>)
 80012cc:	6810      	ldr	r0, [r2, #0]
 80012ce:	2264      	movs	r2, #100	; 0x64
 80012d0:	494d      	ldr	r1, [pc, #308]	; (8001408 <main+0x310>)
 80012d2:	4798      	blx	r3
	HAL_Delay(1000);
 80012d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012d8:	f002 f95c 	bl	8003594 <HAL_Delay>

	dp->write(dp, "page main");
 80012dc:	4b48      	ldr	r3, [pc, #288]	; (8001400 <main+0x308>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80012e2:	4a47      	ldr	r2, [pc, #284]	; (8001400 <main+0x308>)
 80012e4:	6812      	ldr	r2, [r2, #0]
 80012e6:	4953      	ldr	r1, [pc, #332]	; (8001434 <main+0x33c>)
 80012e8:	4610      	mov	r0, r2
 80012ea:	4798      	blx	r3
	dev->currentPage = DP_MAIN;
 80012ec:	4b3c      	ldr	r3, [pc, #240]	; (80013e0 <main+0x2e8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2201      	movs	r2, #1
 80012f2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	nextion_print_page(dp);
 80012f6:	4b42      	ldr	r3, [pc, #264]	; (8001400 <main+0x308>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f001 fb2c 	bl	8002958 <nextion_print_page>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		switch(fsm->state)
 8001300:	4b3c      	ldr	r3, [pc, #240]	; (80013f4 <main+0x2fc>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	789b      	ldrb	r3, [r3, #2]
 8001306:	2b0a      	cmp	r3, #10
 8001308:	d8fa      	bhi.n	8001300 <main+0x208>
 800130a:	a201      	add	r2, pc, #4	; (adr r2, 8001310 <main+0x218>)
 800130c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001310:	08001301 	.word	0x08001301
 8001314:	0800133d 	.word	0x0800133d
 8001318:	0800158b 	.word	0x0800158b
 800131c:	08001587 	.word	0x08001587
 8001320:	0800158f 	.word	0x0800158f
 8001324:	080015a1 	.word	0x080015a1
 8001328:	08001301 	.word	0x08001301
 800132c:	080016dd 	.word	0x080016dd
 8001330:	08001301 	.word	0x08001301
 8001334:	08001301 	.word	0x08001301
 8001338:	0800172b 	.word	0x0800172b

		case RFO_IDLE:
			break;

		case RFO_PROCESS_CMD:
			if(dev->rcv[0] == '\r') {
 800133c:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <main+0x2e8>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	791b      	ldrb	r3, [r3, #4]
 8001342:	2b0d      	cmp	r3, #13
 8001344:	f040 80de 	bne.w	8001504 <main+0x40c>
				HAL_UART_Transmit(dev->uart, (uint8_t*)"\r\n", 2 , 100);
 8001348:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <main+0x2e8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6818      	ldr	r0, [r3, #0]
 800134e:	2364      	movs	r3, #100	; 0x64
 8001350:	2202      	movs	r2, #2
 8001352:	4939      	ldr	r1, [pc, #228]	; (8001438 <main+0x340>)
 8001354:	f006 fa28 	bl	80077a8 <HAL_UART_Transmit>
				buf[dev->idx] = '\0';
 8001358:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <main+0x2e8>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800135e:	3368      	adds	r3, #104	; 0x68
 8001360:	443b      	add	r3, r7
 8001362:	2200      	movs	r2, #0
 8001364:	f803 2c68 	strb.w	r2, [r3, #-104]
				for(int i = 0; i < 7; i++) {
 8001368:	2300      	movs	r3, #0
 800136a:	667b      	str	r3, [r7, #100]	; 0x64
 800136c:	e0b3      	b.n	80014d6 <main+0x3de>
					if(!strcmp(buf, rfoCmdLut[i]))
 800136e:	4a33      	ldr	r2, [pc, #204]	; (800143c <main+0x344>)
 8001370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001372:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001376:	463b      	mov	r3, r7
 8001378:	4611      	mov	r1, r2
 800137a:	4618      	mov	r0, r3
 800137c:	f7fe ff00 	bl	8000180 <strcmp>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	f040 80a4 	bne.w	80014d0 <main+0x3d8>
 8001388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800138a:	2b06      	cmp	r3, #6
 800138c:	f200 809a 	bhi.w	80014c4 <main+0x3cc>
 8001390:	a201      	add	r2, pc, #4	; (adr r2, 8001398 <main+0x2a0>)
 8001392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001396:	bf00      	nop
 8001398:	080013b5 	.word	0x080013b5
 800139c:	080013bf 	.word	0x080013bf
 80013a0:	080013c9 	.word	0x080013c9
 80013a4:	08001441 	.word	0x08001441
 80013a8:	080014a7 	.word	0x080014a7
 80013ac:	080014b1 	.word	0x080014b1
 80013b0:	080014bb 	.word	0x080014bb
					{
						switch(i)
						{
						case 0:
							fsm->state = RFO_PWM_SET_DUTY;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <main+0x2fc>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2203      	movs	r2, #3
 80013ba:	709a      	strb	r2, [r3, #2]
							break;
 80013bc:	e083      	b.n	80014c6 <main+0x3ce>
						case 1:
							fsm->state = RFO_PWM_SET_FREQ;
 80013be:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <main+0x2fc>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2202      	movs	r2, #2
 80013c4:	709a      	strb	r2, [r3, #2]
							break;
 80013c6:	e07e      	b.n	80014c6 <main+0x3ce>
						case 2:
							fsm->state = RFO_GET_TEMP;
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <main+0x2fc>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2204      	movs	r2, #4
 80013ce:	709a      	strb	r2, [r3, #2]
							beep_IT(dev, 2);
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <main+0x2e8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2102      	movs	r1, #2
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fe00 	bl	8000fdc <beep_IT>
							break;
 80013dc:	e073      	b.n	80014c6 <main+0x3ce>
 80013de:	bf00      	nop
 80013e0:	20000020 	.word	0x20000020
 80013e4:	20000230 	.word	0x20000230
 80013e8:	20000350 	.word	0x20000350
 80013ec:	20000400 	.word	0x20000400
 80013f0:	20000498 	.word	0x20000498
 80013f4:	20000024 	.word	0x20000024
 80013f8:	20000028 	.word	0x20000028
 80013fc:	0800c9fc 	.word	0x0800c9fc
 8001400:	20000034 	.word	0x20000034
 8001404:	200002c0 	.word	0x200002c0
 8001408:	0800c63c 	.word	0x0800c63c
 800140c:	200003b4 	.word	0x200003b4
 8001410:	2000002c 	.word	0x2000002c
 8001414:	20000030 	.word	0x20000030
 8001418:	42480000 	.word	0x42480000
 800141c:	420c0000 	.word	0x420c0000
 8001420:	3e4ccccd 	.word	0x3e4ccccd
 8001424:	00000000 	.word	0x00000000
 8001428:	43800000 	.word	0x43800000
 800142c:	c2700000 	.word	0xc2700000
 8001430:	42700000 	.word	0x42700000
 8001434:	0800c640 	.word	0x0800c640
 8001438:	0800c64c 	.word	0x0800c64c
 800143c:	20000004 	.word	0x20000004
						case 3:
							beep_IT(dev, 3);
 8001440:	4b99      	ldr	r3, [pc, #612]	; (80016a8 <main+0x5b0>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2103      	movs	r1, #3
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fdc8 	bl	8000fdc <beep_IT>
							fsm->state = RFO_START;
 800144c:	4b97      	ldr	r3, [pc, #604]	; (80016ac <main+0x5b4>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2205      	movs	r2, #5
 8001452:	709a      	strb	r2, [r3, #2]
							dp->write(dp, "page reflow");
 8001454:	4b96      	ldr	r3, [pc, #600]	; (80016b0 <main+0x5b8>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800145a:	4a95      	ldr	r2, [pc, #596]	; (80016b0 <main+0x5b8>)
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	4995      	ldr	r1, [pc, #596]	; (80016b4 <main+0x5bc>)
 8001460:	4610      	mov	r0, r2
 8001462:	4798      	blx	r3
							dp->write_id_str(dp, "conState", "Connected");
 8001464:	4b92      	ldr	r3, [pc, #584]	; (80016b0 <main+0x5b8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146a:	4a91      	ldr	r2, [pc, #580]	; (80016b0 <main+0x5b8>)
 800146c:	6810      	ldr	r0, [r2, #0]
 800146e:	4a92      	ldr	r2, [pc, #584]	; (80016b8 <main+0x5c0>)
 8001470:	4992      	ldr	r1, [pc, #584]	; (80016bc <main+0x5c4>)
 8001472:	4798      	blx	r3
							dp->write_id_str(dp, "reflowState", "Prepare");
 8001474:	4b8e      	ldr	r3, [pc, #568]	; (80016b0 <main+0x5b8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147a:	4a8d      	ldr	r2, [pc, #564]	; (80016b0 <main+0x5b8>)
 800147c:	6810      	ldr	r0, [r2, #0]
 800147e:	4a90      	ldr	r2, [pc, #576]	; (80016c0 <main+0x5c8>)
 8001480:	4990      	ldr	r1, [pc, #576]	; (80016c4 <main+0x5cc>)
 8001482:	4798      	blx	r3
							dp->write_id_val(dp, "reflowProgress", 0);
 8001484:	4b8a      	ldr	r3, [pc, #552]	; (80016b0 <main+0x5b8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800148a:	4a89      	ldr	r2, [pc, #548]	; (80016b0 <main+0x5b8>)
 800148c:	6810      	ldr	r0, [r2, #0]
 800148e:	2200      	movs	r2, #0
 8001490:	498d      	ldr	r1, [pc, #564]	; (80016c8 <main+0x5d0>)
 8001492:	4798      	blx	r3
							dev->currentReflowState = REFLOW_STATE_PREPARE;
 8001494:	4b84      	ldr	r3, [pc, #528]	; (80016a8 <main+0x5b0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2202      	movs	r2, #2
 800149a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
							HAL_TIM_Base_Start_IT(&htim16);
 800149e:	488b      	ldr	r0, [pc, #556]	; (80016cc <main+0x5d4>)
 80014a0:	f005 f8f2 	bl	8006688 <HAL_TIM_Base_Start_IT>
							break;
 80014a4:	e00f      	b.n	80014c6 <main+0x3ce>
						case 4:
							fsm->state = RFO_STOP;
 80014a6:	4b81      	ldr	r3, [pc, #516]	; (80016ac <main+0x5b4>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2206      	movs	r2, #6
 80014ac:	709a      	strb	r2, [r3, #2]
							break;
 80014ae:	e00a      	b.n	80014c6 <main+0x3ce>
						case 5:
							fsm->state = RFO_CALIBRATE;
 80014b0:	4b7e      	ldr	r3, [pc, #504]	; (80016ac <main+0x5b4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2208      	movs	r2, #8
 80014b6:	709a      	strb	r2, [r3, #2]
							break;
 80014b8:	e005      	b.n	80014c6 <main+0x3ce>
						case 6:
							fsm->state = RFO_HELP;
 80014ba:	4b7c      	ldr	r3, [pc, #496]	; (80016ac <main+0x5b4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	220a      	movs	r2, #10
 80014c0:	709a      	strb	r2, [r3, #2]
							break;
 80014c2:	e000      	b.n	80014c6 <main+0x3ce>
						default:
							break;
 80014c4:	bf00      	nop
						}
						dev->idx = 0;
 80014c6:	4b78      	ldr	r3, [pc, #480]	; (80016a8 <main+0x5b0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2200      	movs	r2, #0
 80014cc:	861a      	strh	r2, [r3, #48]	; 0x30
						break;
 80014ce:	e006      	b.n	80014de <main+0x3e6>
				for(int i = 0; i < 7; i++) {
 80014d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014d2:	3301      	adds	r3, #1
 80014d4:	667b      	str	r3, [r7, #100]	; 0x64
 80014d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014d8:	2b06      	cmp	r3, #6
 80014da:	f77f af48 	ble.w	800136e <main+0x276>
					}

				}

				if(fsm->state == RFO_PROCESS_CMD) {
 80014de:	4b73      	ldr	r3, [pc, #460]	; (80016ac <main+0x5b4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	789b      	ldrb	r3, [r3, #2]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d103      	bne.n	80014f0 <main+0x3f8>

					fsm->state = RFO_IDLE;
 80014e8:	4b70      	ldr	r3, [pc, #448]	; (80016ac <main+0x5b4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2200      	movs	r2, #0
 80014ee:	709a      	strb	r2, [r3, #2]

				}
				dev->idx = 0;
 80014f0:	4b6d      	ldr	r3, [pc, #436]	; (80016a8 <main+0x5b0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2200      	movs	r2, #0
 80014f6:	861a      	strh	r2, [r3, #48]	; 0x30
				clear_buffer((uint8_t*)buf, 100);
 80014f8:	463b      	mov	r3, r7
 80014fa:	2164      	movs	r1, #100	; 0x64
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fd52 	bl	8000fa6 <clear_buffer>
				dev->idx += 1;
				clear_buffer((dev->rcv), 20);
				fsm->state = RFO_IDLE;
			}

			break;
 8001502:	e21d      	b.n	8001940 <main+0x848>
			else if(dev->rcv[0] == '\177') {
 8001504:	4b68      	ldr	r3, [pc, #416]	; (80016a8 <main+0x5b0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	791b      	ldrb	r3, [r3, #4]
 800150a:	2b7f      	cmp	r3, #127	; 0x7f
 800150c:	d11b      	bne.n	8001546 <main+0x44e>
				if(dev->idx > 0)
 800150e:	4b66      	ldr	r3, [pc, #408]	; (80016a8 <main+0x5b0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 8213 	beq.w	8001940 <main+0x848>
					buf[dev->idx-1] = '\0';
 800151a:	4b63      	ldr	r3, [pc, #396]	; (80016a8 <main+0x5b0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001520:	3b01      	subs	r3, #1
 8001522:	3368      	adds	r3, #104	; 0x68
 8001524:	443b      	add	r3, r7
 8001526:	2200      	movs	r2, #0
 8001528:	f803 2c68 	strb.w	r2, [r3, #-104]
					dev->idx -= 1;
 800152c:	4b5e      	ldr	r3, [pc, #376]	; (80016a8 <main+0x5b0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8001532:	4b5d      	ldr	r3, [pc, #372]	; (80016a8 <main+0x5b0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	3a01      	subs	r2, #1
 8001538:	b292      	uxth	r2, r2
 800153a:	861a      	strh	r2, [r3, #48]	; 0x30
					fsm->state = RFO_IDLE;
 800153c:	4b5b      	ldr	r3, [pc, #364]	; (80016ac <main+0x5b4>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2200      	movs	r2, #0
 8001542:	709a      	strb	r2, [r3, #2]
			break;
 8001544:	e1fc      	b.n	8001940 <main+0x848>
				buf[dev->idx] = dev->rcv[0];
 8001546:	4b58      	ldr	r3, [pc, #352]	; (80016a8 <main+0x5b0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a57      	ldr	r2, [pc, #348]	; (80016a8 <main+0x5b0>)
 800154c:	6812      	ldr	r2, [r2, #0]
 800154e:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8001550:	4611      	mov	r1, r2
 8001552:	791a      	ldrb	r2, [r3, #4]
 8001554:	f101 0368 	add.w	r3, r1, #104	; 0x68
 8001558:	443b      	add	r3, r7
 800155a:	f803 2c68 	strb.w	r2, [r3, #-104]
				dev->idx += 1;
 800155e:	4b52      	ldr	r3, [pc, #328]	; (80016a8 <main+0x5b0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8001564:	4b50      	ldr	r3, [pc, #320]	; (80016a8 <main+0x5b0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	3201      	adds	r2, #1
 800156a:	b292      	uxth	r2, r2
 800156c:	861a      	strh	r2, [r3, #48]	; 0x30
				clear_buffer((dev->rcv), 20);
 800156e:	4b4e      	ldr	r3, [pc, #312]	; (80016a8 <main+0x5b0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	3304      	adds	r3, #4
 8001574:	2114      	movs	r1, #20
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fd15 	bl	8000fa6 <clear_buffer>
				fsm->state = RFO_IDLE;
 800157c:	4b4b      	ldr	r3, [pc, #300]	; (80016ac <main+0x5b4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2200      	movs	r2, #0
 8001582:	709a      	strb	r2, [r3, #2]
			break;
 8001584:	e1dc      	b.n	8001940 <main+0x848>


		case RFO_PWM_SET_DUTY:
			__NOP();
 8001586:	bf00      	nop
			break;
 8001588:	e1df      	b.n	800194a <main+0x852>

		case RFO_PWM_SET_FREQ:
			__NOP();
 800158a:	bf00      	nop
			break;
 800158c:	e1dd      	b.n	800194a <main+0x852>

		case RFO_GET_TEMP:
			__NOP();
 800158e:	bf00      	nop
			HAL_TIM_Base_Start_IT(&htim16);
 8001590:	484e      	ldr	r0, [pc, #312]	; (80016cc <main+0x5d4>)
 8001592:	f005 f879 	bl	8006688 <HAL_TIM_Base_Start_IT>
			fsm->state = RFO_TRANSMIT;
 8001596:	4b45      	ldr	r3, [pc, #276]	; (80016ac <main+0x5b4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2207      	movs	r2, #7
 800159c:	709a      	strb	r2, [r3, #2]
			break;
 800159e:	e1d4      	b.n	800194a <main+0x852>

		case RFO_START:
			__NOP();
 80015a0:	bf00      	nop
			if(dev->dataRdy) {
 80015a2:	4b41      	ldr	r3, [pc, #260]	; (80016a8 <main+0x5b0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 81ca 	beq.w	8001944 <main+0x84c>
				dev->dataRdy = false;
 80015b0:	4b3d      	ldr	r3, [pc, #244]	; (80016a8 <main+0x5b0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				PIDController_Update(pid, dev->targetTemp, dev->temp);
 80015ba:	4b45      	ldr	r3, [pc, #276]	; (80016d0 <main+0x5d8>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4b3a      	ldr	r3, [pc, #232]	; (80016a8 <main+0x5b0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80015c6:	4b38      	ldr	r3, [pc, #224]	; (80016a8 <main+0x5b0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80015ce:	eef0 0a47 	vmov.f32	s1, s14
 80015d2:	eeb0 0a67 	vmov.f32	s0, s15
 80015d6:	4610      	mov	r0, r2
 80015d8:	f001 faef 	bl	8002bba <PIDController_Update>

				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pid->out);
 80015dc:	4b3c      	ldr	r3, [pc, #240]	; (80016d0 <main+0x5d8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80015e4:	4b3b      	ldr	r3, [pc, #236]	; (80016d4 <main+0x5dc>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015ec:	ee17 2a90 	vmov	r2, s15
 80015f0:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pid->out);
 80015f2:	4b37      	ldr	r3, [pc, #220]	; (80016d0 <main+0x5d8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80015fa:	4b36      	ldr	r3, [pc, #216]	; (80016d4 <main+0x5dc>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001602:	ee17 2a90 	vmov	r2, s15
 8001606:	639a      	str	r2, [r3, #56]	; 0x38

				sprintf(buf, "%.2f\n", dev->temp);
 8001608:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <main+0x5b0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ff82 	bl	8000518 <__aeabi_f2d>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4638      	mov	r0, r7
 800161a:	492f      	ldr	r1, [pc, #188]	; (80016d8 <main+0x5e0>)
 800161c:	f008 fd56 	bl	800a0cc <siprintf>
				HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 8001620:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <main+0x5b0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681c      	ldr	r4, [r3, #0]
 8001626:	463b      	mov	r3, r7
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe fdb3 	bl	8000194 <strlen>
 800162e:	4603      	mov	r3, r0
 8001630:	b29a      	uxth	r2, r3
 8001632:	4639      	mov	r1, r7
 8001634:	2364      	movs	r3, #100	; 0x64
 8001636:	4620      	mov	r0, r4
 8001638:	f006 f8b6 	bl	80077a8 <HAL_UART_Transmit>

				sprintf(buf, "%.2f\n", dev->targetTemp);
 800163c:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <main+0x5b0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe ff68 	bl	8000518 <__aeabi_f2d>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4638      	mov	r0, r7
 800164e:	4922      	ldr	r1, [pc, #136]	; (80016d8 <main+0x5e0>)
 8001650:	f008 fd3c 	bl	800a0cc <siprintf>
				HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <main+0x5b0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681c      	ldr	r4, [r3, #0]
 800165a:	463b      	mov	r3, r7
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe fd99 	bl	8000194 <strlen>
 8001662:	4603      	mov	r3, r0
 8001664:	b29a      	uxth	r2, r3
 8001666:	4639      	mov	r1, r7
 8001668:	2364      	movs	r3, #100	; 0x64
 800166a:	4620      	mov	r0, r4
 800166c:	f006 f89c 	bl	80077a8 <HAL_UART_Transmit>

				sprintf(buf, "%.2f\n", pid->out);
 8001670:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <main+0x5d8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe ff4e 	bl	8000518 <__aeabi_f2d>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4638      	mov	r0, r7
 8001682:	4915      	ldr	r1, [pc, #84]	; (80016d8 <main+0x5e0>)
 8001684:	f008 fd22 	bl	800a0cc <siprintf>
				HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 8001688:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <main+0x5b0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681c      	ldr	r4, [r3, #0]
 800168e:	463b      	mov	r3, r7
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe fd7f 	bl	8000194 <strlen>
 8001696:	4603      	mov	r3, r0
 8001698:	b29a      	uxth	r2, r3
 800169a:	4639      	mov	r1, r7
 800169c:	2364      	movs	r3, #100	; 0x64
 800169e:	4620      	mov	r0, r4
 80016a0:	f006 f882 	bl	80077a8 <HAL_UART_Transmit>

			}
			break;
 80016a4:	e14e      	b.n	8001944 <main+0x84c>
 80016a6:	bf00      	nop
 80016a8:	20000020 	.word	0x20000020
 80016ac:	20000024 	.word	0x20000024
 80016b0:	20000034 	.word	0x20000034
 80016b4:	0800c650 	.word	0x0800c650
 80016b8:	0800c65c 	.word	0x0800c65c
 80016bc:	0800c668 	.word	0x0800c668
 80016c0:	0800c674 	.word	0x0800c674
 80016c4:	0800c67c 	.word	0x0800c67c
 80016c8:	0800c688 	.word	0x0800c688
 80016cc:	2000044c 	.word	0x2000044c
 80016d0:	20000030 	.word	0x20000030
 80016d4:	200003b4 	.word	0x200003b4
 80016d8:	0800c698 	.word	0x0800c698

		case RFO_TRANSMIT:
			if(dev->dataRdy) {
 80016dc:	4b9b      	ldr	r3, [pc, #620]	; (800194c <main+0x854>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 812f 	beq.w	8001948 <main+0x850>
				dev->dataRdy = false;
 80016ea:	4b98      	ldr	r3, [pc, #608]	; (800194c <main+0x854>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				sprintf(buf, "Temp is: %.2f\r\n", dev->temp);
 80016f4:	4b95      	ldr	r3, [pc, #596]	; (800194c <main+0x854>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe ff0c 	bl	8000518 <__aeabi_f2d>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4638      	mov	r0, r7
 8001706:	4992      	ldr	r1, [pc, #584]	; (8001950 <main+0x858>)
 8001708:	f008 fce0 	bl	800a0cc <siprintf>
				HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 800170c:	4b8f      	ldr	r3, [pc, #572]	; (800194c <main+0x854>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681c      	ldr	r4, [r3, #0]
 8001712:	463b      	mov	r3, r7
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe fd3d 	bl	8000194 <strlen>
 800171a:	4603      	mov	r3, r0
 800171c:	b29a      	uxth	r2, r3
 800171e:	4639      	mov	r1, r7
 8001720:	2364      	movs	r3, #100	; 0x64
 8001722:	4620      	mov	r0, r4
 8001724:	f006 f840 	bl	80077a8 <HAL_UART_Transmit>
			}
			break;
 8001728:	e10e      	b.n	8001948 <main+0x850>

		case RFO_STOP:
			break;

		case RFO_HELP:
			__NOP();
 800172a:	bf00      	nop
			sprintf(buf, "Help Page for RFO\r\n");
 800172c:	463b      	mov	r3, r7
 800172e:	4989      	ldr	r1, [pc, #548]	; (8001954 <main+0x85c>)
 8001730:	4618      	mov	r0, r3
 8001732:	f008 fccb 	bl	800a0cc <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 8001736:	4b85      	ldr	r3, [pc, #532]	; (800194c <main+0x854>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681c      	ldr	r4, [r3, #0]
 800173c:	463b      	mov	r3, r7
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe fd28 	bl	8000194 <strlen>
 8001744:	4603      	mov	r3, r0
 8001746:	b29a      	uxth	r2, r3
 8001748:	4639      	mov	r1, r7
 800174a:	2364      	movs	r3, #100	; 0x64
 800174c:	4620      	mov	r0, r4
 800174e:	f006 f82b 	bl	80077a8 <HAL_UART_Transmit>
			sprintf(buf, "Commands: ");
 8001752:	463b      	mov	r3, r7
 8001754:	4980      	ldr	r1, [pc, #512]	; (8001958 <main+0x860>)
 8001756:	4618      	mov	r0, r3
 8001758:	f008 fcb8 	bl	800a0cc <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 800175c:	4b7b      	ldr	r3, [pc, #492]	; (800194c <main+0x854>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681c      	ldr	r4, [r3, #0]
 8001762:	463b      	mov	r3, r7
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe fd15 	bl	8000194 <strlen>
 800176a:	4603      	mov	r3, r0
 800176c:	b29a      	uxth	r2, r3
 800176e:	4639      	mov	r1, r7
 8001770:	2364      	movs	r3, #100	; 0x64
 8001772:	4620      	mov	r0, r4
 8001774:	f006 f818 	bl	80077a8 <HAL_UART_Transmit>
			sprintf(buf, "pwm -<OPTION> --<INSTRUCTION>\r\n");
 8001778:	463b      	mov	r3, r7
 800177a:	4978      	ldr	r1, [pc, #480]	; (800195c <main+0x864>)
 800177c:	4618      	mov	r0, r3
 800177e:	f008 fca5 	bl	800a0cc <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 8001782:	4b72      	ldr	r3, [pc, #456]	; (800194c <main+0x854>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681c      	ldr	r4, [r3, #0]
 8001788:	463b      	mov	r3, r7
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe fd02 	bl	8000194 <strlen>
 8001790:	4603      	mov	r3, r0
 8001792:	b29a      	uxth	r2, r3
 8001794:	4639      	mov	r1, r7
 8001796:	2364      	movs	r3, #100	; 0x64
 8001798:	4620      	mov	r0, r4
 800179a:	f006 f805 	bl	80077a8 <HAL_UART_Transmit>
			sprintf(buf, "          Options: -s\r\n");
 800179e:	463b      	mov	r3, r7
 80017a0:	496f      	ldr	r1, [pc, #444]	; (8001960 <main+0x868>)
 80017a2:	4618      	mov	r0, r3
 80017a4:	f008 fc92 	bl	800a0cc <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 80017a8:	4b68      	ldr	r3, [pc, #416]	; (800194c <main+0x854>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681c      	ldr	r4, [r3, #0]
 80017ae:	463b      	mov	r3, r7
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fcef 	bl	8000194 <strlen>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	4639      	mov	r1, r7
 80017bc:	2364      	movs	r3, #100	; 0x64
 80017be:	4620      	mov	r0, r4
 80017c0:	f005 fff2 	bl	80077a8 <HAL_UART_Transmit>
			sprintf(buf, "          Instructions: --duty, --freq");
 80017c4:	463b      	mov	r3, r7
 80017c6:	4967      	ldr	r1, [pc, #412]	; (8001964 <main+0x86c>)
 80017c8:	4618      	mov	r0, r3
 80017ca:	f008 fc7f 	bl	800a0cc <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 80017ce:	4b5f      	ldr	r3, [pc, #380]	; (800194c <main+0x854>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681c      	ldr	r4, [r3, #0]
 80017d4:	463b      	mov	r3, r7
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe fcdc 	bl	8000194 <strlen>
 80017dc:	4603      	mov	r3, r0
 80017de:	b29a      	uxth	r2, r3
 80017e0:	4639      	mov	r1, r7
 80017e2:	2364      	movs	r3, #100	; 0x64
 80017e4:	4620      	mov	r0, r4
 80017e6:	f005 ffdf 	bl	80077a8 <HAL_UART_Transmit>

			sprintf(buf, "\r\n");
 80017ea:	463b      	mov	r3, r7
 80017ec:	495e      	ldr	r1, [pc, #376]	; (8001968 <main+0x870>)
 80017ee:	4618      	mov	r0, r3
 80017f0:	f008 fc6c 	bl	800a0cc <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 80017f4:	4b55      	ldr	r3, [pc, #340]	; (800194c <main+0x854>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681c      	ldr	r4, [r3, #0]
 80017fa:	463b      	mov	r3, r7
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe fcc9 	bl	8000194 <strlen>
 8001802:	4603      	mov	r3, r0
 8001804:	b29a      	uxth	r2, r3
 8001806:	4639      	mov	r1, r7
 8001808:	2364      	movs	r3, #100	; 0x64
 800180a:	4620      	mov	r0, r4
 800180c:	f005 ffcc 	bl	80077a8 <HAL_UART_Transmit>

			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 8001810:	4b4e      	ldr	r3, [pc, #312]	; (800194c <main+0x854>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681c      	ldr	r4, [r3, #0]
 8001816:	463b      	mov	r3, r7
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fcbb 	bl	8000194 <strlen>
 800181e:	4603      	mov	r3, r0
 8001820:	b29a      	uxth	r2, r3
 8001822:	4639      	mov	r1, r7
 8001824:	2364      	movs	r3, #100	; 0x64
 8001826:	4620      	mov	r0, r4
 8001828:	f005 ffbe 	bl	80077a8 <HAL_UART_Transmit>
			sprintf(buf, "          temp -<OPTION> --<INSTRUCTION>\r\n");
 800182c:	463b      	mov	r3, r7
 800182e:	494f      	ldr	r1, [pc, #316]	; (800196c <main+0x874>)
 8001830:	4618      	mov	r0, r3
 8001832:	f008 fc4b 	bl	800a0cc <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 8001836:	4b45      	ldr	r3, [pc, #276]	; (800194c <main+0x854>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681c      	ldr	r4, [r3, #0]
 800183c:	463b      	mov	r3, r7
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fca8 	bl	8000194 <strlen>
 8001844:	4603      	mov	r3, r0
 8001846:	b29a      	uxth	r2, r3
 8001848:	4639      	mov	r1, r7
 800184a:	2364      	movs	r3, #100	; 0x64
 800184c:	4620      	mov	r0, r4
 800184e:	f005 ffab 	bl	80077a8 <HAL_UART_Transmit>
			sprintf(buf, "          Options: -m\r\n");
 8001852:	463b      	mov	r3, r7
 8001854:	4946      	ldr	r1, [pc, #280]	; (8001970 <main+0x878>)
 8001856:	4618      	mov	r0, r3
 8001858:	f008 fc38 	bl	800a0cc <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 800185c:	4b3b      	ldr	r3, [pc, #236]	; (800194c <main+0x854>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681c      	ldr	r4, [r3, #0]
 8001862:	463b      	mov	r3, r7
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fc95 	bl	8000194 <strlen>
 800186a:	4603      	mov	r3, r0
 800186c:	b29a      	uxth	r2, r3
 800186e:	4639      	mov	r1, r7
 8001870:	2364      	movs	r3, #100	; 0x64
 8001872:	4620      	mov	r0, r4
 8001874:	f005 ff98 	bl	80077a8 <HAL_UART_Transmit>
			sprintf(buf, "          Instructions: --cont, --single\r\n");
 8001878:	463b      	mov	r3, r7
 800187a:	493e      	ldr	r1, [pc, #248]	; (8001974 <main+0x87c>)
 800187c:	4618      	mov	r0, r3
 800187e:	f008 fc25 	bl	800a0cc <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 8001882:	4b32      	ldr	r3, [pc, #200]	; (800194c <main+0x854>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681c      	ldr	r4, [r3, #0]
 8001888:	463b      	mov	r3, r7
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fc82 	bl	8000194 <strlen>
 8001890:	4603      	mov	r3, r0
 8001892:	b29a      	uxth	r2, r3
 8001894:	4639      	mov	r1, r7
 8001896:	2364      	movs	r3, #100	; 0x64
 8001898:	4620      	mov	r0, r4
 800189a:	f005 ff85 	bl	80077a8 <HAL_UART_Transmit>

			sprintf(buf, "\r\n");
 800189e:	463b      	mov	r3, r7
 80018a0:	4931      	ldr	r1, [pc, #196]	; (8001968 <main+0x870>)
 80018a2:	4618      	mov	r0, r3
 80018a4:	f008 fc12 	bl	800a0cc <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 80018a8:	4b28      	ldr	r3, [pc, #160]	; (800194c <main+0x854>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681c      	ldr	r4, [r3, #0]
 80018ae:	463b      	mov	r3, r7
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fc6f 	bl	8000194 <strlen>
 80018b6:	4603      	mov	r3, r0
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	4639      	mov	r1, r7
 80018bc:	2364      	movs	r3, #100	; 0x64
 80018be:	4620      	mov	r0, r4
 80018c0:	f005 ff72 	bl	80077a8 <HAL_UART_Transmit>

			sprintf(buf, "          start -<OPTION> --<INSTRUCTION>\r\n");
 80018c4:	463b      	mov	r3, r7
 80018c6:	492c      	ldr	r1, [pc, #176]	; (8001978 <main+0x880>)
 80018c8:	4618      	mov	r0, r3
 80018ca:	f008 fbff 	bl	800a0cc <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 80018ce:	4b1f      	ldr	r3, [pc, #124]	; (800194c <main+0x854>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681c      	ldr	r4, [r3, #0]
 80018d4:	463b      	mov	r3, r7
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fc5c 	bl	8000194 <strlen>
 80018dc:	4603      	mov	r3, r0
 80018de:	b29a      	uxth	r2, r3
 80018e0:	4639      	mov	r1, r7
 80018e2:	2364      	movs	r3, #100	; 0x64
 80018e4:	4620      	mov	r0, r4
 80018e6:	f005 ff5f 	bl	80077a8 <HAL_UART_Transmit>
			sprintf(buf, "          Options: -p\r\n");
 80018ea:	463b      	mov	r3, r7
 80018ec:	4923      	ldr	r1, [pc, #140]	; (800197c <main+0x884>)
 80018ee:	4618      	mov	r0, r3
 80018f0:	f008 fbec 	bl	800a0cc <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <main+0x854>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681c      	ldr	r4, [r3, #0]
 80018fa:	463b      	mov	r3, r7
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fc49 	bl	8000194 <strlen>
 8001902:	4603      	mov	r3, r0
 8001904:	b29a      	uxth	r2, r3
 8001906:	4639      	mov	r1, r7
 8001908:	2364      	movs	r3, #100	; 0x64
 800190a:	4620      	mov	r0, r4
 800190c:	f005 ff4c 	bl	80077a8 <HAL_UART_Transmit>
			sprintf(buf, "          Instructions: --nonleaded, --leaded\r\n");
 8001910:	463b      	mov	r3, r7
 8001912:	491b      	ldr	r1, [pc, #108]	; (8001980 <main+0x888>)
 8001914:	4618      	mov	r0, r3
 8001916:	f008 fbd9 	bl	800a0cc <siprintf>
			HAL_UART_Transmit(dev->uart, (uint8_t*)buf, strlen(buf), 100);
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <main+0x854>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681c      	ldr	r4, [r3, #0]
 8001920:	463b      	mov	r3, r7
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fc36 	bl	8000194 <strlen>
 8001928:	4603      	mov	r3, r0
 800192a:	b29a      	uxth	r2, r3
 800192c:	4639      	mov	r1, r7
 800192e:	2364      	movs	r3, #100	; 0x64
 8001930:	4620      	mov	r0, r4
 8001932:	f005 ff39 	bl	80077a8 <HAL_UART_Transmit>


			fsm->state = RFO_IDLE;
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <main+0x88c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2200      	movs	r2, #0
 800193c:	709a      	strb	r2, [r3, #2]
			break;
 800193e:	e004      	b.n	800194a <main+0x852>
			break;
 8001940:	bf00      	nop
 8001942:	e4dd      	b.n	8001300 <main+0x208>
			break;
 8001944:	bf00      	nop
 8001946:	e4db      	b.n	8001300 <main+0x208>
			break;
 8001948:	bf00      	nop
		switch(fsm->state)
 800194a:	e4d9      	b.n	8001300 <main+0x208>
 800194c:	20000020 	.word	0x20000020
 8001950:	0800c6a0 	.word	0x0800c6a0
 8001954:	0800c6b0 	.word	0x0800c6b0
 8001958:	0800c6c4 	.word	0x0800c6c4
 800195c:	0800c6d0 	.word	0x0800c6d0
 8001960:	0800c6f0 	.word	0x0800c6f0
 8001964:	0800c708 	.word	0x0800c708
 8001968:	0800c64c 	.word	0x0800c64c
 800196c:	0800c730 	.word	0x0800c730
 8001970:	0800c75c 	.word	0x0800c75c
 8001974:	0800c774 	.word	0x0800c774
 8001978:	0800c7a0 	.word	0x0800c7a0
 800197c:	0800c7cc 	.word	0x0800c7cc
 8001980:	0800c7e4 	.word	0x0800c7e4
 8001984:	20000024 	.word	0x20000024

08001988 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b09a      	sub	sp, #104	; 0x68
 800198c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198e:	f107 0320 	add.w	r3, r7, #32
 8001992:	2248      	movs	r2, #72	; 0x48
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f007 ff26 	bl	80097e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]
 80019aa:	615a      	str	r2, [r3, #20]
 80019ac:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019ae:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <SystemClock_Config+0xc4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019b6:	4a25      	ldr	r2, [pc, #148]	; (8001a4c <SystemClock_Config+0xc4>)
 80019b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <SystemClock_Config+0xc4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80019ca:	2303      	movs	r3, #3
 80019cc:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019da:	2340      	movs	r3, #64	; 0x40
 80019dc:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019de:	2302      	movs	r3, #2
 80019e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019e2:	2303      	movs	r3, #3
 80019e4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80019e6:	2310      	movs	r3, #16
 80019e8:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 8;
 80019ea:	2308      	movs	r3, #8
 80019ec:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019f2:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019f4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80019f8:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019fe:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a00:	f107 0320 	add.w	r3, r7, #32
 8001a04:	4618      	mov	r0, r3
 8001a06:	f002 fcd3 	bl	80043b0 <HAL_RCC_OscConfig>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <SystemClock_Config+0x8c>
	{
		Error_Handler();
 8001a10:	f000 fe9c 	bl	800274c <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001a14:	236f      	movs	r3, #111	; 0x6f
 8001a16:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	2103      	movs	r1, #3
 8001a34:	4618      	mov	r0, r3
 8001a36:	f003 f849 	bl	8004acc <HAL_RCC_ClockConfig>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <SystemClock_Config+0xbc>
	{
		Error_Handler();
 8001a40:	f000 fe84 	bl	800274c <Error_Handler>
	}
}
 8001a44:	bf00      	nop
 8001a46:	3768      	adds	r7, #104	; 0x68
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	58000400 	.word	0x58000400

08001a50 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b094      	sub	sp, #80	; 0x50
 8001a54:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a56:	463b      	mov	r3, r7
 8001a58:	2250      	movs	r2, #80	; 0x50
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f007 fec3 	bl	80097e8 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8001a62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a66:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001a6c:	2310      	movs	r3, #16
 8001a6e:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a70:	463b      	mov	r3, r7
 8001a72:	4618      	mov	r0, r3
 8001a74:	f003 fc67 	bl	8005346 <HAL_RCCEx_PeriphCLKConfig>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <PeriphCommonClock_Config+0x32>
	{
		Error_Handler();
 8001a7e:	f000 fe65 	bl	800274c <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 8001a82:	bf00      	nop
 8001a84:	3750      	adds	r7, #80	; 0x50
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <MX_LPUART1_UART_Init>:
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 8001a90:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <MX_LPUART1_UART_Init+0x90>)
 8001a92:	4a23      	ldr	r2, [pc, #140]	; (8001b20 <MX_LPUART1_UART_Init+0x94>)
 8001a94:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 8001a96:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <MX_LPUART1_UART_Init+0x90>)
 8001a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a9c:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9e:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <MX_LPUART1_UART_Init+0x90>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <MX_LPUART1_UART_Init+0x90>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001aaa:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <MX_LPUART1_UART_Init+0x90>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001ab0:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <MX_LPUART1_UART_Init+0x90>)
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab6:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <MX_LPUART1_UART_Init+0x90>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001abc:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <MX_LPUART1_UART_Init+0x90>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ac2:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <MX_LPUART1_UART_Init+0x90>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ac8:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <MX_LPUART1_UART_Init+0x90>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	629a      	str	r2, [r3, #40]	; 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001ace:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <MX_LPUART1_UART_Init+0x90>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	665a      	str	r2, [r3, #100]	; 0x64
	if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001ad4:	4811      	ldr	r0, [pc, #68]	; (8001b1c <MX_LPUART1_UART_Init+0x90>)
 8001ad6:	f005 fe17 	bl	8007708 <HAL_UART_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_LPUART1_UART_Init+0x58>
	{
		Error_Handler();
 8001ae0:	f000 fe34 	bl	800274c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	480d      	ldr	r0, [pc, #52]	; (8001b1c <MX_LPUART1_UART_Init+0x90>)
 8001ae8:	f007 fd89 	bl	80095fe <HAL_UARTEx_SetTxFifoThreshold>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_LPUART1_UART_Init+0x6a>
	{
		Error_Handler();
 8001af2:	f000 fe2b 	bl	800274c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001af6:	2100      	movs	r1, #0
 8001af8:	4808      	ldr	r0, [pc, #32]	; (8001b1c <MX_LPUART1_UART_Init+0x90>)
 8001afa:	f007 fdbe 	bl	800967a <HAL_UARTEx_SetRxFifoThreshold>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_LPUART1_UART_Init+0x7c>
	{
		Error_Handler();
 8001b04:	f000 fe22 	bl	800274c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001b08:	4804      	ldr	r0, [pc, #16]	; (8001b1c <MX_LPUART1_UART_Init+0x90>)
 8001b0a:	f007 fd3f 	bl	800958c <HAL_UARTEx_DisableFifoMode>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_LPUART1_UART_Init+0x8c>
	{
		Error_Handler();
 8001b14:	f000 fe1a 	bl	800274c <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000230 	.word	0x20000230
 8001b20:	40008000 	.word	0x40008000

08001b24 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001b28:	4b22      	ldr	r3, [pc, #136]	; (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b2a:	4a23      	ldr	r2, [pc, #140]	; (8001bb8 <MX_USART1_UART_Init+0x94>)
 8001b2c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001b2e:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b34:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001b48:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b4e:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b54:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b5a:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b6c:	4811      	ldr	r0, [pc, #68]	; (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b6e:	f005 fdcb 	bl	8007708 <HAL_UART_Init>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 8001b78:	f000 fde8 	bl	800274c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b80:	f007 fd3d 	bl	80095fe <HAL_UARTEx_SetTxFifoThreshold>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_USART1_UART_Init+0x6a>
	{
		Error_Handler();
 8001b8a:	f000 fddf 	bl	800274c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4808      	ldr	r0, [pc, #32]	; (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b92:	f007 fd72 	bl	800967a <HAL_UARTEx_SetRxFifoThreshold>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_USART1_UART_Init+0x7c>
	{
		Error_Handler();
 8001b9c:	f000 fdd6 	bl	800274c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ba0:	4804      	ldr	r0, [pc, #16]	; (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001ba2:	f007 fcf3 	bl	800958c <HAL_UARTEx_DisableFifoMode>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 8001bac:	f000 fdce 	bl	800274c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	200002c0 	.word	0x200002c0
 8001bb8:	40013800 	.word	0x40013800

08001bbc <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <MX_SPI1_Init+0x74>)
 8001bc2:	4a1c      	ldr	r2, [pc, #112]	; (8001c34 <MX_SPI1_Init+0x78>)
 8001bc4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <MX_SPI1_Init+0x74>)
 8001bc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bcc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001bce:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <MX_SPI1_Init+0x74>)
 8001bd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bd4:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bd6:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <MX_SPI1_Init+0x74>)
 8001bd8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001bdc:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bde:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <MX_SPI1_Init+0x74>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <MX_SPI1_Init+0x74>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <MX_SPI1_Init+0x74>)
 8001bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bf0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <MX_SPI1_Init+0x74>)
 8001bf4:	2230      	movs	r2, #48	; 0x30
 8001bf6:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bf8:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <MX_SPI1_Init+0x74>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <MX_SPI1_Init+0x74>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c04:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <MX_SPI1_Init+0x74>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <MX_SPI1_Init+0x74>)
 8001c0c:	2207      	movs	r2, #7
 8001c0e:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c10:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <MX_SPI1_Init+0x74>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <MX_SPI1_Init+0x74>)
 8001c18:	2208      	movs	r2, #8
 8001c1a:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c1c:	4804      	ldr	r0, [pc, #16]	; (8001c30 <MX_SPI1_Init+0x74>)
 8001c1e:	f003 fe19 	bl	8005854 <HAL_SPI_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_SPI1_Init+0x70>
	{
		Error_Handler();
 8001c28:	f000 fd90 	bl	800274c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000350 	.word	0x20000350
 8001c34:	40013000 	.word	0x40013000

08001c38 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b098      	sub	sp, #96	; 0x60
 8001c3c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c3e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001c4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
 8001c58:	611a      	str	r2, [r3, #16]
 8001c5a:	615a      	str	r2, [r3, #20]
 8001c5c:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	2234      	movs	r2, #52	; 0x34
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f007 fdbf 	bl	80097e8 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001c6a:	4b41      	ldr	r3, [pc, #260]	; (8001d70 <MX_TIM1_Init+0x138>)
 8001c6c:	4a41      	ldr	r2, [pc, #260]	; (8001d74 <MX_TIM1_Init+0x13c>)
 8001c6e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 250;
 8001c70:	4b3f      	ldr	r3, [pc, #252]	; (8001d70 <MX_TIM1_Init+0x138>)
 8001c72:	22fa      	movs	r2, #250	; 0xfa
 8001c74:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c76:	4b3e      	ldr	r3, [pc, #248]	; (8001d70 <MX_TIM1_Init+0x138>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 256;
 8001c7c:	4b3c      	ldr	r3, [pc, #240]	; (8001d70 <MX_TIM1_Init+0x138>)
 8001c7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c82:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c84:	4b3a      	ldr	r3, [pc, #232]	; (8001d70 <MX_TIM1_Init+0x138>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001c8a:	4b39      	ldr	r3, [pc, #228]	; (8001d70 <MX_TIM1_Init+0x138>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c90:	4b37      	ldr	r3, [pc, #220]	; (8001d70 <MX_TIM1_Init+0x138>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c96:	4836      	ldr	r0, [pc, #216]	; (8001d70 <MX_TIM1_Init+0x138>)
 8001c98:	f004 fd73 	bl	8006782 <HAL_TIM_PWM_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM1_Init+0x6e>
	{
		Error_Handler();
 8001ca2:	f000 fd53 	bl	800274c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001caa:	2300      	movs	r3, #0
 8001cac:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cb2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	482d      	ldr	r0, [pc, #180]	; (8001d70 <MX_TIM1_Init+0x138>)
 8001cba:	f005 fbf7 	bl	80074ac <HAL_TIMEx_MasterConfigSynchronization>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 8001cc4:	f000 fd42 	bl	800274c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cc8:	2360      	movs	r3, #96	; 0x60
 8001cca:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ce4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ce8:	2200      	movs	r2, #0
 8001cea:	4619      	mov	r1, r3
 8001cec:	4820      	ldr	r0, [pc, #128]	; (8001d70 <MX_TIM1_Init+0x138>)
 8001cee:	f004 ff99 	bl	8006c24 <HAL_TIM_PWM_ConfigChannel>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_TIM1_Init+0xc4>
	{
		Error_Handler();
 8001cf8:	f000 fd28 	bl	800274c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cfc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d00:	2204      	movs	r2, #4
 8001d02:	4619      	mov	r1, r3
 8001d04:	481a      	ldr	r0, [pc, #104]	; (8001d70 <MX_TIM1_Init+0x138>)
 8001d06:	f004 ff8d 	bl	8006c24 <HAL_TIM_PWM_ConfigChannel>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM1_Init+0xdc>
	{
		Error_Handler();
 8001d10:	f000 fd1c 	bl	800274c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d2c:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d44:	2300      	movs	r3, #0
 8001d46:	633b      	str	r3, [r7, #48]	; 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d4c:	1d3b      	adds	r3, r7, #4
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4807      	ldr	r0, [pc, #28]	; (8001d70 <MX_TIM1_Init+0x138>)
 8001d52:	f005 fc0b 	bl	800756c <HAL_TIMEx_ConfigBreakDeadTime>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_TIM1_Init+0x128>
	{
		Error_Handler();
 8001d5c:	f000 fcf6 	bl	800274c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001d60:	4803      	ldr	r0, [pc, #12]	; (8001d70 <MX_TIM1_Init+0x138>)
 8001d62:	f001 f98d 	bl	8003080 <HAL_TIM_MspPostInit>

}
 8001d66:	bf00      	nop
 8001d68:	3760      	adds	r7, #96	; 0x60
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200003b4 	.word	0x200003b4
 8001d74:	40012c00 	.word	0x40012c00

08001d78 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d7e:	f107 031c 	add.w	r3, r7, #28
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001d8a:	463b      	mov	r3, r7
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
 8001d98:	615a      	str	r2, [r3, #20]
 8001d9a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001d9c:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <MX_TIM2_Init+0xb0>)
 8001d9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001da2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 8000-1;
 8001da4:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <MX_TIM2_Init+0xb0>)
 8001da6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001daa:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dac:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <MX_TIM2_Init+0xb0>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4;
 8001db2:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <MX_TIM2_Init+0xb0>)
 8001db4:	2204      	movs	r2, #4
 8001db6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db8:	4b1b      	ldr	r3, [pc, #108]	; (8001e28 <MX_TIM2_Init+0xb0>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dbe:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <MX_TIM2_Init+0xb0>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001dc4:	4818      	ldr	r0, [pc, #96]	; (8001e28 <MX_TIM2_Init+0xb0>)
 8001dc6:	f004 fcdc 	bl	8006782 <HAL_TIM_PWM_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 8001dd0:	f000 fcbc 	bl	800274c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ddc:	f107 031c 	add.w	r3, r7, #28
 8001de0:	4619      	mov	r1, r3
 8001de2:	4811      	ldr	r0, [pc, #68]	; (8001e28 <MX_TIM2_Init+0xb0>)
 8001de4:	f005 fb62 	bl	80074ac <HAL_TIMEx_MasterConfigSynchronization>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM2_Init+0x7a>
	{
		Error_Handler();
 8001dee:	f000 fcad 	bl	800274c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001df2:	2360      	movs	r3, #96	; 0x60
 8001df4:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 2;
 8001df6:	2302      	movs	r3, #2
 8001df8:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e02:	463b      	mov	r3, r7
 8001e04:	2200      	movs	r2, #0
 8001e06:	4619      	mov	r1, r3
 8001e08:	4807      	ldr	r0, [pc, #28]	; (8001e28 <MX_TIM2_Init+0xb0>)
 8001e0a:	f004 ff0b 	bl	8006c24 <HAL_TIM_PWM_ConfigChannel>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM2_Init+0xa0>
	{
		Error_Handler();
 8001e14:	f000 fc9a 	bl	800274c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001e18:	4803      	ldr	r0, [pc, #12]	; (8001e28 <MX_TIM2_Init+0xb0>)
 8001e1a:	f001 f931 	bl	8003080 <HAL_TIM_MspPostInit>

}
 8001e1e:	bf00      	nop
 8001e20:	3728      	adds	r7, #40	; 0x28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000400 	.word	0x20000400

08001e2c <MX_TIM16_Init>:
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8001e30:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <MX_TIM16_Init+0x48>)
 8001e32:	4a11      	ldr	r2, [pc, #68]	; (8001e78 <MX_TIM16_Init+0x4c>)
 8001e34:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 64000;
 8001e36:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <MX_TIM16_Init+0x48>)
 8001e38:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001e3c:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <MX_TIM16_Init+0x48>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 500;
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <MX_TIM16_Init+0x48>)
 8001e46:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001e4a:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <MX_TIM16_Init+0x48>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8001e52:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <MX_TIM16_Init+0x48>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <MX_TIM16_Init+0x48>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001e5e:	4805      	ldr	r0, [pc, #20]	; (8001e74 <MX_TIM16_Init+0x48>)
 8001e60:	f004 fbba 	bl	80065d8 <HAL_TIM_Base_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_TIM16_Init+0x42>
	{
		Error_Handler();
 8001e6a:	f000 fc6f 	bl	800274c <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2000044c 	.word	0x2000044c
 8001e78:	40014400 	.word	0x40014400

08001e7c <MX_TIM17_Init>:
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
	/* USER CODE END TIM17_Init 0 */

	/* USER CODE BEGIN TIM17_Init 1 */

	/* USER CODE END TIM17_Init 1 */
	htim17.Instance = TIM17;
 8001e80:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <MX_TIM17_Init+0x44>)
 8001e82:	4a10      	ldr	r2, [pc, #64]	; (8001ec4 <MX_TIM17_Init+0x48>)
 8001e84:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = 64000-1;
 8001e86:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <MX_TIM17_Init+0x44>)
 8001e88:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001e8c:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <MX_TIM17_Init+0x44>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 50;
 8001e94:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <MX_TIM17_Init+0x44>)
 8001e96:	2232      	movs	r2, #50	; 0x32
 8001e98:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <MX_TIM17_Init+0x44>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 8001ea0:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <MX_TIM17_Init+0x44>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <MX_TIM17_Init+0x44>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001eac:	4804      	ldr	r0, [pc, #16]	; (8001ec0 <MX_TIM17_Init+0x44>)
 8001eae:	f004 fb93 	bl	80065d8 <HAL_TIM_Base_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM17_Init+0x40>
	{
		Error_Handler();
 8001eb8:	f000 fc48 	bl	800274c <Error_Handler>
	}
	/* USER CODE BEGIN TIM17_Init 2 */

	/* USER CODE END TIM17_Init 2 */

}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000498 	.word	0x20000498
 8001ec4:	40014800 	.word	0x40014800

08001ec8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001edc:	2001      	movs	r0, #1
 8001ede:	f7ff f849 	bl	8000f74 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee2:	2002      	movs	r0, #2
 8001ee4:	f7ff f846 	bl	8000f74 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2110      	movs	r1, #16
 8001eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef0:	f001 feb2 	bl	8003c58 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	4810      	ldr	r0, [pc, #64]	; (8001f3c <MX_GPIO_Init+0x74>)
 8001efa:	f001 fead 	bl	8003c58 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : NSS_Pin */
	GPIO_InitStruct.Pin = NSS_Pin;
 8001efe:	2310      	movs	r3, #16
 8001f00:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f02:	2301      	movs	r3, #1
 8001f04:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	4619      	mov	r1, r3
 8001f12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f16:	f001 fd2f 	bl	8003978 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_GREEN_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4803      	ldr	r0, [pc, #12]	; (8001f3c <MX_GPIO_Init+0x74>)
 8001f30:	f001 fd22 	bl	8003978 <HAL_GPIO_Init>

}
 8001f34:	bf00      	nop
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	48000400 	.word	0x48000400

08001f40 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	dp->trmRdy = 1;
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <HAL_UART_TxCpltCallback+0x1c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	709a      	strb	r2, [r3, #2]
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	20000034 	.word	0x20000034

08001f60 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
	if(huart->Instance == LPUART1){
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a72      	ldr	r2, [pc, #456]	; (8002138 <HAL_UART_RxCpltCallback+0x1d8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d11d      	bne.n	8001fae <HAL_UART_RxCpltCallback+0x4e>
		if(HAL_UART_Transmit(dev->uart, dev->rcv, 1, 1000) == HAL_OK) {
 8001f72:	4b72      	ldr	r3, [pc, #456]	; (800213c <HAL_UART_RxCpltCallback+0x1dc>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	4b70      	ldr	r3, [pc, #448]	; (800213c <HAL_UART_RxCpltCallback+0x1dc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	1d19      	adds	r1, r3, #4
 8001f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f82:	2201      	movs	r2, #1
 8001f84:	f005 fc10 	bl	80077a8 <HAL_UART_Transmit>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f040 80cf 	bne.w	800212e <HAL_UART_RxCpltCallback+0x1ce>
			fsm->state = RFO_PROCESS_CMD;
 8001f90:	4b6b      	ldr	r3, [pc, #428]	; (8002140 <HAL_UART_RxCpltCallback+0x1e0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2201      	movs	r2, #1
 8001f96:	709a      	strb	r2, [r3, #2]
			HAL_UART_Receive_IT(dev->uart, dev->rcv, 1);
 8001f98:	4b68      	ldr	r3, [pc, #416]	; (800213c <HAL_UART_RxCpltCallback+0x1dc>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	4b67      	ldr	r3, [pc, #412]	; (800213c <HAL_UART_RxCpltCallback+0x1dc>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f005 fd68 	bl	8007a7c <HAL_UART_Receive_IT>
					break;
		}

		HAL_UART_Receive_IT(&huart1, dp->rcv, 4);
	}
}
 8001fac:	e0bf      	b.n	800212e <HAL_UART_RxCpltCallback+0x1ce>
	else if(huart->Instance == USART1)  {
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a64      	ldr	r2, [pc, #400]	; (8002144 <HAL_UART_RxCpltCallback+0x1e4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	f040 80ba 	bne.w	800212e <HAL_UART_RxCpltCallback+0x1ce>
		nextion_decode_response(dp);
 8001fba:	4b63      	ldr	r3, [pc, #396]	; (8002148 <HAL_UART_RxCpltCallback+0x1e8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 fcb0 	bl	8002924 <nextion_decode_response>
		switch(dp->response.page) {
 8001fc4:	4b60      	ldr	r3, [pc, #384]	; (8002148 <HAL_UART_RxCpltCallback+0x1e8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	d075      	beq.n	80020ba <HAL_UART_RxCpltCallback+0x15a>
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	f300 80a5 	bgt.w	800211e <HAL_UART_RxCpltCallback+0x1be>
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d002      	beq.n	8001fde <HAL_UART_RxCpltCallback+0x7e>
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d055      	beq.n	8002088 <HAL_UART_RxCpltCallback+0x128>
 8001fdc:	e09f      	b.n	800211e <HAL_UART_RxCpltCallback+0x1be>
			switch(dp->response.id) {
 8001fde:	4b5a      	ldr	r3, [pc, #360]	; (8002148 <HAL_UART_RxCpltCallback+0x1e8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	785b      	ldrb	r3, [r3, #1]
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d002      	beq.n	8001fee <HAL_UART_RxCpltCallback+0x8e>
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d038      	beq.n	800205e <HAL_UART_RxCpltCallback+0xfe>
			break;
 8001fec:	e097      	b.n	800211e <HAL_UART_RxCpltCallback+0x1be>
				beep_IT(dev,3);
 8001fee:	4b53      	ldr	r3, [pc, #332]	; (800213c <HAL_UART_RxCpltCallback+0x1dc>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2103      	movs	r1, #3
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fff1 	bl	8000fdc <beep_IT>
				dp->write(dp, "page reflow");
 8001ffa:	4b53      	ldr	r3, [pc, #332]	; (8002148 <HAL_UART_RxCpltCallback+0x1e8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002000:	4a51      	ldr	r2, [pc, #324]	; (8002148 <HAL_UART_RxCpltCallback+0x1e8>)
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	4951      	ldr	r1, [pc, #324]	; (800214c <HAL_UART_RxCpltCallback+0x1ec>)
 8002006:	4610      	mov	r0, r2
 8002008:	4798      	blx	r3
				dp->write_id_str(dp, "conState", "Not connected");
 800200a:	4b4f      	ldr	r3, [pc, #316]	; (8002148 <HAL_UART_RxCpltCallback+0x1e8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002010:	4a4d      	ldr	r2, [pc, #308]	; (8002148 <HAL_UART_RxCpltCallback+0x1e8>)
 8002012:	6810      	ldr	r0, [r2, #0]
 8002014:	4a4e      	ldr	r2, [pc, #312]	; (8002150 <HAL_UART_RxCpltCallback+0x1f0>)
 8002016:	494f      	ldr	r1, [pc, #316]	; (8002154 <HAL_UART_RxCpltCallback+0x1f4>)
 8002018:	4798      	blx	r3
				dp->write_id_str(dp, "reflowState", "Prepare");
 800201a:	4b4b      	ldr	r3, [pc, #300]	; (8002148 <HAL_UART_RxCpltCallback+0x1e8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002020:	4a49      	ldr	r2, [pc, #292]	; (8002148 <HAL_UART_RxCpltCallback+0x1e8>)
 8002022:	6810      	ldr	r0, [r2, #0]
 8002024:	4a4c      	ldr	r2, [pc, #304]	; (8002158 <HAL_UART_RxCpltCallback+0x1f8>)
 8002026:	494d      	ldr	r1, [pc, #308]	; (800215c <HAL_UART_RxCpltCallback+0x1fc>)
 8002028:	4798      	blx	r3
				dp->write_id_val(dp, "reflowProgress", 0);
 800202a:	4b47      	ldr	r3, [pc, #284]	; (8002148 <HAL_UART_RxCpltCallback+0x1e8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002030:	4a45      	ldr	r2, [pc, #276]	; (8002148 <HAL_UART_RxCpltCallback+0x1e8>)
 8002032:	6810      	ldr	r0, [r2, #0]
 8002034:	2200      	movs	r2, #0
 8002036:	494a      	ldr	r1, [pc, #296]	; (8002160 <HAL_UART_RxCpltCallback+0x200>)
 8002038:	4798      	blx	r3
				fsm->state = RFO_START;
 800203a:	4b41      	ldr	r3, [pc, #260]	; (8002140 <HAL_UART_RxCpltCallback+0x1e0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2205      	movs	r2, #5
 8002040:	709a      	strb	r2, [r3, #2]
				dev->currentReflowState = REFLOW_STATE_PREPARE;
 8002042:	4b3e      	ldr	r3, [pc, #248]	; (800213c <HAL_UART_RxCpltCallback+0x1dc>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2202      	movs	r2, #2
 8002048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				dev->print = true;
 800204c:	4b3b      	ldr	r3, [pc, #236]	; (800213c <HAL_UART_RxCpltCallback+0x1dc>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				HAL_TIM_Base_Start_IT(&htim16);
 8002056:	4843      	ldr	r0, [pc, #268]	; (8002164 <HAL_UART_RxCpltCallback+0x204>)
 8002058:	f004 fb16 	bl	8006688 <HAL_TIM_Base_Start_IT>
				break;
 800205c:	e013      	b.n	8002086 <HAL_UART_RxCpltCallback+0x126>
				beep_IT(dev,1);
 800205e:	4b37      	ldr	r3, [pc, #220]	; (800213c <HAL_UART_RxCpltCallback+0x1dc>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2101      	movs	r1, #1
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe ffb9 	bl	8000fdc <beep_IT>
				dp->write(dp, "page setting");
 800206a:	4b37      	ldr	r3, [pc, #220]	; (8002148 <HAL_UART_RxCpltCallback+0x1e8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002070:	4a35      	ldr	r2, [pc, #212]	; (8002148 <HAL_UART_RxCpltCallback+0x1e8>)
 8002072:	6812      	ldr	r2, [r2, #0]
 8002074:	493c      	ldr	r1, [pc, #240]	; (8002168 <HAL_UART_RxCpltCallback+0x208>)
 8002076:	4610      	mov	r0, r2
 8002078:	4798      	blx	r3
				dev->currentPage = DP_SETTINGS;
 800207a:	4b30      	ldr	r3, [pc, #192]	; (800213c <HAL_UART_RxCpltCallback+0x1dc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2202      	movs	r2, #2
 8002080:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				break;
 8002084:	bf00      	nop
			break;
 8002086:	e04a      	b.n	800211e <HAL_UART_RxCpltCallback+0x1be>
				switch(dp->response.id) {
 8002088:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <HAL_UART_RxCpltCallback+0x1e8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	785b      	ldrb	r3, [r3, #1]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d142      	bne.n	8002118 <HAL_UART_RxCpltCallback+0x1b8>
					dp->write(dp, "page main");
 8002092:	4b2d      	ldr	r3, [pc, #180]	; (8002148 <HAL_UART_RxCpltCallback+0x1e8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002098:	4a2b      	ldr	r2, [pc, #172]	; (8002148 <HAL_UART_RxCpltCallback+0x1e8>)
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	4933      	ldr	r1, [pc, #204]	; (800216c <HAL_UART_RxCpltCallback+0x20c>)
 800209e:	4610      	mov	r0, r2
 80020a0:	4798      	blx	r3
					dev->currentPage = DP_MAIN;
 80020a2:	4b26      	ldr	r3, [pc, #152]	; (800213c <HAL_UART_RxCpltCallback+0x1dc>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
					nextion_print_page(dp);
 80020ac:	4b26      	ldr	r3, [pc, #152]	; (8002148 <HAL_UART_RxCpltCallback+0x1e8>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f000 fc51 	bl	8002958 <nextion_print_page>
					break;
 80020b6:	bf00      	nop
				break;
 80020b8:	e02e      	b.n	8002118 <HAL_UART_RxCpltCallback+0x1b8>
					switch(dp->response.id) {
 80020ba:	4b23      	ldr	r3, [pc, #140]	; (8002148 <HAL_UART_RxCpltCallback+0x1e8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	785b      	ldrb	r3, [r3, #1]
 80020c0:	2b0f      	cmp	r3, #15
 80020c2:	d12b      	bne.n	800211c <HAL_UART_RxCpltCallback+0x1bc>
						beep_IT(dev,3);
 80020c4:	4b1d      	ldr	r3, [pc, #116]	; (800213c <HAL_UART_RxCpltCallback+0x1dc>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2103      	movs	r1, #3
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe ff86 	bl	8000fdc <beep_IT>
						HAL_TIM_Base_Stop_IT(&htim16);
 80020d0:	4824      	ldr	r0, [pc, #144]	; (8002164 <HAL_UART_RxCpltCallback+0x204>)
 80020d2:	f004 fb27 	bl	8006724 <HAL_TIM_Base_Stop_IT>
						dev->currentReflowState = REFLOW_STATE_IDLE;
 80020d6:	4b19      	ldr	r3, [pc, #100]	; (800213c <HAL_UART_RxCpltCallback+0x1dc>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
						fsm->state = RFO_IDLE;
 80020e0:	4b17      	ldr	r3, [pc, #92]	; (8002140 <HAL_UART_RxCpltCallback+0x1e0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2200      	movs	r2, #0
 80020e6:	709a      	strb	r2, [r3, #2]
						dev->elaps = 0;
 80020e8:	4b14      	ldr	r3, [pc, #80]	; (800213c <HAL_UART_RxCpltCallback+0x1dc>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2200      	movs	r2, #0
 80020ee:	64da      	str	r2, [r3, #76]	; 0x4c
						dp->write(dp, "page main");
 80020f0:	4b15      	ldr	r3, [pc, #84]	; (8002148 <HAL_UART_RxCpltCallback+0x1e8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020f6:	4a14      	ldr	r2, [pc, #80]	; (8002148 <HAL_UART_RxCpltCallback+0x1e8>)
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	491c      	ldr	r1, [pc, #112]	; (800216c <HAL_UART_RxCpltCallback+0x20c>)
 80020fc:	4610      	mov	r0, r2
 80020fe:	4798      	blx	r3
						dev->currentPage = DP_MAIN;
 8002100:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_UART_RxCpltCallback+0x1dc>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
						nextion_print_page(dp);
 800210a:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <HAL_UART_RxCpltCallback+0x1e8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f000 fc22 	bl	8002958 <nextion_print_page>
						break;
 8002114:	bf00      	nop
					break;
 8002116:	e001      	b.n	800211c <HAL_UART_RxCpltCallback+0x1bc>
				break;
 8002118:	bf00      	nop
 800211a:	e000      	b.n	800211e <HAL_UART_RxCpltCallback+0x1be>
					break;
 800211c:	bf00      	nop
		HAL_UART_Receive_IT(&huart1, dp->rcv, 4);
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <HAL_UART_RxCpltCallback+0x1e8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	3308      	adds	r3, #8
 8002124:	2204      	movs	r2, #4
 8002126:	4619      	mov	r1, r3
 8002128:	4811      	ldr	r0, [pc, #68]	; (8002170 <HAL_UART_RxCpltCallback+0x210>)
 800212a:	f005 fca7 	bl	8007a7c <HAL_UART_Receive_IT>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40008000 	.word	0x40008000
 800213c:	20000020 	.word	0x20000020
 8002140:	20000024 	.word	0x20000024
 8002144:	40013800 	.word	0x40013800
 8002148:	20000034 	.word	0x20000034
 800214c:	0800c650 	.word	0x0800c650
 8002150:	0800c814 	.word	0x0800c814
 8002154:	0800c668 	.word	0x0800c668
 8002158:	0800c674 	.word	0x0800c674
 800215c:	0800c67c 	.word	0x0800c67c
 8002160:	0800c688 	.word	0x0800c688
 8002164:	2000044c 	.word	0x2000044c
 8002168:	0800c824 	.word	0x0800c824
 800216c:	0800c640 	.word	0x0800c640
 8002170:	200002c0 	.word	0x200002c0

08002174 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM17) {
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4aa1      	ldr	r2, [pc, #644]	; (8002408 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d13e      	bne.n	8002204 <HAL_TIM_PeriodElapsedCallback+0x90>

		if(dev->cntBeeps == 2*dev->numBeeps-1) {
 8002186:	4ba1      	ldr	r3, [pc, #644]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800218e:	461a      	mov	r2, r3
 8002190:	4b9e      	ldr	r3, [pc, #632]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	3b01      	subs	r3, #1
 800219c:	429a      	cmp	r2, r3
 800219e:	d110      	bne.n	80021c2 <HAL_TIM_PeriodElapsedCallback+0x4e>
			__HAL_TIM_SET_COMPARE(dev->buzPwmTim, TIM_CHANNEL_1, 0);
 80021a0:	4b9a      	ldr	r3, [pc, #616]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2200      	movs	r2, #0
 80021aa:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_Base_Stop_IT(dev->buzElapsTim);
 80021ac:	4b97      	ldr	r3, [pc, #604]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b2:	4618      	mov	r0, r3
 80021b4:	f004 fab6 	bl	8006724 <HAL_TIM_Base_Stop_IT>
			dev->cntBeeps = 0;
 80021b8:	4b94      	ldr	r3, [pc, #592]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		}

		if(dev->cntBeeps % 2) {
 80021c2:	4b92      	ldr	r3, [pc, #584]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d006      	beq.n	80021e2 <HAL_TIM_PeriodElapsedCallback+0x6e>
			__HAL_TIM_SET_COMPARE(dev->buzPwmTim, TIM_CHANNEL_1, 2);
 80021d4:	4b8d      	ldr	r3, [pc, #564]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2202      	movs	r2, #2
 80021de:	635a      	str	r2, [r3, #52]	; 0x34
 80021e0:	e005      	b.n	80021ee <HAL_TIM_PeriodElapsedCallback+0x7a>
		}
		else {
			__HAL_TIM_SET_COMPARE(dev->buzPwmTim, TIM_CHANNEL_1, 0);
 80021e2:	4b8a      	ldr	r3, [pc, #552]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2200      	movs	r2, #0
 80021ec:	635a      	str	r2, [r3, #52]	; 0x34
		}

		dev->cntBeeps += 1;
 80021ee:	4b87      	ldr	r3, [pc, #540]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80021f6:	4b85      	ldr	r3, [pc, #532]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	3201      	adds	r2, #1
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

		dev->dataRdy = true;

	}

}
 8002202:	e291      	b.n	8002728 <HAL_TIM_PeriodElapsedCallback+0x5b4>
	else if(htim->Instance == TIM16) {
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a81      	ldr	r2, [pc, #516]	; (8002410 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	f040 828c 	bne.w	8002728 <HAL_TIM_PeriodElapsedCallback+0x5b4>
		MAX31855_read_celsius(tempSens);
 8002210:	4b80      	ldr	r3, [pc, #512]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe fe4f 	bl	8000eb8 <MAX31855_read_celsius>
		dev->elaps += 1;
 800221a:	4b7c      	ldr	r3, [pc, #496]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002220:	4b7a      	ldr	r3, [pc, #488]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	3201      	adds	r2, #1
 8002226:	64da      	str	r2, [r3, #76]	; 0x4c
		dev->temp = tempSens->temp;
 8002228:	4b7a      	ldr	r3, [pc, #488]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4b77      	ldr	r3, [pc, #476]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6992      	ldr	r2, [r2, #24]
 8002232:	655a      	str	r2, [r3, #84]	; 0x54
		switch(dev->currentReflowState){
 8002234:	4b75      	ldr	r3, [pc, #468]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800223c:	2b07      	cmp	r3, #7
 800223e:	f200 822e 	bhi.w	800269e <HAL_TIM_PeriodElapsedCallback+0x52a>
 8002242:	a201      	add	r2, pc, #4	; (adr r2, 8002248 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002248:	0800269f 	.word	0x0800269f
 800224c:	0800269f 	.word	0x0800269f
 8002250:	08002269 	.word	0x08002269
 8002254:	080022af 	.word	0x080022af
 8002258:	08002357 	.word	0x08002357
 800225c:	08002435 	.word	0x08002435
 8002260:	080024dd 	.word	0x080024dd
 8002264:	08002595 	.word	0x08002595
			dev->targetTemp = 256;
 8002268:	4b68      	ldr	r3, [pc, #416]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f04f 4287 	mov.w	r2, #1132462080	; 0x43800000
 8002270:	649a      	str	r2, [r3, #72]	; 0x48
			if(dev->temp > config->PREHEAT_START_TEMP) {
 8002272:	4b66      	ldr	r3, [pc, #408]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800227a:	4b67      	ldr	r3, [pc, #412]	; (8002418 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002282:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228a:	dc00      	bgt.n	800228e <HAL_TIM_PeriodElapsedCallback+0x11a>
			break;
 800228c:	e207      	b.n	800269e <HAL_TIM_PeriodElapsedCallback+0x52a>
				beep_IT(dev,2);
 800228e:	4b5f      	ldr	r3, [pc, #380]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2102      	movs	r1, #2
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe fea1 	bl	8000fdc <beep_IT>
				dev->currentReflowState = REFLOW_STATE_PREHEAT;
 800229a:	4b5c      	ldr	r3, [pc, #368]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2203      	movs	r2, #3
 80022a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				dev->elaps = 0;
 80022a4:	4b59      	ldr	r3, [pc, #356]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2200      	movs	r2, #0
 80022aa:	64da      	str	r2, [r3, #76]	; 0x4c
			break;
 80022ac:	e1f7      	b.n	800269e <HAL_TIM_PeriodElapsedCallback+0x52a>
			dp->write_id_str(dp, "reflowState", "PREHEAT");
 80022ae:	4b5b      	ldr	r3, [pc, #364]	; (800241c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b4:	4a59      	ldr	r2, [pc, #356]	; (800241c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80022b6:	6810      	ldr	r0, [r2, #0]
 80022b8:	4a59      	ldr	r2, [pc, #356]	; (8002420 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80022ba:	495a      	ldr	r1, [pc, #360]	; (8002424 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80022bc:	4798      	blx	r3
			if(!(dev->elaps % 4) || dev->elaps == 1) {
 80022be:	4b53      	ldr	r3, [pc, #332]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d004      	beq.n	80022d6 <HAL_TIM_PeriodElapsedCallback+0x162>
 80022cc:	4b4f      	ldr	r3, [pc, #316]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d11a      	bne.n	800230c <HAL_TIM_PeriodElapsedCallback+0x198>
				dev->targetTemp = (float)config->PREHEAT_START_TEMP + (config->PREHEAT_TEMP_INCREASE*SAMPLE_TIME)*dev->elaps;
 80022d6:	4b50      	ldr	r3, [pc, #320]	; (8002418 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	ed93 7a02 	vldr	s14, [r3, #8]
 80022de:	4b4e      	ldr	r3, [pc, #312]	; (8002418 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80022e6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80022ea:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80022ee:	4b47      	ldr	r3, [pc, #284]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f4:	ee07 3a90 	vmov	s15, r3
 80022f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002300:	4b42      	ldr	r3, [pc, #264]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002308:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			if(dev->elaps == (float)config->PREHEAT_DURATION/SAMPLE_TIME) {
 800230c:	4b3f      	ldr	r3, [pc, #252]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002312:	ee07 3a90 	vmov	s15, r3
 8002316:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800231a:	4b3f      	ldr	r3, [pc, #252]	; (8002418 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002322:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002326:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800232a:	eeb4 7a67 	vcmp.f32	s14, s15
 800232e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002332:	f040 8197 	bne.w	8002664 <HAL_TIM_PeriodElapsedCallback+0x4f0>
				beep_IT(dev,2);
 8002336:	4b35      	ldr	r3, [pc, #212]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2102      	movs	r1, #2
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe fe4d 	bl	8000fdc <beep_IT>
				dev->currentReflowState = REFLOW_STATE_SOAK;
 8002342:	4b32      	ldr	r3, [pc, #200]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2204      	movs	r2, #4
 8002348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				dev->elaps = 0;
 800234c:	4b2f      	ldr	r3, [pc, #188]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2200      	movs	r2, #0
 8002352:	64da      	str	r2, [r3, #76]	; 0x4c
			break;
 8002354:	e186      	b.n	8002664 <HAL_TIM_PeriodElapsedCallback+0x4f0>
			dp->write_id_str(dp, "reflowState", "SOAK");
 8002356:	4b31      	ldr	r3, [pc, #196]	; (800241c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235c:	4a2f      	ldr	r2, [pc, #188]	; (800241c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800235e:	6810      	ldr	r0, [r2, #0]
 8002360:	4a31      	ldr	r2, [pc, #196]	; (8002428 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002362:	4930      	ldr	r1, [pc, #192]	; (8002424 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002364:	4798      	blx	r3
			if(!(dev->elaps % 4) || dev->elaps == 1) {
 8002366:	4b29      	ldr	r3, [pc, #164]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d004      	beq.n	800237e <HAL_TIM_PeriodElapsedCallback+0x20a>
 8002374:	4b25      	ldr	r3, [pc, #148]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237a:	2b01      	cmp	r3, #1
 800237c:	d11a      	bne.n	80023b4 <HAL_TIM_PeriodElapsedCallback+0x240>
				dev->targetTemp = (float)config->SOAK_START_TEMP + (config->SOAK_TEMP_INCREASE*SAMPLE_TIME)*dev->elaps;
 800237e:	4b26      	ldr	r3, [pc, #152]	; (8002418 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	ed93 7a05 	vldr	s14, [r3, #20]
 8002386:	4b24      	ldr	r3, [pc, #144]	; (8002418 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800238e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002392:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002396:	4b1d      	ldr	r3, [pc, #116]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239c:	ee07 3a90 	vmov	s15, r3
 80023a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023a8:	4b18      	ldr	r3, [pc, #96]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b0:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			if(dev->elaps == (float)config->SOAK_DURATION/SAMPLE_TIME) {
 80023b4:	4b15      	ldr	r3, [pc, #84]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ba:	ee07 3a90 	vmov	s15, r3
 80023be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023c2:	4b15      	ldr	r3, [pc, #84]	; (8002418 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	edd3 6a04 	vldr	s13, [r3, #16]
 80023ca:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80023ce:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80023d2:	eeb4 7a67 	vcmp.f32	s14, s15
 80023d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023da:	f040 8145 	bne.w	8002668 <HAL_TIM_PeriodElapsedCallback+0x4f4>
				beep_IT(dev,2);
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2102      	movs	r1, #2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe fdf9 	bl	8000fdc <beep_IT>
				dev->currentReflowState = REFLOW_STATE_RAMP;
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2205      	movs	r2, #5
 80023f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				dev->elaps = 0;
 80023f4:	4b05      	ldr	r3, [pc, #20]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2200      	movs	r2, #0
 80023fa:	64da      	str	r2, [r3, #76]	; 0x4c
				pid->Kp = 50;
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a0b      	ldr	r2, [pc, #44]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002402:	601a      	str	r2, [r3, #0]
			break;
 8002404:	e130      	b.n	8002668 <HAL_TIM_PeriodElapsedCallback+0x4f4>
 8002406:	bf00      	nop
 8002408:	40014800 	.word	0x40014800
 800240c:	20000020 	.word	0x20000020
 8002410:	40014400 	.word	0x40014400
 8002414:	2000002c 	.word	0x2000002c
 8002418:	20000028 	.word	0x20000028
 800241c:	20000034 	.word	0x20000034
 8002420:	0800c834 	.word	0x0800c834
 8002424:	0800c67c 	.word	0x0800c67c
 8002428:	0800c83c 	.word	0x0800c83c
 800242c:	20000030 	.word	0x20000030
 8002430:	42480000 	.word	0x42480000
			dp->write_id_str(dp, "reflowState", "RAMP");
 8002434:	4b8f      	ldr	r3, [pc, #572]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243a:	4a8e      	ldr	r2, [pc, #568]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x500>)
 800243c:	6810      	ldr	r0, [r2, #0]
 800243e:	4a8e      	ldr	r2, [pc, #568]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8002440:	498e      	ldr	r1, [pc, #568]	; (800267c <HAL_TIM_PeriodElapsedCallback+0x508>)
 8002442:	4798      	blx	r3
			if(!(dev->elaps % 4) || dev->elaps == 1) {
 8002444:	4b8e      	ldr	r3, [pc, #568]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d004      	beq.n	800245c <HAL_TIM_PeriodElapsedCallback+0x2e8>
 8002452:	4b8b      	ldr	r3, [pc, #556]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002458:	2b01      	cmp	r3, #1
 800245a:	d11a      	bne.n	8002492 <HAL_TIM_PeriodElapsedCallback+0x31e>
				dev->targetTemp = (float)config->RAMP_START_TEMP + (config->RAMP_TEMP_INCREASE*SAMPLE_TIME)*dev->elaps;
 800245c:	4b89      	ldr	r3, [pc, #548]	; (8002684 <HAL_TIM_PeriodElapsedCallback+0x510>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002464:	4b87      	ldr	r3, [pc, #540]	; (8002684 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800246c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002470:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002474:	4b82      	ldr	r3, [pc, #520]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247a:	ee07 3a90 	vmov	s15, r3
 800247e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002482:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002486:	4b7e      	ldr	r3, [pc, #504]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800248e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			if(dev->elaps == (float)config->RAMP_DURATION/SAMPLE_TIME) {
 8002492:	4b7b      	ldr	r3, [pc, #492]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002498:	ee07 3a90 	vmov	s15, r3
 800249c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024a0:	4b78      	ldr	r3, [pc, #480]	; (8002684 <HAL_TIM_PeriodElapsedCallback+0x510>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	edd3 6a08 	vldr	s13, [r3, #32]
 80024a8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80024ac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80024b0:	eeb4 7a67 	vcmp.f32	s14, s15
 80024b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b8:	f040 80d8 	bne.w	800266c <HAL_TIM_PeriodElapsedCallback+0x4f8>
				beep_IT(dev,2);
 80024bc:	4b70      	ldr	r3, [pc, #448]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2102      	movs	r1, #2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe fd8a 	bl	8000fdc <beep_IT>
				dev->currentReflowState = REFLOW_STATE_REFLOW;
 80024c8:	4b6d      	ldr	r3, [pc, #436]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2206      	movs	r2, #6
 80024ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				dev->elaps = 0;
 80024d2:	4b6b      	ldr	r3, [pc, #428]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2200      	movs	r2, #0
 80024d8:	64da      	str	r2, [r3, #76]	; 0x4c
			break;
 80024da:	e0c7      	b.n	800266c <HAL_TIM_PeriodElapsedCallback+0x4f8>
			dp->write_id_str(dp, "reflowState", "REFLOW");
 80024dc:	4b65      	ldr	r3, [pc, #404]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e2:	4a64      	ldr	r2, [pc, #400]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80024e4:	6810      	ldr	r0, [r2, #0]
 80024e6:	4a68      	ldr	r2, [pc, #416]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x514>)
 80024e8:	4964      	ldr	r1, [pc, #400]	; (800267c <HAL_TIM_PeriodElapsedCallback+0x508>)
 80024ea:	4798      	blx	r3
			if(!(dev->elaps % 4) || dev->elaps == 1) {
 80024ec:	4b64      	ldr	r3, [pc, #400]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d004      	beq.n	8002504 <HAL_TIM_PeriodElapsedCallback+0x390>
 80024fa:	4b61      	ldr	r3, [pc, #388]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002500:	2b01      	cmp	r3, #1
 8002502:	d11a      	bne.n	800253a <HAL_TIM_PeriodElapsedCallback+0x3c6>
				dev->targetTemp = config->REFLOW_START_TEMP + (config->REFLOW_TEMP_INCREASE*SAMPLE_TIME)*dev->elaps;
 8002504:	4b5f      	ldr	r3, [pc, #380]	; (8002684 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800250c:	4b5d      	ldr	r3, [pc, #372]	; (8002684 <HAL_TIM_PeriodElapsedCallback+0x510>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002514:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002518:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800251c:	4b58      	ldr	r3, [pc, #352]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002522:	ee07 3a90 	vmov	s15, r3
 8002526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800252a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800252e:	4b54      	ldr	r3, [pc, #336]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002536:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			if(dev->elaps == config->REFLOW_DURATION/SAMPLE_TIME) {
 800253a:	4b51      	ldr	r3, [pc, #324]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002540:	ee07 3a90 	vmov	s15, r3
 8002544:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002548:	4b4e      	ldr	r3, [pc, #312]	; (8002684 <HAL_TIM_PeriodElapsedCallback+0x510>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8002550:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002554:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002558:	eeb4 7a67 	vcmp.f32	s14, s15
 800255c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002560:	f040 8086 	bne.w	8002670 <HAL_TIM_PeriodElapsedCallback+0x4fc>
				beep_IT(dev,2);
 8002564:	4b46      	ldr	r3, [pc, #280]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2102      	movs	r1, #2
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe fd36 	bl	8000fdc <beep_IT>
				dev->currentReflowState = REFLOW_STATE_COOL;
 8002570:	4b43      	ldr	r3, [pc, #268]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2207      	movs	r2, #7
 8002576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				dev->elaps = 0;
 800257a:	4b41      	ldr	r3, [pc, #260]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2200      	movs	r2, #0
 8002580:	64da      	str	r2, [r3, #76]	; 0x4c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);\
 8002582:	4b42      	ldr	r3, [pc, #264]	; (800268c <HAL_TIM_PeriodElapsedCallback+0x518>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2200      	movs	r2, #0
 8002588:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);\
 800258a:	4b40      	ldr	r3, [pc, #256]	; (800268c <HAL_TIM_PeriodElapsedCallback+0x518>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2200      	movs	r2, #0
 8002590:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8002592:	e06d      	b.n	8002670 <HAL_TIM_PeriodElapsedCallback+0x4fc>
			dp->write_id_str(dp, "reflowState", "IDLE");
 8002594:	4b37      	ldr	r3, [pc, #220]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259a:	4a36      	ldr	r2, [pc, #216]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x500>)
 800259c:	6810      	ldr	r0, [r2, #0]
 800259e:	4a3c      	ldr	r2, [pc, #240]	; (8002690 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 80025a0:	4936      	ldr	r1, [pc, #216]	; (800267c <HAL_TIM_PeriodElapsedCallback+0x508>)
 80025a2:	4798      	blx	r3
			if(!(dev->elaps % 4) || dev->elaps == 1) {
 80025a4:	4b36      	ldr	r3, [pc, #216]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d004      	beq.n	80025bc <HAL_TIM_PeriodElapsedCallback+0x448>
 80025b2:	4b33      	ldr	r3, [pc, #204]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d11a      	bne.n	80025f2 <HAL_TIM_PeriodElapsedCallback+0x47e>
				dev->targetTemp = config->REFLOW_END_TEMP - (config->COOL_TEMP_DECREASE*SAMPLE_TIME)*dev->elaps;
 80025bc:	4b31      	ldr	r3, [pc, #196]	; (8002684 <HAL_TIM_PeriodElapsedCallback+0x510>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80025c4:	4b2f      	ldr	r3, [pc, #188]	; (8002684 <HAL_TIM_PeriodElapsedCallback+0x510>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80025cc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80025d0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80025d4:	4b2a      	ldr	r3, [pc, #168]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025da:	ee07 3a90 	vmov	s15, r3
 80025de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025e6:	4b26      	ldr	r3, [pc, #152]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ee:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			if(dev->elaps == (float)config->COOL_DURATION/SAMPLE_TIME) {
 80025f2:	4b23      	ldr	r3, [pc, #140]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f8:	ee07 3a90 	vmov	s15, r3
 80025fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002600:	4b20      	ldr	r3, [pc, #128]	; (8002684 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002608:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800260c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002610:	eeb4 7a67 	vcmp.f32	s14, s15
 8002614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002618:	d140      	bne.n	800269c <HAL_TIM_PeriodElapsedCallback+0x528>
				beep_IT(dev,5);
 800261a:	4b19      	ldr	r3, [pc, #100]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2105      	movs	r1, #5
 8002620:	4618      	mov	r0, r3
 8002622:	f7fe fcdb 	bl	8000fdc <beep_IT>
				dev->currentReflowState = REFLOW_STATE_IDLE;
 8002626:	4b16      	ldr	r3, [pc, #88]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				dev->elaps = 0;
 8002630:	4b13      	ldr	r3, [pc, #76]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2200      	movs	r2, #0
 8002636:	64da      	str	r2, [r3, #76]	; 0x4c
				HAL_TIM_Base_Stop_IT(&htim16);
 8002638:	4816      	ldr	r0, [pc, #88]	; (8002694 <HAL_TIM_PeriodElapsedCallback+0x520>)
 800263a:	f004 f873 	bl	8006724 <HAL_TIM_Base_Stop_IT>
				dp->write(dp, "page main");
 800263e:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002644:	4a0b      	ldr	r2, [pc, #44]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	4913      	ldr	r1, [pc, #76]	; (8002698 <HAL_TIM_PeriodElapsedCallback+0x524>)
 800264a:	4610      	mov	r0, r2
 800264c:	4798      	blx	r3
				dev->currentPage = DP_MAIN;
 800264e:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				nextion_print_page(dp);
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x500>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f000 f97b 	bl	8002958 <nextion_print_page>
			break;
 8002662:	e01b      	b.n	800269c <HAL_TIM_PeriodElapsedCallback+0x528>
			break;
 8002664:	bf00      	nop
 8002666:	e01a      	b.n	800269e <HAL_TIM_PeriodElapsedCallback+0x52a>
			break;
 8002668:	bf00      	nop
 800266a:	e018      	b.n	800269e <HAL_TIM_PeriodElapsedCallback+0x52a>
			break;
 800266c:	bf00      	nop
 800266e:	e016      	b.n	800269e <HAL_TIM_PeriodElapsedCallback+0x52a>
			break;
 8002670:	bf00      	nop
 8002672:	e014      	b.n	800269e <HAL_TIM_PeriodElapsedCallback+0x52a>
 8002674:	20000034 	.word	0x20000034
 8002678:	0800c844 	.word	0x0800c844
 800267c:	0800c67c 	.word	0x0800c67c
 8002680:	20000020 	.word	0x20000020
 8002684:	20000028 	.word	0x20000028
 8002688:	0800c84c 	.word	0x0800c84c
 800268c:	200003b4 	.word	0x200003b4
 8002690:	0800c854 	.word	0x0800c854
 8002694:	2000044c 	.word	0x2000044c
 8002698:	0800c640 	.word	0x0800c640
			break;
 800269c:	bf00      	nop
		if(dev->currentReflowState != REFLOW_STATE_IDLE) {
 800269e:	4b24      	ldr	r3, [pc, #144]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d039      	beq.n	800271e <HAL_TIM_PeriodElapsedCallback+0x5aa>
			dp->write_id_float(dp, "targetTemp", dev->targetTemp);
 80026aa:	4b22      	ldr	r3, [pc, #136]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026b0:	4a20      	ldr	r2, [pc, #128]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 80026b2:	6810      	ldr	r0, [r2, #0]
 80026b4:	4a1e      	ldr	r2, [pc, #120]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	edd2 7a12 	vldr	s15, [r2, #72]	; 0x48
 80026bc:	eeb0 0a67 	vmov.f32	s0, s15
 80026c0:	491d      	ldr	r1, [pc, #116]	; (8002738 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 80026c2:	4798      	blx	r3
			dp->write_id_float(dp, "currentTemp", dev->temp);
 80026c4:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026ca:	4a1a      	ldr	r2, [pc, #104]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 80026cc:	6810      	ldr	r0, [r2, #0]
 80026ce:	4a18      	ldr	r2, [pc, #96]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80026d0:	6812      	ldr	r2, [r2, #0]
 80026d2:	edd2 7a15 	vldr	s15, [r2, #84]	; 0x54
 80026d6:	eeb0 0a67 	vmov.f32	s0, s15
 80026da:	4918      	ldr	r1, [pc, #96]	; (800273c <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80026dc:	4798      	blx	r3
			dp->write_id_float(dp, "tempDiff", dev->targetTemp-dev->temp);
 80026de:	4b15      	ldr	r3, [pc, #84]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026e4:	4a13      	ldr	r2, [pc, #76]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 80026e6:	6810      	ldr	r0, [r2, #0]
 80026e8:	4a11      	ldr	r2, [pc, #68]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80026ea:	6812      	ldr	r2, [r2, #0]
 80026ec:	ed92 7a12 	vldr	s14, [r2, #72]	; 0x48
 80026f0:	4a0f      	ldr	r2, [pc, #60]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	edd2 7a15 	vldr	s15, [r2, #84]	; 0x54
 80026f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002700:	490f      	ldr	r1, [pc, #60]	; (8002740 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8002702:	4798      	blx	r3
			dp->write_id_float(dp, "pidVal", pid->out);
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800270a:	4a0a      	ldr	r2, [pc, #40]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 800270c:	6810      	ldr	r0, [r2, #0]
 800270e:	4a0d      	ldr	r2, [pc, #52]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8002710:	6812      	ldr	r2, [r2, #0]
 8002712:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8002716:	eeb0 0a67 	vmov.f32	s0, s15
 800271a:	490b      	ldr	r1, [pc, #44]	; (8002748 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 800271c:	4798      	blx	r3
		dev->dataRdy = true;
 800271e:	4b04      	ldr	r3, [pc, #16]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8002728:	bf00      	nop
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000020 	.word	0x20000020
 8002734:	20000034 	.word	0x20000034
 8002738:	0800c85c 	.word	0x0800c85c
 800273c:	0800c868 	.word	0x0800c868
 8002740:	0800c874 	.word	0x0800c874
 8002744:	20000030 	.word	0x20000030
 8002748:	0800c880 	.word	0x0800c880

0800274c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002750:	b672      	cpsid	i
}
 8002752:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002754:	e7fe      	b.n	8002754 <Error_Handler+0x8>
	...

08002758 <nextion_send_str_to_id>:
#include "main.h"
#include "nextion.h"

const uint8_t nxEnd[3] = {0xFF,0xFF,0xFF};

int nextion_send_str_to_id(nextion_t* dp, char* id, char* msg) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]

	int len = sprintf(dp->trm, "%s.txt=\"%s\"",id,msg);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f103 003a 	add.w	r0, r3, #58	; 0x3a
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	4914      	ldr	r1, [pc, #80]	; (80027c0 <nextion_send_str_to_id+0x68>)
 8002770:	f007 fcac 	bl	800a0cc <siprintf>
 8002774:	6178      	str	r0, [r7, #20]

	if(HAL_UART_Transmit(dp->uart, (uint8_t*)dp->trm, len, 1000) != HAL_OK) {
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6858      	ldr	r0, [r3, #4]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f103 013a 	add.w	r1, r3, #58	; 0x3a
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	b29a      	uxth	r2, r3
 8002784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002788:	f005 f80e 	bl	80077a8 <HAL_UART_Transmit>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <nextion_send_str_to_id+0x40>
		return NX_ERROR;
 8002792:	f04f 33ff 	mov.w	r3, #4294967295
 8002796:	e00e      	b.n	80027b6 <nextion_send_str_to_id+0x5e>
	}
	if(HAL_UART_Transmit(dp->uart, nxEnd, 3, 1000) != HAL_OK) {
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6858      	ldr	r0, [r3, #4]
 800279c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027a0:	2203      	movs	r2, #3
 80027a2:	4908      	ldr	r1, [pc, #32]	; (80027c4 <nextion_send_str_to_id+0x6c>)
 80027a4:	f005 f800 	bl	80077a8 <HAL_UART_Transmit>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <nextion_send_str_to_id+0x5c>
		return NX_ERROR;
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295
 80027b2:	e000      	b.n	80027b6 <nextion_send_str_to_id+0x5e>
	}
	return NX_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	0800c888 	.word	0x0800c888
 80027c4:	0800ca5c 	.word	0x0800ca5c

080027c8 <nextion_send_val_to_id>:

int nextion_send_val_to_id(nextion_t* dp, char* id, int val) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]

	int len = sprintf(dp->trm, "%s.val=%d",id,val);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f103 003a 	add.w	r0, r3, #58	; 0x3a
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	4914      	ldr	r1, [pc, #80]	; (8002830 <nextion_send_val_to_id+0x68>)
 80027e0:	f007 fc74 	bl	800a0cc <siprintf>
 80027e4:	6178      	str	r0, [r7, #20]

	if(HAL_UART_Transmit(dp->uart, (uint8_t*)dp->trm, len, 1000) != HAL_OK) {
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6858      	ldr	r0, [r3, #4]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f103 013a 	add.w	r1, r3, #58	; 0x3a
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027f8:	f004 ffd6 	bl	80077a8 <HAL_UART_Transmit>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <nextion_send_val_to_id+0x40>
		return NX_ERROR;
 8002802:	f04f 33ff 	mov.w	r3, #4294967295
 8002806:	e00e      	b.n	8002826 <nextion_send_val_to_id+0x5e>
	}
	if(HAL_UART_Transmit(dp->uart, nxEnd, 3, 1000) != HAL_OK) {
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6858      	ldr	r0, [r3, #4]
 800280c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002810:	2203      	movs	r2, #3
 8002812:	4908      	ldr	r1, [pc, #32]	; (8002834 <nextion_send_val_to_id+0x6c>)
 8002814:	f004 ffc8 	bl	80077a8 <HAL_UART_Transmit>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <nextion_send_val_to_id+0x5c>
		return NX_ERROR;
 800281e:	f04f 33ff 	mov.w	r3, #4294967295
 8002822:	e000      	b.n	8002826 <nextion_send_val_to_id+0x5e>
	}
	return NX_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	0800c894 	.word	0x0800c894
 8002834:	0800ca5c 	.word	0x0800ca5c

08002838 <nextion_send_float_to_id>:

int nextion_send_float_to_id(nextion_t* dp, char* id, float val) {
 8002838:	b590      	push	{r4, r7, lr}
 800283a:	b089      	sub	sp, #36	; 0x24
 800283c:	af02      	add	r7, sp, #8
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	ed87 0a01 	vstr	s0, [r7, #4]

	int len = sprintf(dp->trm, "%s.txt=\"%.2f\"",id,val);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f103 043a 	add.w	r4, r3, #58	; 0x3a
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7fd fe63 	bl	8000518 <__aeabi_f2d>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	e9cd 2300 	strd	r2, r3, [sp]
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	4914      	ldr	r1, [pc, #80]	; (80028b0 <nextion_send_float_to_id+0x78>)
 800285e:	4620      	mov	r0, r4
 8002860:	f007 fc34 	bl	800a0cc <siprintf>
 8002864:	6178      	str	r0, [r7, #20]

	if(HAL_UART_Transmit(dp->uart, (uint8_t*)dp->trm, len,1000) != HAL_OK) {
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6858      	ldr	r0, [r3, #4]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f103 013a 	add.w	r1, r3, #58	; 0x3a
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	b29a      	uxth	r2, r3
 8002874:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002878:	f004 ff96 	bl	80077a8 <HAL_UART_Transmit>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d002      	beq.n	8002888 <nextion_send_float_to_id+0x50>
		return NX_ERROR;
 8002882:	f04f 33ff 	mov.w	r3, #4294967295
 8002886:	e00e      	b.n	80028a6 <nextion_send_float_to_id+0x6e>
	}

	if(HAL_UART_Transmit(dp->uart, (uint8_t*)nxEnd, 3,1000) != HAL_OK) {
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6858      	ldr	r0, [r3, #4]
 800288c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002890:	2203      	movs	r2, #3
 8002892:	4908      	ldr	r1, [pc, #32]	; (80028b4 <nextion_send_float_to_id+0x7c>)
 8002894:	f004 ff88 	bl	80077a8 <HAL_UART_Transmit>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d002      	beq.n	80028a4 <nextion_send_float_to_id+0x6c>
		return NX_ERROR;
 800289e:	f04f 33ff 	mov.w	r3, #4294967295
 80028a2:	e000      	b.n	80028a6 <nextion_send_float_to_id+0x6e>
	}
	return NX_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	371c      	adds	r7, #28
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd90      	pop	{r4, r7, pc}
 80028ae:	bf00      	nop
 80028b0:	0800c8a0 	.word	0x0800c8a0
 80028b4:	0800ca5c 	.word	0x0800ca5c

080028b8 <write>:

int write(nextion_t* dp, char* msg) {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]

	int len = sprintf(dp->trm, "%s", msg);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	333a      	adds	r3, #58	; 0x3a
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	4914      	ldr	r1, [pc, #80]	; (800291c <write+0x64>)
 80028ca:	4618      	mov	r0, r3
 80028cc:	f007 fbfe 	bl	800a0cc <siprintf>
 80028d0:	60f8      	str	r0, [r7, #12]

	if(HAL_UART_Transmit(dp->uart, (uint8_t*)dp->trm, len, 1000) != HAL_OK) {
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6858      	ldr	r0, [r3, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f103 013a 	add.w	r1, r3, #58	; 0x3a
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	b29a      	uxth	r2, r3
 80028e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028e4:	f004 ff60 	bl	80077a8 <HAL_UART_Transmit>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d002      	beq.n	80028f4 <write+0x3c>
		return NX_ERROR;
 80028ee:	f04f 33ff 	mov.w	r3, #4294967295
 80028f2:	e00e      	b.n	8002912 <write+0x5a>
	}
	if(HAL_UART_Transmit(dp->uart, nxEnd, 3, 1000) != HAL_OK) {
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6858      	ldr	r0, [r3, #4]
 80028f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028fc:	2203      	movs	r2, #3
 80028fe:	4908      	ldr	r1, [pc, #32]	; (8002920 <write+0x68>)
 8002900:	f004 ff52 	bl	80077a8 <HAL_UART_Transmit>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <write+0x58>
		return NX_ERROR;
 800290a:	f04f 33ff 	mov.w	r3, #4294967295
 800290e:	e000      	b.n	8002912 <write+0x5a>
	}
	return NX_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	0800c8b0 	.word	0x0800c8b0
 8002920:	0800ca5c 	.word	0x0800ca5c

08002924 <nextion_decode_response>:

void nextion_decode_response(nextion_t* dp) {
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

	if(dp->rcv[0] == '$' && dp->rcv[3] == '&') {
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	7a1b      	ldrb	r3, [r3, #8]
 8002930:	2b24      	cmp	r3, #36	; 0x24
 8002932:	d10b      	bne.n	800294c <nextion_decode_response+0x28>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	7adb      	ldrb	r3, [r3, #11]
 8002938:	2b26      	cmp	r3, #38	; 0x26
 800293a:	d107      	bne.n	800294c <nextion_decode_response+0x28>

		dp->response.page = dp->rcv[1];
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	7a5a      	ldrb	r2, [r3, #9]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	701a      	strb	r2, [r3, #0]
		dp->response.id = dp->rcv[2];
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	7a9a      	ldrb	r2, [r3, #10]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	705a      	strb	r2, [r3, #1]
	}

}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <nextion_print_page>:

void nextion_print_page(nextion_t* dp) {
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
	dp->write_id_str(dp, "varProfile", "TS391LT50");
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	4a3c      	ldr	r2, [pc, #240]	; (8002a58 <nextion_print_page+0x100>)
 8002966:	493d      	ldr	r1, [pc, #244]	; (8002a5c <nextion_print_page+0x104>)
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	4798      	blx	r3
	dp->write_id_str(dp, "varState", "IDLE");
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002970:	4a3b      	ldr	r2, [pc, #236]	; (8002a60 <nextion_print_page+0x108>)
 8002972:	493c      	ldr	r1, [pc, #240]	; (8002a64 <nextion_print_page+0x10c>)
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	4798      	blx	r3
	dp->write_id_str(dp, "prepStart", "0");
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297c:	4a3a      	ldr	r2, [pc, #232]	; (8002a68 <nextion_print_page+0x110>)
 800297e:	493b      	ldr	r1, [pc, #236]	; (8002a6c <nextion_print_page+0x114>)
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	4798      	blx	r3
	dp->write_id_str(dp, "prepEnd", "-");
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002988:	4a39      	ldr	r2, [pc, #228]	; (8002a70 <nextion_print_page+0x118>)
 800298a:	493a      	ldr	r1, [pc, #232]	; (8002a74 <nextion_print_page+0x11c>)
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	4798      	blx	r3
	dp->write_id_str(dp, "prepTemp", "30");
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002994:	4a38      	ldr	r2, [pc, #224]	; (8002a78 <nextion_print_page+0x120>)
 8002996:	4939      	ldr	r1, [pc, #228]	; (8002a7c <nextion_print_page+0x124>)
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	4798      	blx	r3
	dp->write_id_str(dp, "heatStart", "-");
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a0:	4a33      	ldr	r2, [pc, #204]	; (8002a70 <nextion_print_page+0x118>)
 80029a2:	4937      	ldr	r1, [pc, #220]	; (8002a80 <nextion_print_page+0x128>)
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	4798      	blx	r3
	dp->write_id_str(dp, "heatEnd", "90");
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ac:	4a35      	ldr	r2, [pc, #212]	; (8002a84 <nextion_print_page+0x12c>)
 80029ae:	4936      	ldr	r1, [pc, #216]	; (8002a88 <nextion_print_page+0x130>)
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	4798      	blx	r3
	dp->write_id_str(dp, "heatTemp", "90");
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b8:	4a32      	ldr	r2, [pc, #200]	; (8002a84 <nextion_print_page+0x12c>)
 80029ba:	4934      	ldr	r1, [pc, #208]	; (8002a8c <nextion_print_page+0x134>)
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	4798      	blx	r3
	dp->write_id_str(dp, "soakStart", "90");
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	4a2f      	ldr	r2, [pc, #188]	; (8002a84 <nextion_print_page+0x12c>)
 80029c6:	4932      	ldr	r1, [pc, #200]	; (8002a90 <nextion_print_page+0x138>)
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	4798      	blx	r3
	dp->write_id_str(dp, "soakEnd", "180");
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d0:	4a30      	ldr	r2, [pc, #192]	; (8002a94 <nextion_print_page+0x13c>)
 80029d2:	4931      	ldr	r1, [pc, #196]	; (8002a98 <nextion_print_page+0x140>)
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4798      	blx	r3
	dp->write_id_str(dp, "soakTemp", "130");
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029dc:	4a2f      	ldr	r2, [pc, #188]	; (8002a9c <nextion_print_page+0x144>)
 80029de:	4930      	ldr	r1, [pc, #192]	; (8002aa0 <nextion_print_page+0x148>)
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	4798      	blx	r3
	dp->write_id_str(dp, "rampStart", "180");
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e8:	4a2a      	ldr	r2, [pc, #168]	; (8002a94 <nextion_print_page+0x13c>)
 80029ea:	492e      	ldr	r1, [pc, #184]	; (8002aa4 <nextion_print_page+0x14c>)
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	4798      	blx	r3
	dp->write_id_str(dp, "rampEnd", "210");
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f4:	4a2c      	ldr	r2, [pc, #176]	; (8002aa8 <nextion_print_page+0x150>)
 80029f6:	492d      	ldr	r1, [pc, #180]	; (8002aac <nextion_print_page+0x154>)
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	4798      	blx	r3
	dp->write_id_str(dp, "rampTemp", "138");
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a00:	4a2b      	ldr	r2, [pc, #172]	; (8002ab0 <nextion_print_page+0x158>)
 8002a02:	492c      	ldr	r1, [pc, #176]	; (8002ab4 <nextion_print_page+0x15c>)
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	4798      	blx	r3
	dp->write_id_str(dp, "reflowStart", "210");
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0c:	4a26      	ldr	r2, [pc, #152]	; (8002aa8 <nextion_print_page+0x150>)
 8002a0e:	492a      	ldr	r1, [pc, #168]	; (8002ab8 <nextion_print_page+0x160>)
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	4798      	blx	r3
	dp->write_id_str(dp, "reflowEnd", "240");
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a18:	4a28      	ldr	r2, [pc, #160]	; (8002abc <nextion_print_page+0x164>)
 8002a1a:	4929      	ldr	r1, [pc, #164]	; (8002ac0 <nextion_print_page+0x168>)
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	4798      	blx	r3
	dp->write_id_str(dp, "reflowTemp", "165");
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a24:	4a27      	ldr	r2, [pc, #156]	; (8002ac4 <nextion_print_page+0x16c>)
 8002a26:	4928      	ldr	r1, [pc, #160]	; (8002ac8 <nextion_print_page+0x170>)
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	4798      	blx	r3
	dp->write_id_str(dp, "coolStart", "240");
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a30:	4a22      	ldr	r2, [pc, #136]	; (8002abc <nextion_print_page+0x164>)
 8002a32:	4926      	ldr	r1, [pc, #152]	; (8002acc <nextion_print_page+0x174>)
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	4798      	blx	r3
	dp->write_id_str(dp, "coolEnd", "270");
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3c:	4a24      	ldr	r2, [pc, #144]	; (8002ad0 <nextion_print_page+0x178>)
 8002a3e:	4925      	ldr	r1, [pc, #148]	; (8002ad4 <nextion_print_page+0x17c>)
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	4798      	blx	r3
	dp->write_id_str(dp, "coolTemp", "138");
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a48:	4a19      	ldr	r2, [pc, #100]	; (8002ab0 <nextion_print_page+0x158>)
 8002a4a:	4923      	ldr	r1, [pc, #140]	; (8002ad8 <nextion_print_page+0x180>)
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	4798      	blx	r3
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	0800c8b4 	.word	0x0800c8b4
 8002a5c:	0800c8c0 	.word	0x0800c8c0
 8002a60:	0800c8cc 	.word	0x0800c8cc
 8002a64:	0800c8d4 	.word	0x0800c8d4
 8002a68:	0800c8e0 	.word	0x0800c8e0
 8002a6c:	0800c8e4 	.word	0x0800c8e4
 8002a70:	0800c8f0 	.word	0x0800c8f0
 8002a74:	0800c8f4 	.word	0x0800c8f4
 8002a78:	0800c8fc 	.word	0x0800c8fc
 8002a7c:	0800c900 	.word	0x0800c900
 8002a80:	0800c90c 	.word	0x0800c90c
 8002a84:	0800c918 	.word	0x0800c918
 8002a88:	0800c91c 	.word	0x0800c91c
 8002a8c:	0800c924 	.word	0x0800c924
 8002a90:	0800c930 	.word	0x0800c930
 8002a94:	0800c93c 	.word	0x0800c93c
 8002a98:	0800c940 	.word	0x0800c940
 8002a9c:	0800c948 	.word	0x0800c948
 8002aa0:	0800c94c 	.word	0x0800c94c
 8002aa4:	0800c958 	.word	0x0800c958
 8002aa8:	0800c964 	.word	0x0800c964
 8002aac:	0800c968 	.word	0x0800c968
 8002ab0:	0800c970 	.word	0x0800c970
 8002ab4:	0800c974 	.word	0x0800c974
 8002ab8:	0800c980 	.word	0x0800c980
 8002abc:	0800c98c 	.word	0x0800c98c
 8002ac0:	0800c990 	.word	0x0800c990
 8002ac4:	0800c99c 	.word	0x0800c99c
 8002ac8:	0800c9a0 	.word	0x0800c9a0
 8002acc:	0800c9ac 	.word	0x0800c9ac
 8002ad0:	0800c9b8 	.word	0x0800c9b8
 8002ad4:	0800c9bc 	.word	0x0800c9bc
 8002ad8:	0800c9c4 	.word	0x0800c9c4

08002adc <nextion_init>:


int nextion_init(nextion_t* dp, UART_HandleTypeDef *uart) {
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
	dp->uart = uart;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	605a      	str	r2, [r3, #4]
	dp->write_id_str = &nextion_send_str_to_id;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a09      	ldr	r2, [pc, #36]	; (8002b14 <nextion_init+0x38>)
 8002af0:	671a      	str	r2, [r3, #112]	; 0x70
	dp->write_id_val = &nextion_send_val_to_id;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a08      	ldr	r2, [pc, #32]	; (8002b18 <nextion_init+0x3c>)
 8002af6:	675a      	str	r2, [r3, #116]	; 0x74
	dp->write_id_float = &nextion_send_float_to_id;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a08      	ldr	r2, [pc, #32]	; (8002b1c <nextion_init+0x40>)
 8002afc:	67da      	str	r2, [r3, #124]	; 0x7c
	dp->write = &write;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a07      	ldr	r2, [pc, #28]	; (8002b20 <nextion_init+0x44>)
 8002b02:	679a      	str	r2, [r3, #120]	; 0x78
	return NX_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	08002759 	.word	0x08002759
 8002b18:	080027c9 	.word	0x080027c9
 8002b1c:	08002839 	.word	0x08002839
 8002b20:	080028b9 	.word	0x080028b9

08002b24 <PIDController_Init>:
 */

#include "pid.h"

void PIDController_Init(PIDController *pid, const float kP, const float kI, const float kD, const float sampleTime, const float tau,
						const float limMin, const float limMax, const float limMinInt, const float limMaxInt) {
 8002b24:	b480      	push	{r7}
 8002b26:	b08b      	sub	sp, #44	; 0x2c
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6278      	str	r0, [r7, #36]	; 0x24
 8002b2c:	ed87 0a08 	vstr	s0, [r7, #32]
 8002b30:	edc7 0a07 	vstr	s1, [r7, #28]
 8002b34:	ed87 1a06 	vstr	s2, [r7, #24]
 8002b38:	edc7 1a05 	vstr	s3, [r7, #20]
 8002b3c:	ed87 2a04 	vstr	s4, [r7, #16]
 8002b40:	edc7 2a03 	vstr	s5, [r7, #12]
 8002b44:	ed87 3a02 	vstr	s6, [r7, #8]
 8002b48:	edc7 3a01 	vstr	s7, [r7, #4]
 8002b4c:	ed87 4a00 	vstr	s8, [r7]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError  = 0.0f;
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator  = 0.0f;
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	631a      	str	r2, [r3, #48]	; 0x30

	pid->out = 0.0f;
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	635a      	str	r2, [r3, #52]	; 0x34

	pid->Kp = kP;
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	6a3a      	ldr	r2, [r7, #32]
 8002b7c:	601a      	str	r2, [r3, #0]
	pid->Ki = kI;
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	605a      	str	r2, [r3, #4]
	pid->Kd = kD;
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	609a      	str	r2, [r3, #8]

	pid->T = sampleTime;
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	621a      	str	r2, [r3, #32]

	pid->tau = tau;
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	60da      	str	r2, [r3, #12]

	pid->limMin = limMin;
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
	pid->limMax = limMax;
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	615a      	str	r2, [r3, #20]

	pid->limMinInt = limMinInt;
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	619a      	str	r2, [r3, #24]
	pid->limMaxInt = limMaxInt;
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	61da      	str	r2, [r3, #28]

}
 8002bae:	bf00      	nop
 8002bb0:	372c      	adds	r7, #44	; 0x2c
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 8002bba:	b480      	push	{r7}
 8002bbc:	b087      	sub	sp, #28
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	ed87 0a02 	vstr	s0, [r7, #8]
 8002bc6:	edc7 0a01 	vstr	s1, [r7, #4]

	/*
	* Error signal
	*/
    float error = setpoint - measurement;
 8002bca:	ed97 7a02 	vldr	s14, [r7, #8]
 8002bce:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bd6:	edc7 7a05 	vstr	s15, [r7, #20]


	/*
	* Proportional
	*/
    float proportional = pid->Kp * error;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	edd3 7a00 	vldr	s15, [r3]
 8002be0:	ed97 7a05 	vldr	s14, [r7, #20]
 8002be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002be8:	edc7 7a04 	vstr	s15, [r7, #16]


	/*
	* Integral
	*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bf8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002bfc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c06:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 8002c10:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c14:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002c18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator > pid->limMaxInt) {
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3a:	dd04      	ble.n	8002c46 <PIDController_Update+0x8c>

        pid->integrator = pid->limMaxInt;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	69da      	ldr	r2, [r3, #28]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	625a      	str	r2, [r3, #36]	; 0x24
 8002c44:	e00e      	b.n	8002c64 <PIDController_Update+0xaa>

    } else if (pid->integrator < pid->limMinInt) {
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5a:	d503      	bpl.n	8002c64 <PIDController_Update+0xaa>

        pid->integrator = pid->limMinInt;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	699a      	ldr	r2, [r3, #24]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	625a      	str	r2, [r3, #36]	; 0x24

	/*
	* Derivative (band-limited differentiator)
	*/

    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement) + (2.0f * pid->tau - pid->T) * pid->differentiator) / (2.0f * pid->tau + pid->T);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c6a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002c74:	edd7 6a01 	vldr	s13, [r7, #4]
 8002c78:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c86:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c90:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002c9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca2:	eef1 6a67 	vneg.f32	s13, s15
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	edd3 7a03 	vldr	s15, [r3, #12]
 8002cac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	edd3 7a08 	vldr	s15, [r3, #32]
 8002cb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	/*
	* Compute output and apply limits
	*/
    //pid->differentiator = pid->Kd*(measurement - pid->prevMeasurement);

    pid->out = proportional + pid->integrator + pid->differentiator;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002cca:	edd7 7a04 	vldr	s15, [r7, #16]
 8002cce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (pid->out > pid->limMax) {
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	edd3 7a05 	vldr	s15, [r3, #20]
 8002cee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf6:	dd04      	ble.n	8002d02 <PIDController_Update+0x148>

        pid->out = pid->limMax;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	635a      	str	r2, [r3, #52]	; 0x34
 8002d00:	e00e      	b.n	8002d20 <PIDController_Update+0x166>

    } else if (pid->out < pid->limMin) {
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d16:	d503      	bpl.n	8002d20 <PIDController_Update+0x166>

        pid->out = pid->limMin;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	635a      	str	r2, [r3, #52]	; 0x34

    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	629a      	str	r2, [r3, #40]	; 0x28
    pid->prevMeasurement = measurement;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	631a      	str	r2, [r3, #48]	; 0x30

	/* Return controller output */
    return pid->out;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d30:	ee07 3a90 	vmov	s15, r3

}
 8002d34:	eeb0 0a67 	vmov.f32	s0, s15
 8002d38:	371c      	adds	r7, #28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <LL_AHB2_GRP1_EnableClock>:
{
 8002d42:	b480      	push	{r7}
 8002d44:	b085      	sub	sp, #20
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4013      	ands	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d66:	68fb      	ldr	r3, [r7, #12]
}
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4013      	ands	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d98:	68fb      	ldr	r3, [r7, #12]
}
 8002d9a:	bf00      	nop
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b085      	sub	sp, #20
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002db4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dca:	68fb      	ldr	r3, [r7, #12]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002de6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
}
 8002dfe:	bf00      	nop
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b09c      	sub	sp, #112	; 0x70
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e20:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	60da      	str	r2, [r3, #12]
 8002e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e30:	f107 030c 	add.w	r3, r7, #12
 8002e34:	2250      	movs	r2, #80	; 0x50
 8002e36:	2100      	movs	r1, #0
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f006 fcd5 	bl	80097e8 <memset>
  if(huart->Instance==LPUART1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a3e      	ldr	r2, [pc, #248]	; (8002f3c <HAL_UART_MspInit+0x124>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d12d      	bne.n	8002ea4 <HAL_UART_MspInit+0x8c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002e48:	2302      	movs	r3, #2
 8002e4a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e50:	f107 030c 	add.w	r3, r7, #12
 8002e54:	4618      	mov	r0, r3
 8002e56:	f002 fa76 	bl	8005346 <HAL_RCCEx_PeriphCLKConfig>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e60:	f7ff fc74 	bl	800274c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002e64:	2001      	movs	r0, #1
 8002e66:	f7ff ff9e 	bl	8002da6 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6a:	2001      	movs	r0, #1
 8002e6c:	f7ff ff69 	bl	8002d42 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e70:	230c      	movs	r3, #12
 8002e72:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e74:	2302      	movs	r3, #2
 8002e76:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002e80:	2308      	movs	r3, #8
 8002e82:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e84:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e88:	4619      	mov	r1, r3
 8002e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e8e:	f000 fd73 	bl	8003978 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002e92:	2200      	movs	r2, #0
 8002e94:	2100      	movs	r1, #0
 8002e96:	2025      	movs	r0, #37	; 0x25
 8002e98:	f000 fc7b 	bl	8003792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002e9c:	2025      	movs	r0, #37	; 0x25
 8002e9e:	f000 fc92 	bl	80037c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ea2:	e046      	b.n	8002f32 <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a25      	ldr	r2, [pc, #148]	; (8002f40 <HAL_UART_MspInit+0x128>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d141      	bne.n	8002f32 <HAL_UART_MspInit+0x11a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eb6:	f107 030c 	add.w	r3, r7, #12
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f002 fa43 	bl	8005346 <HAL_RCCEx_PeriphCLKConfig>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_UART_MspInit+0xb2>
      Error_Handler();
 8002ec6:	f7ff fc41 	bl	800274c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002eca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ece:	f7ff ff83 	bl	8002dd8 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed2:	2001      	movs	r0, #1
 8002ed4:	f7ff ff35 	bl	8002d42 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed8:	2002      	movs	r0, #2
 8002eda:	f7ff ff32 	bl	8002d42 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eec:	2300      	movs	r3, #0
 8002eee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ef0:	2307      	movs	r3, #7
 8002ef2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ef8:	4619      	mov	r1, r3
 8002efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002efe:	f000 fd3b 	bl	8003978 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f02:	2340      	movs	r3, #64	; 0x40
 8002f04:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	2302      	movs	r3, #2
 8002f08:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f12:	2307      	movs	r3, #7
 8002f14:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f16:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4809      	ldr	r0, [pc, #36]	; (8002f44 <HAL_UART_MspInit+0x12c>)
 8002f1e:	f000 fd2b 	bl	8003978 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f22:	2200      	movs	r2, #0
 8002f24:	2100      	movs	r1, #0
 8002f26:	2024      	movs	r0, #36	; 0x24
 8002f28:	f000 fc33 	bl	8003792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f2c:	2024      	movs	r0, #36	; 0x24
 8002f2e:	f000 fc4a 	bl	80037c6 <HAL_NVIC_EnableIRQ>
}
 8002f32:	bf00      	nop
 8002f34:	3770      	adds	r7, #112	; 0x70
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40008000 	.word	0x40008000
 8002f40:	40013800 	.word	0x40013800
 8002f44:	48000400 	.word	0x48000400

08002f48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f50:	f107 030c 	add.w	r3, r7, #12
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a13      	ldr	r2, [pc, #76]	; (8002fb4 <HAL_SPI_MspInit+0x6c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d11f      	bne.n	8002faa <HAL_SPI_MspInit+0x62>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f6a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002f6e:	f7ff ff33 	bl	8002dd8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f72:	2001      	movs	r0, #1
 8002f74:	f7ff fee5 	bl	8002d42 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8002f78:	2342      	movs	r3, #66	; 0x42
 8002f7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f84:	2300      	movs	r3, #0
 8002f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f88:	2305      	movs	r3, #5
 8002f8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f8c:	f107 030c 	add.w	r3, r7, #12
 8002f90:	4619      	mov	r1, r3
 8002f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f96:	f000 fcef 	bl	8003978 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	2022      	movs	r0, #34	; 0x22
 8002fa0:	f000 fbf7 	bl	8003792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002fa4:	2022      	movs	r0, #34	; 0x22
 8002fa6:	f000 fc0e 	bl	80037c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002faa:	bf00      	nop
 8002fac:	3720      	adds	r7, #32
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40013000 	.word	0x40013000

08002fb8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a15      	ldr	r2, [pc, #84]	; (800301c <HAL_TIM_PWM_MspInit+0x64>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d114      	bne.n	8002ff4 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fca:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002fce:	f7ff ff03 	bl	8002dd8 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	2019      	movs	r0, #25
 8002fd8:	f000 fbdb 	bl	8003792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002fdc:	2019      	movs	r0, #25
 8002fde:	f000 fbf2 	bl	80037c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	201a      	movs	r0, #26
 8002fe8:	f000 fbd3 	bl	8003792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002fec:	201a      	movs	r0, #26
 8002fee:	f000 fbea 	bl	80037c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002ff2:	e00f      	b.n	8003014 <HAL_TIM_PWM_MspInit+0x5c>
  else if(htim_pwm->Instance==TIM2)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ffc:	d10a      	bne.n	8003014 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ffe:	2001      	movs	r0, #1
 8003000:	f7ff feb8 	bl	8002d74 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003004:	2200      	movs	r2, #0
 8003006:	2100      	movs	r1, #0
 8003008:	201c      	movs	r0, #28
 800300a:	f000 fbc2 	bl	8003792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800300e:	201c      	movs	r0, #28
 8003010:	f000 fbd9 	bl	80037c6 <HAL_NVIC_EnableIRQ>
}
 8003014:	bf00      	nop
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40012c00 	.word	0x40012c00

08003020 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a12      	ldr	r2, [pc, #72]	; (8003078 <HAL_TIM_Base_MspInit+0x58>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d10c      	bne.n	800304c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003032:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003036:	f7ff fecf 	bl	8002dd8 <LL_APB2_GRP1_EnableClock>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800303a:	2200      	movs	r2, #0
 800303c:	2100      	movs	r1, #0
 800303e:	2019      	movs	r0, #25
 8003040:	f000 fba7 	bl	8003792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003044:	2019      	movs	r0, #25
 8003046:	f000 fbbe 	bl	80037c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800304a:	e010      	b.n	800306e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a0a      	ldr	r2, [pc, #40]	; (800307c <HAL_TIM_Base_MspInit+0x5c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d10b      	bne.n	800306e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003056:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800305a:	f7ff febd 	bl	8002dd8 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800305e:	2200      	movs	r2, #0
 8003060:	2100      	movs	r1, #0
 8003062:	201a      	movs	r0, #26
 8003064:	f000 fb95 	bl	8003792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003068:	201a      	movs	r0, #26
 800306a:	f000 fbac 	bl	80037c6 <HAL_NVIC_EnableIRQ>
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40014400 	.word	0x40014400
 800307c:	40014800 	.word	0x40014800

08003080 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b088      	sub	sp, #32
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003088:	f107 030c 	add.w	r3, r7, #12
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	605a      	str	r2, [r3, #4]
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	60da      	str	r2, [r3, #12]
 8003096:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a1a      	ldr	r2, [pc, #104]	; (8003108 <HAL_TIM_MspPostInit+0x88>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d115      	bne.n	80030ce <HAL_TIM_MspPostInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a2:	2001      	movs	r0, #1
 80030a4:	f7ff fe4d 	bl	8002d42 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ae:	2302      	movs	r3, #2
 80030b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80030ba:	2301      	movs	r3, #1
 80030bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030be:	f107 030c 	add.w	r3, r7, #12
 80030c2:	4619      	mov	r1, r3
 80030c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030c8:	f000 fc56 	bl	8003978 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80030cc:	e018      	b.n	8003100 <HAL_TIM_MspPostInit+0x80>
  else if(htim->Instance==TIM2)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d6:	d113      	bne.n	8003100 <HAL_TIM_MspPostInit+0x80>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d8:	2001      	movs	r0, #1
 80030da:	f7ff fe32 	bl	8002d42 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = Buzzer_Pin;
 80030de:	2320      	movs	r3, #32
 80030e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e2:	2302      	movs	r3, #2
 80030e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030ee:	2301      	movs	r3, #1
 80030f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80030f2:	f107 030c 	add.w	r3, r7, #12
 80030f6:	4619      	mov	r1, r3
 80030f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030fc:	f000 fc3c 	bl	8003978 <HAL_GPIO_Init>
}
 8003100:	bf00      	nop
 8003102:	3720      	adds	r7, #32
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40012c00 	.word	0x40012c00

0800310c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003110:	e7fe      	b.n	8003110 <NMI_Handler+0x4>

08003112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003116:	e7fe      	b.n	8003116 <HardFault_Handler+0x4>

08003118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800311c:	e7fe      	b.n	800311c <MemManage_Handler+0x4>

0800311e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800311e:	b480      	push	{r7}
 8003120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003122:	e7fe      	b.n	8003122 <BusFault_Handler+0x4>

08003124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003128:	e7fe      	b.n	8003128 <UsageFault_Handler+0x4>

0800312a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800312a:	b480      	push	{r7}
 800312c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800313c:	bf00      	nop
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003146:	b480      	push	{r7}
 8003148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800314a:	bf00      	nop
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003158:	f000 f9f0 	bl	800353c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800315c:	bf00      	nop
 800315e:	bd80      	pop	{r7, pc}

08003160 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003164:	4803      	ldr	r0, [pc, #12]	; (8003174 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003166:	f003 fc3d 	bl	80069e4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800316a:	4803      	ldr	r0, [pc, #12]	; (8003178 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800316c:	f003 fc3a 	bl	80069e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003170:	bf00      	nop
 8003172:	bd80      	pop	{r7, pc}
 8003174:	200003b4 	.word	0x200003b4
 8003178:	2000044c 	.word	0x2000044c

0800317c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003180:	4803      	ldr	r0, [pc, #12]	; (8003190 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8003182:	f003 fc2f 	bl	80069e4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8003186:	4803      	ldr	r0, [pc, #12]	; (8003194 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8003188:	f003 fc2c 	bl	80069e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800318c:	bf00      	nop
 800318e:	bd80      	pop	{r7, pc}
 8003190:	200003b4 	.word	0x200003b4
 8003194:	20000498 	.word	0x20000498

08003198 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800319c:	4802      	ldr	r0, [pc, #8]	; (80031a8 <TIM2_IRQHandler+0x10>)
 800319e:	f003 fc21 	bl	80069e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000400 	.word	0x20000400

080031ac <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80031b0:	4802      	ldr	r0, [pc, #8]	; (80031bc <SPI1_IRQHandler+0x10>)
 80031b2:	f002 ff35 	bl	8006020 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000350 	.word	0x20000350

080031c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031c4:	4802      	ldr	r0, [pc, #8]	; (80031d0 <USART1_IRQHandler+0x10>)
 80031c6:	f004 fcaf 	bl	8007b28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	200002c0 	.word	0x200002c0

080031d4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80031d8:	4802      	ldr	r0, [pc, #8]	; (80031e4 <LPUART1_IRQHandler+0x10>)
 80031da:	f004 fca5 	bl	8007b28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20000230 	.word	0x20000230

080031e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
	return 1;
 80031ec:	2301      	movs	r3, #1
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <_kill>:

int _kill(int pid, int sig)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003202:	f006 fac7 	bl	8009794 <__errno>
 8003206:	4603      	mov	r3, r0
 8003208:	2216      	movs	r2, #22
 800320a:	601a      	str	r2, [r3, #0]
	return -1;
 800320c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <_exit>:

void _exit (int status)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003220:	f04f 31ff 	mov.w	r1, #4294967295
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff ffe7 	bl	80031f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800322a:	e7fe      	b.n	800322a <_exit+0x12>

0800322c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	e00a      	b.n	8003254 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800323e:	f3af 8000 	nop.w
 8003242:	4601      	mov	r1, r0
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	60ba      	str	r2, [r7, #8]
 800324a:	b2ca      	uxtb	r2, r1
 800324c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	3301      	adds	r3, #1
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	429a      	cmp	r2, r3
 800325a:	dbf0      	blt.n	800323e <_read+0x12>
	}

return len;
 800325c:	687b      	ldr	r3, [r7, #4]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b086      	sub	sp, #24
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	e009      	b.n	800328c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	60ba      	str	r2, [r7, #8]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	3301      	adds	r3, #1
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	429a      	cmp	r2, r3
 8003292:	dbf1      	blt.n	8003278 <_write+0x12>
	}
	return len;
 8003294:	687b      	ldr	r3, [r7, #4]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <_close>:

int _close(int file)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
	return -1;
 80032a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032c6:	605a      	str	r2, [r3, #4]
	return 0;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <_isatty>:

int _isatty(int file)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
	return 1;
 80032de:	2301      	movs	r3, #1
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
	return 0;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003310:	4a14      	ldr	r2, [pc, #80]	; (8003364 <_sbrk+0x5c>)
 8003312:	4b15      	ldr	r3, [pc, #84]	; (8003368 <_sbrk+0x60>)
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800331c:	4b13      	ldr	r3, [pc, #76]	; (800336c <_sbrk+0x64>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d102      	bne.n	800332a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003324:	4b11      	ldr	r3, [pc, #68]	; (800336c <_sbrk+0x64>)
 8003326:	4a12      	ldr	r2, [pc, #72]	; (8003370 <_sbrk+0x68>)
 8003328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800332a:	4b10      	ldr	r3, [pc, #64]	; (800336c <_sbrk+0x64>)
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	429a      	cmp	r2, r3
 8003336:	d207      	bcs.n	8003348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003338:	f006 fa2c 	bl	8009794 <__errno>
 800333c:	4603      	mov	r3, r0
 800333e:	220c      	movs	r2, #12
 8003340:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003342:	f04f 33ff 	mov.w	r3, #4294967295
 8003346:	e009      	b.n	800335c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003348:	4b08      	ldr	r3, [pc, #32]	; (800336c <_sbrk+0x64>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800334e:	4b07      	ldr	r3, [pc, #28]	; (800336c <_sbrk+0x64>)
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4413      	add	r3, r2
 8003356:	4a05      	ldr	r2, [pc, #20]	; (800336c <_sbrk+0x64>)
 8003358:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800335a:	68fb      	ldr	r3, [r7, #12]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	20030000 	.word	0x20030000
 8003368:	00000400 	.word	0x00000400
 800336c:	20000680 	.word	0x20000680
 8003370:	20000698 	.word	0x20000698

08003374 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003378:	4b24      	ldr	r3, [pc, #144]	; (800340c <SystemInit+0x98>)
 800337a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337e:	4a23      	ldr	r2, [pc, #140]	; (800340c <SystemInit+0x98>)
 8003380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003384:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80033a0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80033a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ac:	4b18      	ldr	r3, [pc, #96]	; (8003410 <SystemInit+0x9c>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80033b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033be:	f023 0305 	bic.w	r3, r3, #5
 80033c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80033c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033d2:	f023 0301 	bic.w	r3, r3, #1
 80033d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80033da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033de:	4a0d      	ldr	r2, [pc, #52]	; (8003414 <SystemInit+0xa0>)
 80033e0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80033e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e6:	4a0b      	ldr	r2, [pc, #44]	; (8003414 <SystemInit+0xa0>)
 80033e8:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80033ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80033fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033fe:	2200      	movs	r2, #0
 8003400:	619a      	str	r2, [r3, #24]
}
 8003402:	bf00      	nop
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	e000ed00 	.word	0xe000ed00
 8003410:	faf6fefb 	.word	0xfaf6fefb
 8003414:	22041000 	.word	0x22041000

08003418 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003418:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800341a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800341c:	3304      	adds	r3, #4

0800341e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800341e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003420:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003422:	d3f9      	bcc.n	8003418 <CopyDataInit>
  bx lr
 8003424:	4770      	bx	lr

08003426 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003426:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003428:	3004      	adds	r0, #4

0800342a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800342a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800342c:	d3fb      	bcc.n	8003426 <FillZerobss>
  bx lr
 800342e:	4770      	bx	lr

08003430 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003430:	480c      	ldr	r0, [pc, #48]	; (8003464 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8003432:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003434:	f7ff ff9e 	bl	8003374 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003438:	480b      	ldr	r0, [pc, #44]	; (8003468 <LoopForever+0x8>)
 800343a:	490c      	ldr	r1, [pc, #48]	; (800346c <LoopForever+0xc>)
 800343c:	4a0c      	ldr	r2, [pc, #48]	; (8003470 <LoopForever+0x10>)
 800343e:	2300      	movs	r3, #0
 8003440:	f7ff ffed 	bl	800341e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003444:	480b      	ldr	r0, [pc, #44]	; (8003474 <LoopForever+0x14>)
 8003446:	490c      	ldr	r1, [pc, #48]	; (8003478 <LoopForever+0x18>)
 8003448:	2300      	movs	r3, #0
 800344a:	f7ff ffee 	bl	800342a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800344e:	480b      	ldr	r0, [pc, #44]	; (800347c <LoopForever+0x1c>)
 8003450:	490b      	ldr	r1, [pc, #44]	; (8003480 <LoopForever+0x20>)
 8003452:	2300      	movs	r3, #0
 8003454:	f7ff ffe9 	bl	800342a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003458:	f006 f9a2 	bl	80097a0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800345c:	f7fd fe4c 	bl	80010f8 <main>

08003460 <LoopForever>:

LoopForever:
  b LoopForever
 8003460:	e7fe      	b.n	8003460 <LoopForever>
 8003462:	0000      	.short	0x0000
  ldr   r0, =_estack
 8003464:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003468:	20000004 	.word	0x20000004
 800346c:	20000214 	.word	0x20000214
 8003470:	0800cf14 	.word	0x0800cf14
  INIT_BSS _sbss, _ebss
 8003474:	20000214 	.word	0x20000214
 8003478:	20000698 	.word	0x20000698
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800347c:	20030000 	.word	0x20030000
 8003480:	20030000 	.word	0x20030000

08003484 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003484:	e7fe      	b.n	8003484 <ADC1_IRQHandler>
	...

08003488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003492:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <HAL_Init+0x3c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a0b      	ldr	r2, [pc, #44]	; (80034c4 <HAL_Init+0x3c>)
 8003498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800349c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800349e:	2003      	movs	r0, #3
 80034a0:	f000 f96c 	bl	800377c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034a4:	200f      	movs	r0, #15
 80034a6:	f000 f80f 	bl	80034c8 <HAL_InitTick>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	71fb      	strb	r3, [r7, #7]
 80034b4:	e001      	b.n	80034ba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80034b6:	f7ff fca8 	bl	8002e0a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80034ba:	79fb      	ldrb	r3, [r7, #7]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	58004000 	.word	0x58004000

080034c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80034d0:	2300      	movs	r3, #0
 80034d2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80034d4:	4b17      	ldr	r3, [pc, #92]	; (8003534 <HAL_InitTick+0x6c>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d024      	beq.n	8003526 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80034dc:	f001 fca2 	bl	8004e24 <HAL_RCC_GetHCLKFreq>
 80034e0:	4602      	mov	r2, r0
 80034e2:	4b14      	ldr	r3, [pc, #80]	; (8003534 <HAL_InitTick+0x6c>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	4619      	mov	r1, r3
 80034e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80034f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 f974 	bl	80037e2 <HAL_SYSTICK_Config>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10f      	bne.n	8003520 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b0f      	cmp	r3, #15
 8003504:	d809      	bhi.n	800351a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003506:	2200      	movs	r2, #0
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	f04f 30ff 	mov.w	r0, #4294967295
 800350e:	f000 f940 	bl	8003792 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003512:	4a09      	ldr	r2, [pc, #36]	; (8003538 <HAL_InitTick+0x70>)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	e007      	b.n	800352a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	73fb      	strb	r3, [r7, #15]
 800351e:	e004      	b.n	800352a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	73fb      	strb	r3, [r7, #15]
 8003524:	e001      	b.n	800352a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800352a:	7bfb      	ldrb	r3, [r7, #15]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	20000040 	.word	0x20000040
 8003538:	2000003c 	.word	0x2000003c

0800353c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003540:	4b06      	ldr	r3, [pc, #24]	; (800355c <HAL_IncTick+0x20>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	461a      	mov	r2, r3
 8003546:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_IncTick+0x24>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4413      	add	r3, r2
 800354c:	4a04      	ldr	r2, [pc, #16]	; (8003560 <HAL_IncTick+0x24>)
 800354e:	6013      	str	r3, [r2, #0]
}
 8003550:	bf00      	nop
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	20000040 	.word	0x20000040
 8003560:	20000684 	.word	0x20000684

08003564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  return uwTick;
 8003568:	4b03      	ldr	r3, [pc, #12]	; (8003578 <HAL_GetTick+0x14>)
 800356a:	681b      	ldr	r3, [r3, #0]
}
 800356c:	4618      	mov	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	20000684 	.word	0x20000684

0800357c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003580:	4b03      	ldr	r3, [pc, #12]	; (8003590 <HAL_GetTickPrio+0x14>)
 8003582:	681b      	ldr	r3, [r3, #0]
}
 8003584:	4618      	mov	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	2000003c 	.word	0x2000003c

08003594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 800359c:	f7ff ffe2 	bl	8003564 <HAL_GetTick>
 80035a0:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ac:	d005      	beq.n	80035ba <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 80035ae:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <HAL_Delay+0x44>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4413      	add	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80035ba:	bf00      	nop
 80035bc:	f7ff ffd2 	bl	8003564 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d8f7      	bhi.n	80035bc <HAL_Delay+0x28>
    {
    }
  }
 80035cc:	bf00      	nop
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	20000040 	.word	0x20000040

080035dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035ec:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <__NVIC_SetPriorityGrouping+0x44>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035f8:	4013      	ands	r3, r2
 80035fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800360c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800360e:	4a04      	ldr	r2, [pc, #16]	; (8003620 <__NVIC_SetPriorityGrouping+0x44>)
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	60d3      	str	r3, [r2, #12]
}
 8003614:	bf00      	nop
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	e000ed00 	.word	0xe000ed00

08003624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003628:	4b04      	ldr	r3, [pc, #16]	; (800363c <__NVIC_GetPriorityGrouping+0x18>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	0a1b      	lsrs	r3, r3, #8
 800362e:	f003 0307 	and.w	r3, r3, #7
}
 8003632:	4618      	mov	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	e000ed00 	.word	0xe000ed00

08003640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800364a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364e:	2b00      	cmp	r3, #0
 8003650:	db0b      	blt.n	800366a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	f003 021f 	and.w	r2, r3, #31
 8003658:	4907      	ldr	r1, [pc, #28]	; (8003678 <__NVIC_EnableIRQ+0x38>)
 800365a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	2001      	movs	r0, #1
 8003662:	fa00 f202 	lsl.w	r2, r0, r2
 8003666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	e000e100 	.word	0xe000e100

0800367c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	6039      	str	r1, [r7, #0]
 8003686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368c:	2b00      	cmp	r3, #0
 800368e:	db0a      	blt.n	80036a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	b2da      	uxtb	r2, r3
 8003694:	490c      	ldr	r1, [pc, #48]	; (80036c8 <__NVIC_SetPriority+0x4c>)
 8003696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369a:	0112      	lsls	r2, r2, #4
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	440b      	add	r3, r1
 80036a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036a4:	e00a      	b.n	80036bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	4908      	ldr	r1, [pc, #32]	; (80036cc <__NVIC_SetPriority+0x50>)
 80036ac:	79fb      	ldrb	r3, [r7, #7]
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	3b04      	subs	r3, #4
 80036b4:	0112      	lsls	r2, r2, #4
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	440b      	add	r3, r1
 80036ba:	761a      	strb	r2, [r3, #24]
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	e000e100 	.word	0xe000e100
 80036cc:	e000ed00 	.word	0xe000ed00

080036d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b089      	sub	sp, #36	; 0x24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	f1c3 0307 	rsb	r3, r3, #7
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	bf28      	it	cs
 80036ee:	2304      	movcs	r3, #4
 80036f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	3304      	adds	r3, #4
 80036f6:	2b06      	cmp	r3, #6
 80036f8:	d902      	bls.n	8003700 <NVIC_EncodePriority+0x30>
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	3b03      	subs	r3, #3
 80036fe:	e000      	b.n	8003702 <NVIC_EncodePriority+0x32>
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003704:	f04f 32ff 	mov.w	r2, #4294967295
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	43da      	mvns	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	401a      	ands	r2, r3
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003718:	f04f 31ff 	mov.w	r1, #4294967295
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	fa01 f303 	lsl.w	r3, r1, r3
 8003722:	43d9      	mvns	r1, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003728:	4313      	orrs	r3, r2
         );
}
 800372a:	4618      	mov	r0, r3
 800372c:	3724      	adds	r7, #36	; 0x24
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
	...

08003738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3b01      	subs	r3, #1
 8003744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003748:	d301      	bcc.n	800374e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800374a:	2301      	movs	r3, #1
 800374c:	e00f      	b.n	800376e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800374e:	4a0a      	ldr	r2, [pc, #40]	; (8003778 <SysTick_Config+0x40>)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3b01      	subs	r3, #1
 8003754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003756:	210f      	movs	r1, #15
 8003758:	f04f 30ff 	mov.w	r0, #4294967295
 800375c:	f7ff ff8e 	bl	800367c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <SysTick_Config+0x40>)
 8003762:	2200      	movs	r2, #0
 8003764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003766:	4b04      	ldr	r3, [pc, #16]	; (8003778 <SysTick_Config+0x40>)
 8003768:	2207      	movs	r2, #7
 800376a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	e000e010 	.word	0xe000e010

0800377c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff ff29 	bl	80035dc <__NVIC_SetPriorityGrouping>
}
 800378a:	bf00      	nop
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b086      	sub	sp, #24
 8003796:	af00      	add	r7, sp, #0
 8003798:	4603      	mov	r3, r0
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	607a      	str	r2, [r7, #4]
 800379e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037a0:	f7ff ff40 	bl	8003624 <__NVIC_GetPriorityGrouping>
 80037a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	68b9      	ldr	r1, [r7, #8]
 80037aa:	6978      	ldr	r0, [r7, #20]
 80037ac:	f7ff ff90 	bl	80036d0 <NVIC_EncodePriority>
 80037b0:	4602      	mov	r2, r0
 80037b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037b6:	4611      	mov	r1, r2
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff ff5f 	bl	800367c <__NVIC_SetPriority>
}
 80037be:	bf00      	nop
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	4603      	mov	r3, r0
 80037ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff ff33 	bl	8003640 <__NVIC_EnableIRQ>
}
 80037da:	bf00      	nop
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b082      	sub	sp, #8
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff ffa4 	bl	8003738 <SysTick_Config>
 80037f0:	4603      	mov	r3, r0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e04f      	b.n	80038ac <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d008      	beq.n	800382a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2204      	movs	r2, #4
 800381c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e040      	b.n	80038ac <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 020e 	bic.w	r2, r2, #14
 8003838:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003844:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003848:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0201 	bic.w	r2, r2, #1
 8003858:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385e:	f003 021c 	and.w	r2, r3, #28
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	2101      	movs	r1, #1
 8003868:	fa01 f202 	lsl.w	r2, r1, r2
 800386c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003876:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00c      	beq.n	800389a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800388e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003898:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d005      	beq.n	80038dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2204      	movs	r2, #4
 80038d4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	73fb      	strb	r3, [r7, #15]
 80038da:	e047      	b.n	800396c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 020e 	bic.w	r2, r2, #14
 80038ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0201 	bic.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003906:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800390a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003910:	f003 021c 	and.w	r2, r3, #28
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	2101      	movs	r1, #1
 800391a:	fa01 f202 	lsl.w	r2, r1, r2
 800391e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003928:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00c      	beq.n	800394c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003940:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800394a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	4798      	blx	r3
    }
  }
  return status;
 800396c:	7bfb      	ldrb	r3, [r7, #15]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003986:	e14c      	b.n	8003c22 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	2101      	movs	r1, #1
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	fa01 f303 	lsl.w	r3, r1, r3
 8003994:	4013      	ands	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 813e 	beq.w	8003c1c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d005      	beq.n	80039b8 <HAL_GPIO_Init+0x40>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f003 0303 	and.w	r3, r3, #3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d130      	bne.n	8003a1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	2203      	movs	r2, #3
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	43db      	mvns	r3, r3
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4013      	ands	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039ee:	2201      	movs	r2, #1
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	43db      	mvns	r3, r3
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4013      	ands	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	091b      	lsrs	r3, r3, #4
 8003a04:	f003 0201 	and.w	r2, r3, #1
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d017      	beq.n	8003a56 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	2203      	movs	r2, #3
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43db      	mvns	r3, r3
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d123      	bne.n	8003aaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	08da      	lsrs	r2, r3, #3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3208      	adds	r2, #8
 8003a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	220f      	movs	r2, #15
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4013      	ands	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	08da      	lsrs	r2, r3, #3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3208      	adds	r2, #8
 8003aa4:	6939      	ldr	r1, [r7, #16]
 8003aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f003 0203 	and.w	r2, r3, #3
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 8098 	beq.w	8003c1c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003aec:	4a54      	ldr	r2, [pc, #336]	; (8003c40 <HAL_GPIO_Init+0x2c8>)
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	089b      	lsrs	r3, r3, #2
 8003af2:	3302      	adds	r3, #2
 8003af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003af8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f003 0303 	and.w	r3, r3, #3
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	220f      	movs	r2, #15
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b16:	d019      	beq.n	8003b4c <HAL_GPIO_Init+0x1d4>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a4a      	ldr	r2, [pc, #296]	; (8003c44 <HAL_GPIO_Init+0x2cc>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d013      	beq.n	8003b48 <HAL_GPIO_Init+0x1d0>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a49      	ldr	r2, [pc, #292]	; (8003c48 <HAL_GPIO_Init+0x2d0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d00d      	beq.n	8003b44 <HAL_GPIO_Init+0x1cc>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a48      	ldr	r2, [pc, #288]	; (8003c4c <HAL_GPIO_Init+0x2d4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d007      	beq.n	8003b40 <HAL_GPIO_Init+0x1c8>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a47      	ldr	r2, [pc, #284]	; (8003c50 <HAL_GPIO_Init+0x2d8>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d101      	bne.n	8003b3c <HAL_GPIO_Init+0x1c4>
 8003b38:	2304      	movs	r3, #4
 8003b3a:	e008      	b.n	8003b4e <HAL_GPIO_Init+0x1d6>
 8003b3c:	2307      	movs	r3, #7
 8003b3e:	e006      	b.n	8003b4e <HAL_GPIO_Init+0x1d6>
 8003b40:	2303      	movs	r3, #3
 8003b42:	e004      	b.n	8003b4e <HAL_GPIO_Init+0x1d6>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e002      	b.n	8003b4e <HAL_GPIO_Init+0x1d6>
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e000      	b.n	8003b4e <HAL_GPIO_Init+0x1d6>
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	f002 0203 	and.w	r2, r2, #3
 8003b54:	0092      	lsls	r2, r2, #2
 8003b56:	4093      	lsls	r3, r2
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b5e:	4938      	ldr	r1, [pc, #224]	; (8003c40 <HAL_GPIO_Init+0x2c8>)
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	089b      	lsrs	r3, r3, #2
 8003b64:	3302      	adds	r3, #2
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b6c:	4b39      	ldr	r3, [pc, #228]	; (8003c54 <HAL_GPIO_Init+0x2dc>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	43db      	mvns	r3, r3
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b90:	4a30      	ldr	r2, [pc, #192]	; (8003c54 <HAL_GPIO_Init+0x2dc>)
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b96:	4b2f      	ldr	r3, [pc, #188]	; (8003c54 <HAL_GPIO_Init+0x2dc>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bba:	4a26      	ldr	r2, [pc, #152]	; (8003c54 <HAL_GPIO_Init+0x2dc>)
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003bc0:	4b24      	ldr	r3, [pc, #144]	; (8003c54 <HAL_GPIO_Init+0x2dc>)
 8003bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003be6:	4a1b      	ldr	r2, [pc, #108]	; (8003c54 <HAL_GPIO_Init+0x2dc>)
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003bee:	4b19      	ldr	r3, [pc, #100]	; (8003c54 <HAL_GPIO_Init+0x2dc>)
 8003bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c14:	4a0f      	ldr	r2, [pc, #60]	; (8003c54 <HAL_GPIO_Init+0x2dc>)
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f47f aeab 	bne.w	8003988 <HAL_GPIO_Init+0x10>
  }
}
 8003c32:	bf00      	nop
 8003c34:	bf00      	nop
 8003c36:	371c      	adds	r7, #28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	40010000 	.word	0x40010000
 8003c44:	48000400 	.word	0x48000400
 8003c48:	48000800 	.word	0x48000800
 8003c4c:	48000c00 	.word	0x48000c00
 8003c50:	48001000 	.word	0x48001000
 8003c54:	58000800 	.word	0x58000800

08003c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	807b      	strh	r3, [r7, #2]
 8003c64:	4613      	mov	r3, r2
 8003c66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c68:	787b      	ldrb	r3, [r7, #1]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c6e:	887a      	ldrh	r2, [r7, #2]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c74:	e002      	b.n	8003c7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c76:	887a      	ldrh	r2, [r7, #2]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c8c:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a04      	ldr	r2, [pc, #16]	; (8003ca4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c96:	6013      	str	r3, [r2, #0]
}
 8003c98:	bf00      	nop
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	58000400 	.word	0x58000400

08003ca8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003cac:	4b04      	ldr	r3, [pc, #16]	; (8003cc0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	58000400 	.word	0x58000400

08003cc4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cd6:	d101      	bne.n	8003cdc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e000      	b.n	8003cde <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cfa:	6013      	str	r3, [r2, #0]
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8003d06:	b480      	push	{r7}
 8003d08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d18:	6013      	str	r3, [r2, #0]
}
 8003d1a:	bf00      	nop
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d36:	d101      	bne.n	8003d3c <LL_RCC_HSE_IsReady+0x18>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e000      	b.n	8003d3e <LL_RCC_HSE_IsReady+0x1a>
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5a:	6013      	str	r3, [r2, #0]
}
 8003d5c:	bf00      	nop
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003d66:	b480      	push	{r7}
 8003d68:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d78:	6013      	str	r3, [r2, #0]
}
 8003d7a:	bf00      	nop
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d96:	d101      	bne.n	8003d9c <LL_RCC_HSI_IsReady+0x18>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e000      	b.n	8003d9e <LL_RCC_HSI_IsReady+0x1a>
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	061b      	lsls	r3, r3, #24
 8003dbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	604b      	str	r3, [r1, #4]
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003dea:	bf00      	nop
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003e0c:	bf00      	nop
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8003e16:	b480      	push	{r7}
 8003e18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d101      	bne.n	8003e2e <LL_RCC_HSI48_IsReady+0x18>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e000      	b.n	8003e30 <LL_RCC_HSI48_IsReady+0x1a>
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e4a:	f043 0301 	orr.w	r3, r3, #1
 8003e4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e52:	bf00      	nop
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e6c:	f023 0301 	bic.w	r3, r3, #1
 8003e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e74:	bf00      	nop
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e8e:	f043 0304 	orr.w	r3, r3, #4
 8003e92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e96:	bf00      	nop
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eb0:	f023 0304 	bic.w	r3, r3, #4
 8003eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003eb8:	bf00      	nop
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d101      	bne.n	8003eda <LL_RCC_LSE_IsReady+0x18>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <LL_RCC_LSE_IsReady+0x1a>
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ef2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ef6:	f043 0301 	orr.w	r3, r3, #1
 8003efa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003efe:	bf00      	nop
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f18:	f023 0301 	bic.w	r3, r3, #1
 8003f1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003f20:	bf00      	nop
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d101      	bne.n	8003f42 <LL_RCC_LSI1_IsReady+0x18>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <LL_RCC_LSI1_IsReady+0x1a>
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f5e:	f043 0304 	orr.w	r3, r3, #4
 8003f62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003f66:	bf00      	nop
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f80:	f023 0304 	bic.w	r3, r3, #4
 8003f84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003f88:	bf00      	nop
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8003f92:	b480      	push	{r7}
 8003f94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d101      	bne.n	8003faa <LL_RCC_LSI2_IsReady+0x18>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e000      	b.n	8003fac <LL_RCC_LSI2_IsReady+0x1a>
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fc6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	021b      	lsls	r3, r3, #8
 8003fce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ff2:	f043 0301 	orr.w	r3, r3, #1
 8003ff6:	6013      	str	r3, [r2, #0]
}
 8003ff8:	bf00      	nop
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8004002:	b480      	push	{r7}
 8004004:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004010:	f023 0301 	bic.w	r3, r3, #1
 8004014:	6013      	str	r3, [r2, #0]
}
 8004016:	bf00      	nop
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b02      	cmp	r3, #2
 8004030:	d101      	bne.n	8004036 <LL_RCC_MSI_IsReady+0x16>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <LL_RCC_MSI_IsReady+0x18>
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800404a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004054:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4313      	orrs	r3, r2
 800405c:	600b      	str	r3, [r1, #0]
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800407a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2bb0      	cmp	r3, #176	; 0xb0
 8004080:	d901      	bls.n	8004086 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8004082:	23b0      	movs	r3, #176	; 0xb0
 8004084:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8004086:	687b      	ldr	r3, [r7, #4]
}
 8004088:	4618      	mov	r0, r3
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800409c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	021b      	lsls	r3, r3, #8
 80040aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040ae:	4313      	orrs	r3, r2
 80040b0:	604b      	str	r3, [r1, #4]
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80040c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f023 0203 	bic.w	r2, r3, #3
 80040d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	608b      	str	r3, [r1, #8]
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80040e6:	b480      	push	{r7}
 80040e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80040ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 030c 	and.w	r3, r3, #12
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004110:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800412e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004132:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004136:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800413a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4313      	orrs	r3, r2
 8004142:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800415a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800415e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004162:	f023 020f 	bic.w	r2, r3, #15
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	091b      	lsrs	r3, r3, #4
 800416a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4313      	orrs	r3, r2
 800419a:	608b      	str	r3, [r1, #8]
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80041b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	608b      	str	r3, [r1, #8]
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80041d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80041ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004212:	4618      	mov	r0, r3
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800422a:	4618      	mov	r0, r3
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004246:	6013      	str	r3, [r2, #0]
}
 8004248:	bf00      	nop
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004252:	b480      	push	{r7}
 8004254:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004260:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004264:	6013      	str	r3, [r2, #0]
}
 8004266:	bf00      	nop
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004282:	d101      	bne.n	8004288 <LL_RCC_PLL_IsReady+0x18>
 8004284:	2301      	movs	r3, #1
 8004286:	e000      	b.n	800428a <LL_RCC_PLL_IsReady+0x1a>
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	0a1b      	lsrs	r3, r3, #8
 80042a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80042ae:	b480      	push	{r7}
 80042b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80042b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80042bc:	4618      	mov	r0, r3
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80042c6:	b480      	push	{r7}
 80042c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80042ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80042de:	b480      	push	{r7}
 80042e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80042e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f003 0303 	and.w	r3, r3, #3
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80042f6:	b480      	push	{r7}
 80042f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80042fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004308:	d101      	bne.n	800430e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800430a:	2301      	movs	r3, #1
 800430c:	e000      	b.n	8004310 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800431a:	b480      	push	{r7}
 800431c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800431e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004322:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800432e:	d101      	bne.n	8004334 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004330:	2301      	movs	r3, #1
 8004332:	e000      	b.n	8004336 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004348:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800434c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004354:	d101      	bne.n	800435a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004366:	b480      	push	{r7}
 8004368:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800436a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004374:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004378:	d101      	bne.n	800437e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800438a:	b480      	push	{r7}
 800438c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800438e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004398:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800439c:	d101      	bne.n	80043a2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800439e:	2301      	movs	r3, #1
 80043a0:	e000      	b.n	80043a4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
	...

080043b0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043b0:	b590      	push	{r4, r7, lr}
 80043b2:	b08d      	sub	sp, #52	; 0x34
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e37f      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 8092 	beq.w	80044f4 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043d0:	f7ff fe89 	bl	80040e6 <LL_RCC_GetSysClkSource>
 80043d4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043d6:	f7ff ff82 	bl	80042de <LL_RCC_PLL_GetMainSource>
 80043da:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80043dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d005      	beq.n	80043ee <HAL_RCC_OscConfig+0x3e>
 80043e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e4:	2b0c      	cmp	r3, #12
 80043e6:	d14c      	bne.n	8004482 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80043e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d149      	bne.n	8004482 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043ee:	f7ff fe17 	bl	8004020 <LL_RCC_MSI_IsReady>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d005      	beq.n	8004404 <HAL_RCC_OscConfig+0x54>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e35e      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004408:	f7ff fe2f 	bl	800406a <LL_RCC_MSI_GetRange>
 800440c:	4603      	mov	r3, r0
 800440e:	429c      	cmp	r4, r3
 8004410:	d914      	bls.n	800443c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fd44 	bl	8004ea4 <RCC_SetFlashLatencyFromMSIRange>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e34d      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff fe09 	bl	8004042 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff fe2d 	bl	8004094 <LL_RCC_MSI_SetCalibTrimming>
 800443a:	e013      	b.n	8004464 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff fdfe 	bl	8004042 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff fe22 	bl	8004094 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	4618      	mov	r0, r3
 8004456:	f000 fd25 	bl	8004ea4 <RCC_SetFlashLatencyFromMSIRange>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e32e      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004464:	f000 fcde 	bl	8004e24 <HAL_RCC_GetHCLKFreq>
 8004468:	4603      	mov	r3, r0
 800446a:	4aa5      	ldr	r2, [pc, #660]	; (8004700 <HAL_RCC_OscConfig+0x350>)
 800446c:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800446e:	4ba5      	ldr	r3, [pc, #660]	; (8004704 <HAL_RCC_OscConfig+0x354>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff f828 	bl	80034c8 <HAL_InitTick>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d039      	beq.n	80044f2 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e31f      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d01e      	beq.n	80044c8 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800448a:	f7ff fdab 	bl	8003fe4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800448e:	f7ff f869 	bl	8003564 <HAL_GetTick>
 8004492:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004496:	f7ff f865 	bl	8003564 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e30c      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() == 0U)
 80044a8:	f7ff fdba 	bl	8004020 <LL_RCC_MSI_IsReady>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0f1      	beq.n	8004496 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff fdc3 	bl	8004042 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff fde7 	bl	8004094 <LL_RCC_MSI_SetCalibTrimming>
 80044c6:	e015      	b.n	80044f4 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044c8:	f7ff fd9b 	bl	8004002 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044cc:	f7ff f84a 	bl	8003564 <HAL_GetTick>
 80044d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044d4:	f7ff f846 	bl	8003564 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e2ed      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() != 0U)
 80044e6:	f7ff fd9b 	bl	8004020 <LL_RCC_MSI_IsReady>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1f1      	bne.n	80044d4 <HAL_RCC_OscConfig+0x124>
 80044f0:	e000      	b.n	80044f4 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044f2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d04e      	beq.n	800459e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004500:	f7ff fdf1 	bl	80040e6 <LL_RCC_GetSysClkSource>
 8004504:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004506:	f7ff feea 	bl	80042de <LL_RCC_PLL_GetMainSource>
 800450a:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	2b08      	cmp	r3, #8
 8004510:	d005      	beq.n	800451e <HAL_RCC_OscConfig+0x16e>
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	2b0c      	cmp	r3, #12
 8004516:	d10d      	bne.n	8004534 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	2b03      	cmp	r3, #3
 800451c:	d10a      	bne.n	8004534 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800451e:	f7ff fc01 	bl	8003d24 <LL_RCC_HSE_IsReady>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d039      	beq.n	800459c <HAL_RCC_OscConfig+0x1ec>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d135      	bne.n	800459c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e2c6      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800453c:	d102      	bne.n	8004544 <HAL_RCC_OscConfig+0x194>
 800453e:	f7ff fbd3 	bl	8003ce8 <LL_RCC_HSE_Enable>
 8004542:	e001      	b.n	8004548 <HAL_RCC_OscConfig+0x198>
 8004544:	f7ff fbdf 	bl	8003d06 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d012      	beq.n	8004576 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004550:	f7ff f808 	bl	8003564 <HAL_GetTick>
 8004554:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004558:	f7ff f804 	bl	8003564 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b64      	cmp	r3, #100	; 0x64
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e2ab      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() == 0U)
 800456a:	f7ff fbdb 	bl	8003d24 <LL_RCC_HSE_IsReady>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0f1      	beq.n	8004558 <HAL_RCC_OscConfig+0x1a8>
 8004574:	e013      	b.n	800459e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004576:	f7fe fff5 	bl	8003564 <HAL_GetTick>
 800457a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800457e:	f7fe fff1 	bl	8003564 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b64      	cmp	r3, #100	; 0x64
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e298      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004590:	f7ff fbc8 	bl	8003d24 <LL_RCC_HSE_IsReady>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1f1      	bne.n	800457e <HAL_RCC_OscConfig+0x1ce>
 800459a:	e000      	b.n	800459e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800459c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d051      	beq.n	800464e <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045aa:	f7ff fd9c 	bl	80040e6 <LL_RCC_GetSysClkSource>
 80045ae:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045b0:	f7ff fe95 	bl	80042de <LL_RCC_PLL_GetMainSource>
 80045b4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	d005      	beq.n	80045c8 <HAL_RCC_OscConfig+0x218>
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	2b0c      	cmp	r3, #12
 80045c0:	d113      	bne.n	80045ea <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d110      	bne.n	80045ea <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045c8:	f7ff fbdc 	bl	8003d84 <LL_RCC_HSI_IsReady>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <HAL_RCC_OscConfig+0x22e>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e271      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7ff fbe0 	bl	8003da8 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045e8:	e031      	b.n	800464e <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d019      	beq.n	8004626 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045f2:	f7ff fba9 	bl	8003d48 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f6:	f7fe ffb5 	bl	8003564 <HAL_GetTick>
 80045fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045fe:	f7fe ffb1 	bl	8003564 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e258      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004610:	f7ff fbb8 	bl	8003d84 <LL_RCC_HSI_IsReady>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0f1      	beq.n	80045fe <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff fbc2 	bl	8003da8 <LL_RCC_HSI_SetCalibTrimming>
 8004624:	e013      	b.n	800464e <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004626:	f7ff fb9e 	bl	8003d66 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462a:	f7fe ff9b 	bl	8003564 <HAL_GetTick>
 800462e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004630:	e008      	b.n	8004644 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004632:	f7fe ff97 	bl	8003564 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e23e      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004644:	f7ff fb9e 	bl	8003d84 <LL_RCC_HSI_IsReady>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f1      	bne.n	8004632 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d106      	bne.n	8004668 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 80a4 	beq.w	80047b0 <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d077      	beq.n	8004760 <HAL_RCC_OscConfig+0x3b0>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	2b00      	cmp	r3, #0
 800467a:	d04b      	beq.n	8004714 <HAL_RCC_OscConfig+0x364>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800467c:	f7ff fc55 	bl	8003f2a <LL_RCC_LSI1_IsReady>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d113      	bne.n	80046ae <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004686:	f7ff fc2e 	bl	8003ee6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800468a:	f7fe ff6b 	bl	8003564 <HAL_GetTick>
 800468e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004692:	f7fe ff67 	bl	8003564 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e20e      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80046a4:	f7ff fc41 	bl	8003f2a <LL_RCC_LSI1_IsReady>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f1      	beq.n	8004692 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80046ae:	f7ff fc4e 	bl	8003f4e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b2:	f7fe ff57 	bl	8003564 <HAL_GetTick>
 80046b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80046ba:	f7fe ff53 	bl	8003564 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e1fa      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80046cc:	f7ff fc61 	bl	8003f92 <LL_RCC_LSI2_IsReady>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0f1      	beq.n	80046ba <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	4618      	mov	r0, r3
 80046dc:	f7ff fc6b 	bl	8003fb6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80046e0:	f7ff fc12 	bl	8003f08 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e4:	f7fe ff3e 	bl	8003564 <HAL_GetTick>
 80046e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80046ea:	e00d      	b.n	8004708 <HAL_RCC_OscConfig+0x358>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80046ec:	f7fe ff3a 	bl	8003564 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d906      	bls.n	8004708 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e1e1      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
 80046fe:	bf00      	nop
 8004700:	20000038 	.word	0x20000038
 8004704:	2000003c 	.word	0x2000003c
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004708:	f7ff fc0f 	bl	8003f2a <LL_RCC_LSI1_IsReady>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1ec      	bne.n	80046ec <HAL_RCC_OscConfig+0x33c>
 8004712:	e04d      	b.n	80047b0 <HAL_RCC_OscConfig+0x400>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004714:	f7ff fbe7 	bl	8003ee6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004718:	f7fe ff24 	bl	8003564 <HAL_GetTick>
 800471c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x382>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004720:	f7fe ff20 	bl	8003564 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e1c7      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004732:	f7ff fbfa 	bl	8003f2a <LL_RCC_LSI1_IsReady>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f1      	beq.n	8004720 <HAL_RCC_OscConfig+0x370>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800473c:	f7ff fc18 	bl	8003f70 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x3a4>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004742:	f7fe ff0f 	bl	8003564 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b03      	cmp	r3, #3
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e1b6      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004754:	f7ff fc1d 	bl	8003f92 <LL_RCC_LSI2_IsReady>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f1      	bne.n	8004742 <HAL_RCC_OscConfig+0x392>
 800475e:	e027      	b.n	80047b0 <HAL_RCC_OscConfig+0x400>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004760:	f7ff fc06 	bl	8003f70 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004764:	f7fe fefe 	bl	8003564 <HAL_GetTick>
 8004768:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x3ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800476c:	f7fe fefa 	bl	8003564 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b03      	cmp	r3, #3
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e1a1      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800477e:	f7ff fc08 	bl	8003f92 <LL_RCC_LSI2_IsReady>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1f1      	bne.n	800476c <HAL_RCC_OscConfig+0x3bc>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004788:	f7ff fbbe 	bl	8003f08 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478c:	f7fe feea 	bl	8003564 <HAL_GetTick>
 8004790:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x3f6>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004794:	f7fe fee6 	bl	8003564 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e18d      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80047a6:	f7ff fbc0 	bl	8003f2a <LL_RCC_LSI1_IsReady>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1f1      	bne.n	8004794 <HAL_RCC_OscConfig+0x3e4>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d05b      	beq.n	8004874 <HAL_RCC_OscConfig+0x4c4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047bc:	4ba7      	ldr	r3, [pc, #668]	; (8004a5c <HAL_RCC_OscConfig+0x6ac>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d114      	bne.n	80047f2 <HAL_RCC_OscConfig+0x442>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80047c8:	f7ff fa5e 	bl	8003c88 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047cc:	f7fe feca 	bl	8003564 <HAL_GetTick>
 80047d0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x436>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047d4:	f7fe fec6 	bl	8003564 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e16d      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047e6:	4b9d      	ldr	r3, [pc, #628]	; (8004a5c <HAL_RCC_OscConfig+0x6ac>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0f0      	beq.n	80047d4 <HAL_RCC_OscConfig+0x424>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d102      	bne.n	8004800 <HAL_RCC_OscConfig+0x450>
 80047fa:	f7ff fb1e 	bl	8003e3a <LL_RCC_LSE_Enable>
 80047fe:	e00c      	b.n	800481a <HAL_RCC_OscConfig+0x46a>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	2b05      	cmp	r3, #5
 8004806:	d104      	bne.n	8004812 <HAL_RCC_OscConfig+0x462>
 8004808:	f7ff fb39 	bl	8003e7e <LL_RCC_LSE_EnableBypass>
 800480c:	f7ff fb15 	bl	8003e3a <LL_RCC_LSE_Enable>
 8004810:	e003      	b.n	800481a <HAL_RCC_OscConfig+0x46a>
 8004812:	f7ff fb23 	bl	8003e5c <LL_RCC_LSE_Disable>
 8004816:	f7ff fb43 	bl	8003ea0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d014      	beq.n	800484c <HAL_RCC_OscConfig+0x49c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004822:	f7fe fe9f 	bl	8003564 <HAL_GetTick>
 8004826:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004828:	e00a      	b.n	8004840 <HAL_RCC_OscConfig+0x490>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800482a:	f7fe fe9b 	bl	8003564 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	f241 3288 	movw	r2, #5000	; 0x1388
 8004838:	4293      	cmp	r3, r2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e140      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004840:	f7ff fb3f 	bl	8003ec2 <LL_RCC_LSE_IsReady>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0ef      	beq.n	800482a <HAL_RCC_OscConfig+0x47a>
 800484a:	e013      	b.n	8004874 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484c:	f7fe fe8a 	bl	8003564 <HAL_GetTick>
 8004850:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004852:	e00a      	b.n	800486a <HAL_RCC_OscConfig+0x4ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004854:	f7fe fe86 	bl	8003564 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004862:	4293      	cmp	r3, r2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e12b      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() != 0U)
 800486a:	f7ff fb2a 	bl	8003ec2 <LL_RCC_LSE_IsReady>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1ef      	bne.n	8004854 <HAL_RCC_OscConfig+0x4a4>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487c:	2b00      	cmp	r3, #0
 800487e:	d02c      	beq.n	80048da <HAL_RCC_OscConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004884:	2b00      	cmp	r3, #0
 8004886:	d014      	beq.n	80048b2 <HAL_RCC_OscConfig+0x502>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004888:	f7ff faa3 	bl	8003dd2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488c:	f7fe fe6a 	bl	8003564 <HAL_GetTick>
 8004890:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x4f6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004894:	f7fe fe66 	bl	8003564 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e10d      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80048a6:	f7ff fab6 	bl	8003e16 <LL_RCC_HSI48_IsReady>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0f1      	beq.n	8004894 <HAL_RCC_OscConfig+0x4e4>
 80048b0:	e013      	b.n	80048da <HAL_RCC_OscConfig+0x52a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048b2:	f7ff fa9f 	bl	8003df4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b6:	f7fe fe55 	bl	8003564 <HAL_GetTick>
 80048ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x520>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048be:	f7fe fe51 	bl	8003564 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e0f8      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80048d0:	f7ff faa1 	bl	8003e16 <LL_RCC_HSI48_IsReady>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f1      	bne.n	80048be <HAL_RCC_OscConfig+0x50e>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 80ee 	beq.w	8004ac0 <HAL_RCC_OscConfig+0x710>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048e4:	f7ff fbff 	bl	80040e6 <LL_RCC_GetSysClkSource>
 80048e8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80048ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	f040 80b4 	bne.w	8004a64 <HAL_RCC_OscConfig+0x6b4>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f003 0203 	and.w	r2, r3, #3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004906:	429a      	cmp	r2, r3
 8004908:	d123      	bne.n	8004952 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004914:	429a      	cmp	r2, r3
 8004916:	d11c      	bne.n	8004952 <HAL_RCC_OscConfig+0x5a2>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	0a1b      	lsrs	r3, r3, #8
 800491c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004924:	429a      	cmp	r2, r3
 8004926:	d114      	bne.n	8004952 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004932:	429a      	cmp	r2, r3
 8004934:	d10d      	bne.n	8004952 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004940:	429a      	cmp	r2, r3
 8004942:	d106      	bne.n	8004952 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800494e:	429a      	cmp	r2, r3
 8004950:	d05d      	beq.n	8004a0e <HAL_RCC_OscConfig+0x65e>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b0c      	cmp	r3, #12
 8004956:	d058      	beq.n	8004a0a <HAL_RCC_OscConfig+0x65a>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <HAL_RCC_OscConfig+0x5ba>

          {
            return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e0ab      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800496a:	f7ff fc72 	bl	8004252 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800496e:	f7fe fdf9 	bl	8003564 <HAL_GetTick>
 8004972:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004974:	e008      	b.n	8004988 <HAL_RCC_OscConfig+0x5d8>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004976:	f7fe fdf5 	bl	8003564 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x5d8>
              {
                return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e09c      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1ef      	bne.n	8004976 <HAL_RCC_OscConfig+0x5c6>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800499a:	68da      	ldr	r2, [r3, #12]
 800499c:	4b30      	ldr	r3, [pc, #192]	; (8004a60 <HAL_RCC_OscConfig+0x6b0>)
 800499e:	4013      	ands	r3, r2
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049a8:	4311      	orrs	r1, r2
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049ae:	0212      	lsls	r2, r2, #8
 80049b0:	4311      	orrs	r1, r2
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80049b6:	4311      	orrs	r1, r2
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80049bc:	4311      	orrs	r1, r2
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80049c2:	430a      	orrs	r2, r1
 80049c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80049cc:	f7ff fc32 	bl	8004234 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049de:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049e0:	f7fe fdc0 	bl	8003564 <HAL_GetTick>
 80049e4:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x64a>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e8:	f7fe fdbc 	bl	8003564 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x64a>
              {
                return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e063      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0ef      	beq.n	80049e8 <HAL_RCC_OscConfig+0x638>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a08:	e05a      	b.n	8004ac0 <HAL_RCC_OscConfig+0x710>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e059      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d151      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x710>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a1c:	f7ff fc0a 	bl	8004234 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a30:	f7fe fd98 	bl	8003564 <HAL_GetTick>
 8004a34:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x69a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a38:	f7fe fd94 	bl	8003564 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x69a>
            {
              return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e03b      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0ef      	beq.n	8004a38 <HAL_RCC_OscConfig+0x688>
 8004a58:	e032      	b.n	8004ac0 <HAL_RCC_OscConfig+0x710>
 8004a5a:	bf00      	nop
 8004a5c:	58000400 	.word	0x58000400
 8004a60:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	2b0c      	cmp	r3, #12
 8004a68:	d028      	beq.n	8004abc <HAL_RCC_OscConfig+0x70c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a6a:	f7ff fbf2 	bl	8004252 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a78:	f023 0303 	bic.w	r3, r3, #3
 8004a7c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8004a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a88:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a90:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a92:	f7fe fd67 	bl	8003564 <HAL_GetTick>
 8004a96:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a98:	e008      	b.n	8004aac <HAL_RCC_OscConfig+0x6fc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a9a:	f7fe fd63 	bl	8003564 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x6fc>
          {
            return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e00a      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1ef      	bne.n	8004a9a <HAL_RCC_OscConfig+0x6ea>
 8004aba:	e001      	b.n	8004ac0 <HAL_RCC_OscConfig+0x710>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e000      	b.n	8004ac2 <HAL_RCC_OscConfig+0x712>
      }
    }
  }
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3734      	adds	r7, #52	; 0x34
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd90      	pop	{r4, r7, pc}
 8004aca:	bf00      	nop

08004acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e12d      	b.n	8004d3c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ae0:	4b98      	ldr	r3, [pc, #608]	; (8004d44 <HAL_RCC_ClockConfig+0x278>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d91b      	bls.n	8004b26 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aee:	4b95      	ldr	r3, [pc, #596]	; (8004d44 <HAL_RCC_ClockConfig+0x278>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f023 0207 	bic.w	r2, r3, #7
 8004af6:	4993      	ldr	r1, [pc, #588]	; (8004d44 <HAL_RCC_ClockConfig+0x278>)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004afe:	f7fe fd31 	bl	8003564 <HAL_GetTick>
 8004b02:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b04:	e008      	b.n	8004b18 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004b06:	f7fe fd2d 	bl	8003564 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e111      	b.n	8004d3c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b18:	4b8a      	ldr	r3, [pc, #552]	; (8004d44 <HAL_RCC_ClockConfig+0x278>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d1ef      	bne.n	8004b06 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d016      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff fae1 	bl	80040fe <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b3c:	f7fe fd12 	bl	8003564 <HAL_GetTick>
 8004b40:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b44:	f7fe fd0e 	bl	8003564 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e0f2      	b.n	8004d3c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004b56:	f7ff fbce 	bl	80042f6 <LL_RCC_IsActiveFlag_HPRE>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0f1      	beq.n	8004b44 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0320 	and.w	r3, r3, #32
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d016      	beq.n	8004b9a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7ff fad8 	bl	8004126 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b76:	f7fe fcf5 	bl	8003564 <HAL_GetTick>
 8004b7a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b7e:	f7fe fcf1 	bl	8003564 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e0d5      	b.n	8004d3c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004b90:	f7ff fbc3 	bl	800431a <LL_RCC_IsActiveFlag_C2HPRE>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0f1      	beq.n	8004b7e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d016      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff fad1 	bl	8004152 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004bb0:	f7fe fcd8 	bl	8003564 <HAL_GetTick>
 8004bb4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004bb8:	f7fe fcd4 	bl	8003564 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e0b8      	b.n	8004d3c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004bca:	f7ff fbb9 	bl	8004340 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0f1      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d016      	beq.n	8004c0e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7ff facb 	bl	8004180 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004bea:	f7fe fcbb 	bl	8003564 <HAL_GetTick>
 8004bee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004bf2:	f7fe fcb7 	bl	8003564 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e09b      	b.n	8004d3c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004c04:	f7ff fbaf 	bl	8004366 <LL_RCC_IsActiveFlag_PPRE1>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0f1      	beq.n	8004bf2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0308 	and.w	r3, r3, #8
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d017      	beq.n	8004c4a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7ff fac1 	bl	80041a8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c26:	f7fe fc9d 	bl	8003564 <HAL_GetTick>
 8004c2a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004c2c:	e008      	b.n	8004c40 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c2e:	f7fe fc99 	bl	8003564 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e07d      	b.n	8004d3c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004c40:	f7ff fba3 	bl	800438a <LL_RCC_IsActiveFlag_PPRE2>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d0f1      	beq.n	8004c2e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d043      	beq.n	8004cde <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d106      	bne.n	8004c6c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004c5e:	f7ff f861 	bl	8003d24 <LL_RCC_HSE_IsReady>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d11e      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e067      	b.n	8004d3c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b03      	cmp	r3, #3
 8004c72:	d106      	bne.n	8004c82 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004c74:	f7ff fafc 	bl	8004270 <LL_RCC_PLL_IsReady>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d113      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e05c      	b.n	8004d3c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d106      	bne.n	8004c98 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004c8a:	f7ff f9c9 	bl	8004020 <LL_RCC_MSI_IsReady>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d108      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e051      	b.n	8004d3c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004c98:	f7ff f874 	bl	8003d84 <LL_RCC_HSI_IsReady>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e04a      	b.n	8004d3c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff fa07 	bl	80040be <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb0:	f7fe fc58 	bl	8003564 <HAL_GetTick>
 8004cb4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb6:	e00a      	b.n	8004cce <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cb8:	f7fe fc54 	bl	8003564 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e036      	b.n	8004d3c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cce:	f7ff fa0a 	bl	80040e6 <LL_RCC_GetSysClkSource>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d1ec      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cde:	4b19      	ldr	r3, [pc, #100]	; (8004d44 <HAL_RCC_ClockConfig+0x278>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d21b      	bcs.n	8004d24 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cec:	4b15      	ldr	r3, [pc, #84]	; (8004d44 <HAL_RCC_ClockConfig+0x278>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f023 0207 	bic.w	r2, r3, #7
 8004cf4:	4913      	ldr	r1, [pc, #76]	; (8004d44 <HAL_RCC_ClockConfig+0x278>)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cfc:	f7fe fc32 	bl	8003564 <HAL_GetTick>
 8004d00:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004d04:	f7fe fc2e 	bl	8003564 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e012      	b.n	8004d3c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d16:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <HAL_RCC_ClockConfig+0x278>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d1ef      	bne.n	8004d04 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004d24:	f000 f87e 	bl	8004e24 <HAL_RCC_GetHCLKFreq>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	4a07      	ldr	r2, [pc, #28]	; (8004d48 <HAL_RCC_ClockConfig+0x27c>)
 8004d2c:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004d2e:	f7fe fc25 	bl	800357c <HAL_GetTickPrio>
 8004d32:	4603      	mov	r3, r0
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fe fbc7 	bl	80034c8 <HAL_InitTick>
 8004d3a:	4603      	mov	r3, r0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	58004000 	.word	0x58004000
 8004d48:	20000038 	.word	0x20000038

08004d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d4c:	b590      	push	{r4, r7, lr}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d52:	f7ff f9c8 	bl	80040e6 <LL_RCC_GetSysClkSource>
 8004d56:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10a      	bne.n	8004d74 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004d5e:	f7ff f984 	bl	800406a <LL_RCC_MSI_GetRange>
 8004d62:	4603      	mov	r3, r0
 8004d64:	091b      	lsrs	r3, r3, #4
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	4a2b      	ldr	r2, [pc, #172]	; (8004e18 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d70:	60fb      	str	r3, [r7, #12]
 8004d72:	e04b      	b.n	8004e0c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d102      	bne.n	8004d80 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d7a:	4b28      	ldr	r3, [pc, #160]	; (8004e1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	e045      	b.n	8004e0c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b08      	cmp	r3, #8
 8004d84:	d10a      	bne.n	8004d9c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004d86:	f7fe ff9d 	bl	8003cc4 <LL_RCC_HSE_IsEnabledDiv2>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d102      	bne.n	8004d96 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004d90:	4b22      	ldr	r3, [pc, #136]	; (8004e1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	e03a      	b.n	8004e0c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004d96:	4b22      	ldr	r3, [pc, #136]	; (8004e20 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	e037      	b.n	8004e0c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004d9c:	f7ff fa9f 	bl	80042de <LL_RCC_PLL_GetMainSource>
 8004da0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d003      	beq.n	8004db0 <HAL_RCC_GetSysClockFreq+0x64>
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d003      	beq.n	8004db6 <HAL_RCC_GetSysClockFreq+0x6a>
 8004dae:	e00d      	b.n	8004dcc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004db0:	4b1a      	ldr	r3, [pc, #104]	; (8004e1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004db2:	60bb      	str	r3, [r7, #8]
        break;
 8004db4:	e015      	b.n	8004de2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004db6:	f7fe ff85 	bl	8003cc4 <LL_RCC_HSE_IsEnabledDiv2>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d102      	bne.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004dc0:	4b16      	ldr	r3, [pc, #88]	; (8004e1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004dc2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004dc4:	e00d      	b.n	8004de2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004dc6:	4b16      	ldr	r3, [pc, #88]	; (8004e20 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004dc8:	60bb      	str	r3, [r7, #8]
        break;
 8004dca:	e00a      	b.n	8004de2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004dcc:	f7ff f94d 	bl	800406a <LL_RCC_MSI_GetRange>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	091b      	lsrs	r3, r3, #4
 8004dd4:	f003 030f 	and.w	r3, r3, #15
 8004dd8:	4a0f      	ldr	r2, [pc, #60]	; (8004e18 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dde:	60bb      	str	r3, [r7, #8]
        break;
 8004de0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8004de2:	f7ff fa57 	bl	8004294 <LL_RCC_PLL_GetN>
 8004de6:	4602      	mov	r2, r0
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	fb03 f402 	mul.w	r4, r3, r2
 8004dee:	f7ff fa6a 	bl	80042c6 <LL_RCC_PLL_GetDivider>
 8004df2:	4603      	mov	r3, r0
 8004df4:	091b      	lsrs	r3, r3, #4
 8004df6:	3301      	adds	r3, #1
 8004df8:	fbb4 f4f3 	udiv	r4, r4, r3
 8004dfc:	f7ff fa57 	bl	80042ae <LL_RCC_PLL_GetR>
 8004e00:	4603      	mov	r3, r0
 8004e02:	0f5b      	lsrs	r3, r3, #29
 8004e04:	3301      	adds	r3, #1
 8004e06:	fbb4 f3f3 	udiv	r3, r4, r3
 8004e0a:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd90      	pop	{r4, r7, pc}
 8004e16:	bf00      	nop
 8004e18:	0800cac0 	.word	0x0800cac0
 8004e1c:	00f42400 	.word	0x00f42400
 8004e20:	01e84800 	.word	0x01e84800

08004e24 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e24:	b598      	push	{r3, r4, r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004e28:	f7ff ff90 	bl	8004d4c <HAL_RCC_GetSysClockFreq>
 8004e2c:	4604      	mov	r4, r0
 8004e2e:	f7ff f9cf 	bl	80041d0 <LL_RCC_GetAHBPrescaler>
 8004e32:	4603      	mov	r3, r0
 8004e34:	091b      	lsrs	r3, r3, #4
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	4a03      	ldr	r2, [pc, #12]	; (8004e48 <HAL_RCC_GetHCLKFreq+0x24>)
 8004e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e40:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	bd98      	pop	{r3, r4, r7, pc}
 8004e48:	0800ca60 	.word	0x0800ca60

08004e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e4c:	b598      	push	{r3, r4, r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004e50:	f7ff ffe8 	bl	8004e24 <HAL_RCC_GetHCLKFreq>
 8004e54:	4604      	mov	r4, r0
 8004e56:	f7ff f9d5 	bl	8004204 <LL_RCC_GetAPB1Prescaler>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	0a1b      	lsrs	r3, r3, #8
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	4a04      	ldr	r2, [pc, #16]	; (8004e74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e68:	f003 031f 	and.w	r3, r3, #31
 8004e6c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	bd98      	pop	{r3, r4, r7, pc}
 8004e74:	0800caa0 	.word	0x0800caa0

08004e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e78:	b598      	push	{r3, r4, r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004e7c:	f7ff ffd2 	bl	8004e24 <HAL_RCC_GetHCLKFreq>
 8004e80:	4604      	mov	r4, r0
 8004e82:	f7ff f9cb 	bl	800421c <LL_RCC_GetAPB2Prescaler>
 8004e86:	4603      	mov	r3, r0
 8004e88:	0adb      	lsrs	r3, r3, #11
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	4a04      	ldr	r2, [pc, #16]	; (8004ea0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e94:	f003 031f 	and.w	r3, r3, #31
 8004e98:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	bd98      	pop	{r3, r4, r7, pc}
 8004ea0:	0800caa0 	.word	0x0800caa0

08004ea4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004ea4:	b590      	push	{r4, r7, lr}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2bb0      	cmp	r3, #176	; 0xb0
 8004eb0:	d903      	bls.n	8004eba <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004eb2:	4b15      	ldr	r3, [pc, #84]	; (8004f08 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	e007      	b.n	8004eca <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	091b      	lsrs	r3, r3, #4
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	4a11      	ldr	r2, [pc, #68]	; (8004f08 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ec8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004eca:	f7ff f98d 	bl	80041e8 <LL_RCC_GetAHB4Prescaler>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	091b      	lsrs	r3, r3, #4
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	4a0d      	ldr	r2, [pc, #52]	; (8004f0c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4a0a      	ldr	r2, [pc, #40]	; (8004f10 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eec:	0c9c      	lsrs	r4, r3, #18
 8004eee:	f7fe fedb 	bl	8003ca8 <HAL_PWREx_GetVoltageRange>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	f000 f80c 	bl	8004f14 <RCC_SetFlashLatency>
 8004efc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd90      	pop	{r4, r7, pc}
 8004f06:	bf00      	nop
 8004f08:	0800cac0 	.word	0x0800cac0
 8004f0c:	0800ca60 	.word	0x0800ca60
 8004f10:	431bde83 	.word	0x431bde83

08004f14 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004f14:	b590      	push	{r4, r7, lr}
 8004f16:	b093      	sub	sp, #76	; 0x4c
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004f1e:	4b37      	ldr	r3, [pc, #220]	; (8004ffc <RCC_SetFlashLatency+0xe8>)
 8004f20:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004f24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004f2a:	4a35      	ldr	r2, [pc, #212]	; (8005000 <RCC_SetFlashLatency+0xec>)
 8004f2c:	f107 031c 	add.w	r3, r7, #28
 8004f30:	ca07      	ldmia	r2, {r0, r1, r2}
 8004f32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004f36:	4b33      	ldr	r3, [pc, #204]	; (8005004 <RCC_SetFlashLatency+0xf0>)
 8004f38:	f107 040c 	add.w	r4, r7, #12
 8004f3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004f42:	2300      	movs	r3, #0
 8004f44:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f4c:	d11a      	bne.n	8004f84 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004f4e:	2300      	movs	r3, #0
 8004f50:	643b      	str	r3, [r7, #64]	; 0x40
 8004f52:	e013      	b.n	8004f7c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	3348      	adds	r3, #72	; 0x48
 8004f5a:	443b      	add	r3, r7
 8004f5c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d807      	bhi.n	8004f76 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	3348      	adds	r3, #72	; 0x48
 8004f6c:	443b      	add	r3, r7
 8004f6e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004f72:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004f74:	e020      	b.n	8004fb8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f78:	3301      	adds	r3, #1
 8004f7a:	643b      	str	r3, [r7, #64]	; 0x40
 8004f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f7e:	2b03      	cmp	r3, #3
 8004f80:	d9e8      	bls.n	8004f54 <RCC_SetFlashLatency+0x40>
 8004f82:	e019      	b.n	8004fb8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004f84:	2300      	movs	r3, #0
 8004f86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f88:	e013      	b.n	8004fb2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	3348      	adds	r3, #72	; 0x48
 8004f90:	443b      	add	r3, r7
 8004f92:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d807      	bhi.n	8004fac <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	3348      	adds	r3, #72	; 0x48
 8004fa2:	443b      	add	r3, r7
 8004fa4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004fa8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004faa:	e005      	b.n	8004fb8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fae:	3301      	adds	r3, #1
 8004fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d9e8      	bls.n	8004f8a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8004fb8:	4b13      	ldr	r3, [pc, #76]	; (8005008 <RCC_SetFlashLatency+0xf4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f023 0207 	bic.w	r2, r3, #7
 8004fc0:	4911      	ldr	r1, [pc, #68]	; (8005008 <RCC_SetFlashLatency+0xf4>)
 8004fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004fc8:	f7fe facc 	bl	8003564 <HAL_GetTick>
 8004fcc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004fce:	e008      	b.n	8004fe2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004fd0:	f7fe fac8 	bl	8003564 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e007      	b.n	8004ff2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004fe2:	4b09      	ldr	r3, [pc, #36]	; (8005008 <RCC_SetFlashLatency+0xf4>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d1ef      	bne.n	8004fd0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	374c      	adds	r7, #76	; 0x4c
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd90      	pop	{r4, r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	0800c9d0 	.word	0x0800c9d0
 8005000:	0800c9e0 	.word	0x0800c9e0
 8005004:	0800c9ec 	.word	0x0800c9ec
 8005008:	58004000 	.word	0x58004000

0800500c <LL_RCC_LSE_IsEnabled>:
{
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <LL_RCC_LSE_IsEnabled+0x18>
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <LL_RCC_LSE_IsEnabled+0x1a>
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <LL_RCC_LSE_IsReady>:
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b02      	cmp	r3, #2
 8005042:	d101      	bne.n	8005048 <LL_RCC_LSE_IsReady+0x18>
 8005044:	2301      	movs	r3, #1
 8005046:	e000      	b.n	800504a <LL_RCC_LSE_IsReady+0x1a>
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <LL_RCC_SetRFWKPClockSource>:
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800505c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005064:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005068:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4313      	orrs	r3, r2
 8005070:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <LL_RCC_SetSMPSClockSource>:
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	f023 0203 	bic.w	r2, r3, #3
 8005092:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4313      	orrs	r3, r2
 800509a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <LL_RCC_SetSMPSPrescaler>:
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80050b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <LL_RCC_SetUSARTClockSource>:
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80050d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e0:	f023 0203 	bic.w	r2, r3, #3
 80050e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <LL_RCC_SetLPUARTClockSource>:
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005110:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <LL_RCC_SetI2CClockSource>:
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005134:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	091b      	lsrs	r3, r3, #4
 800513c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005140:	43db      	mvns	r3, r3
 8005142:	401a      	ands	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800514c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005150:	4313      	orrs	r3, r2
 8005152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005156:	bf00      	nop
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <LL_RCC_SetLPTIMClockSource>:
{
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800516a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800516e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	0c1b      	lsrs	r3, r3, #16
 8005176:	041b      	lsls	r3, r3, #16
 8005178:	43db      	mvns	r3, r3
 800517a:	401a      	ands	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	041b      	lsls	r3, r3, #16
 8005180:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <LL_RCC_SetSAIClockSource>:
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800519e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <LL_RCC_SetRNGClockSource>:
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80051ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80051d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <LL_RCC_SetCLK48ClockSource>:
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80051f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005202:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800520e:	bf00      	nop
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <LL_RCC_SetUSBClockSource>:
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b082      	sub	sp, #8
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7ff ffe3 	bl	80051ee <LL_RCC_SetCLK48ClockSource>
}
 8005228:	bf00      	nop
 800522a:	3708      	adds	r7, #8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <LL_RCC_SetADCClockSource>:
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800523c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005240:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005244:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <LL_RCC_SetRTCClockSource>:
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005270:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <LL_RCC_GetRTCClockSource>:
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800528c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005294:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005298:	4618      	mov	r0, r3
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <LL_RCC_ForceBackupDomainReset>:
{
 80052a2:	b480      	push	{r7}
 80052a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80052a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80052ba:	bf00      	nop
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <LL_RCC_ReleaseBackupDomainReset>:
{
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80052c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80052dc:	bf00      	nop
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <LL_RCC_PLLSAI1_Enable>:
{
 80052e6:	b480      	push	{r7}
 80052e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80052ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052f8:	6013      	str	r3, [r2, #0]
}
 80052fa:	bf00      	nop
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <LL_RCC_PLLSAI1_Disable>:
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005312:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005316:	6013      	str	r3, [r2, #0]
}
 8005318:	bf00      	nop
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <LL_RCC_PLLSAI1_IsReady>:
{
 8005322:	b480      	push	{r7}
 8005324:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005330:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005334:	d101      	bne.n	800533a <LL_RCC_PLLSAI1_IsReady+0x18>
 8005336:	2301      	movs	r3, #1
 8005338:	e000      	b.n	800533c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b088      	sub	sp, #32
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800534e:	2300      	movs	r3, #0
 8005350:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005352:	2300      	movs	r3, #0
 8005354:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535e:	2b00      	cmp	r3, #0
 8005360:	d034      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005366:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800536a:	d021      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800536c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005370:	d81b      	bhi.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005372:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005376:	d01d      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005378:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800537c:	d815      	bhi.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x64>
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00b      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005382:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005386:	d110      	bne.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005396:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005398:	e00d      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	3304      	adds	r3, #4
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 f947 	bl	8005632 <RCCEx_PLLSAI1_ConfigNP>
 80053a4:	4603      	mov	r3, r0
 80053a6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80053a8:	e005      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	77fb      	strb	r3, [r7, #31]
        break;
 80053ae:	e002      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80053b0:	bf00      	nop
 80053b2:	e000      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80053b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053b6:	7ffb      	ldrb	r3, [r7, #31]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d105      	bne.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7ff fee8 	bl	8005196 <LL_RCC_SetSAIClockSource>
 80053c6:	e001      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c8:	7ffb      	ldrb	r3, [r7, #31]
 80053ca:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d046      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80053d8:	f7ff ff56 	bl	8005288 <LL_RCC_GetRTCClockSource>
 80053dc:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d03c      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80053e8:	f7fe fc4e 	bl	8003c88 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d105      	bne.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7ff ff30 	bl	800525c <LL_RCC_SetRTCClockSource>
 80053fc:	e02e      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80053fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005406:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005408:	f7ff ff4b 	bl	80052a2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800540c:	f7ff ff5a 	bl	80052c4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	4313      	orrs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800541e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005428:	f7ff fdf0 	bl	800500c <LL_RCC_LSE_IsEnabled>
 800542c:	4603      	mov	r3, r0
 800542e:	2b01      	cmp	r3, #1
 8005430:	d114      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005432:	f7fe f897 	bl	8003564 <HAL_GetTick>
 8005436:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005438:	e00b      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800543a:	f7fe f893 	bl	8003564 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	f241 3288 	movw	r2, #5000	; 0x1388
 8005448:	4293      	cmp	r3, r2
 800544a:	d902      	bls.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	77fb      	strb	r3, [r7, #31]
              break;
 8005450:	e004      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005452:	f7ff fded 	bl	8005030 <LL_RCC_LSE_IsReady>
 8005456:	4603      	mov	r3, r0
 8005458:	2b01      	cmp	r3, #1
 800545a:	d1ee      	bne.n	800543a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800545c:	7ffb      	ldrb	r3, [r7, #31]
 800545e:	77bb      	strb	r3, [r7, #30]
 8005460:	e001      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005462:	7ffb      	ldrb	r3, [r7, #31]
 8005464:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	d004      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff fe2a 	bl	80050d0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d004      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	4618      	mov	r0, r3
 800548e:	f7ff fe35 	bl	80050fc <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0310 	and.w	r3, r3, #16
 800549a:	2b00      	cmp	r3, #0
 800549c:	d004      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7ff fe5d 	bl	8005162 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0320 	and.w	r3, r3, #32
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d004      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff fe52 	bl	8005162 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0304 	and.w	r3, r3, #4
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d004      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff fe2a 	bl	8005128 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0308 	and.w	r3, r3, #8
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d004      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7ff fe1f 	bl	8005128 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d022      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7ff fe8d 	bl	800521a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005504:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005508:	d107      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800550a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005514:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005518:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005522:	d10b      	bne.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3304      	adds	r3, #4
 8005528:	4618      	mov	r0, r3
 800552a:	f000 f8dd 	bl	80056e8 <RCCEx_PLLSAI1_ConfigNQ>
 800552e:	4603      	mov	r3, r0
 8005530:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005532:	7ffb      	ldrb	r3, [r7, #31]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8005538:	7ffb      	ldrb	r3, [r7, #31]
 800553a:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005544:	2b00      	cmp	r3, #0
 8005546:	d02b      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005550:	d008      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800555a:	d003      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005560:	2b00      	cmp	r3, #0
 8005562:	d105      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005568:	4618      	mov	r0, r3
 800556a:	f7ff fe2a 	bl	80051c2 <LL_RCC_SetRNGClockSource>
 800556e:	e00a      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005578:	60fb      	str	r3, [r7, #12]
 800557a:	2000      	movs	r0, #0
 800557c:	f7ff fe21 	bl	80051c2 <LL_RCC_SetRNGClockSource>
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f7ff fe34 	bl	80051ee <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800558e:	d107      	bne.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800559a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800559e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d022      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff fe3d 	bl	8005230 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055be:	d107      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80055c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ce:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055d8:	d10b      	bne.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	3304      	adds	r3, #4
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 f8dd 	bl	800579e <RCCEx_PLLSAI1_ConfigNR>
 80055e4:	4603      	mov	r3, r0
 80055e6:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80055e8:	7ffb      	ldrb	r3, [r7, #31]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 80055ee:	7ffb      	ldrb	r3, [r7, #31]
 80055f0:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d004      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005602:	4618      	mov	r0, r3
 8005604:	f7ff fd26 	bl	8005054 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d009      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005618:	4618      	mov	r0, r3
 800561a:	f7ff fd45 	bl	80050a8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005622:	4618      	mov	r0, r3
 8005624:	f7ff fd2c 	bl	8005080 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8005628:	7fbb      	ldrb	r3, [r7, #30]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3720      	adds	r7, #32
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b084      	sub	sp, #16
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800563e:	f7ff fe61 	bl	8005304 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005642:	f7fd ff8f 	bl	8003564 <HAL_GetTick>
 8005646:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005648:	e009      	b.n	800565e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800564a:	f7fd ff8b 	bl	8003564 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d902      	bls.n	800565e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	73fb      	strb	r3, [r7, #15]
      break;
 800565c:	e004      	b.n	8005668 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800565e:	f7ff fe60 	bl	8005322 <LL_RCC_PLLSAI1_IsReady>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1f0      	bne.n	800564a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d137      	bne.n	80056de <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800566e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	021b      	lsls	r3, r3, #8
 800567e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005682:	4313      	orrs	r3, r2
 8005684:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005698:	4313      	orrs	r3, r2
 800569a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800569c:	f7ff fe23 	bl	80052e6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056a0:	f7fd ff60 	bl	8003564 <HAL_GetTick>
 80056a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80056a6:	e009      	b.n	80056bc <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056a8:	f7fd ff5c 	bl	8003564 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d902      	bls.n	80056bc <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	73fb      	strb	r3, [r7, #15]
        break;
 80056ba:	e004      	b.n	80056c6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80056bc:	f7ff fe31 	bl	8005322 <LL_RCC_PLLSAI1_IsReady>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d1f0      	bne.n	80056a8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80056c6:	7bfb      	ldrb	r3, [r7, #15]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d108      	bne.n	80056de <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80056cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056d0:	691a      	ldr	r2, [r3, #16]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056da:	4313      	orrs	r3, r2
 80056dc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80056de:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056f0:	2300      	movs	r3, #0
 80056f2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80056f4:	f7ff fe06 	bl	8005304 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80056f8:	f7fd ff34 	bl	8003564 <HAL_GetTick>
 80056fc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80056fe:	e009      	b.n	8005714 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005700:	f7fd ff30 	bl	8003564 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d902      	bls.n	8005714 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	73fb      	strb	r3, [r7, #15]
      break;
 8005712:	e004      	b.n	800571e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005714:	f7ff fe05 	bl	8005322 <LL_RCC_PLLSAI1_IsReady>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1f0      	bne.n	8005700 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800571e:	7bfb      	ldrb	r3, [r7, #15]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d137      	bne.n	8005794 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	021b      	lsls	r3, r3, #8
 8005734:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005738:	4313      	orrs	r3, r2
 800573a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800573c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800574e:	4313      	orrs	r3, r2
 8005750:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005752:	f7ff fdc8 	bl	80052e6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005756:	f7fd ff05 	bl	8003564 <HAL_GetTick>
 800575a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800575c:	e009      	b.n	8005772 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800575e:	f7fd ff01 	bl	8003564 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d902      	bls.n	8005772 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	73fb      	strb	r3, [r7, #15]
        break;
 8005770:	e004      	b.n	800577c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005772:	f7ff fdd6 	bl	8005322 <LL_RCC_PLLSAI1_IsReady>
 8005776:	4603      	mov	r3, r0
 8005778:	2b01      	cmp	r3, #1
 800577a:	d1f0      	bne.n	800575e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800577c:	7bfb      	ldrb	r3, [r7, #15]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d108      	bne.n	8005794 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005790:	4313      	orrs	r3, r2
 8005792:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005794:	7bfb      	ldrb	r3, [r7, #15]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057a6:	2300      	movs	r3, #0
 80057a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80057aa:	f7ff fdab 	bl	8005304 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80057ae:	f7fd fed9 	bl	8003564 <HAL_GetTick>
 80057b2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80057b4:	e009      	b.n	80057ca <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057b6:	f7fd fed5 	bl	8003564 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d902      	bls.n	80057ca <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	73fb      	strb	r3, [r7, #15]
      break;
 80057c8:	e004      	b.n	80057d4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80057ca:	f7ff fdaa 	bl	8005322 <LL_RCC_PLLSAI1_IsReady>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1f0      	bne.n	80057b6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d137      	bne.n	800584a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80057da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	021b      	lsls	r3, r3, #8
 80057ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057ee:	4313      	orrs	r3, r2
 80057f0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80057f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005804:	4313      	orrs	r3, r2
 8005806:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005808:	f7ff fd6d 	bl	80052e6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800580c:	f7fd feaa 	bl	8003564 <HAL_GetTick>
 8005810:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005812:	e009      	b.n	8005828 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005814:	f7fd fea6 	bl	8003564 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d902      	bls.n	8005828 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	73fb      	strb	r3, [r7, #15]
        break;
 8005826:	e004      	b.n	8005832 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005828:	f7ff fd7b 	bl	8005322 <LL_RCC_PLLSAI1_IsReady>
 800582c:	4603      	mov	r3, r0
 800582e:	2b01      	cmp	r3, #1
 8005830:	d1f0      	bne.n	8005814 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005832:	7bfb      	ldrb	r3, [r7, #15]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d108      	bne.n	800584a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800583c:	691a      	ldr	r2, [r3, #16]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005846:	4313      	orrs	r3, r2
 8005848:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800584a:	7bfb      	ldrb	r3, [r7, #15]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e095      	b.n	8005992 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	2b00      	cmp	r3, #0
 800586c:	d108      	bne.n	8005880 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005876:	d009      	beq.n	800588c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	61da      	str	r2, [r3, #28]
 800587e:	e005      	b.n	800588c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fd fb4e 	bl	8002f48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058cc:	d902      	bls.n	80058d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	e002      	b.n	80058da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80058e2:	d007      	beq.n	80058f4 <HAL_SPI_Init+0xa0>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058ec:	d002      	beq.n	80058f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	431a      	orrs	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005936:	ea42 0103 	orr.w	r1, r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	0c1b      	lsrs	r3, r3, #16
 8005950:	f003 0204 	and.w	r2, r3, #4
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	f003 0310 	and.w	r3, r3, #16
 800595c:	431a      	orrs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005970:	ea42 0103 	orr.w	r1, r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b088      	sub	sp, #32
 800599e:	af02      	add	r7, sp, #8
 80059a0:	60f8      	str	r0, [r7, #12]
 80059a2:	60b9      	str	r1, [r7, #8]
 80059a4:	603b      	str	r3, [r7, #0]
 80059a6:	4613      	mov	r3, r2
 80059a8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059b6:	d112      	bne.n	80059de <HAL_SPI_Receive+0x44>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10e      	bne.n	80059de <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2204      	movs	r2, #4
 80059c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80059c8:	88fa      	ldrh	r2, [r7, #6]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	4613      	mov	r3, r2
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	68b9      	ldr	r1, [r7, #8]
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 f910 	bl	8005bfa <HAL_SPI_TransmitReceive>
 80059da:	4603      	mov	r3, r0
 80059dc:	e109      	b.n	8005bf2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d101      	bne.n	80059ec <HAL_SPI_Receive+0x52>
 80059e8:	2302      	movs	r3, #2
 80059ea:	e102      	b.n	8005bf2 <HAL_SPI_Receive+0x258>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059f4:	f7fd fdb6 	bl	8003564 <HAL_GetTick>
 80059f8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d002      	beq.n	8005a0c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005a06:	2302      	movs	r3, #2
 8005a08:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a0a:	e0e9      	b.n	8005be0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <HAL_SPI_Receive+0x7e>
 8005a12:	88fb      	ldrh	r3, [r7, #6]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d102      	bne.n	8005a1e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a1c:	e0e0      	b.n	8005be0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2204      	movs	r2, #4
 8005a22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	88fa      	ldrh	r2, [r7, #6]
 8005a36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	88fa      	ldrh	r2, [r7, #6]
 8005a3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a68:	d908      	bls.n	8005a7c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a78:	605a      	str	r2, [r3, #4]
 8005a7a:	e007      	b.n	8005a8c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a8a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a94:	d10f      	bne.n	8005ab6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aa4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ab4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac0:	2b40      	cmp	r3, #64	; 0x40
 8005ac2:	d007      	beq.n	8005ad4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ad2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005adc:	d867      	bhi.n	8005bae <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005ade:	e030      	b.n	8005b42 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d117      	bne.n	8005b1e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f103 020c 	add.w	r2, r3, #12
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afa:	7812      	ldrb	r2, [r2, #0]
 8005afc:	b2d2      	uxtb	r2, r2
 8005afe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	3b01      	subs	r3, #1
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005b1c:	e011      	b.n	8005b42 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b1e:	f7fd fd21 	bl	8003564 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d803      	bhi.n	8005b36 <HAL_SPI_Receive+0x19c>
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b34:	d102      	bne.n	8005b3c <HAL_SPI_Receive+0x1a2>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d102      	bne.n	8005b42 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005b40:	e04e      	b.n	8005be0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1c8      	bne.n	8005ae0 <HAL_SPI_Receive+0x146>
 8005b4e:	e034      	b.n	8005bba <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d115      	bne.n	8005b8a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68da      	ldr	r2, [r3, #12]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b68:	b292      	uxth	r2, r2
 8005b6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b70:	1c9a      	adds	r2, r3, #2
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005b88:	e011      	b.n	8005bae <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b8a:	f7fd fceb 	bl	8003564 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	683a      	ldr	r2, [r7, #0]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d803      	bhi.n	8005ba2 <HAL_SPI_Receive+0x208>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba0:	d102      	bne.n	8005ba8 <HAL_SPI_Receive+0x20e>
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d102      	bne.n	8005bae <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005bac:	e018      	b.n	8005be0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1ca      	bne.n	8005b50 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	6839      	ldr	r1, [r7, #0]
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 fc6c 	bl	800649c <SPI_EndRxTransaction>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	75fb      	strb	r3, [r7, #23]
 8005bdc:	e000      	b.n	8005be0 <HAL_SPI_Receive+0x246>
  }

error :
 8005bde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3718      	adds	r7, #24
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b08a      	sub	sp, #40	; 0x28
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	60f8      	str	r0, [r7, #12]
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	607a      	str	r2, [r7, #4]
 8005c06:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_SPI_TransmitReceive+0x26>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	e1fb      	b.n	8006018 <HAL_SPI_TransmitReceive+0x41e>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c28:	f7fd fc9c 	bl	8003564 <HAL_GetTick>
 8005c2c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c34:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005c3c:	887b      	ldrh	r3, [r7, #2]
 8005c3e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005c40:	887b      	ldrh	r3, [r7, #2]
 8005c42:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c44:	7efb      	ldrb	r3, [r7, #27]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d00e      	beq.n	8005c68 <HAL_SPI_TransmitReceive+0x6e>
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c50:	d106      	bne.n	8005c60 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d102      	bne.n	8005c60 <HAL_SPI_TransmitReceive+0x66>
 8005c5a:	7efb      	ldrb	r3, [r7, #27]
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	d003      	beq.n	8005c68 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005c60:	2302      	movs	r3, #2
 8005c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005c66:	e1cd      	b.n	8006004 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d005      	beq.n	8005c7a <HAL_SPI_TransmitReceive+0x80>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <HAL_SPI_TransmitReceive+0x80>
 8005c74:	887b      	ldrh	r3, [r7, #2]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d103      	bne.n	8005c82 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005c80:	e1c0      	b.n	8006004 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	d003      	beq.n	8005c96 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2205      	movs	r2, #5
 8005c92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	887a      	ldrh	r2, [r7, #2]
 8005ca6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	887a      	ldrh	r2, [r7, #2]
 8005cae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	887a      	ldrh	r2, [r7, #2]
 8005cbc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	887a      	ldrh	r2, [r7, #2]
 8005cc2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cd8:	d802      	bhi.n	8005ce0 <HAL_SPI_TransmitReceive+0xe6>
 8005cda:	8a3b      	ldrh	r3, [r7, #16]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d908      	bls.n	8005cf2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005cee:	605a      	str	r2, [r3, #4]
 8005cf0:	e007      	b.n	8005d02 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d00:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0c:	2b40      	cmp	r3, #64	; 0x40
 8005d0e:	d007      	beq.n	8005d20 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d28:	d97c      	bls.n	8005e24 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d002      	beq.n	8005d38 <HAL_SPI_TransmitReceive+0x13e>
 8005d32:	8a7b      	ldrh	r3, [r7, #18]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d169      	bne.n	8005e0c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3c:	881a      	ldrh	r2, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d48:	1c9a      	adds	r2, r3, #2
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	3b01      	subs	r3, #1
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d5c:	e056      	b.n	8005e0c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d11b      	bne.n	8005da4 <HAL_SPI_TransmitReceive+0x1aa>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d016      	beq.n	8005da4 <HAL_SPI_TransmitReceive+0x1aa>
 8005d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d113      	bne.n	8005da4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d80:	881a      	ldrh	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8c:	1c9a      	adds	r2, r3, #2
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d11c      	bne.n	8005dec <HAL_SPI_TransmitReceive+0x1f2>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d016      	beq.n	8005dec <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68da      	ldr	r2, [r3, #12]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc8:	b292      	uxth	r2, r2
 8005dca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd0:	1c9a      	adds	r2, r3, #2
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	3b01      	subs	r3, #1
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005de8:	2301      	movs	r3, #1
 8005dea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005dec:	f7fd fbba 	bl	8003564 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d807      	bhi.n	8005e0c <HAL_SPI_TransmitReceive+0x212>
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e02:	d003      	beq.n	8005e0c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005e0a:	e0fb      	b.n	8006004 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1a3      	bne.n	8005d5e <HAL_SPI_TransmitReceive+0x164>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d19d      	bne.n	8005d5e <HAL_SPI_TransmitReceive+0x164>
 8005e22:	e0df      	b.n	8005fe4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d003      	beq.n	8005e34 <HAL_SPI_TransmitReceive+0x23a>
 8005e2c:	8a7b      	ldrh	r3, [r7, #18]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	f040 80cb 	bne.w	8005fca <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d912      	bls.n	8005e64 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e42:	881a      	ldrh	r2, [r3, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4e:	1c9a      	adds	r2, r3, #2
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	3b02      	subs	r3, #2
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e62:	e0b2      	b.n	8005fca <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	330c      	adds	r3, #12
 8005e6e:	7812      	ldrb	r2, [r2, #0]
 8005e70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	3b01      	subs	r3, #1
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e8a:	e09e      	b.n	8005fca <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d134      	bne.n	8005f04 <HAL_SPI_TransmitReceive+0x30a>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d02f      	beq.n	8005f04 <HAL_SPI_TransmitReceive+0x30a>
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d12c      	bne.n	8005f04 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d912      	bls.n	8005eda <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb8:	881a      	ldrh	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec4:	1c9a      	adds	r2, r3, #2
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	3b02      	subs	r3, #2
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ed8:	e012      	b.n	8005f00 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	330c      	adds	r3, #12
 8005ee4:	7812      	ldrb	r2, [r2, #0]
 8005ee6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d148      	bne.n	8005fa4 <HAL_SPI_TransmitReceive+0x3aa>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d042      	beq.n	8005fa4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d923      	bls.n	8005f72 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68da      	ldr	r2, [r3, #12]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f34:	b292      	uxth	r2, r2
 8005f36:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3c:	1c9a      	adds	r2, r3, #2
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	3b02      	subs	r3, #2
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d81f      	bhi.n	8005fa0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f6e:	605a      	str	r2, [r3, #4]
 8005f70:	e016      	b.n	8005fa0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f103 020c 	add.w	r2, r3, #12
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	7812      	ldrb	r2, [r2, #0]
 8005f80:	b2d2      	uxtb	r2, r2
 8005f82:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	3b01      	subs	r3, #1
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005fa4:	f7fd fade 	bl	8003564 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d803      	bhi.n	8005fbc <HAL_SPI_TransmitReceive+0x3c2>
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fba:	d102      	bne.n	8005fc2 <HAL_SPI_TransmitReceive+0x3c8>
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d103      	bne.n	8005fca <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005fc8:	e01c      	b.n	8006004 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f47f af5b 	bne.w	8005e8c <HAL_SPI_TransmitReceive+0x292>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f47f af54 	bne.w	8005e8c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fe4:	69fa      	ldr	r2, [r7, #28]
 8005fe6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 faaf 	bl	800654c <SPI_EndRxTxTransaction>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d006      	beq.n	8006002 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	661a      	str	r2, [r3, #96]	; 0x60
 8006000:	e000      	b.n	8006004 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006002:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006014:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006018:	4618      	mov	r0, r3
 800601a:	3728      	adds	r7, #40	; 0x28
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b088      	sub	sp, #32
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	099b      	lsrs	r3, r3, #6
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10f      	bne.n	8006064 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00a      	beq.n	8006064 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	099b      	lsrs	r3, r3, #6
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d004      	beq.n	8006064 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	4798      	blx	r3
    return;
 8006062:	e0d7      	b.n	8006214 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	085b      	lsrs	r3, r3, #1
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00a      	beq.n	8006086 <HAL_SPI_IRQHandler+0x66>
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	09db      	lsrs	r3, r3, #7
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b00      	cmp	r3, #0
 800607a:	d004      	beq.n	8006086 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	4798      	blx	r3
    return;
 8006084:	e0c6      	b.n	8006214 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	095b      	lsrs	r3, r3, #5
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10c      	bne.n	80060ac <HAL_SPI_IRQHandler+0x8c>
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	099b      	lsrs	r3, r3, #6
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d106      	bne.n	80060ac <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	0a1b      	lsrs	r3, r3, #8
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 80b4 	beq.w	8006214 <HAL_SPI_IRQHandler+0x1f4>
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	095b      	lsrs	r3, r3, #5
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 80ad 	beq.w	8006214 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	099b      	lsrs	r3, r3, #6
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d023      	beq.n	800610e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d011      	beq.n	80060f6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d6:	f043 0204 	orr.w	r2, r3, #4
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060de:	2300      	movs	r3, #0
 80060e0:	617b      	str	r3, [r7, #20]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	617b      	str	r3, [r7, #20]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	617b      	str	r3, [r7, #20]
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	e00b      	b.n	800610e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060f6:	2300      	movs	r3, #0
 80060f8:	613b      	str	r3, [r7, #16]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	613b      	str	r3, [r7, #16]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	613b      	str	r3, [r7, #16]
 800610a:	693b      	ldr	r3, [r7, #16]
        return;
 800610c:	e082      	b.n	8006214 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	095b      	lsrs	r3, r3, #5
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d014      	beq.n	8006144 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800611e:	f043 0201 	orr.w	r2, r3, #1
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006126:	2300      	movs	r3, #0
 8006128:	60fb      	str	r3, [r7, #12]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	0a1b      	lsrs	r3, r3, #8
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00c      	beq.n	800616a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006154:	f043 0208 	orr.w	r2, r3, #8
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800615c:	2300      	movs	r3, #0
 800615e:	60bb      	str	r3, [r7, #8]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	60bb      	str	r3, [r7, #8]
 8006168:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800616e:	2b00      	cmp	r3, #0
 8006170:	d04f      	beq.n	8006212 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006180:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d104      	bne.n	800619e <HAL_SPI_IRQHandler+0x17e>
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	d034      	beq.n	8006208 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0203 	bic.w	r2, r2, #3
 80061ac:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d011      	beq.n	80061da <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ba:	4a18      	ldr	r2, [pc, #96]	; (800621c <HAL_SPI_IRQHandler+0x1fc>)
 80061bc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fd fb78 	bl	80038b8 <HAL_DMA_Abort_IT>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d005      	beq.n	80061da <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d016      	beq.n	8006210 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e6:	4a0d      	ldr	r2, [pc, #52]	; (800621c <HAL_SPI_IRQHandler+0x1fc>)
 80061e8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fd fb62 	bl	80038b8 <HAL_DMA_Abort_IT>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006206:	e003      	b.n	8006210 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f809 	bl	8006220 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800620e:	e000      	b.n	8006212 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006210:	bf00      	nop
    return;
 8006212:	bf00      	nop
  }
}
 8006214:	3720      	adds	r7, #32
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	08006235 	.word	0x08006235

08006220 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006240:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f7ff ffe5 	bl	8006220 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006256:	bf00      	nop
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
	...

08006260 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b088      	sub	sp, #32
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	603b      	str	r3, [r7, #0]
 800626c:	4613      	mov	r3, r2
 800626e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006270:	f7fd f978 	bl	8003564 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006278:	1a9b      	subs	r3, r3, r2
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	4413      	add	r3, r2
 800627e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006280:	f7fd f970 	bl	8003564 <HAL_GetTick>
 8006284:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006286:	4b39      	ldr	r3, [pc, #228]	; (800636c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	015b      	lsls	r3, r3, #5
 800628c:	0d1b      	lsrs	r3, r3, #20
 800628e:	69fa      	ldr	r2, [r7, #28]
 8006290:	fb02 f303 	mul.w	r3, r2, r3
 8006294:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006296:	e054      	b.n	8006342 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629e:	d050      	beq.n	8006342 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062a0:	f7fd f960 	bl	8003564 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	69fa      	ldr	r2, [r7, #28]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d902      	bls.n	80062b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d13d      	bne.n	8006332 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80062c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062ce:	d111      	bne.n	80062f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062d8:	d004      	beq.n	80062e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062e2:	d107      	bne.n	80062f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062fc:	d10f      	bne.n	800631e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800631c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e017      	b.n	8006362 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006338:	2300      	movs	r3, #0
 800633a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	3b01      	subs	r3, #1
 8006340:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689a      	ldr	r2, [r3, #8]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	4013      	ands	r3, r2
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	429a      	cmp	r2, r3
 8006350:	bf0c      	ite	eq
 8006352:	2301      	moveq	r3, #1
 8006354:	2300      	movne	r3, #0
 8006356:	b2db      	uxtb	r3, r3
 8006358:	461a      	mov	r2, r3
 800635a:	79fb      	ldrb	r3, [r7, #7]
 800635c:	429a      	cmp	r2, r3
 800635e:	d19b      	bne.n	8006298 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3720      	adds	r7, #32
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	20000038 	.word	0x20000038

08006370 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b08a      	sub	sp, #40	; 0x28
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
 800637c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800637e:	2300      	movs	r3, #0
 8006380:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006382:	f7fd f8ef 	bl	8003564 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638a:	1a9b      	subs	r3, r3, r2
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	4413      	add	r3, r2
 8006390:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006392:	f7fd f8e7 	bl	8003564 <HAL_GetTick>
 8006396:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	330c      	adds	r3, #12
 800639e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80063a0:	4b3d      	ldr	r3, [pc, #244]	; (8006498 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	4613      	mov	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	00da      	lsls	r2, r3, #3
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	0d1b      	lsrs	r3, r3, #20
 80063b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b2:	fb02 f303 	mul.w	r3, r2, r3
 80063b6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80063b8:	e060      	b.n	800647c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80063c0:	d107      	bne.n	80063d2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d104      	bne.n	80063d2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80063d0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d8:	d050      	beq.n	800647c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063da:	f7fd f8c3 	bl	8003564 <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d902      	bls.n	80063f0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d13d      	bne.n	800646c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80063fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006408:	d111      	bne.n	800642e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006412:	d004      	beq.n	800641e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800641c:	d107      	bne.n	800642e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800642c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006436:	d10f      	bne.n	8006458 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006456:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e010      	b.n	800648e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	3b01      	subs	r3, #1
 800647a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689a      	ldr	r2, [r3, #8]
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	4013      	ands	r3, r2
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	429a      	cmp	r2, r3
 800648a:	d196      	bne.n	80063ba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3728      	adds	r7, #40	; 0x28
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20000038 	.word	0x20000038

0800649c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af02      	add	r7, sp, #8
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064b0:	d111      	bne.n	80064d6 <SPI_EndRxTransaction+0x3a>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064ba:	d004      	beq.n	80064c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064c4:	d107      	bne.n	80064d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064d4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2200      	movs	r2, #0
 80064de:	2180      	movs	r1, #128	; 0x80
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f7ff febd 	bl	8006260 <SPI_WaitFlagStateUntilTimeout>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d007      	beq.n	80064fc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064f0:	f043 0220 	orr.w	r2, r3, #32
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e023      	b.n	8006544 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006504:	d11d      	bne.n	8006542 <SPI_EndRxTransaction+0xa6>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800650e:	d004      	beq.n	800651a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006518:	d113      	bne.n	8006542 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2200      	movs	r2, #0
 8006522:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f7ff ff22 	bl	8006370 <SPI_WaitFifoStateUntilTimeout>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d007      	beq.n	8006542 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006536:	f043 0220 	orr.w	r2, r3, #32
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e000      	b.n	8006544 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af02      	add	r7, sp, #8
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2200      	movs	r2, #0
 8006560:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f7ff ff03 	bl	8006370 <SPI_WaitFifoStateUntilTimeout>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d007      	beq.n	8006580 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006574:	f043 0220 	orr.w	r2, r3, #32
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e027      	b.n	80065d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2200      	movs	r2, #0
 8006588:	2180      	movs	r1, #128	; 0x80
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f7ff fe68 	bl	8006260 <SPI_WaitFlagStateUntilTimeout>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d007      	beq.n	80065a6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800659a:	f043 0220 	orr.w	r2, r3, #32
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e014      	b.n	80065d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f7ff fedc 	bl	8006370 <SPI_WaitFifoStateUntilTimeout>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d007      	beq.n	80065ce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065c2:	f043 0220 	orr.w	r2, r3, #32
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e000      	b.n	80065d0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e049      	b.n	800667e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d106      	bne.n	8006604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7fc fd0e 	bl	8003020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2202      	movs	r2, #2
 8006608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	3304      	adds	r3, #4
 8006614:	4619      	mov	r1, r3
 8006616:	4610      	mov	r0, r2
 8006618:	f000 fc40 	bl	8006e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
	...

08006688 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b01      	cmp	r3, #1
 800669a:	d001      	beq.n	80066a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e036      	b.n	800670e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2202      	movs	r2, #2
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68da      	ldr	r2, [r3, #12]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f042 0201 	orr.w	r2, r2, #1
 80066b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a17      	ldr	r2, [pc, #92]	; (800671c <HAL_TIM_Base_Start_IT+0x94>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d004      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x44>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ca:	d115      	bne.n	80066f8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689a      	ldr	r2, [r3, #8]
 80066d2:	4b13      	ldr	r3, [pc, #76]	; (8006720 <HAL_TIM_Base_Start_IT+0x98>)
 80066d4:	4013      	ands	r3, r2
 80066d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b06      	cmp	r3, #6
 80066dc:	d015      	beq.n	800670a <HAL_TIM_Base_Start_IT+0x82>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e4:	d011      	beq.n	800670a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f042 0201 	orr.w	r2, r2, #1
 80066f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066f6:	e008      	b.n	800670a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f042 0201 	orr.w	r2, r2, #1
 8006706:	601a      	str	r2, [r3, #0]
 8006708:	e000      	b.n	800670c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800670a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	40012c00 	.word	0x40012c00
 8006720:	00010007 	.word	0x00010007

08006724 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68da      	ldr	r2, [r3, #12]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 0201 	bic.w	r2, r2, #1
 800673a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6a1a      	ldr	r2, [r3, #32]
 8006742:	f241 1311 	movw	r3, #4369	; 0x1111
 8006746:	4013      	ands	r3, r2
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10f      	bne.n	800676c <HAL_TIM_Base_Stop_IT+0x48>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6a1a      	ldr	r2, [r3, #32]
 8006752:	f240 4344 	movw	r3, #1092	; 0x444
 8006756:	4013      	ands	r3, r2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d107      	bne.n	800676c <HAL_TIM_Base_Stop_IT+0x48>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f022 0201 	bic.w	r2, r2, #1
 800676a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b082      	sub	sp, #8
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d101      	bne.n	8006794 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e049      	b.n	8006828 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	d106      	bne.n	80067ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7fc fc05 	bl	8002fb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2202      	movs	r2, #2
 80067b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	3304      	adds	r3, #4
 80067be:	4619      	mov	r1, r3
 80067c0:	4610      	mov	r0, r2
 80067c2:	f000 fb6b 	bl	8006e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d109      	bne.n	8006854 <HAL_TIM_PWM_Start+0x24>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b01      	cmp	r3, #1
 800684a:	bf14      	ite	ne
 800684c:	2301      	movne	r3, #1
 800684e:	2300      	moveq	r3, #0
 8006850:	b2db      	uxtb	r3, r3
 8006852:	e03c      	b.n	80068ce <HAL_TIM_PWM_Start+0x9e>
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	2b04      	cmp	r3, #4
 8006858:	d109      	bne.n	800686e <HAL_TIM_PWM_Start+0x3e>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b01      	cmp	r3, #1
 8006864:	bf14      	ite	ne
 8006866:	2301      	movne	r3, #1
 8006868:	2300      	moveq	r3, #0
 800686a:	b2db      	uxtb	r3, r3
 800686c:	e02f      	b.n	80068ce <HAL_TIM_PWM_Start+0x9e>
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b08      	cmp	r3, #8
 8006872:	d109      	bne.n	8006888 <HAL_TIM_PWM_Start+0x58>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b01      	cmp	r3, #1
 800687e:	bf14      	ite	ne
 8006880:	2301      	movne	r3, #1
 8006882:	2300      	moveq	r3, #0
 8006884:	b2db      	uxtb	r3, r3
 8006886:	e022      	b.n	80068ce <HAL_TIM_PWM_Start+0x9e>
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2b0c      	cmp	r3, #12
 800688c:	d109      	bne.n	80068a2 <HAL_TIM_PWM_Start+0x72>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b01      	cmp	r3, #1
 8006898:	bf14      	ite	ne
 800689a:	2301      	movne	r3, #1
 800689c:	2300      	moveq	r3, #0
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	e015      	b.n	80068ce <HAL_TIM_PWM_Start+0x9e>
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b10      	cmp	r3, #16
 80068a6:	d109      	bne.n	80068bc <HAL_TIM_PWM_Start+0x8c>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	bf14      	ite	ne
 80068b4:	2301      	movne	r3, #1
 80068b6:	2300      	moveq	r3, #0
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	e008      	b.n	80068ce <HAL_TIM_PWM_Start+0x9e>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	bf14      	ite	ne
 80068c8:	2301      	movne	r3, #1
 80068ca:	2300      	moveq	r3, #0
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e079      	b.n	80069ca <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d104      	bne.n	80068e6 <HAL_TIM_PWM_Start+0xb6>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2202      	movs	r2, #2
 80068e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068e4:	e023      	b.n	800692e <HAL_TIM_PWM_Start+0xfe>
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b04      	cmp	r3, #4
 80068ea:	d104      	bne.n	80068f6 <HAL_TIM_PWM_Start+0xc6>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2202      	movs	r2, #2
 80068f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068f4:	e01b      	b.n	800692e <HAL_TIM_PWM_Start+0xfe>
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	d104      	bne.n	8006906 <HAL_TIM_PWM_Start+0xd6>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006904:	e013      	b.n	800692e <HAL_TIM_PWM_Start+0xfe>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b0c      	cmp	r3, #12
 800690a:	d104      	bne.n	8006916 <HAL_TIM_PWM_Start+0xe6>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006914:	e00b      	b.n	800692e <HAL_TIM_PWM_Start+0xfe>
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	2b10      	cmp	r3, #16
 800691a:	d104      	bne.n	8006926 <HAL_TIM_PWM_Start+0xf6>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2202      	movs	r2, #2
 8006920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006924:	e003      	b.n	800692e <HAL_TIM_PWM_Start+0xfe>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2202      	movs	r2, #2
 800692a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2201      	movs	r2, #1
 8006934:	6839      	ldr	r1, [r7, #0]
 8006936:	4618      	mov	r0, r3
 8006938:	f000 fd92 	bl	8007460 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a24      	ldr	r2, [pc, #144]	; (80069d4 <HAL_TIM_PWM_Start+0x1a4>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d009      	beq.n	800695a <HAL_TIM_PWM_Start+0x12a>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a23      	ldr	r2, [pc, #140]	; (80069d8 <HAL_TIM_PWM_Start+0x1a8>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d004      	beq.n	800695a <HAL_TIM_PWM_Start+0x12a>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a21      	ldr	r2, [pc, #132]	; (80069dc <HAL_TIM_PWM_Start+0x1ac>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d101      	bne.n	800695e <HAL_TIM_PWM_Start+0x12e>
 800695a:	2301      	movs	r3, #1
 800695c:	e000      	b.n	8006960 <HAL_TIM_PWM_Start+0x130>
 800695e:	2300      	movs	r3, #0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d007      	beq.n	8006974 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006972:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a16      	ldr	r2, [pc, #88]	; (80069d4 <HAL_TIM_PWM_Start+0x1a4>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d004      	beq.n	8006988 <HAL_TIM_PWM_Start+0x158>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006986:	d115      	bne.n	80069b4 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689a      	ldr	r2, [r3, #8]
 800698e:	4b14      	ldr	r3, [pc, #80]	; (80069e0 <HAL_TIM_PWM_Start+0x1b0>)
 8006990:	4013      	ands	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2b06      	cmp	r3, #6
 8006998:	d015      	beq.n	80069c6 <HAL_TIM_PWM_Start+0x196>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069a0:	d011      	beq.n	80069c6 <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f042 0201 	orr.w	r2, r2, #1
 80069b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069b2:	e008      	b.n	80069c6 <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f042 0201 	orr.w	r2, r2, #1
 80069c2:	601a      	str	r2, [r3, #0]
 80069c4:	e000      	b.n	80069c8 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	40012c00 	.word	0x40012c00
 80069d8:	40014400 	.word	0x40014400
 80069dc:	40014800 	.word	0x40014800
 80069e0:	00010007 	.word	0x00010007

080069e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d122      	bne.n	8006a40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d11b      	bne.n	8006a40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f06f 0202 	mvn.w	r2, #2
 8006a10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	f003 0303 	and.w	r3, r3, #3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fa1a 	bl	8006e60 <HAL_TIM_IC_CaptureCallback>
 8006a2c:	e005      	b.n	8006a3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fa0c 	bl	8006e4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fa1d 	bl	8006e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	f003 0304 	and.w	r3, r3, #4
 8006a4a:	2b04      	cmp	r3, #4
 8006a4c:	d122      	bne.n	8006a94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b04      	cmp	r3, #4
 8006a5a:	d11b      	bne.n	8006a94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f06f 0204 	mvn.w	r2, #4
 8006a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2202      	movs	r2, #2
 8006a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d003      	beq.n	8006a82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f9f0 	bl	8006e60 <HAL_TIM_IC_CaptureCallback>
 8006a80:	e005      	b.n	8006a8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f9e2 	bl	8006e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 f9f3 	bl	8006e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	f003 0308 	and.w	r3, r3, #8
 8006a9e:	2b08      	cmp	r3, #8
 8006aa0:	d122      	bne.n	8006ae8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	f003 0308 	and.w	r3, r3, #8
 8006aac:	2b08      	cmp	r3, #8
 8006aae:	d11b      	bne.n	8006ae8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f06f 0208 	mvn.w	r2, #8
 8006ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2204      	movs	r2, #4
 8006abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	f003 0303 	and.w	r3, r3, #3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f9c6 	bl	8006e60 <HAL_TIM_IC_CaptureCallback>
 8006ad4:	e005      	b.n	8006ae2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f9b8 	bl	8006e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 f9c9 	bl	8006e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	f003 0310 	and.w	r3, r3, #16
 8006af2:	2b10      	cmp	r3, #16
 8006af4:	d122      	bne.n	8006b3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f003 0310 	and.w	r3, r3, #16
 8006b00:	2b10      	cmp	r3, #16
 8006b02:	d11b      	bne.n	8006b3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f06f 0210 	mvn.w	r2, #16
 8006b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2208      	movs	r2, #8
 8006b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	69db      	ldr	r3, [r3, #28]
 8006b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d003      	beq.n	8006b2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f99c 	bl	8006e60 <HAL_TIM_IC_CaptureCallback>
 8006b28:	e005      	b.n	8006b36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f98e 	bl	8006e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f99f 	bl	8006e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d10e      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d107      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f06f 0201 	mvn.w	r2, #1
 8006b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7fb fb06 	bl	8002174 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b72:	2b80      	cmp	r3, #128	; 0x80
 8006b74:	d10e      	bne.n	8006b94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b80:	2b80      	cmp	r3, #128	; 0x80
 8006b82:	d107      	bne.n	8006b94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fd86 	bl	80076a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ba2:	d10e      	bne.n	8006bc2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bae:	2b80      	cmp	r3, #128	; 0x80
 8006bb0:	d107      	bne.n	8006bc2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fd79 	bl	80076b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bcc:	2b40      	cmp	r3, #64	; 0x40
 8006bce:	d10e      	bne.n	8006bee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bda:	2b40      	cmp	r3, #64	; 0x40
 8006bdc:	d107      	bne.n	8006bee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f94d 	bl	8006e88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	f003 0320 	and.w	r3, r3, #32
 8006bf8:	2b20      	cmp	r3, #32
 8006bfa:	d10e      	bne.n	8006c1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f003 0320 	and.w	r3, r3, #32
 8006c06:	2b20      	cmp	r3, #32
 8006c08:	d107      	bne.n	8006c1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f06f 0220 	mvn.w	r2, #32
 8006c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 fd39 	bl	800768c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c1a:	bf00      	nop
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
	...

08006c24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d101      	bne.n	8006c42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	e0ff      	b.n	8006e42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b14      	cmp	r3, #20
 8006c4e:	f200 80f0 	bhi.w	8006e32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006c52:	a201      	add	r2, pc, #4	; (adr r2, 8006c58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c58:	08006cad 	.word	0x08006cad
 8006c5c:	08006e33 	.word	0x08006e33
 8006c60:	08006e33 	.word	0x08006e33
 8006c64:	08006e33 	.word	0x08006e33
 8006c68:	08006ced 	.word	0x08006ced
 8006c6c:	08006e33 	.word	0x08006e33
 8006c70:	08006e33 	.word	0x08006e33
 8006c74:	08006e33 	.word	0x08006e33
 8006c78:	08006d2f 	.word	0x08006d2f
 8006c7c:	08006e33 	.word	0x08006e33
 8006c80:	08006e33 	.word	0x08006e33
 8006c84:	08006e33 	.word	0x08006e33
 8006c88:	08006d6f 	.word	0x08006d6f
 8006c8c:	08006e33 	.word	0x08006e33
 8006c90:	08006e33 	.word	0x08006e33
 8006c94:	08006e33 	.word	0x08006e33
 8006c98:	08006db1 	.word	0x08006db1
 8006c9c:	08006e33 	.word	0x08006e33
 8006ca0:	08006e33 	.word	0x08006e33
 8006ca4:	08006e33 	.word	0x08006e33
 8006ca8:	08006df1 	.word	0x08006df1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68b9      	ldr	r1, [r7, #8]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 f956 	bl	8006f64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	699a      	ldr	r2, [r3, #24]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f042 0208 	orr.w	r2, r2, #8
 8006cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	699a      	ldr	r2, [r3, #24]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f022 0204 	bic.w	r2, r2, #4
 8006cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6999      	ldr	r1, [r3, #24]
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	691a      	ldr	r2, [r3, #16]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	619a      	str	r2, [r3, #24]
      break;
 8006cea:	e0a5      	b.n	8006e38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68b9      	ldr	r1, [r7, #8]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 f9b2 	bl	800705c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	699a      	ldr	r2, [r3, #24]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	699a      	ldr	r2, [r3, #24]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6999      	ldr	r1, [r3, #24]
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	021a      	lsls	r2, r3, #8
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	619a      	str	r2, [r3, #24]
      break;
 8006d2c:	e084      	b.n	8006e38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68b9      	ldr	r1, [r7, #8]
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 fa0b 	bl	8007150 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	69da      	ldr	r2, [r3, #28]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f042 0208 	orr.w	r2, r2, #8
 8006d48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	69da      	ldr	r2, [r3, #28]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f022 0204 	bic.w	r2, r2, #4
 8006d58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	69d9      	ldr	r1, [r3, #28]
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	691a      	ldr	r2, [r3, #16]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	61da      	str	r2, [r3, #28]
      break;
 8006d6c:	e064      	b.n	8006e38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68b9      	ldr	r1, [r7, #8]
 8006d74:	4618      	mov	r0, r3
 8006d76:	f000 fa63 	bl	8007240 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	69da      	ldr	r2, [r3, #28]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	69da      	ldr	r2, [r3, #28]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	69d9      	ldr	r1, [r3, #28]
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	021a      	lsls	r2, r3, #8
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	430a      	orrs	r2, r1
 8006dac:	61da      	str	r2, [r3, #28]
      break;
 8006dae:	e043      	b.n	8006e38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68b9      	ldr	r1, [r7, #8]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 faa0 	bl	80072fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f042 0208 	orr.w	r2, r2, #8
 8006dca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f022 0204 	bic.w	r2, r2, #4
 8006dda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	691a      	ldr	r2, [r3, #16]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	430a      	orrs	r2, r1
 8006dec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006dee:	e023      	b.n	8006e38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68b9      	ldr	r1, [r7, #8]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 fad8 	bl	80073ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	021a      	lsls	r2, r3, #8
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e30:	e002      	b.n	8006e38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	75fb      	strb	r3, [r7, #23]
      break;
 8006e36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3718      	adds	r7, #24
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop

08006e4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a2a      	ldr	r2, [pc, #168]	; (8006f58 <TIM_Base_SetConfig+0xbc>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d003      	beq.n	8006ebc <TIM_Base_SetConfig+0x20>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eba:	d108      	bne.n	8006ece <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a21      	ldr	r2, [pc, #132]	; (8006f58 <TIM_Base_SetConfig+0xbc>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d00b      	beq.n	8006eee <TIM_Base_SetConfig+0x52>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006edc:	d007      	beq.n	8006eee <TIM_Base_SetConfig+0x52>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a1e      	ldr	r2, [pc, #120]	; (8006f5c <TIM_Base_SetConfig+0xc0>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d003      	beq.n	8006eee <TIM_Base_SetConfig+0x52>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a1d      	ldr	r2, [pc, #116]	; (8006f60 <TIM_Base_SetConfig+0xc4>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d108      	bne.n	8006f00 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	689a      	ldr	r2, [r3, #8]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a0c      	ldr	r2, [pc, #48]	; (8006f58 <TIM_Base_SetConfig+0xbc>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d007      	beq.n	8006f3c <TIM_Base_SetConfig+0xa0>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a0b      	ldr	r2, [pc, #44]	; (8006f5c <TIM_Base_SetConfig+0xc0>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d003      	beq.n	8006f3c <TIM_Base_SetConfig+0xa0>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a0a      	ldr	r2, [pc, #40]	; (8006f60 <TIM_Base_SetConfig+0xc4>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d103      	bne.n	8006f44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	691a      	ldr	r2, [r3, #16]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	615a      	str	r2, [r3, #20]
}
 8006f4a:	bf00      	nop
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	40012c00 	.word	0x40012c00
 8006f5c:	40014400 	.word	0x40014400
 8006f60:	40014800 	.word	0x40014800

08006f64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b087      	sub	sp, #28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	f023 0201 	bic.w	r2, r3, #1
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f023 0303 	bic.w	r3, r3, #3
 8006f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f023 0302 	bic.w	r3, r3, #2
 8006fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a24      	ldr	r2, [pc, #144]	; (8007050 <TIM_OC1_SetConfig+0xec>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d007      	beq.n	8006fd4 <TIM_OC1_SetConfig+0x70>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a23      	ldr	r2, [pc, #140]	; (8007054 <TIM_OC1_SetConfig+0xf0>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d003      	beq.n	8006fd4 <TIM_OC1_SetConfig+0x70>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a22      	ldr	r2, [pc, #136]	; (8007058 <TIM_OC1_SetConfig+0xf4>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d10c      	bne.n	8006fee <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	f023 0308 	bic.w	r3, r3, #8
 8006fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	f023 0304 	bic.w	r3, r3, #4
 8006fec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a17      	ldr	r2, [pc, #92]	; (8007050 <TIM_OC1_SetConfig+0xec>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d007      	beq.n	8007006 <TIM_OC1_SetConfig+0xa2>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a17      	ldr	r2, [pc, #92]	; (8007058 <TIM_OC1_SetConfig+0xf4>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d003      	beq.n	8007006 <TIM_OC1_SetConfig+0xa2>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a14      	ldr	r2, [pc, #80]	; (8007054 <TIM_OC1_SetConfig+0xf0>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d111      	bne.n	800702a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800700c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	4313      	orrs	r3, r2
 800701e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	4313      	orrs	r3, r2
 8007028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	621a      	str	r2, [r3, #32]
}
 8007044:	bf00      	nop
 8007046:	371c      	adds	r7, #28
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	40012c00 	.word	0x40012c00
 8007054:	40014800 	.word	0x40014800
 8007058:	40014400 	.word	0x40014400

0800705c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800705c:	b480      	push	{r7}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	f023 0210 	bic.w	r2, r3, #16
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800708a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800708e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	021b      	lsls	r3, r3, #8
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	f023 0320 	bic.w	r3, r3, #32
 80070aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	011b      	lsls	r3, r3, #4
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a22      	ldr	r2, [pc, #136]	; (8007144 <TIM_OC2_SetConfig+0xe8>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d10d      	bne.n	80070dc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	011b      	lsls	r3, r3, #4
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a19      	ldr	r2, [pc, #100]	; (8007144 <TIM_OC2_SetConfig+0xe8>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d007      	beq.n	80070f4 <TIM_OC2_SetConfig+0x98>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a18      	ldr	r2, [pc, #96]	; (8007148 <TIM_OC2_SetConfig+0xec>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d003      	beq.n	80070f4 <TIM_OC2_SetConfig+0x98>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a17      	ldr	r2, [pc, #92]	; (800714c <TIM_OC2_SetConfig+0xf0>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d113      	bne.n	800711c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007102:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	4313      	orrs	r3, r2
 800710e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	4313      	orrs	r3, r2
 800711a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	621a      	str	r2, [r3, #32]
}
 8007136:	bf00      	nop
 8007138:	371c      	adds	r7, #28
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	40012c00 	.word	0x40012c00
 8007148:	40014400 	.word	0x40014400
 800714c:	40014800 	.word	0x40014800

08007150 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007150:	b480      	push	{r7}
 8007152:	b087      	sub	sp, #28
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800717e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f023 0303 	bic.w	r3, r3, #3
 800718a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	4313      	orrs	r3, r2
 8007194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800719c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	021b      	lsls	r3, r3, #8
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a21      	ldr	r2, [pc, #132]	; (8007234 <TIM_OC3_SetConfig+0xe4>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d10d      	bne.n	80071ce <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	021b      	lsls	r3, r3, #8
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a18      	ldr	r2, [pc, #96]	; (8007234 <TIM_OC3_SetConfig+0xe4>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d007      	beq.n	80071e6 <TIM_OC3_SetConfig+0x96>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a17      	ldr	r2, [pc, #92]	; (8007238 <TIM_OC3_SetConfig+0xe8>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d003      	beq.n	80071e6 <TIM_OC3_SetConfig+0x96>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a16      	ldr	r2, [pc, #88]	; (800723c <TIM_OC3_SetConfig+0xec>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d113      	bne.n	800720e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	011b      	lsls	r3, r3, #4
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	4313      	orrs	r3, r2
 8007200:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	011b      	lsls	r3, r3, #4
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	4313      	orrs	r3, r2
 800720c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	685a      	ldr	r2, [r3, #4]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	621a      	str	r2, [r3, #32]
}
 8007228:	bf00      	nop
 800722a:	371c      	adds	r7, #28
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr
 8007234:	40012c00 	.word	0x40012c00
 8007238:	40014400 	.word	0x40014400
 800723c:	40014800 	.word	0x40014800

08007240 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007240:	b480      	push	{r7}
 8007242:	b087      	sub	sp, #28
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800726e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800727a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	021b      	lsls	r3, r3, #8
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	4313      	orrs	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800728e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	031b      	lsls	r3, r3, #12
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	4313      	orrs	r3, r2
 800729a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a14      	ldr	r2, [pc, #80]	; (80072f0 <TIM_OC4_SetConfig+0xb0>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d007      	beq.n	80072b4 <TIM_OC4_SetConfig+0x74>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a13      	ldr	r2, [pc, #76]	; (80072f4 <TIM_OC4_SetConfig+0xb4>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d003      	beq.n	80072b4 <TIM_OC4_SetConfig+0x74>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a12      	ldr	r2, [pc, #72]	; (80072f8 <TIM_OC4_SetConfig+0xb8>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d109      	bne.n	80072c8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	695b      	ldr	r3, [r3, #20]
 80072c0:	019b      	lsls	r3, r3, #6
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	685a      	ldr	r2, [r3, #4]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	621a      	str	r2, [r3, #32]
}
 80072e2:	bf00      	nop
 80072e4:	371c      	adds	r7, #28
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	40012c00 	.word	0x40012c00
 80072f4:	40014400 	.word	0x40014400
 80072f8:	40014800 	.word	0x40014800

080072fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b087      	sub	sp, #28
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800732a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800732e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	4313      	orrs	r3, r2
 8007338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007340:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	041b      	lsls	r3, r3, #16
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	4313      	orrs	r3, r2
 800734c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a13      	ldr	r2, [pc, #76]	; (80073a0 <TIM_OC5_SetConfig+0xa4>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d007      	beq.n	8007366 <TIM_OC5_SetConfig+0x6a>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a12      	ldr	r2, [pc, #72]	; (80073a4 <TIM_OC5_SetConfig+0xa8>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d003      	beq.n	8007366 <TIM_OC5_SetConfig+0x6a>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a11      	ldr	r2, [pc, #68]	; (80073a8 <TIM_OC5_SetConfig+0xac>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d109      	bne.n	800737a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800736c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	021b      	lsls	r3, r3, #8
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	4313      	orrs	r3, r2
 8007378:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	685a      	ldr	r2, [r3, #4]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	621a      	str	r2, [r3, #32]
}
 8007394:	bf00      	nop
 8007396:	371c      	adds	r7, #28
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	40012c00 	.word	0x40012c00
 80073a4:	40014400 	.word	0x40014400
 80073a8:	40014800 	.word	0x40014800

080073ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	021b      	lsls	r3, r3, #8
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	051b      	lsls	r3, r3, #20
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a14      	ldr	r2, [pc, #80]	; (8007454 <TIM_OC6_SetConfig+0xa8>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d007      	beq.n	8007418 <TIM_OC6_SetConfig+0x6c>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a13      	ldr	r2, [pc, #76]	; (8007458 <TIM_OC6_SetConfig+0xac>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d003      	beq.n	8007418 <TIM_OC6_SetConfig+0x6c>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a12      	ldr	r2, [pc, #72]	; (800745c <TIM_OC6_SetConfig+0xb0>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d109      	bne.n	800742c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800741e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	695b      	ldr	r3, [r3, #20]
 8007424:	029b      	lsls	r3, r3, #10
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	4313      	orrs	r3, r2
 800742a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	697a      	ldr	r2, [r7, #20]
 8007430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	621a      	str	r2, [r3, #32]
}
 8007446:	bf00      	nop
 8007448:	371c      	adds	r7, #28
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	40012c00 	.word	0x40012c00
 8007458:	40014400 	.word	0x40014400
 800745c:	40014800 	.word	0x40014800

08007460 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007460:	b480      	push	{r7}
 8007462:	b087      	sub	sp, #28
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	f003 031f 	and.w	r3, r3, #31
 8007472:	2201      	movs	r2, #1
 8007474:	fa02 f303 	lsl.w	r3, r2, r3
 8007478:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6a1a      	ldr	r2, [r3, #32]
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	43db      	mvns	r3, r3
 8007482:	401a      	ands	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6a1a      	ldr	r2, [r3, #32]
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	f003 031f 	and.w	r3, r3, #31
 8007492:	6879      	ldr	r1, [r7, #4]
 8007494:	fa01 f303 	lsl.w	r3, r1, r3
 8007498:	431a      	orrs	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	621a      	str	r2, [r3, #32]
}
 800749e:	bf00      	nop
 80074a0:	371c      	adds	r7, #28
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
	...

080074ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d101      	bne.n	80074c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074c0:	2302      	movs	r3, #2
 80074c2:	e04a      	b.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2202      	movs	r2, #2
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a1f      	ldr	r2, [pc, #124]	; (8007568 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d108      	bne.n	8007500 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80074f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007506:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	4313      	orrs	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a12      	ldr	r2, [pc, #72]	; (8007568 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d004      	beq.n	800752e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800752c:	d10c      	bne.n	8007548 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007534:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	4313      	orrs	r3, r2
 800753e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3714      	adds	r7, #20
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	40012c00 	.word	0x40012c00

0800756c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007576:	2300      	movs	r3, #0
 8007578:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007580:	2b01      	cmp	r3, #1
 8007582:	d101      	bne.n	8007588 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007584:	2302      	movs	r3, #2
 8007586:	e078      	b.n	800767a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	4313      	orrs	r3, r2
 800759c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	695b      	ldr	r3, [r3, #20]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ee:	4313      	orrs	r3, r2
 80075f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	041b      	lsls	r3, r3, #16
 80075fe:	4313      	orrs	r3, r2
 8007600:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a20      	ldr	r2, [pc, #128]	; (8007688 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d106      	bne.n	800761a <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	4313      	orrs	r3, r2
 8007618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a1a      	ldr	r2, [pc, #104]	; (8007688 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d121      	bne.n	8007668 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762e:	051b      	lsls	r3, r3, #20
 8007630:	4313      	orrs	r3, r2
 8007632:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	4313      	orrs	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a0c      	ldr	r2, [pc, #48]	; (8007688 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d106      	bne.n	8007668 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007664:	4313      	orrs	r3, r2
 8007666:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3714      	adds	r7, #20
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	40012c00 	.word	0x40012c00

0800768c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <LL_RCC_GetUSARTClockSource>:
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80076d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4013      	ands	r3, r2
}
 80076dc:	4618      	mov	r0, r3
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <LL_RCC_GetLPUARTClockSource>:
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80076f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4013      	ands	r3, r2
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d101      	bne.n	800771a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e042      	b.n	80077a0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007720:	2b00      	cmp	r3, #0
 8007722:	d106      	bne.n	8007732 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f7fb fb73 	bl	8002e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2224      	movs	r2, #36	; 0x24
 8007736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f022 0201 	bic.w	r2, r2, #1
 8007748:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fd1a 	bl	8008184 <UART_SetConfig>
 8007750:	4603      	mov	r3, r0
 8007752:	2b01      	cmp	r3, #1
 8007754:	d101      	bne.n	800775a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e022      	b.n	80077a0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775e:	2b00      	cmp	r3, #0
 8007760:	d002      	beq.n	8007768 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 ff36 	bl	80085d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007776:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689a      	ldr	r2, [r3, #8]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007786:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f042 0201 	orr.w	r2, r2, #1
 8007796:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 ffbd 	bl	8008718 <UART_CheckIdleState>
 800779e:	4603      	mov	r3, r0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b08a      	sub	sp, #40	; 0x28
 80077ac:	af02      	add	r7, sp, #8
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	603b      	str	r3, [r7, #0]
 80077b4:	4613      	mov	r3, r2
 80077b6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077be:	2b20      	cmp	r3, #32
 80077c0:	f040 8083 	bne.w	80078ca <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d002      	beq.n	80077d0 <HAL_UART_Transmit+0x28>
 80077ca:	88fb      	ldrh	r3, [r7, #6]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e07b      	b.n	80078cc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d101      	bne.n	80077e2 <HAL_UART_Transmit+0x3a>
 80077de:	2302      	movs	r3, #2
 80077e0:	e074      	b.n	80078cc <HAL_UART_Transmit+0x124>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2221      	movs	r2, #33	; 0x21
 80077f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077fa:	f7fb feb3 	bl	8003564 <HAL_GetTick>
 80077fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	88fa      	ldrh	r2, [r7, #6]
 8007804:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	88fa      	ldrh	r2, [r7, #6]
 800780c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007818:	d108      	bne.n	800782c <HAL_UART_Transmit+0x84>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d104      	bne.n	800782c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007822:	2300      	movs	r3, #0
 8007824:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	61bb      	str	r3, [r7, #24]
 800782a:	e003      	b.n	8007834 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007830:	2300      	movs	r3, #0
 8007832:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800783c:	e02c      	b.n	8007898 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	2200      	movs	r2, #0
 8007846:	2180      	movs	r1, #128	; 0x80
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f000 ffb0 	bl	80087ae <UART_WaitOnFlagUntilTimeout>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e039      	b.n	80078cc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10b      	bne.n	8007876 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	881b      	ldrh	r3, [r3, #0]
 8007862:	461a      	mov	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800786c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	3302      	adds	r3, #2
 8007872:	61bb      	str	r3, [r7, #24]
 8007874:	e007      	b.n	8007886 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	781a      	ldrb	r2, [r3, #0]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	3301      	adds	r3, #1
 8007884:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800788c:	b29b      	uxth	r3, r3
 800788e:	3b01      	subs	r3, #1
 8007890:	b29a      	uxth	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800789e:	b29b      	uxth	r3, r3
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1cc      	bne.n	800783e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	2200      	movs	r2, #0
 80078ac:	2140      	movs	r1, #64	; 0x40
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f000 ff7d 	bl	80087ae <UART_WaitOnFlagUntilTimeout>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d001      	beq.n	80078be <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e006      	b.n	80078cc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2220      	movs	r2, #32
 80078c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80078c6:	2300      	movs	r3, #0
 80078c8:	e000      	b.n	80078cc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80078ca:	2302      	movs	r3, #2
  }
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3720      	adds	r7, #32
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b08a      	sub	sp, #40	; 0x28
 80078d8:	af02      	add	r7, sp, #8
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	603b      	str	r3, [r7, #0]
 80078e0:	4613      	mov	r3, r2
 80078e2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ea:	2b20      	cmp	r3, #32
 80078ec:	f040 80c0 	bne.w	8007a70 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d002      	beq.n	80078fc <HAL_UART_Receive+0x28>
 80078f6:	88fb      	ldrh	r3, [r7, #6]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d101      	bne.n	8007900 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e0b8      	b.n	8007a72 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007906:	2b01      	cmp	r3, #1
 8007908:	d101      	bne.n	800790e <HAL_UART_Receive+0x3a>
 800790a:	2302      	movs	r3, #2
 800790c:	e0b1      	b.n	8007a72 <HAL_UART_Receive+0x19e>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2222      	movs	r2, #34	; 0x22
 8007922:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800792c:	f7fb fe1a 	bl	8003564 <HAL_GetTick>
 8007930:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	88fa      	ldrh	r2, [r7, #6]
 8007936:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	88fa      	ldrh	r2, [r7, #6]
 800793e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800794a:	d10e      	bne.n	800796a <HAL_UART_Receive+0x96>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d105      	bne.n	8007960 <HAL_UART_Receive+0x8c>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f240 12ff 	movw	r2, #511	; 0x1ff
 800795a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800795e:	e02d      	b.n	80079bc <HAL_UART_Receive+0xe8>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	22ff      	movs	r2, #255	; 0xff
 8007964:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007968:	e028      	b.n	80079bc <HAL_UART_Receive+0xe8>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10d      	bne.n	800798e <HAL_UART_Receive+0xba>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d104      	bne.n	8007984 <HAL_UART_Receive+0xb0>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	22ff      	movs	r2, #255	; 0xff
 800797e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007982:	e01b      	b.n	80079bc <HAL_UART_Receive+0xe8>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	227f      	movs	r2, #127	; 0x7f
 8007988:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800798c:	e016      	b.n	80079bc <HAL_UART_Receive+0xe8>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007996:	d10d      	bne.n	80079b4 <HAL_UART_Receive+0xe0>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d104      	bne.n	80079aa <HAL_UART_Receive+0xd6>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	227f      	movs	r2, #127	; 0x7f
 80079a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80079a8:	e008      	b.n	80079bc <HAL_UART_Receive+0xe8>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	223f      	movs	r2, #63	; 0x3f
 80079ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80079b2:	e003      	b.n	80079bc <HAL_UART_Receive+0xe8>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80079c2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079cc:	d108      	bne.n	80079e0 <HAL_UART_Receive+0x10c>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d104      	bne.n	80079e0 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80079d6:	2300      	movs	r3, #0
 80079d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	61bb      	str	r3, [r7, #24]
 80079de:	e003      	b.n	80079e8 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079e4:	2300      	movs	r3, #0
 80079e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80079f0:	e032      	b.n	8007a58 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	9300      	str	r3, [sp, #0]
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	2200      	movs	r2, #0
 80079fa:	2120      	movs	r1, #32
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f000 fed6 	bl	80087ae <UART_WaitOnFlagUntilTimeout>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e032      	b.n	8007a72 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10c      	bne.n	8007a2c <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	8a7b      	ldrh	r3, [r7, #18]
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	3302      	adds	r3, #2
 8007a28:	61bb      	str	r3, [r7, #24]
 8007a2a:	e00c      	b.n	8007a46 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a32:	b2da      	uxtb	r2, r3
 8007a34:	8a7b      	ldrh	r3, [r7, #18]
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	4013      	ands	r3, r2
 8007a3a:	b2da      	uxtb	r2, r3
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	3301      	adds	r3, #1
 8007a44:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1c6      	bne.n	80079f2 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2220      	movs	r2, #32
 8007a68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	e000      	b.n	8007a72 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8007a70:	2302      	movs	r3, #2
  }
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3720      	adds	r7, #32
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
	...

08007a7c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b08a      	sub	sp, #40	; 0x28
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	4613      	mov	r3, r2
 8007a88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a90:	2b20      	cmp	r3, #32
 8007a92:	d142      	bne.n	8007b1a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d002      	beq.n	8007aa0 <HAL_UART_Receive_IT+0x24>
 8007a9a:	88fb      	ldrh	r3, [r7, #6]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d101      	bne.n	8007aa4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e03b      	b.n	8007b1c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d101      	bne.n	8007ab2 <HAL_UART_Receive_IT+0x36>
 8007aae:	2302      	movs	r3, #2
 8007ab0:	e034      	b.n	8007b1c <HAL_UART_Receive_IT+0xa0>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a17      	ldr	r2, [pc, #92]	; (8007b24 <HAL_UART_Receive_IT+0xa8>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d01f      	beq.n	8007b0a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d018      	beq.n	8007b0a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	e853 3f00 	ldrex	r3, [r3]
 8007ae4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007aec:	627b      	str	r3, [r7, #36]	; 0x24
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	461a      	mov	r2, r3
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af6:	623b      	str	r3, [r7, #32]
 8007af8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afa:	69f9      	ldr	r1, [r7, #28]
 8007afc:	6a3a      	ldr	r2, [r7, #32]
 8007afe:	e841 2300 	strex	r3, r2, [r1]
 8007b02:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1e6      	bne.n	8007ad8 <HAL_UART_Receive_IT+0x5c>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007b0a:	88fb      	ldrh	r3, [r7, #6]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	68b9      	ldr	r1, [r7, #8]
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f000 ff15 	bl	8008940 <UART_Start_Receive_IT>
 8007b16:	4603      	mov	r3, r0
 8007b18:	e000      	b.n	8007b1c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007b1a:	2302      	movs	r3, #2
  }
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3728      	adds	r7, #40	; 0x28
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	40008000 	.word	0x40008000

08007b28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b0ba      	sub	sp, #232	; 0xe8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	69db      	ldr	r3, [r3, #28]
 8007b36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007b4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007b52:	f640 030f 	movw	r3, #2063	; 0x80f
 8007b56:	4013      	ands	r3, r2
 8007b58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007b5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d11b      	bne.n	8007b9c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b68:	f003 0320 	and.w	r3, r3, #32
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d015      	beq.n	8007b9c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b74:	f003 0320 	and.w	r3, r3, #32
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d105      	bne.n	8007b88 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d009      	beq.n	8007b9c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 82d6 	beq.w	800813e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	4798      	blx	r3
      }
      return;
 8007b9a:	e2d0      	b.n	800813e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007b9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f000 811f 	beq.w	8007de4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007ba6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007baa:	4b8b      	ldr	r3, [pc, #556]	; (8007dd8 <HAL_UART_IRQHandler+0x2b0>)
 8007bac:	4013      	ands	r3, r2
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d106      	bne.n	8007bc0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007bb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007bb6:	4b89      	ldr	r3, [pc, #548]	; (8007ddc <HAL_UART_IRQHandler+0x2b4>)
 8007bb8:	4013      	ands	r3, r2
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 8112 	beq.w	8007de4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bc4:	f003 0301 	and.w	r3, r3, #1
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d011      	beq.n	8007bf0 <HAL_UART_IRQHandler+0xc8>
 8007bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00b      	beq.n	8007bf0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007be6:	f043 0201 	orr.w	r2, r3, #1
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bf4:	f003 0302 	and.w	r3, r3, #2
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d011      	beq.n	8007c20 <HAL_UART_IRQHandler+0xf8>
 8007bfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00b      	beq.n	8007c20 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c16:	f043 0204 	orr.w	r2, r3, #4
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c24:	f003 0304 	and.w	r3, r3, #4
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d011      	beq.n	8007c50 <HAL_UART_IRQHandler+0x128>
 8007c2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00b      	beq.n	8007c50 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2204      	movs	r2, #4
 8007c3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c46:	f043 0202 	orr.w	r2, r3, #2
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c54:	f003 0308 	and.w	r3, r3, #8
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d017      	beq.n	8007c8c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c60:	f003 0320 	and.w	r3, r3, #32
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d105      	bne.n	8007c74 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007c68:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007c6c:	4b5a      	ldr	r3, [pc, #360]	; (8007dd8 <HAL_UART_IRQHandler+0x2b0>)
 8007c6e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00b      	beq.n	8007c8c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2208      	movs	r2, #8
 8007c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c82:	f043 0208 	orr.w	r2, r3, #8
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d012      	beq.n	8007cbe <HAL_UART_IRQHandler+0x196>
 8007c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00c      	beq.n	8007cbe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007cac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cb4:	f043 0220 	orr.w	r2, r3, #32
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 823c 	beq.w	8008142 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cce:	f003 0320 	and.w	r3, r3, #32
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d013      	beq.n	8007cfe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cda:	f003 0320 	and.w	r3, r3, #32
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d105      	bne.n	8007cee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d007      	beq.n	8007cfe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d003      	beq.n	8007cfe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d12:	2b40      	cmp	r3, #64	; 0x40
 8007d14:	d005      	beq.n	8007d22 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d04f      	beq.n	8007dc2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 ff10 	bl	8008b48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d32:	2b40      	cmp	r3, #64	; 0x40
 8007d34:	d141      	bne.n	8007dba <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3308      	adds	r3, #8
 8007d3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d44:	e853 3f00 	ldrex	r3, [r3]
 8007d48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007d4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	3308      	adds	r3, #8
 8007d5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007d62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007d66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007d6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007d72:	e841 2300 	strex	r3, r2, [r1]
 8007d76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007d7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1d9      	bne.n	8007d36 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d013      	beq.n	8007db2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d8e:	4a14      	ldr	r2, [pc, #80]	; (8007de0 <HAL_UART_IRQHandler+0x2b8>)
 8007d90:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7fb fd8e 	bl	80038b8 <HAL_DMA_Abort_IT>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d017      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007dac:	4610      	mov	r0, r2
 8007dae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007db0:	e00f      	b.n	8007dd2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f9d0 	bl	8008158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007db8:	e00b      	b.n	8007dd2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 f9cc 	bl	8008158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dc0:	e007      	b.n	8007dd2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f9c8 	bl	8008158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007dd0:	e1b7      	b.n	8008142 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dd2:	bf00      	nop
    return;
 8007dd4:	e1b5      	b.n	8008142 <HAL_UART_IRQHandler+0x61a>
 8007dd6:	bf00      	nop
 8007dd8:	10000001 	.word	0x10000001
 8007ddc:	04000120 	.word	0x04000120
 8007de0:	08008c15 	.word	0x08008c15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	f040 814a 	bne.w	8008082 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007df2:	f003 0310 	and.w	r3, r3, #16
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f000 8143 	beq.w	8008082 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e00:	f003 0310 	and.w	r3, r3, #16
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f000 813c 	beq.w	8008082 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2210      	movs	r2, #16
 8007e10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1c:	2b40      	cmp	r3, #64	; 0x40
 8007e1e:	f040 80b5 	bne.w	8007f8c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8007e2e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f000 8187 	beq.w	8008146 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e42:	429a      	cmp	r2, r3
 8007e44:	f080 817f 	bcs.w	8008146 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e4e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0320 	and.w	r3, r3, #32
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f040 8086 	bne.w	8007f70 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e70:	e853 3f00 	ldrex	r3, [r3]
 8007e74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007e78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007e92:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007e9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e9e:	e841 2300 	strex	r3, r2, [r1]
 8007ea2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007ea6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1da      	bne.n	8007e64 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3308      	adds	r3, #8
 8007eb4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007eb8:	e853 3f00 	ldrex	r3, [r3]
 8007ebc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ebe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ec0:	f023 0301 	bic.w	r3, r3, #1
 8007ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	3308      	adds	r3, #8
 8007ece:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ed2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ed6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007eda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ede:	e841 2300 	strex	r3, r2, [r1]
 8007ee2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007ee4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1e1      	bne.n	8007eae <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	3308      	adds	r3, #8
 8007ef0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ef4:	e853 3f00 	ldrex	r3, [r3]
 8007ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	3308      	adds	r3, #8
 8007f0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007f14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f16:	e841 2300 	strex	r3, r2, [r1]
 8007f1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007f1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1e3      	bne.n	8007eea <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2220      	movs	r2, #32
 8007f26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f38:	e853 3f00 	ldrex	r3, [r3]
 8007f3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f40:	f023 0310 	bic.w	r3, r3, #16
 8007f44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f52:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f54:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f5a:	e841 2300 	strex	r3, r2, [r1]
 8007f5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1e4      	bne.n	8007f30 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7fb fc45 	bl	80037fa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	4619      	mov	r1, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f8f1 	bl	800816c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007f8a:	e0dc      	b.n	8008146 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f000 80ce 	beq.w	800814a <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8007fae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f000 80c9 	beq.w	800814a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc0:	e853 3f00 	ldrex	r3, [r3]
 8007fc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007fda:	647b      	str	r3, [r7, #68]	; 0x44
 8007fdc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007fe0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fe2:	e841 2300 	strex	r3, r2, [r1]
 8007fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1e4      	bne.n	8007fb8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	3308      	adds	r3, #8
 8007ff4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff8:	e853 3f00 	ldrex	r3, [r3]
 8007ffc:	623b      	str	r3, [r7, #32]
   return(result);
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
 8008000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008004:	f023 0301 	bic.w	r3, r3, #1
 8008008:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3308      	adds	r3, #8
 8008012:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008016:	633a      	str	r2, [r7, #48]	; 0x30
 8008018:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800801c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800801e:	e841 2300 	strex	r3, r2, [r1]
 8008022:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1e1      	bne.n	8007fee <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2220      	movs	r2, #32
 800802e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	e853 3f00 	ldrex	r3, [r3]
 800804a:	60fb      	str	r3, [r7, #12]
   return(result);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f023 0310 	bic.w	r3, r3, #16
 8008052:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	461a      	mov	r2, r3
 800805c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008060:	61fb      	str	r3, [r7, #28]
 8008062:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008064:	69b9      	ldr	r1, [r7, #24]
 8008066:	69fa      	ldr	r2, [r7, #28]
 8008068:	e841 2300 	strex	r3, r2, [r1]
 800806c:	617b      	str	r3, [r7, #20]
   return(result);
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e4      	bne.n	800803e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008074:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008078:	4619      	mov	r1, r3
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f876 	bl	800816c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008080:	e063      	b.n	800814a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00e      	beq.n	80080ac <HAL_UART_IRQHandler+0x584>
 800808e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008096:	2b00      	cmp	r3, #0
 8008098:	d008      	beq.n	80080ac <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80080a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f001 fa53 	bl	8009550 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080aa:	e051      	b.n	8008150 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80080ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d014      	beq.n	80080e2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80080b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d105      	bne.n	80080d0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80080c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d008      	beq.n	80080e2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d03a      	beq.n	800814e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	4798      	blx	r3
    }
    return;
 80080e0:	e035      	b.n	800814e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80080e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d009      	beq.n	8008102 <HAL_UART_IRQHandler+0x5da>
 80080ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 fda0 	bl	8008c40 <UART_EndTransmit_IT>
    return;
 8008100:	e026      	b.n	8008150 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008106:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800810a:	2b00      	cmp	r3, #0
 800810c:	d009      	beq.n	8008122 <HAL_UART_IRQHandler+0x5fa>
 800810e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008112:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008116:	2b00      	cmp	r3, #0
 8008118:	d003      	beq.n	8008122 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f001 fa2c 	bl	8009578 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008120:	e016      	b.n	8008150 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008126:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800812a:	2b00      	cmp	r3, #0
 800812c:	d010      	beq.n	8008150 <HAL_UART_IRQHandler+0x628>
 800812e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008132:	2b00      	cmp	r3, #0
 8008134:	da0c      	bge.n	8008150 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f001 fa14 	bl	8009564 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800813c:	e008      	b.n	8008150 <HAL_UART_IRQHandler+0x628>
      return;
 800813e:	bf00      	nop
 8008140:	e006      	b.n	8008150 <HAL_UART_IRQHandler+0x628>
    return;
 8008142:	bf00      	nop
 8008144:	e004      	b.n	8008150 <HAL_UART_IRQHandler+0x628>
      return;
 8008146:	bf00      	nop
 8008148:	e002      	b.n	8008150 <HAL_UART_IRQHandler+0x628>
      return;
 800814a:	bf00      	nop
 800814c:	e000      	b.n	8008150 <HAL_UART_IRQHandler+0x628>
    return;
 800814e:	bf00      	nop
  }
}
 8008150:	37e8      	adds	r7, #232	; 0xe8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop

08008158 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008160:	bf00      	nop
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	460b      	mov	r3, r1
 8008176:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008178:	bf00      	nop
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008188:	b08c      	sub	sp, #48	; 0x30
 800818a:	af00      	add	r7, sp, #0
 800818c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	689a      	ldr	r2, [r3, #8]
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	431a      	orrs	r2, r3
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	695b      	ldr	r3, [r3, #20]
 80081a2:	431a      	orrs	r2, r3
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	69db      	ldr	r3, [r3, #28]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	4baf      	ldr	r3, [pc, #700]	; (8008470 <UART_SetConfig+0x2ec>)
 80081b4:	4013      	ands	r3, r2
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	6812      	ldr	r2, [r2, #0]
 80081ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081bc:	430b      	orrs	r3, r1
 80081be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	68da      	ldr	r2, [r3, #12]
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	430a      	orrs	r2, r1
 80081d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4aa4      	ldr	r2, [pc, #656]	; (8008474 <UART_SetConfig+0x2f0>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d004      	beq.n	80081f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081ec:	4313      	orrs	r3, r2
 80081ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80081fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	6812      	ldr	r2, [r2, #0]
 8008202:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008204:	430b      	orrs	r3, r1
 8008206:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820e:	f023 010f 	bic.w	r1, r3, #15
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	430a      	orrs	r2, r1
 800821c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a95      	ldr	r2, [pc, #596]	; (8008478 <UART_SetConfig+0x2f4>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d125      	bne.n	8008274 <UART_SetConfig+0xf0>
 8008228:	2003      	movs	r0, #3
 800822a:	f7ff fa4d 	bl	80076c8 <LL_RCC_GetUSARTClockSource>
 800822e:	4603      	mov	r3, r0
 8008230:	2b03      	cmp	r3, #3
 8008232:	d81b      	bhi.n	800826c <UART_SetConfig+0xe8>
 8008234:	a201      	add	r2, pc, #4	; (adr r2, 800823c <UART_SetConfig+0xb8>)
 8008236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823a:	bf00      	nop
 800823c:	0800824d 	.word	0x0800824d
 8008240:	0800825d 	.word	0x0800825d
 8008244:	08008255 	.word	0x08008255
 8008248:	08008265 	.word	0x08008265
 800824c:	2301      	movs	r3, #1
 800824e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008252:	e042      	b.n	80082da <UART_SetConfig+0x156>
 8008254:	2302      	movs	r3, #2
 8008256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800825a:	e03e      	b.n	80082da <UART_SetConfig+0x156>
 800825c:	2304      	movs	r3, #4
 800825e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008262:	e03a      	b.n	80082da <UART_SetConfig+0x156>
 8008264:	2308      	movs	r3, #8
 8008266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800826a:	e036      	b.n	80082da <UART_SetConfig+0x156>
 800826c:	2310      	movs	r3, #16
 800826e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008272:	e032      	b.n	80082da <UART_SetConfig+0x156>
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a7e      	ldr	r2, [pc, #504]	; (8008474 <UART_SetConfig+0x2f0>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d12a      	bne.n	80082d4 <UART_SetConfig+0x150>
 800827e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008282:	f7ff fa31 	bl	80076e8 <LL_RCC_GetLPUARTClockSource>
 8008286:	4603      	mov	r3, r0
 8008288:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800828c:	d01a      	beq.n	80082c4 <UART_SetConfig+0x140>
 800828e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008292:	d81b      	bhi.n	80082cc <UART_SetConfig+0x148>
 8008294:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008298:	d00c      	beq.n	80082b4 <UART_SetConfig+0x130>
 800829a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800829e:	d815      	bhi.n	80082cc <UART_SetConfig+0x148>
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d003      	beq.n	80082ac <UART_SetConfig+0x128>
 80082a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082a8:	d008      	beq.n	80082bc <UART_SetConfig+0x138>
 80082aa:	e00f      	b.n	80082cc <UART_SetConfig+0x148>
 80082ac:	2300      	movs	r3, #0
 80082ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082b2:	e012      	b.n	80082da <UART_SetConfig+0x156>
 80082b4:	2302      	movs	r3, #2
 80082b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ba:	e00e      	b.n	80082da <UART_SetConfig+0x156>
 80082bc:	2304      	movs	r3, #4
 80082be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082c2:	e00a      	b.n	80082da <UART_SetConfig+0x156>
 80082c4:	2308      	movs	r3, #8
 80082c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ca:	e006      	b.n	80082da <UART_SetConfig+0x156>
 80082cc:	2310      	movs	r3, #16
 80082ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082d2:	e002      	b.n	80082da <UART_SetConfig+0x156>
 80082d4:	2310      	movs	r3, #16
 80082d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a65      	ldr	r2, [pc, #404]	; (8008474 <UART_SetConfig+0x2f0>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	f040 8097 	bne.w	8008414 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80082e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80082ea:	2b08      	cmp	r3, #8
 80082ec:	d823      	bhi.n	8008336 <UART_SetConfig+0x1b2>
 80082ee:	a201      	add	r2, pc, #4	; (adr r2, 80082f4 <UART_SetConfig+0x170>)
 80082f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f4:	08008319 	.word	0x08008319
 80082f8:	08008337 	.word	0x08008337
 80082fc:	08008321 	.word	0x08008321
 8008300:	08008337 	.word	0x08008337
 8008304:	08008327 	.word	0x08008327
 8008308:	08008337 	.word	0x08008337
 800830c:	08008337 	.word	0x08008337
 8008310:	08008337 	.word	0x08008337
 8008314:	0800832f 	.word	0x0800832f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008318:	f7fc fd98 	bl	8004e4c <HAL_RCC_GetPCLK1Freq>
 800831c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800831e:	e010      	b.n	8008342 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008320:	4b56      	ldr	r3, [pc, #344]	; (800847c <UART_SetConfig+0x2f8>)
 8008322:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008324:	e00d      	b.n	8008342 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008326:	f7fc fd11 	bl	8004d4c <HAL_RCC_GetSysClockFreq>
 800832a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800832c:	e009      	b.n	8008342 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800832e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008332:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008334:	e005      	b.n	8008342 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8008336:	2300      	movs	r3, #0
 8008338:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008340:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008344:	2b00      	cmp	r3, #0
 8008346:	f000 812b 	beq.w	80085a0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834e:	4a4c      	ldr	r2, [pc, #304]	; (8008480 <UART_SetConfig+0x2fc>)
 8008350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008354:	461a      	mov	r2, r3
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	fbb3 f3f2 	udiv	r3, r3, r2
 800835c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	685a      	ldr	r2, [r3, #4]
 8008362:	4613      	mov	r3, r2
 8008364:	005b      	lsls	r3, r3, #1
 8008366:	4413      	add	r3, r2
 8008368:	69ba      	ldr	r2, [r7, #24]
 800836a:	429a      	cmp	r2, r3
 800836c:	d305      	bcc.n	800837a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008374:	69ba      	ldr	r2, [r7, #24]
 8008376:	429a      	cmp	r2, r3
 8008378:	d903      	bls.n	8008382 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008380:	e10e      	b.n	80085a0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008384:	2200      	movs	r2, #0
 8008386:	60bb      	str	r3, [r7, #8]
 8008388:	60fa      	str	r2, [r7, #12]
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838e:	4a3c      	ldr	r2, [pc, #240]	; (8008480 <UART_SetConfig+0x2fc>)
 8008390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008394:	b29b      	uxth	r3, r3
 8008396:	2200      	movs	r2, #0
 8008398:	603b      	str	r3, [r7, #0]
 800839a:	607a      	str	r2, [r7, #4]
 800839c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80083a4:	f7f8 fbe8 	bl	8000b78 <__aeabi_uldivmod>
 80083a8:	4602      	mov	r2, r0
 80083aa:	460b      	mov	r3, r1
 80083ac:	4610      	mov	r0, r2
 80083ae:	4619      	mov	r1, r3
 80083b0:	f04f 0200 	mov.w	r2, #0
 80083b4:	f04f 0300 	mov.w	r3, #0
 80083b8:	020b      	lsls	r3, r1, #8
 80083ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80083be:	0202      	lsls	r2, r0, #8
 80083c0:	6979      	ldr	r1, [r7, #20]
 80083c2:	6849      	ldr	r1, [r1, #4]
 80083c4:	0849      	lsrs	r1, r1, #1
 80083c6:	2000      	movs	r0, #0
 80083c8:	460c      	mov	r4, r1
 80083ca:	4605      	mov	r5, r0
 80083cc:	eb12 0804 	adds.w	r8, r2, r4
 80083d0:	eb43 0905 	adc.w	r9, r3, r5
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	469a      	mov	sl, r3
 80083dc:	4693      	mov	fp, r2
 80083de:	4652      	mov	r2, sl
 80083e0:	465b      	mov	r3, fp
 80083e2:	4640      	mov	r0, r8
 80083e4:	4649      	mov	r1, r9
 80083e6:	f7f8 fbc7 	bl	8000b78 <__aeabi_uldivmod>
 80083ea:	4602      	mov	r2, r0
 80083ec:	460b      	mov	r3, r1
 80083ee:	4613      	mov	r3, r2
 80083f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80083f2:	6a3b      	ldr	r3, [r7, #32]
 80083f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083f8:	d308      	bcc.n	800840c <UART_SetConfig+0x288>
 80083fa:	6a3b      	ldr	r3, [r7, #32]
 80083fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008400:	d204      	bcs.n	800840c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	6a3a      	ldr	r2, [r7, #32]
 8008408:	60da      	str	r2, [r3, #12]
 800840a:	e0c9      	b.n	80085a0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008412:	e0c5      	b.n	80085a0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	69db      	ldr	r3, [r3, #28]
 8008418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800841c:	d16e      	bne.n	80084fc <UART_SetConfig+0x378>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800841e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008422:	3b01      	subs	r3, #1
 8008424:	2b07      	cmp	r3, #7
 8008426:	d82d      	bhi.n	8008484 <UART_SetConfig+0x300>
 8008428:	a201      	add	r2, pc, #4	; (adr r2, 8008430 <UART_SetConfig+0x2ac>)
 800842a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842e:	bf00      	nop
 8008430:	08008451 	.word	0x08008451
 8008434:	08008459 	.word	0x08008459
 8008438:	08008485 	.word	0x08008485
 800843c:	0800845f 	.word	0x0800845f
 8008440:	08008485 	.word	0x08008485
 8008444:	08008485 	.word	0x08008485
 8008448:	08008485 	.word	0x08008485
 800844c:	08008467 	.word	0x08008467
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008450:	f7fc fd12 	bl	8004e78 <HAL_RCC_GetPCLK2Freq>
 8008454:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008456:	e01b      	b.n	8008490 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008458:	4b08      	ldr	r3, [pc, #32]	; (800847c <UART_SetConfig+0x2f8>)
 800845a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800845c:	e018      	b.n	8008490 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800845e:	f7fc fc75 	bl	8004d4c <HAL_RCC_GetSysClockFreq>
 8008462:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008464:	e014      	b.n	8008490 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800846a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800846c:	e010      	b.n	8008490 <UART_SetConfig+0x30c>
 800846e:	bf00      	nop
 8008470:	cfff69f3 	.word	0xcfff69f3
 8008474:	40008000 	.word	0x40008000
 8008478:	40013800 	.word	0x40013800
 800847c:	00f42400 	.word	0x00f42400
 8008480:	0800cb00 	.word	0x0800cb00
      default:
        pclk = 0U;
 8008484:	2300      	movs	r3, #0
 8008486:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800848e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	2b00      	cmp	r3, #0
 8008494:	f000 8084 	beq.w	80085a0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849c:	4a4b      	ldr	r2, [pc, #300]	; (80085cc <UART_SetConfig+0x448>)
 800849e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084a2:	461a      	mov	r2, r3
 80084a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80084aa:	005a      	lsls	r2, r3, #1
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	085b      	lsrs	r3, r3, #1
 80084b2:	441a      	add	r2, r3
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80084bc:	b29b      	uxth	r3, r3
 80084be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084c0:	6a3b      	ldr	r3, [r7, #32]
 80084c2:	2b0f      	cmp	r3, #15
 80084c4:	d916      	bls.n	80084f4 <UART_SetConfig+0x370>
 80084c6:	6a3b      	ldr	r3, [r7, #32]
 80084c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084cc:	d212      	bcs.n	80084f4 <UART_SetConfig+0x370>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084ce:	6a3b      	ldr	r3, [r7, #32]
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	f023 030f 	bic.w	r3, r3, #15
 80084d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084d8:	6a3b      	ldr	r3, [r7, #32]
 80084da:	085b      	lsrs	r3, r3, #1
 80084dc:	b29b      	uxth	r3, r3
 80084de:	f003 0307 	and.w	r3, r3, #7
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	8bfb      	ldrh	r3, [r7, #30]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	8bfa      	ldrh	r2, [r7, #30]
 80084f0:	60da      	str	r2, [r3, #12]
 80084f2:	e055      	b.n	80085a0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80084fa:	e051      	b.n	80085a0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008500:	3b01      	subs	r3, #1
 8008502:	2b07      	cmp	r3, #7
 8008504:	d821      	bhi.n	800854a <UART_SetConfig+0x3c6>
 8008506:	a201      	add	r2, pc, #4	; (adr r2, 800850c <UART_SetConfig+0x388>)
 8008508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800850c:	0800852d 	.word	0x0800852d
 8008510:	08008535 	.word	0x08008535
 8008514:	0800854b 	.word	0x0800854b
 8008518:	0800853b 	.word	0x0800853b
 800851c:	0800854b 	.word	0x0800854b
 8008520:	0800854b 	.word	0x0800854b
 8008524:	0800854b 	.word	0x0800854b
 8008528:	08008543 	.word	0x08008543
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800852c:	f7fc fca4 	bl	8004e78 <HAL_RCC_GetPCLK2Freq>
 8008530:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008532:	e010      	b.n	8008556 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008534:	4b26      	ldr	r3, [pc, #152]	; (80085d0 <UART_SetConfig+0x44c>)
 8008536:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008538:	e00d      	b.n	8008556 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800853a:	f7fc fc07 	bl	8004d4c <HAL_RCC_GetSysClockFreq>
 800853e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008540:	e009      	b.n	8008556 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008546:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008548:	e005      	b.n	8008556 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800854a:	2300      	movs	r3, #0
 800854c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008554:	bf00      	nop
    }

    if (pclk != 0U)
 8008556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008558:	2b00      	cmp	r3, #0
 800855a:	d021      	beq.n	80085a0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008560:	4a1a      	ldr	r2, [pc, #104]	; (80085cc <UART_SetConfig+0x448>)
 8008562:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008566:	461a      	mov	r2, r3
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856a:	fbb3 f2f2 	udiv	r2, r3, r2
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	085b      	lsrs	r3, r3, #1
 8008574:	441a      	add	r2, r3
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	fbb2 f3f3 	udiv	r3, r2, r3
 800857e:	b29b      	uxth	r3, r3
 8008580:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008582:	6a3b      	ldr	r3, [r7, #32]
 8008584:	2b0f      	cmp	r3, #15
 8008586:	d908      	bls.n	800859a <UART_SetConfig+0x416>
 8008588:	6a3b      	ldr	r3, [r7, #32]
 800858a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800858e:	d204      	bcs.n	800859a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = usartdiv;
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	6a3a      	ldr	r2, [r7, #32]
 8008596:	60da      	str	r2, [r3, #12]
 8008598:	e002      	b.n	80085a0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	2200      	movs	r2, #0
 80085b4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	2200      	movs	r2, #0
 80085ba:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80085bc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3730      	adds	r7, #48	; 0x30
 80085c4:	46bd      	mov	sp, r7
 80085c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085ca:	bf00      	nop
 80085cc:	0800cb00 	.word	0x0800cb00
 80085d0:	00f42400 	.word	0x00f42400

080085d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e0:	f003 0301 	and.w	r3, r3, #1
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00a      	beq.n	80085fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	430a      	orrs	r2, r1
 80085fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008602:	f003 0302 	and.w	r3, r3, #2
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00a      	beq.n	8008620 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	430a      	orrs	r2, r1
 800861e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008624:	f003 0304 	and.w	r3, r3, #4
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00a      	beq.n	8008642 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	430a      	orrs	r2, r1
 8008640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008646:	f003 0308 	and.w	r3, r3, #8
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00a      	beq.n	8008664 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	430a      	orrs	r2, r1
 8008662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008668:	f003 0310 	and.w	r3, r3, #16
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00a      	beq.n	8008686 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	430a      	orrs	r2, r1
 8008684:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868a:	f003 0320 	and.w	r3, r3, #32
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00a      	beq.n	80086a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	430a      	orrs	r2, r1
 80086a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d01a      	beq.n	80086ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	430a      	orrs	r2, r1
 80086c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086d2:	d10a      	bne.n	80086ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	430a      	orrs	r2, r1
 80086e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00a      	beq.n	800870c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	430a      	orrs	r2, r1
 800870a:	605a      	str	r2, [r3, #4]
  }
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b086      	sub	sp, #24
 800871c:	af02      	add	r7, sp, #8
 800871e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008728:	f7fa ff1c 	bl	8003564 <HAL_GetTick>
 800872c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 0308 	and.w	r3, r3, #8
 8008738:	2b08      	cmp	r3, #8
 800873a:	d10e      	bne.n	800875a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800873c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f82f 	bl	80087ae <UART_WaitOnFlagUntilTimeout>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d001      	beq.n	800875a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e025      	b.n	80087a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 0304 	and.w	r3, r3, #4
 8008764:	2b04      	cmp	r3, #4
 8008766:	d10e      	bne.n	8008786 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008768:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f819 	bl	80087ae <UART_WaitOnFlagUntilTimeout>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d001      	beq.n	8008786 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008782:	2303      	movs	r3, #3
 8008784:	e00f      	b.n	80087a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2220      	movs	r2, #32
 800878a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2220      	movs	r2, #32
 8008792:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b09c      	sub	sp, #112	; 0x70
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	60f8      	str	r0, [r7, #12]
 80087b6:	60b9      	str	r1, [r7, #8]
 80087b8:	603b      	str	r3, [r7, #0]
 80087ba:	4613      	mov	r3, r2
 80087bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087be:	e0a9      	b.n	8008914 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c6:	f000 80a5 	beq.w	8008914 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087ca:	f7fa fecb 	bl	8003564 <HAL_GetTick>
 80087ce:	4602      	mov	r2, r0
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d302      	bcc.n	80087e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80087da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d140      	bne.n	8008862 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087e8:	e853 3f00 	ldrex	r3, [r3]
 80087ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80087ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80087f4:	667b      	str	r3, [r7, #100]	; 0x64
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	461a      	mov	r2, r3
 80087fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008800:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008802:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008804:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008806:	e841 2300 	strex	r3, r2, [r1]
 800880a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800880c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1e6      	bne.n	80087e0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	3308      	adds	r3, #8
 8008818:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800881c:	e853 3f00 	ldrex	r3, [r3]
 8008820:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008824:	f023 0301 	bic.w	r3, r3, #1
 8008828:	663b      	str	r3, [r7, #96]	; 0x60
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3308      	adds	r3, #8
 8008830:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008832:	64ba      	str	r2, [r7, #72]	; 0x48
 8008834:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008836:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008838:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800883a:	e841 2300 	strex	r3, r2, [r1]
 800883e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1e5      	bne.n	8008812 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2220      	movs	r2, #32
 800884a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2220      	movs	r2, #32
 8008852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800885e:	2303      	movs	r3, #3
 8008860:	e069      	b.n	8008936 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 0304 	and.w	r3, r3, #4
 800886c:	2b00      	cmp	r3, #0
 800886e:	d051      	beq.n	8008914 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	69db      	ldr	r3, [r3, #28]
 8008876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800887a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800887e:	d149      	bne.n	8008914 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008888:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008892:	e853 3f00 	ldrex	r3, [r3]
 8008896:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800889e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	461a      	mov	r2, r3
 80088a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088a8:	637b      	str	r3, [r7, #52]	; 0x34
 80088aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088b0:	e841 2300 	strex	r3, r2, [r1]
 80088b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80088b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1e6      	bne.n	800888a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	3308      	adds	r3, #8
 80088c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	e853 3f00 	ldrex	r3, [r3]
 80088ca:	613b      	str	r3, [r7, #16]
   return(result);
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	f023 0301 	bic.w	r3, r3, #1
 80088d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	3308      	adds	r3, #8
 80088da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80088dc:	623a      	str	r2, [r7, #32]
 80088de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e0:	69f9      	ldr	r1, [r7, #28]
 80088e2:	6a3a      	ldr	r2, [r7, #32]
 80088e4:	e841 2300 	strex	r3, r2, [r1]
 80088e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1e5      	bne.n	80088bc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2220      	movs	r2, #32
 80088f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2220      	movs	r2, #32
 80088fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2220      	movs	r2, #32
 8008904:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	e010      	b.n	8008936 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	69da      	ldr	r2, [r3, #28]
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	4013      	ands	r3, r2
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	429a      	cmp	r2, r3
 8008922:	bf0c      	ite	eq
 8008924:	2301      	moveq	r3, #1
 8008926:	2300      	movne	r3, #0
 8008928:	b2db      	uxtb	r3, r3
 800892a:	461a      	mov	r2, r3
 800892c:	79fb      	ldrb	r3, [r7, #7]
 800892e:	429a      	cmp	r2, r3
 8008930:	f43f af46 	beq.w	80087c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3770      	adds	r7, #112	; 0x70
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
	...

08008940 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008940:	b480      	push	{r7}
 8008942:	b09d      	sub	sp, #116	; 0x74
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	4613      	mov	r3, r2
 800894c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	68ba      	ldr	r2, [r7, #8]
 8008952:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	88fa      	ldrh	r2, [r7, #6]
 8008958:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	88fa      	ldrh	r2, [r7, #6]
 8008960:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2200      	movs	r2, #0
 8008968:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008972:	d10e      	bne.n	8008992 <UART_Start_Receive_IT+0x52>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d105      	bne.n	8008988 <UART_Start_Receive_IT+0x48>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008982:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008986:	e02d      	b.n	80089e4 <UART_Start_Receive_IT+0xa4>
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	22ff      	movs	r2, #255	; 0xff
 800898c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008990:	e028      	b.n	80089e4 <UART_Start_Receive_IT+0xa4>
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d10d      	bne.n	80089b6 <UART_Start_Receive_IT+0x76>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d104      	bne.n	80089ac <UART_Start_Receive_IT+0x6c>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	22ff      	movs	r2, #255	; 0xff
 80089a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089aa:	e01b      	b.n	80089e4 <UART_Start_Receive_IT+0xa4>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	227f      	movs	r2, #127	; 0x7f
 80089b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089b4:	e016      	b.n	80089e4 <UART_Start_Receive_IT+0xa4>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089be:	d10d      	bne.n	80089dc <UART_Start_Receive_IT+0x9c>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d104      	bne.n	80089d2 <UART_Start_Receive_IT+0x92>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	227f      	movs	r2, #127	; 0x7f
 80089cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089d0:	e008      	b.n	80089e4 <UART_Start_Receive_IT+0xa4>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	223f      	movs	r2, #63	; 0x3f
 80089d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089da:	e003      	b.n	80089e4 <UART_Start_Receive_IT+0xa4>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2200      	movs	r2, #0
 80089e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2222      	movs	r2, #34	; 0x22
 80089f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	3308      	adds	r3, #8
 80089fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089fe:	e853 3f00 	ldrex	r3, [r3]
 8008a02:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a06:	f043 0301 	orr.w	r3, r3, #1
 8008a0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	3308      	adds	r3, #8
 8008a12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008a14:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008a16:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a18:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a1a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a1c:	e841 2300 	strex	r3, r2, [r1]
 8008a20:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1e5      	bne.n	80089f4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a30:	d14d      	bne.n	8008ace <UART_Start_Receive_IT+0x18e>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a38:	88fa      	ldrh	r2, [r7, #6]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d347      	bcc.n	8008ace <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a46:	d107      	bne.n	8008a58 <UART_Start_Receive_IT+0x118>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d103      	bne.n	8008a58 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	4a39      	ldr	r2, [pc, #228]	; (8008b38 <UART_Start_Receive_IT+0x1f8>)
 8008a54:	671a      	str	r2, [r3, #112]	; 0x70
 8008a56:	e002      	b.n	8008a5e <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	4a38      	ldr	r2, [pc, #224]	; (8008b3c <UART_Start_Receive_IT+0x1fc>)
 8008a5c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a6e:	e853 3f00 	ldrex	r3, [r3]
 8008a72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	461a      	mov	r2, r3
 8008a82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a84:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a86:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a8c:	e841 2300 	strex	r3, r2, [r1]
 8008a90:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d1e6      	bne.n	8008a66 <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	3308      	adds	r3, #8
 8008a9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa2:	e853 3f00 	ldrex	r3, [r3]
 8008aa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008aae:	667b      	str	r3, [r7, #100]	; 0x64
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	3308      	adds	r3, #8
 8008ab6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008ab8:	637a      	str	r2, [r7, #52]	; 0x34
 8008aba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008abe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ac0:	e841 2300 	strex	r3, r2, [r1]
 8008ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1e5      	bne.n	8008a98 <UART_Start_Receive_IT+0x158>
 8008acc:	e02c      	b.n	8008b28 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ad6:	d107      	bne.n	8008ae8 <UART_Start_Receive_IT+0x1a8>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d103      	bne.n	8008ae8 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	4a17      	ldr	r2, [pc, #92]	; (8008b40 <UART_Start_Receive_IT+0x200>)
 8008ae4:	671a      	str	r2, [r3, #112]	; 0x70
 8008ae6:	e002      	b.n	8008aee <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	4a16      	ldr	r2, [pc, #88]	; (8008b44 <UART_Start_Receive_IT+0x204>)
 8008aec:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2200      	movs	r2, #0
 8008af2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	e853 3f00 	ldrex	r3, [r3]
 8008b02:	613b      	str	r3, [r7, #16]
   return(result);
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008b0a:	663b      	str	r3, [r7, #96]	; 0x60
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	461a      	mov	r2, r3
 8008b12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b14:	623b      	str	r3, [r7, #32]
 8008b16:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b18:	69f9      	ldr	r1, [r7, #28]
 8008b1a:	6a3a      	ldr	r2, [r7, #32]
 8008b1c:	e841 2300 	strex	r3, r2, [r1]
 8008b20:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1e6      	bne.n	8008af6 <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3774      	adds	r7, #116	; 0x74
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	08009251 	.word	0x08009251
 8008b3c:	08008f59 	.word	0x08008f59
 8008b40:	08008df7 	.word	0x08008df7
 8008b44:	08008c97 	.word	0x08008c97

08008b48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b095      	sub	sp, #84	; 0x54
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b58:	e853 3f00 	ldrex	r3, [r3]
 8008b5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b6e:	643b      	str	r3, [r7, #64]	; 0x40
 8008b70:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b76:	e841 2300 	strex	r3, r2, [r1]
 8008b7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1e6      	bne.n	8008b50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	3308      	adds	r3, #8
 8008b88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8a:	6a3b      	ldr	r3, [r7, #32]
 8008b8c:	e853 3f00 	ldrex	r3, [r3]
 8008b90:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b98:	f023 0301 	bic.w	r3, r3, #1
 8008b9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	3308      	adds	r3, #8
 8008ba4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ba6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ba8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008baa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bae:	e841 2300 	strex	r3, r2, [r1]
 8008bb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1e3      	bne.n	8008b82 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d118      	bne.n	8008bf4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	e853 3f00 	ldrex	r3, [r3]
 8008bce:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	f023 0310 	bic.w	r3, r3, #16
 8008bd6:	647b      	str	r3, [r7, #68]	; 0x44
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	461a      	mov	r2, r3
 8008bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008be0:	61bb      	str	r3, [r7, #24]
 8008be2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be4:	6979      	ldr	r1, [r7, #20]
 8008be6:	69ba      	ldr	r2, [r7, #24]
 8008be8:	e841 2300 	strex	r3, r2, [r1]
 8008bec:	613b      	str	r3, [r7, #16]
   return(result);
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1e6      	bne.n	8008bc2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2220      	movs	r2, #32
 8008bf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008c08:	bf00      	nop
 8008c0a:	3754      	adds	r7, #84	; 0x54
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f7ff fa90 	bl	8008158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c38:	bf00      	nop
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b088      	sub	sp, #32
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	e853 3f00 	ldrex	r3, [r3]
 8008c54:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c5c:	61fb      	str	r3, [r7, #28]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	461a      	mov	r2, r3
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	61bb      	str	r3, [r7, #24]
 8008c68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6a:	6979      	ldr	r1, [r7, #20]
 8008c6c:	69ba      	ldr	r2, [r7, #24]
 8008c6e:	e841 2300 	strex	r3, r2, [r1]
 8008c72:	613b      	str	r3, [r7, #16]
   return(result);
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1e6      	bne.n	8008c48 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2220      	movs	r2, #32
 8008c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f7f9 f959 	bl	8001f40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c8e:	bf00      	nop
 8008c90:	3720      	adds	r7, #32
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b096      	sub	sp, #88	; 0x58
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008ca4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cae:	2b22      	cmp	r3, #34	; 0x22
 8008cb0:	f040 8095 	bne.w	8008dde <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cba:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008cbe:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008cc2:	b2d9      	uxtb	r1, r3
 8008cc4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008cc8:	b2da      	uxtb	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cce:	400a      	ands	r2, r1
 8008cd0:	b2d2      	uxtb	r2, r2
 8008cd2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cd8:	1c5a      	adds	r2, r3, #1
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	3b01      	subs	r3, #1
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d178      	bne.n	8008dee <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d04:	e853 3f00 	ldrex	r3, [r3]
 8008d08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d10:	653b      	str	r3, [r7, #80]	; 0x50
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	461a      	mov	r2, r3
 8008d18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d1a:	647b      	str	r3, [r7, #68]	; 0x44
 8008d1c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d22:	e841 2300 	strex	r3, r2, [r1]
 8008d26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1e6      	bne.n	8008cfc <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	3308      	adds	r3, #8
 8008d34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d38:	e853 3f00 	ldrex	r3, [r3]
 8008d3c:	623b      	str	r3, [r7, #32]
   return(result);
 8008d3e:	6a3b      	ldr	r3, [r7, #32]
 8008d40:	f023 0301 	bic.w	r3, r3, #1
 8008d44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	3308      	adds	r3, #8
 8008d4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d4e:	633a      	str	r2, [r7, #48]	; 0x30
 8008d50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d56:	e841 2300 	strex	r3, r2, [r1]
 8008d5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1e5      	bne.n	8008d2e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2220      	movs	r2, #32
 8008d66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d12e      	bne.n	8008dd6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	e853 3f00 	ldrex	r3, [r3]
 8008d8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f023 0310 	bic.w	r3, r3, #16
 8008d92:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	461a      	mov	r2, r3
 8008d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d9c:	61fb      	str	r3, [r7, #28]
 8008d9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da0:	69b9      	ldr	r1, [r7, #24]
 8008da2:	69fa      	ldr	r2, [r7, #28]
 8008da4:	e841 2300 	strex	r3, r2, [r1]
 8008da8:	617b      	str	r3, [r7, #20]
   return(result);
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1e6      	bne.n	8008d7e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	69db      	ldr	r3, [r3, #28]
 8008db6:	f003 0310 	and.w	r3, r3, #16
 8008dba:	2b10      	cmp	r3, #16
 8008dbc:	d103      	bne.n	8008dc6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2210      	movs	r2, #16
 8008dc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7ff f9cc 	bl	800816c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008dd4:	e00b      	b.n	8008dee <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7f9 f8c2 	bl	8001f60 <HAL_UART_RxCpltCallback>
}
 8008ddc:	e007      	b.n	8008dee <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	699a      	ldr	r2, [r3, #24]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f042 0208 	orr.w	r2, r2, #8
 8008dec:	619a      	str	r2, [r3, #24]
}
 8008dee:	bf00      	nop
 8008df0:	3758      	adds	r7, #88	; 0x58
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b096      	sub	sp, #88	; 0x58
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e04:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e0e:	2b22      	cmp	r3, #34	; 0x22
 8008e10:	f040 8095 	bne.w	8008f3e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e22:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008e24:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008e28:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	b29a      	uxth	r2, r3
 8008e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e32:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e38:	1c9a      	adds	r2, r3, #2
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	3b01      	subs	r3, #1
 8008e48:	b29a      	uxth	r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d178      	bne.n	8008f4e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e64:	e853 3f00 	ldrex	r3, [r3]
 8008e68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	461a      	mov	r2, r3
 8008e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e7a:	643b      	str	r3, [r7, #64]	; 0x40
 8008e7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e82:	e841 2300 	strex	r3, r2, [r1]
 8008e86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1e6      	bne.n	8008e5c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	3308      	adds	r3, #8
 8008e94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e96:	6a3b      	ldr	r3, [r7, #32]
 8008e98:	e853 3f00 	ldrex	r3, [r3]
 8008e9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	f023 0301 	bic.w	r3, r3, #1
 8008ea4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3308      	adds	r3, #8
 8008eac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008eae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008eb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eb6:	e841 2300 	strex	r3, r2, [r1]
 8008eba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1e5      	bne.n	8008e8e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2220      	movs	r2, #32
 8008ec6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d12e      	bne.n	8008f36 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	e853 3f00 	ldrex	r3, [r3]
 8008eea:	60bb      	str	r3, [r7, #8]
   return(result);
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	f023 0310 	bic.w	r3, r3, #16
 8008ef2:	647b      	str	r3, [r7, #68]	; 0x44
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008efc:	61bb      	str	r3, [r7, #24]
 8008efe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f00:	6979      	ldr	r1, [r7, #20]
 8008f02:	69ba      	ldr	r2, [r7, #24]
 8008f04:	e841 2300 	strex	r3, r2, [r1]
 8008f08:	613b      	str	r3, [r7, #16]
   return(result);
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1e6      	bne.n	8008ede <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	69db      	ldr	r3, [r3, #28]
 8008f16:	f003 0310 	and.w	r3, r3, #16
 8008f1a:	2b10      	cmp	r3, #16
 8008f1c:	d103      	bne.n	8008f26 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2210      	movs	r2, #16
 8008f24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f7ff f91c 	bl	800816c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f34:	e00b      	b.n	8008f4e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f7f9 f812 	bl	8001f60 <HAL_UART_RxCpltCallback>
}
 8008f3c:	e007      	b.n	8008f4e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	699a      	ldr	r2, [r3, #24]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f042 0208 	orr.w	r2, r2, #8
 8008f4c:	619a      	str	r2, [r3, #24]
}
 8008f4e:	bf00      	nop
 8008f50:	3758      	adds	r7, #88	; 0x58
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
	...

08008f58 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b0a6      	sub	sp, #152	; 0x98
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f66:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	69db      	ldr	r3, [r3, #28]
 8008f70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f8e:	2b22      	cmp	r3, #34	; 0x22
 8008f90:	f040 814f 	bne.w	8009232 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008f9a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f9e:	e0f6      	b.n	800918e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008faa:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008fae:	b2d9      	uxtb	r1, r3
 8008fb0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008fb4:	b2da      	uxtb	r2, r3
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fba:	400a      	ands	r2, r1
 8008fbc:	b2d2      	uxtb	r2, r2
 8008fbe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fc4:	1c5a      	adds	r2, r3, #1
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	69db      	ldr	r3, [r3, #28]
 8008fe2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008fe6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008fea:	f003 0307 	and.w	r3, r3, #7
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d053      	beq.n	800909a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ff2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d011      	beq.n	8009022 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008ffe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00b      	beq.n	8009022 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2201      	movs	r2, #1
 8009010:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009018:	f043 0201 	orr.w	r2, r3, #1
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009022:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009026:	f003 0302 	and.w	r3, r3, #2
 800902a:	2b00      	cmp	r3, #0
 800902c:	d011      	beq.n	8009052 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800902e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00b      	beq.n	8009052 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2202      	movs	r2, #2
 8009040:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009048:	f043 0204 	orr.w	r2, r3, #4
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009052:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009056:	f003 0304 	and.w	r3, r3, #4
 800905a:	2b00      	cmp	r3, #0
 800905c:	d011      	beq.n	8009082 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800905e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009062:	f003 0301 	and.w	r3, r3, #1
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00b      	beq.n	8009082 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2204      	movs	r2, #4
 8009070:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009078:	f043 0202 	orr.w	r2, r3, #2
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009088:	2b00      	cmp	r3, #0
 800908a:	d006      	beq.n	800909a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f7ff f863 	bl	8008158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d173      	bne.n	800918e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090ae:	e853 3f00 	ldrex	r3, [r3]
 80090b2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80090b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	461a      	mov	r2, r3
 80090c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80090c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80090ca:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090cc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80090ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80090d0:	e841 2300 	strex	r3, r2, [r1]
 80090d4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80090d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d1e4      	bne.n	80090a6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	3308      	adds	r3, #8
 80090e2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090e6:	e853 3f00 	ldrex	r3, [r3]
 80090ea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80090ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090f2:	f023 0301 	bic.w	r3, r3, #1
 80090f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3308      	adds	r3, #8
 80090fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009100:	657a      	str	r2, [r7, #84]	; 0x54
 8009102:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009104:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009106:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009108:	e841 2300 	strex	r3, r2, [r1]
 800910c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800910e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1e3      	bne.n	80090dc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2220      	movs	r2, #32
 8009118:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009126:	2b01      	cmp	r3, #1
 8009128:	d12e      	bne.n	8009188 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009138:	e853 3f00 	ldrex	r3, [r3]
 800913c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800913e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009140:	f023 0310 	bic.w	r3, r3, #16
 8009144:	67bb      	str	r3, [r7, #120]	; 0x78
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	461a      	mov	r2, r3
 800914c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800914e:	643b      	str	r3, [r7, #64]	; 0x40
 8009150:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009152:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009154:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009156:	e841 2300 	strex	r3, r2, [r1]
 800915a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800915c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1e6      	bne.n	8009130 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	69db      	ldr	r3, [r3, #28]
 8009168:	f003 0310 	and.w	r3, r3, #16
 800916c:	2b10      	cmp	r3, #16
 800916e:	d103      	bne.n	8009178 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2210      	movs	r2, #16
 8009176:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800917e:	4619      	mov	r1, r3
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f7fe fff3 	bl	800816c <HAL_UARTEx_RxEventCallback>
 8009186:	e002      	b.n	800918e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f7f8 fee9 	bl	8001f60 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800918e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009192:	2b00      	cmp	r3, #0
 8009194:	d006      	beq.n	80091a4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009196:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800919a:	f003 0320 	and.w	r3, r3, #32
 800919e:	2b00      	cmp	r3, #0
 80091a0:	f47f aefe 	bne.w	8008fa0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091aa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80091ae:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d045      	beq.n	8009242 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80091bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d23e      	bcs.n	8009242 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	3308      	adds	r3, #8
 80091ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091cc:	6a3b      	ldr	r3, [r7, #32]
 80091ce:	e853 3f00 	ldrex	r3, [r3]
 80091d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091da:	673b      	str	r3, [r7, #112]	; 0x70
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	3308      	adds	r3, #8
 80091e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80091e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091ec:	e841 2300 	strex	r3, r2, [r1]
 80091f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1e5      	bne.n	80091c4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a14      	ldr	r2, [pc, #80]	; (800924c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80091fc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	e853 3f00 	ldrex	r3, [r3]
 800920a:	60bb      	str	r3, [r7, #8]
   return(result);
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	f043 0320 	orr.w	r3, r3, #32
 8009212:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	461a      	mov	r2, r3
 800921a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800921c:	61bb      	str	r3, [r7, #24]
 800921e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009220:	6979      	ldr	r1, [r7, #20]
 8009222:	69ba      	ldr	r2, [r7, #24]
 8009224:	e841 2300 	strex	r3, r2, [r1]
 8009228:	613b      	str	r3, [r7, #16]
   return(result);
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d1e6      	bne.n	80091fe <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009230:	e007      	b.n	8009242 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	699a      	ldr	r2, [r3, #24]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f042 0208 	orr.w	r2, r2, #8
 8009240:	619a      	str	r2, [r3, #24]
}
 8009242:	bf00      	nop
 8009244:	3798      	adds	r7, #152	; 0x98
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	08008c97 	.word	0x08008c97

08009250 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b0a8      	sub	sp, #160	; 0xa0
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800925e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	69db      	ldr	r3, [r3, #28]
 8009268:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009286:	2b22      	cmp	r3, #34	; 0x22
 8009288:	f040 8153 	bne.w	8009532 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009292:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009296:	e0fa      	b.n	800948e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80092aa:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80092ae:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80092b2:	4013      	ands	r3, r2
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092c0:	1c9a      	adds	r2, r3, #2
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	3b01      	subs	r3, #1
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	69db      	ldr	r3, [r3, #28]
 80092de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80092e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092e6:	f003 0307 	and.w	r3, r3, #7
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d053      	beq.n	8009396 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80092ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d011      	beq.n	800931e <UART_RxISR_16BIT_FIFOEN+0xce>
 80092fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80092fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009302:	2b00      	cmp	r3, #0
 8009304:	d00b      	beq.n	800931e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2201      	movs	r2, #1
 800930c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009314:	f043 0201 	orr.w	r2, r3, #1
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800931e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009322:	f003 0302 	and.w	r3, r3, #2
 8009326:	2b00      	cmp	r3, #0
 8009328:	d011      	beq.n	800934e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800932a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800932e:	f003 0301 	and.w	r3, r3, #1
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00b      	beq.n	800934e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2202      	movs	r2, #2
 800933c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009344:	f043 0204 	orr.w	r2, r3, #4
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800934e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009352:	f003 0304 	and.w	r3, r3, #4
 8009356:	2b00      	cmp	r3, #0
 8009358:	d011      	beq.n	800937e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800935a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800935e:	f003 0301 	and.w	r3, r3, #1
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00b      	beq.n	800937e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2204      	movs	r2, #4
 800936c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009374:	f043 0202 	orr.w	r2, r3, #2
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009384:	2b00      	cmp	r3, #0
 8009386:	d006      	beq.n	8009396 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f7fe fee5 	bl	8008158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800939c:	b29b      	uxth	r3, r3
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d175      	bne.n	800948e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093aa:	e853 3f00 	ldrex	r3, [r3]
 80093ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80093b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	461a      	mov	r2, r3
 80093c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80093c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80093c6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80093ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80093cc:	e841 2300 	strex	r3, r2, [r1]
 80093d0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80093d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1e4      	bne.n	80093a2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	3308      	adds	r3, #8
 80093de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093e2:	e853 3f00 	ldrex	r3, [r3]
 80093e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80093e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093ee:	f023 0301 	bic.w	r3, r3, #1
 80093f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3308      	adds	r3, #8
 80093fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009400:	65ba      	str	r2, [r7, #88]	; 0x58
 8009402:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009404:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009406:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009408:	e841 2300 	strex	r3, r2, [r1]
 800940c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800940e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1e1      	bne.n	80093d8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2220      	movs	r2, #32
 8009418:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009426:	2b01      	cmp	r3, #1
 8009428:	d12e      	bne.n	8009488 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009438:	e853 3f00 	ldrex	r3, [r3]
 800943c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800943e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009440:	f023 0310 	bic.w	r3, r3, #16
 8009444:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800944e:	647b      	str	r3, [r7, #68]	; 0x44
 8009450:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009452:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009454:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009456:	e841 2300 	strex	r3, r2, [r1]
 800945a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800945c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1e6      	bne.n	8009430 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	69db      	ldr	r3, [r3, #28]
 8009468:	f003 0310 	and.w	r3, r3, #16
 800946c:	2b10      	cmp	r3, #16
 800946e:	d103      	bne.n	8009478 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2210      	movs	r2, #16
 8009476:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800947e:	4619      	mov	r1, r3
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f7fe fe73 	bl	800816c <HAL_UARTEx_RxEventCallback>
 8009486:	e002      	b.n	800948e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f7f8 fd69 	bl	8001f60 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800948e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009492:	2b00      	cmp	r3, #0
 8009494:	d006      	beq.n	80094a4 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009496:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800949a:	f003 0320 	and.w	r3, r3, #32
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f47f aefa 	bne.w	8009298 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094aa:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80094ae:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d045      	beq.n	8009542 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80094bc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d23e      	bcs.n	8009542 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	3308      	adds	r3, #8
 80094ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ce:	e853 3f00 	ldrex	r3, [r3]
 80094d2:	623b      	str	r3, [r7, #32]
   return(result);
 80094d4:	6a3b      	ldr	r3, [r7, #32]
 80094d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094da:	677b      	str	r3, [r7, #116]	; 0x74
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	3308      	adds	r3, #8
 80094e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80094e4:	633a      	str	r2, [r7, #48]	; 0x30
 80094e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094ec:	e841 2300 	strex	r3, r2, [r1]
 80094f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1e5      	bne.n	80094c4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a14      	ldr	r2, [pc, #80]	; (800954c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80094fc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	e853 3f00 	ldrex	r3, [r3]
 800950a:	60fb      	str	r3, [r7, #12]
   return(result);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f043 0320 	orr.w	r3, r3, #32
 8009512:	673b      	str	r3, [r7, #112]	; 0x70
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	461a      	mov	r2, r3
 800951a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800951c:	61fb      	str	r3, [r7, #28]
 800951e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009520:	69b9      	ldr	r1, [r7, #24]
 8009522:	69fa      	ldr	r2, [r7, #28]
 8009524:	e841 2300 	strex	r3, r2, [r1]
 8009528:	617b      	str	r3, [r7, #20]
   return(result);
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d1e6      	bne.n	80094fe <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009530:	e007      	b.n	8009542 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	699a      	ldr	r2, [r3, #24]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f042 0208 	orr.w	r2, r2, #8
 8009540:	619a      	str	r2, [r3, #24]
}
 8009542:	bf00      	nop
 8009544:	37a0      	adds	r7, #160	; 0xa0
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	08008df7 	.word	0x08008df7

08009550 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800956c:	bf00      	nop
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800959a:	2b01      	cmp	r3, #1
 800959c:	d101      	bne.n	80095a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800959e:	2302      	movs	r3, #2
 80095a0:	e027      	b.n	80095f2 <HAL_UARTEx_DisableFifoMode+0x66>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2224      	movs	r2, #36	; 0x24
 80095ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f022 0201 	bic.w	r2, r2, #1
 80095c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80095d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68fa      	ldr	r2, [r7, #12]
 80095de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2220      	movs	r2, #32
 80095e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr

080095fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095fe:	b580      	push	{r7, lr}
 8009600:	b084      	sub	sp, #16
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
 8009606:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800960e:	2b01      	cmp	r3, #1
 8009610:	d101      	bne.n	8009616 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009612:	2302      	movs	r3, #2
 8009614:	e02d      	b.n	8009672 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2201      	movs	r2, #1
 800961a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2224      	movs	r2, #36	; 0x24
 8009622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f022 0201 	bic.w	r2, r2, #1
 800963c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	683a      	ldr	r2, [r7, #0]
 800964e:	430a      	orrs	r2, r1
 8009650:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f850 	bl	80096f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2220      	movs	r2, #32
 8009664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b084      	sub	sp, #16
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800968a:	2b01      	cmp	r3, #1
 800968c:	d101      	bne.n	8009692 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800968e:	2302      	movs	r3, #2
 8009690:	e02d      	b.n	80096ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2201      	movs	r2, #1
 8009696:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2224      	movs	r2, #36	; 0x24
 800969e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f022 0201 	bic.w	r2, r2, #1
 80096b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	683a      	ldr	r2, [r7, #0]
 80096ca:	430a      	orrs	r2, r1
 80096cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 f812 	bl	80096f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2220      	movs	r2, #32
 80096e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
	...

080096f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009704:	2b00      	cmp	r3, #0
 8009706:	d108      	bne.n	800971a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2201      	movs	r2, #1
 800970c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009718:	e031      	b.n	800977e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800971a:	2308      	movs	r3, #8
 800971c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800971e:	2308      	movs	r3, #8
 8009720:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	0e5b      	lsrs	r3, r3, #25
 800972a:	b2db      	uxtb	r3, r3
 800972c:	f003 0307 	and.w	r3, r3, #7
 8009730:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	0f5b      	lsrs	r3, r3, #29
 800973a:	b2db      	uxtb	r3, r3
 800973c:	f003 0307 	and.w	r3, r3, #7
 8009740:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009742:	7bbb      	ldrb	r3, [r7, #14]
 8009744:	7b3a      	ldrb	r2, [r7, #12]
 8009746:	4911      	ldr	r1, [pc, #68]	; (800978c <UARTEx_SetNbDataToProcess+0x94>)
 8009748:	5c8a      	ldrb	r2, [r1, r2]
 800974a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800974e:	7b3a      	ldrb	r2, [r7, #12]
 8009750:	490f      	ldr	r1, [pc, #60]	; (8009790 <UARTEx_SetNbDataToProcess+0x98>)
 8009752:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009754:	fb93 f3f2 	sdiv	r3, r3, r2
 8009758:	b29a      	uxth	r2, r3
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009760:	7bfb      	ldrb	r3, [r7, #15]
 8009762:	7b7a      	ldrb	r2, [r7, #13]
 8009764:	4909      	ldr	r1, [pc, #36]	; (800978c <UARTEx_SetNbDataToProcess+0x94>)
 8009766:	5c8a      	ldrb	r2, [r1, r2]
 8009768:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800976c:	7b7a      	ldrb	r2, [r7, #13]
 800976e:	4908      	ldr	r1, [pc, #32]	; (8009790 <UARTEx_SetNbDataToProcess+0x98>)
 8009770:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009772:	fb93 f3f2 	sdiv	r3, r3, r2
 8009776:	b29a      	uxth	r2, r3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800977e:	bf00      	nop
 8009780:	3714      	adds	r7, #20
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	0800cb18 	.word	0x0800cb18
 8009790:	0800cb20 	.word	0x0800cb20

08009794 <__errno>:
 8009794:	4b01      	ldr	r3, [pc, #4]	; (800979c <__errno+0x8>)
 8009796:	6818      	ldr	r0, [r3, #0]
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	20000044 	.word	0x20000044

080097a0 <__libc_init_array>:
 80097a0:	b570      	push	{r4, r5, r6, lr}
 80097a2:	4d0d      	ldr	r5, [pc, #52]	; (80097d8 <__libc_init_array+0x38>)
 80097a4:	4c0d      	ldr	r4, [pc, #52]	; (80097dc <__libc_init_array+0x3c>)
 80097a6:	1b64      	subs	r4, r4, r5
 80097a8:	10a4      	asrs	r4, r4, #2
 80097aa:	2600      	movs	r6, #0
 80097ac:	42a6      	cmp	r6, r4
 80097ae:	d109      	bne.n	80097c4 <__libc_init_array+0x24>
 80097b0:	4d0b      	ldr	r5, [pc, #44]	; (80097e0 <__libc_init_array+0x40>)
 80097b2:	4c0c      	ldr	r4, [pc, #48]	; (80097e4 <__libc_init_array+0x44>)
 80097b4:	f002 ff04 	bl	800c5c0 <_init>
 80097b8:	1b64      	subs	r4, r4, r5
 80097ba:	10a4      	asrs	r4, r4, #2
 80097bc:	2600      	movs	r6, #0
 80097be:	42a6      	cmp	r6, r4
 80097c0:	d105      	bne.n	80097ce <__libc_init_array+0x2e>
 80097c2:	bd70      	pop	{r4, r5, r6, pc}
 80097c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80097c8:	4798      	blx	r3
 80097ca:	3601      	adds	r6, #1
 80097cc:	e7ee      	b.n	80097ac <__libc_init_array+0xc>
 80097ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80097d2:	4798      	blx	r3
 80097d4:	3601      	adds	r6, #1
 80097d6:	e7f2      	b.n	80097be <__libc_init_array+0x1e>
 80097d8:	0800cf0c 	.word	0x0800cf0c
 80097dc:	0800cf0c 	.word	0x0800cf0c
 80097e0:	0800cf0c 	.word	0x0800cf0c
 80097e4:	0800cf10 	.word	0x0800cf10

080097e8 <memset>:
 80097e8:	4402      	add	r2, r0
 80097ea:	4603      	mov	r3, r0
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d100      	bne.n	80097f2 <memset+0xa>
 80097f0:	4770      	bx	lr
 80097f2:	f803 1b01 	strb.w	r1, [r3], #1
 80097f6:	e7f9      	b.n	80097ec <memset+0x4>

080097f8 <__cvt>:
 80097f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097fc:	ec55 4b10 	vmov	r4, r5, d0
 8009800:	2d00      	cmp	r5, #0
 8009802:	460e      	mov	r6, r1
 8009804:	4619      	mov	r1, r3
 8009806:	462b      	mov	r3, r5
 8009808:	bfbb      	ittet	lt
 800980a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800980e:	461d      	movlt	r5, r3
 8009810:	2300      	movge	r3, #0
 8009812:	232d      	movlt	r3, #45	; 0x2d
 8009814:	700b      	strb	r3, [r1, #0]
 8009816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009818:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800981c:	4691      	mov	r9, r2
 800981e:	f023 0820 	bic.w	r8, r3, #32
 8009822:	bfbc      	itt	lt
 8009824:	4622      	movlt	r2, r4
 8009826:	4614      	movlt	r4, r2
 8009828:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800982c:	d005      	beq.n	800983a <__cvt+0x42>
 800982e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009832:	d100      	bne.n	8009836 <__cvt+0x3e>
 8009834:	3601      	adds	r6, #1
 8009836:	2102      	movs	r1, #2
 8009838:	e000      	b.n	800983c <__cvt+0x44>
 800983a:	2103      	movs	r1, #3
 800983c:	ab03      	add	r3, sp, #12
 800983e:	9301      	str	r3, [sp, #4]
 8009840:	ab02      	add	r3, sp, #8
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	ec45 4b10 	vmov	d0, r4, r5
 8009848:	4653      	mov	r3, sl
 800984a:	4632      	mov	r2, r6
 800984c:	f000 fcec 	bl	800a228 <_dtoa_r>
 8009850:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009854:	4607      	mov	r7, r0
 8009856:	d102      	bne.n	800985e <__cvt+0x66>
 8009858:	f019 0f01 	tst.w	r9, #1
 800985c:	d022      	beq.n	80098a4 <__cvt+0xac>
 800985e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009862:	eb07 0906 	add.w	r9, r7, r6
 8009866:	d110      	bne.n	800988a <__cvt+0x92>
 8009868:	783b      	ldrb	r3, [r7, #0]
 800986a:	2b30      	cmp	r3, #48	; 0x30
 800986c:	d10a      	bne.n	8009884 <__cvt+0x8c>
 800986e:	2200      	movs	r2, #0
 8009870:	2300      	movs	r3, #0
 8009872:	4620      	mov	r0, r4
 8009874:	4629      	mov	r1, r5
 8009876:	f7f7 f90f 	bl	8000a98 <__aeabi_dcmpeq>
 800987a:	b918      	cbnz	r0, 8009884 <__cvt+0x8c>
 800987c:	f1c6 0601 	rsb	r6, r6, #1
 8009880:	f8ca 6000 	str.w	r6, [sl]
 8009884:	f8da 3000 	ldr.w	r3, [sl]
 8009888:	4499      	add	r9, r3
 800988a:	2200      	movs	r2, #0
 800988c:	2300      	movs	r3, #0
 800988e:	4620      	mov	r0, r4
 8009890:	4629      	mov	r1, r5
 8009892:	f7f7 f901 	bl	8000a98 <__aeabi_dcmpeq>
 8009896:	b108      	cbz	r0, 800989c <__cvt+0xa4>
 8009898:	f8cd 900c 	str.w	r9, [sp, #12]
 800989c:	2230      	movs	r2, #48	; 0x30
 800989e:	9b03      	ldr	r3, [sp, #12]
 80098a0:	454b      	cmp	r3, r9
 80098a2:	d307      	bcc.n	80098b4 <__cvt+0xbc>
 80098a4:	9b03      	ldr	r3, [sp, #12]
 80098a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098a8:	1bdb      	subs	r3, r3, r7
 80098aa:	4638      	mov	r0, r7
 80098ac:	6013      	str	r3, [r2, #0]
 80098ae:	b004      	add	sp, #16
 80098b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098b4:	1c59      	adds	r1, r3, #1
 80098b6:	9103      	str	r1, [sp, #12]
 80098b8:	701a      	strb	r2, [r3, #0]
 80098ba:	e7f0      	b.n	800989e <__cvt+0xa6>

080098bc <__exponent>:
 80098bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098be:	4603      	mov	r3, r0
 80098c0:	2900      	cmp	r1, #0
 80098c2:	bfb8      	it	lt
 80098c4:	4249      	neglt	r1, r1
 80098c6:	f803 2b02 	strb.w	r2, [r3], #2
 80098ca:	bfb4      	ite	lt
 80098cc:	222d      	movlt	r2, #45	; 0x2d
 80098ce:	222b      	movge	r2, #43	; 0x2b
 80098d0:	2909      	cmp	r1, #9
 80098d2:	7042      	strb	r2, [r0, #1]
 80098d4:	dd2a      	ble.n	800992c <__exponent+0x70>
 80098d6:	f10d 0407 	add.w	r4, sp, #7
 80098da:	46a4      	mov	ip, r4
 80098dc:	270a      	movs	r7, #10
 80098de:	46a6      	mov	lr, r4
 80098e0:	460a      	mov	r2, r1
 80098e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80098e6:	fb07 1516 	mls	r5, r7, r6, r1
 80098ea:	3530      	adds	r5, #48	; 0x30
 80098ec:	2a63      	cmp	r2, #99	; 0x63
 80098ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80098f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80098f6:	4631      	mov	r1, r6
 80098f8:	dcf1      	bgt.n	80098de <__exponent+0x22>
 80098fa:	3130      	adds	r1, #48	; 0x30
 80098fc:	f1ae 0502 	sub.w	r5, lr, #2
 8009900:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009904:	1c44      	adds	r4, r0, #1
 8009906:	4629      	mov	r1, r5
 8009908:	4561      	cmp	r1, ip
 800990a:	d30a      	bcc.n	8009922 <__exponent+0x66>
 800990c:	f10d 0209 	add.w	r2, sp, #9
 8009910:	eba2 020e 	sub.w	r2, r2, lr
 8009914:	4565      	cmp	r5, ip
 8009916:	bf88      	it	hi
 8009918:	2200      	movhi	r2, #0
 800991a:	4413      	add	r3, r2
 800991c:	1a18      	subs	r0, r3, r0
 800991e:	b003      	add	sp, #12
 8009920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009922:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009926:	f804 2f01 	strb.w	r2, [r4, #1]!
 800992a:	e7ed      	b.n	8009908 <__exponent+0x4c>
 800992c:	2330      	movs	r3, #48	; 0x30
 800992e:	3130      	adds	r1, #48	; 0x30
 8009930:	7083      	strb	r3, [r0, #2]
 8009932:	70c1      	strb	r1, [r0, #3]
 8009934:	1d03      	adds	r3, r0, #4
 8009936:	e7f1      	b.n	800991c <__exponent+0x60>

08009938 <_printf_float>:
 8009938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800993c:	ed2d 8b02 	vpush	{d8}
 8009940:	b08d      	sub	sp, #52	; 0x34
 8009942:	460c      	mov	r4, r1
 8009944:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009948:	4616      	mov	r6, r2
 800994a:	461f      	mov	r7, r3
 800994c:	4605      	mov	r5, r0
 800994e:	f001 fa59 	bl	800ae04 <_localeconv_r>
 8009952:	f8d0 a000 	ldr.w	sl, [r0]
 8009956:	4650      	mov	r0, sl
 8009958:	f7f6 fc1c 	bl	8000194 <strlen>
 800995c:	2300      	movs	r3, #0
 800995e:	930a      	str	r3, [sp, #40]	; 0x28
 8009960:	6823      	ldr	r3, [r4, #0]
 8009962:	9305      	str	r3, [sp, #20]
 8009964:	f8d8 3000 	ldr.w	r3, [r8]
 8009968:	f894 b018 	ldrb.w	fp, [r4, #24]
 800996c:	3307      	adds	r3, #7
 800996e:	f023 0307 	bic.w	r3, r3, #7
 8009972:	f103 0208 	add.w	r2, r3, #8
 8009976:	f8c8 2000 	str.w	r2, [r8]
 800997a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009982:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009986:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800998a:	9307      	str	r3, [sp, #28]
 800998c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009990:	ee08 0a10 	vmov	s16, r0
 8009994:	4b9f      	ldr	r3, [pc, #636]	; (8009c14 <_printf_float+0x2dc>)
 8009996:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800999a:	f04f 32ff 	mov.w	r2, #4294967295
 800999e:	f7f7 f8ad 	bl	8000afc <__aeabi_dcmpun>
 80099a2:	bb88      	cbnz	r0, 8009a08 <_printf_float+0xd0>
 80099a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099a8:	4b9a      	ldr	r3, [pc, #616]	; (8009c14 <_printf_float+0x2dc>)
 80099aa:	f04f 32ff 	mov.w	r2, #4294967295
 80099ae:	f7f7 f887 	bl	8000ac0 <__aeabi_dcmple>
 80099b2:	bb48      	cbnz	r0, 8009a08 <_printf_float+0xd0>
 80099b4:	2200      	movs	r2, #0
 80099b6:	2300      	movs	r3, #0
 80099b8:	4640      	mov	r0, r8
 80099ba:	4649      	mov	r1, r9
 80099bc:	f7f7 f876 	bl	8000aac <__aeabi_dcmplt>
 80099c0:	b110      	cbz	r0, 80099c8 <_printf_float+0x90>
 80099c2:	232d      	movs	r3, #45	; 0x2d
 80099c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099c8:	4b93      	ldr	r3, [pc, #588]	; (8009c18 <_printf_float+0x2e0>)
 80099ca:	4894      	ldr	r0, [pc, #592]	; (8009c1c <_printf_float+0x2e4>)
 80099cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80099d0:	bf94      	ite	ls
 80099d2:	4698      	movls	r8, r3
 80099d4:	4680      	movhi	r8, r0
 80099d6:	2303      	movs	r3, #3
 80099d8:	6123      	str	r3, [r4, #16]
 80099da:	9b05      	ldr	r3, [sp, #20]
 80099dc:	f023 0204 	bic.w	r2, r3, #4
 80099e0:	6022      	str	r2, [r4, #0]
 80099e2:	f04f 0900 	mov.w	r9, #0
 80099e6:	9700      	str	r7, [sp, #0]
 80099e8:	4633      	mov	r3, r6
 80099ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80099ec:	4621      	mov	r1, r4
 80099ee:	4628      	mov	r0, r5
 80099f0:	f000 f9d8 	bl	8009da4 <_printf_common>
 80099f4:	3001      	adds	r0, #1
 80099f6:	f040 8090 	bne.w	8009b1a <_printf_float+0x1e2>
 80099fa:	f04f 30ff 	mov.w	r0, #4294967295
 80099fe:	b00d      	add	sp, #52	; 0x34
 8009a00:	ecbd 8b02 	vpop	{d8}
 8009a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a08:	4642      	mov	r2, r8
 8009a0a:	464b      	mov	r3, r9
 8009a0c:	4640      	mov	r0, r8
 8009a0e:	4649      	mov	r1, r9
 8009a10:	f7f7 f874 	bl	8000afc <__aeabi_dcmpun>
 8009a14:	b140      	cbz	r0, 8009a28 <_printf_float+0xf0>
 8009a16:	464b      	mov	r3, r9
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	bfbc      	itt	lt
 8009a1c:	232d      	movlt	r3, #45	; 0x2d
 8009a1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009a22:	487f      	ldr	r0, [pc, #508]	; (8009c20 <_printf_float+0x2e8>)
 8009a24:	4b7f      	ldr	r3, [pc, #508]	; (8009c24 <_printf_float+0x2ec>)
 8009a26:	e7d1      	b.n	80099cc <_printf_float+0x94>
 8009a28:	6863      	ldr	r3, [r4, #4]
 8009a2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009a2e:	9206      	str	r2, [sp, #24]
 8009a30:	1c5a      	adds	r2, r3, #1
 8009a32:	d13f      	bne.n	8009ab4 <_printf_float+0x17c>
 8009a34:	2306      	movs	r3, #6
 8009a36:	6063      	str	r3, [r4, #4]
 8009a38:	9b05      	ldr	r3, [sp, #20]
 8009a3a:	6861      	ldr	r1, [r4, #4]
 8009a3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009a40:	2300      	movs	r3, #0
 8009a42:	9303      	str	r3, [sp, #12]
 8009a44:	ab0a      	add	r3, sp, #40	; 0x28
 8009a46:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009a4a:	ab09      	add	r3, sp, #36	; 0x24
 8009a4c:	ec49 8b10 	vmov	d0, r8, r9
 8009a50:	9300      	str	r3, [sp, #0]
 8009a52:	6022      	str	r2, [r4, #0]
 8009a54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a58:	4628      	mov	r0, r5
 8009a5a:	f7ff fecd 	bl	80097f8 <__cvt>
 8009a5e:	9b06      	ldr	r3, [sp, #24]
 8009a60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a62:	2b47      	cmp	r3, #71	; 0x47
 8009a64:	4680      	mov	r8, r0
 8009a66:	d108      	bne.n	8009a7a <_printf_float+0x142>
 8009a68:	1cc8      	adds	r0, r1, #3
 8009a6a:	db02      	blt.n	8009a72 <_printf_float+0x13a>
 8009a6c:	6863      	ldr	r3, [r4, #4]
 8009a6e:	4299      	cmp	r1, r3
 8009a70:	dd41      	ble.n	8009af6 <_printf_float+0x1be>
 8009a72:	f1ab 0b02 	sub.w	fp, fp, #2
 8009a76:	fa5f fb8b 	uxtb.w	fp, fp
 8009a7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a7e:	d820      	bhi.n	8009ac2 <_printf_float+0x18a>
 8009a80:	3901      	subs	r1, #1
 8009a82:	465a      	mov	r2, fp
 8009a84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a88:	9109      	str	r1, [sp, #36]	; 0x24
 8009a8a:	f7ff ff17 	bl	80098bc <__exponent>
 8009a8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a90:	1813      	adds	r3, r2, r0
 8009a92:	2a01      	cmp	r2, #1
 8009a94:	4681      	mov	r9, r0
 8009a96:	6123      	str	r3, [r4, #16]
 8009a98:	dc02      	bgt.n	8009aa0 <_printf_float+0x168>
 8009a9a:	6822      	ldr	r2, [r4, #0]
 8009a9c:	07d2      	lsls	r2, r2, #31
 8009a9e:	d501      	bpl.n	8009aa4 <_printf_float+0x16c>
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	6123      	str	r3, [r4, #16]
 8009aa4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d09c      	beq.n	80099e6 <_printf_float+0xae>
 8009aac:	232d      	movs	r3, #45	; 0x2d
 8009aae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ab2:	e798      	b.n	80099e6 <_printf_float+0xae>
 8009ab4:	9a06      	ldr	r2, [sp, #24]
 8009ab6:	2a47      	cmp	r2, #71	; 0x47
 8009ab8:	d1be      	bne.n	8009a38 <_printf_float+0x100>
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1bc      	bne.n	8009a38 <_printf_float+0x100>
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e7b9      	b.n	8009a36 <_printf_float+0xfe>
 8009ac2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009ac6:	d118      	bne.n	8009afa <_printf_float+0x1c2>
 8009ac8:	2900      	cmp	r1, #0
 8009aca:	6863      	ldr	r3, [r4, #4]
 8009acc:	dd0b      	ble.n	8009ae6 <_printf_float+0x1ae>
 8009ace:	6121      	str	r1, [r4, #16]
 8009ad0:	b913      	cbnz	r3, 8009ad8 <_printf_float+0x1a0>
 8009ad2:	6822      	ldr	r2, [r4, #0]
 8009ad4:	07d0      	lsls	r0, r2, #31
 8009ad6:	d502      	bpl.n	8009ade <_printf_float+0x1a6>
 8009ad8:	3301      	adds	r3, #1
 8009ada:	440b      	add	r3, r1
 8009adc:	6123      	str	r3, [r4, #16]
 8009ade:	65a1      	str	r1, [r4, #88]	; 0x58
 8009ae0:	f04f 0900 	mov.w	r9, #0
 8009ae4:	e7de      	b.n	8009aa4 <_printf_float+0x16c>
 8009ae6:	b913      	cbnz	r3, 8009aee <_printf_float+0x1b6>
 8009ae8:	6822      	ldr	r2, [r4, #0]
 8009aea:	07d2      	lsls	r2, r2, #31
 8009aec:	d501      	bpl.n	8009af2 <_printf_float+0x1ba>
 8009aee:	3302      	adds	r3, #2
 8009af0:	e7f4      	b.n	8009adc <_printf_float+0x1a4>
 8009af2:	2301      	movs	r3, #1
 8009af4:	e7f2      	b.n	8009adc <_printf_float+0x1a4>
 8009af6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009afc:	4299      	cmp	r1, r3
 8009afe:	db05      	blt.n	8009b0c <_printf_float+0x1d4>
 8009b00:	6823      	ldr	r3, [r4, #0]
 8009b02:	6121      	str	r1, [r4, #16]
 8009b04:	07d8      	lsls	r0, r3, #31
 8009b06:	d5ea      	bpl.n	8009ade <_printf_float+0x1a6>
 8009b08:	1c4b      	adds	r3, r1, #1
 8009b0a:	e7e7      	b.n	8009adc <_printf_float+0x1a4>
 8009b0c:	2900      	cmp	r1, #0
 8009b0e:	bfd4      	ite	le
 8009b10:	f1c1 0202 	rsble	r2, r1, #2
 8009b14:	2201      	movgt	r2, #1
 8009b16:	4413      	add	r3, r2
 8009b18:	e7e0      	b.n	8009adc <_printf_float+0x1a4>
 8009b1a:	6823      	ldr	r3, [r4, #0]
 8009b1c:	055a      	lsls	r2, r3, #21
 8009b1e:	d407      	bmi.n	8009b30 <_printf_float+0x1f8>
 8009b20:	6923      	ldr	r3, [r4, #16]
 8009b22:	4642      	mov	r2, r8
 8009b24:	4631      	mov	r1, r6
 8009b26:	4628      	mov	r0, r5
 8009b28:	47b8      	blx	r7
 8009b2a:	3001      	adds	r0, #1
 8009b2c:	d12c      	bne.n	8009b88 <_printf_float+0x250>
 8009b2e:	e764      	b.n	80099fa <_printf_float+0xc2>
 8009b30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b34:	f240 80e0 	bls.w	8009cf8 <_printf_float+0x3c0>
 8009b38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	2300      	movs	r3, #0
 8009b40:	f7f6 ffaa 	bl	8000a98 <__aeabi_dcmpeq>
 8009b44:	2800      	cmp	r0, #0
 8009b46:	d034      	beq.n	8009bb2 <_printf_float+0x27a>
 8009b48:	4a37      	ldr	r2, [pc, #220]	; (8009c28 <_printf_float+0x2f0>)
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	4631      	mov	r1, r6
 8009b4e:	4628      	mov	r0, r5
 8009b50:	47b8      	blx	r7
 8009b52:	3001      	adds	r0, #1
 8009b54:	f43f af51 	beq.w	80099fa <_printf_float+0xc2>
 8009b58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	db02      	blt.n	8009b66 <_printf_float+0x22e>
 8009b60:	6823      	ldr	r3, [r4, #0]
 8009b62:	07d8      	lsls	r0, r3, #31
 8009b64:	d510      	bpl.n	8009b88 <_printf_float+0x250>
 8009b66:	ee18 3a10 	vmov	r3, s16
 8009b6a:	4652      	mov	r2, sl
 8009b6c:	4631      	mov	r1, r6
 8009b6e:	4628      	mov	r0, r5
 8009b70:	47b8      	blx	r7
 8009b72:	3001      	adds	r0, #1
 8009b74:	f43f af41 	beq.w	80099fa <_printf_float+0xc2>
 8009b78:	f04f 0800 	mov.w	r8, #0
 8009b7c:	f104 091a 	add.w	r9, r4, #26
 8009b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b82:	3b01      	subs	r3, #1
 8009b84:	4543      	cmp	r3, r8
 8009b86:	dc09      	bgt.n	8009b9c <_printf_float+0x264>
 8009b88:	6823      	ldr	r3, [r4, #0]
 8009b8a:	079b      	lsls	r3, r3, #30
 8009b8c:	f100 8105 	bmi.w	8009d9a <_printf_float+0x462>
 8009b90:	68e0      	ldr	r0, [r4, #12]
 8009b92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b94:	4298      	cmp	r0, r3
 8009b96:	bfb8      	it	lt
 8009b98:	4618      	movlt	r0, r3
 8009b9a:	e730      	b.n	80099fe <_printf_float+0xc6>
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	464a      	mov	r2, r9
 8009ba0:	4631      	mov	r1, r6
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	47b8      	blx	r7
 8009ba6:	3001      	adds	r0, #1
 8009ba8:	f43f af27 	beq.w	80099fa <_printf_float+0xc2>
 8009bac:	f108 0801 	add.w	r8, r8, #1
 8009bb0:	e7e6      	b.n	8009b80 <_printf_float+0x248>
 8009bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	dc39      	bgt.n	8009c2c <_printf_float+0x2f4>
 8009bb8:	4a1b      	ldr	r2, [pc, #108]	; (8009c28 <_printf_float+0x2f0>)
 8009bba:	2301      	movs	r3, #1
 8009bbc:	4631      	mov	r1, r6
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	47b8      	blx	r7
 8009bc2:	3001      	adds	r0, #1
 8009bc4:	f43f af19 	beq.w	80099fa <_printf_float+0xc2>
 8009bc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	d102      	bne.n	8009bd6 <_printf_float+0x29e>
 8009bd0:	6823      	ldr	r3, [r4, #0]
 8009bd2:	07d9      	lsls	r1, r3, #31
 8009bd4:	d5d8      	bpl.n	8009b88 <_printf_float+0x250>
 8009bd6:	ee18 3a10 	vmov	r3, s16
 8009bda:	4652      	mov	r2, sl
 8009bdc:	4631      	mov	r1, r6
 8009bde:	4628      	mov	r0, r5
 8009be0:	47b8      	blx	r7
 8009be2:	3001      	adds	r0, #1
 8009be4:	f43f af09 	beq.w	80099fa <_printf_float+0xc2>
 8009be8:	f04f 0900 	mov.w	r9, #0
 8009bec:	f104 0a1a 	add.w	sl, r4, #26
 8009bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bf2:	425b      	negs	r3, r3
 8009bf4:	454b      	cmp	r3, r9
 8009bf6:	dc01      	bgt.n	8009bfc <_printf_float+0x2c4>
 8009bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bfa:	e792      	b.n	8009b22 <_printf_float+0x1ea>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	4652      	mov	r2, sl
 8009c00:	4631      	mov	r1, r6
 8009c02:	4628      	mov	r0, r5
 8009c04:	47b8      	blx	r7
 8009c06:	3001      	adds	r0, #1
 8009c08:	f43f aef7 	beq.w	80099fa <_printf_float+0xc2>
 8009c0c:	f109 0901 	add.w	r9, r9, #1
 8009c10:	e7ee      	b.n	8009bf0 <_printf_float+0x2b8>
 8009c12:	bf00      	nop
 8009c14:	7fefffff 	.word	0x7fefffff
 8009c18:	0800cb2c 	.word	0x0800cb2c
 8009c1c:	0800cb30 	.word	0x0800cb30
 8009c20:	0800cb38 	.word	0x0800cb38
 8009c24:	0800cb34 	.word	0x0800cb34
 8009c28:	0800cb3c 	.word	0x0800cb3c
 8009c2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c30:	429a      	cmp	r2, r3
 8009c32:	bfa8      	it	ge
 8009c34:	461a      	movge	r2, r3
 8009c36:	2a00      	cmp	r2, #0
 8009c38:	4691      	mov	r9, r2
 8009c3a:	dc37      	bgt.n	8009cac <_printf_float+0x374>
 8009c3c:	f04f 0b00 	mov.w	fp, #0
 8009c40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c44:	f104 021a 	add.w	r2, r4, #26
 8009c48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c4a:	9305      	str	r3, [sp, #20]
 8009c4c:	eba3 0309 	sub.w	r3, r3, r9
 8009c50:	455b      	cmp	r3, fp
 8009c52:	dc33      	bgt.n	8009cbc <_printf_float+0x384>
 8009c54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	db3b      	blt.n	8009cd4 <_printf_float+0x39c>
 8009c5c:	6823      	ldr	r3, [r4, #0]
 8009c5e:	07da      	lsls	r2, r3, #31
 8009c60:	d438      	bmi.n	8009cd4 <_printf_float+0x39c>
 8009c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c64:	9a05      	ldr	r2, [sp, #20]
 8009c66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c68:	1a9a      	subs	r2, r3, r2
 8009c6a:	eba3 0901 	sub.w	r9, r3, r1
 8009c6e:	4591      	cmp	r9, r2
 8009c70:	bfa8      	it	ge
 8009c72:	4691      	movge	r9, r2
 8009c74:	f1b9 0f00 	cmp.w	r9, #0
 8009c78:	dc35      	bgt.n	8009ce6 <_printf_float+0x3ae>
 8009c7a:	f04f 0800 	mov.w	r8, #0
 8009c7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c82:	f104 0a1a 	add.w	sl, r4, #26
 8009c86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c8a:	1a9b      	subs	r3, r3, r2
 8009c8c:	eba3 0309 	sub.w	r3, r3, r9
 8009c90:	4543      	cmp	r3, r8
 8009c92:	f77f af79 	ble.w	8009b88 <_printf_float+0x250>
 8009c96:	2301      	movs	r3, #1
 8009c98:	4652      	mov	r2, sl
 8009c9a:	4631      	mov	r1, r6
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	47b8      	blx	r7
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	f43f aeaa 	beq.w	80099fa <_printf_float+0xc2>
 8009ca6:	f108 0801 	add.w	r8, r8, #1
 8009caa:	e7ec      	b.n	8009c86 <_printf_float+0x34e>
 8009cac:	4613      	mov	r3, r2
 8009cae:	4631      	mov	r1, r6
 8009cb0:	4642      	mov	r2, r8
 8009cb2:	4628      	mov	r0, r5
 8009cb4:	47b8      	blx	r7
 8009cb6:	3001      	adds	r0, #1
 8009cb8:	d1c0      	bne.n	8009c3c <_printf_float+0x304>
 8009cba:	e69e      	b.n	80099fa <_printf_float+0xc2>
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	4631      	mov	r1, r6
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	9205      	str	r2, [sp, #20]
 8009cc4:	47b8      	blx	r7
 8009cc6:	3001      	adds	r0, #1
 8009cc8:	f43f ae97 	beq.w	80099fa <_printf_float+0xc2>
 8009ccc:	9a05      	ldr	r2, [sp, #20]
 8009cce:	f10b 0b01 	add.w	fp, fp, #1
 8009cd2:	e7b9      	b.n	8009c48 <_printf_float+0x310>
 8009cd4:	ee18 3a10 	vmov	r3, s16
 8009cd8:	4652      	mov	r2, sl
 8009cda:	4631      	mov	r1, r6
 8009cdc:	4628      	mov	r0, r5
 8009cde:	47b8      	blx	r7
 8009ce0:	3001      	adds	r0, #1
 8009ce2:	d1be      	bne.n	8009c62 <_printf_float+0x32a>
 8009ce4:	e689      	b.n	80099fa <_printf_float+0xc2>
 8009ce6:	9a05      	ldr	r2, [sp, #20]
 8009ce8:	464b      	mov	r3, r9
 8009cea:	4442      	add	r2, r8
 8009cec:	4631      	mov	r1, r6
 8009cee:	4628      	mov	r0, r5
 8009cf0:	47b8      	blx	r7
 8009cf2:	3001      	adds	r0, #1
 8009cf4:	d1c1      	bne.n	8009c7a <_printf_float+0x342>
 8009cf6:	e680      	b.n	80099fa <_printf_float+0xc2>
 8009cf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cfa:	2a01      	cmp	r2, #1
 8009cfc:	dc01      	bgt.n	8009d02 <_printf_float+0x3ca>
 8009cfe:	07db      	lsls	r3, r3, #31
 8009d00:	d538      	bpl.n	8009d74 <_printf_float+0x43c>
 8009d02:	2301      	movs	r3, #1
 8009d04:	4642      	mov	r2, r8
 8009d06:	4631      	mov	r1, r6
 8009d08:	4628      	mov	r0, r5
 8009d0a:	47b8      	blx	r7
 8009d0c:	3001      	adds	r0, #1
 8009d0e:	f43f ae74 	beq.w	80099fa <_printf_float+0xc2>
 8009d12:	ee18 3a10 	vmov	r3, s16
 8009d16:	4652      	mov	r2, sl
 8009d18:	4631      	mov	r1, r6
 8009d1a:	4628      	mov	r0, r5
 8009d1c:	47b8      	blx	r7
 8009d1e:	3001      	adds	r0, #1
 8009d20:	f43f ae6b 	beq.w	80099fa <_printf_float+0xc2>
 8009d24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d28:	2200      	movs	r2, #0
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	f7f6 feb4 	bl	8000a98 <__aeabi_dcmpeq>
 8009d30:	b9d8      	cbnz	r0, 8009d6a <_printf_float+0x432>
 8009d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d34:	f108 0201 	add.w	r2, r8, #1
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	4631      	mov	r1, r6
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	47b8      	blx	r7
 8009d40:	3001      	adds	r0, #1
 8009d42:	d10e      	bne.n	8009d62 <_printf_float+0x42a>
 8009d44:	e659      	b.n	80099fa <_printf_float+0xc2>
 8009d46:	2301      	movs	r3, #1
 8009d48:	4652      	mov	r2, sl
 8009d4a:	4631      	mov	r1, r6
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	47b8      	blx	r7
 8009d50:	3001      	adds	r0, #1
 8009d52:	f43f ae52 	beq.w	80099fa <_printf_float+0xc2>
 8009d56:	f108 0801 	add.w	r8, r8, #1
 8009d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	4543      	cmp	r3, r8
 8009d60:	dcf1      	bgt.n	8009d46 <_printf_float+0x40e>
 8009d62:	464b      	mov	r3, r9
 8009d64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d68:	e6dc      	b.n	8009b24 <_printf_float+0x1ec>
 8009d6a:	f04f 0800 	mov.w	r8, #0
 8009d6e:	f104 0a1a 	add.w	sl, r4, #26
 8009d72:	e7f2      	b.n	8009d5a <_printf_float+0x422>
 8009d74:	2301      	movs	r3, #1
 8009d76:	4642      	mov	r2, r8
 8009d78:	e7df      	b.n	8009d3a <_printf_float+0x402>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	464a      	mov	r2, r9
 8009d7e:	4631      	mov	r1, r6
 8009d80:	4628      	mov	r0, r5
 8009d82:	47b8      	blx	r7
 8009d84:	3001      	adds	r0, #1
 8009d86:	f43f ae38 	beq.w	80099fa <_printf_float+0xc2>
 8009d8a:	f108 0801 	add.w	r8, r8, #1
 8009d8e:	68e3      	ldr	r3, [r4, #12]
 8009d90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d92:	1a5b      	subs	r3, r3, r1
 8009d94:	4543      	cmp	r3, r8
 8009d96:	dcf0      	bgt.n	8009d7a <_printf_float+0x442>
 8009d98:	e6fa      	b.n	8009b90 <_printf_float+0x258>
 8009d9a:	f04f 0800 	mov.w	r8, #0
 8009d9e:	f104 0919 	add.w	r9, r4, #25
 8009da2:	e7f4      	b.n	8009d8e <_printf_float+0x456>

08009da4 <_printf_common>:
 8009da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009da8:	4616      	mov	r6, r2
 8009daa:	4699      	mov	r9, r3
 8009dac:	688a      	ldr	r2, [r1, #8]
 8009dae:	690b      	ldr	r3, [r1, #16]
 8009db0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009db4:	4293      	cmp	r3, r2
 8009db6:	bfb8      	it	lt
 8009db8:	4613      	movlt	r3, r2
 8009dba:	6033      	str	r3, [r6, #0]
 8009dbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009dc0:	4607      	mov	r7, r0
 8009dc2:	460c      	mov	r4, r1
 8009dc4:	b10a      	cbz	r2, 8009dca <_printf_common+0x26>
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	6033      	str	r3, [r6, #0]
 8009dca:	6823      	ldr	r3, [r4, #0]
 8009dcc:	0699      	lsls	r1, r3, #26
 8009dce:	bf42      	ittt	mi
 8009dd0:	6833      	ldrmi	r3, [r6, #0]
 8009dd2:	3302      	addmi	r3, #2
 8009dd4:	6033      	strmi	r3, [r6, #0]
 8009dd6:	6825      	ldr	r5, [r4, #0]
 8009dd8:	f015 0506 	ands.w	r5, r5, #6
 8009ddc:	d106      	bne.n	8009dec <_printf_common+0x48>
 8009dde:	f104 0a19 	add.w	sl, r4, #25
 8009de2:	68e3      	ldr	r3, [r4, #12]
 8009de4:	6832      	ldr	r2, [r6, #0]
 8009de6:	1a9b      	subs	r3, r3, r2
 8009de8:	42ab      	cmp	r3, r5
 8009dea:	dc26      	bgt.n	8009e3a <_printf_common+0x96>
 8009dec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009df0:	1e13      	subs	r3, r2, #0
 8009df2:	6822      	ldr	r2, [r4, #0]
 8009df4:	bf18      	it	ne
 8009df6:	2301      	movne	r3, #1
 8009df8:	0692      	lsls	r2, r2, #26
 8009dfa:	d42b      	bmi.n	8009e54 <_printf_common+0xb0>
 8009dfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e00:	4649      	mov	r1, r9
 8009e02:	4638      	mov	r0, r7
 8009e04:	47c0      	blx	r8
 8009e06:	3001      	adds	r0, #1
 8009e08:	d01e      	beq.n	8009e48 <_printf_common+0xa4>
 8009e0a:	6823      	ldr	r3, [r4, #0]
 8009e0c:	68e5      	ldr	r5, [r4, #12]
 8009e0e:	6832      	ldr	r2, [r6, #0]
 8009e10:	f003 0306 	and.w	r3, r3, #6
 8009e14:	2b04      	cmp	r3, #4
 8009e16:	bf08      	it	eq
 8009e18:	1aad      	subeq	r5, r5, r2
 8009e1a:	68a3      	ldr	r3, [r4, #8]
 8009e1c:	6922      	ldr	r2, [r4, #16]
 8009e1e:	bf0c      	ite	eq
 8009e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e24:	2500      	movne	r5, #0
 8009e26:	4293      	cmp	r3, r2
 8009e28:	bfc4      	itt	gt
 8009e2a:	1a9b      	subgt	r3, r3, r2
 8009e2c:	18ed      	addgt	r5, r5, r3
 8009e2e:	2600      	movs	r6, #0
 8009e30:	341a      	adds	r4, #26
 8009e32:	42b5      	cmp	r5, r6
 8009e34:	d11a      	bne.n	8009e6c <_printf_common+0xc8>
 8009e36:	2000      	movs	r0, #0
 8009e38:	e008      	b.n	8009e4c <_printf_common+0xa8>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	4652      	mov	r2, sl
 8009e3e:	4649      	mov	r1, r9
 8009e40:	4638      	mov	r0, r7
 8009e42:	47c0      	blx	r8
 8009e44:	3001      	adds	r0, #1
 8009e46:	d103      	bne.n	8009e50 <_printf_common+0xac>
 8009e48:	f04f 30ff 	mov.w	r0, #4294967295
 8009e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e50:	3501      	adds	r5, #1
 8009e52:	e7c6      	b.n	8009de2 <_printf_common+0x3e>
 8009e54:	18e1      	adds	r1, r4, r3
 8009e56:	1c5a      	adds	r2, r3, #1
 8009e58:	2030      	movs	r0, #48	; 0x30
 8009e5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e5e:	4422      	add	r2, r4
 8009e60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e68:	3302      	adds	r3, #2
 8009e6a:	e7c7      	b.n	8009dfc <_printf_common+0x58>
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	4622      	mov	r2, r4
 8009e70:	4649      	mov	r1, r9
 8009e72:	4638      	mov	r0, r7
 8009e74:	47c0      	blx	r8
 8009e76:	3001      	adds	r0, #1
 8009e78:	d0e6      	beq.n	8009e48 <_printf_common+0xa4>
 8009e7a:	3601      	adds	r6, #1
 8009e7c:	e7d9      	b.n	8009e32 <_printf_common+0x8e>
	...

08009e80 <_printf_i>:
 8009e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e84:	7e0f      	ldrb	r7, [r1, #24]
 8009e86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e88:	2f78      	cmp	r7, #120	; 0x78
 8009e8a:	4691      	mov	r9, r2
 8009e8c:	4680      	mov	r8, r0
 8009e8e:	460c      	mov	r4, r1
 8009e90:	469a      	mov	sl, r3
 8009e92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e96:	d807      	bhi.n	8009ea8 <_printf_i+0x28>
 8009e98:	2f62      	cmp	r7, #98	; 0x62
 8009e9a:	d80a      	bhi.n	8009eb2 <_printf_i+0x32>
 8009e9c:	2f00      	cmp	r7, #0
 8009e9e:	f000 80d8 	beq.w	800a052 <_printf_i+0x1d2>
 8009ea2:	2f58      	cmp	r7, #88	; 0x58
 8009ea4:	f000 80a3 	beq.w	8009fee <_printf_i+0x16e>
 8009ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009eac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009eb0:	e03a      	b.n	8009f28 <_printf_i+0xa8>
 8009eb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009eb6:	2b15      	cmp	r3, #21
 8009eb8:	d8f6      	bhi.n	8009ea8 <_printf_i+0x28>
 8009eba:	a101      	add	r1, pc, #4	; (adr r1, 8009ec0 <_printf_i+0x40>)
 8009ebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ec0:	08009f19 	.word	0x08009f19
 8009ec4:	08009f2d 	.word	0x08009f2d
 8009ec8:	08009ea9 	.word	0x08009ea9
 8009ecc:	08009ea9 	.word	0x08009ea9
 8009ed0:	08009ea9 	.word	0x08009ea9
 8009ed4:	08009ea9 	.word	0x08009ea9
 8009ed8:	08009f2d 	.word	0x08009f2d
 8009edc:	08009ea9 	.word	0x08009ea9
 8009ee0:	08009ea9 	.word	0x08009ea9
 8009ee4:	08009ea9 	.word	0x08009ea9
 8009ee8:	08009ea9 	.word	0x08009ea9
 8009eec:	0800a039 	.word	0x0800a039
 8009ef0:	08009f5d 	.word	0x08009f5d
 8009ef4:	0800a01b 	.word	0x0800a01b
 8009ef8:	08009ea9 	.word	0x08009ea9
 8009efc:	08009ea9 	.word	0x08009ea9
 8009f00:	0800a05b 	.word	0x0800a05b
 8009f04:	08009ea9 	.word	0x08009ea9
 8009f08:	08009f5d 	.word	0x08009f5d
 8009f0c:	08009ea9 	.word	0x08009ea9
 8009f10:	08009ea9 	.word	0x08009ea9
 8009f14:	0800a023 	.word	0x0800a023
 8009f18:	682b      	ldr	r3, [r5, #0]
 8009f1a:	1d1a      	adds	r2, r3, #4
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	602a      	str	r2, [r5, #0]
 8009f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e0a3      	b.n	800a074 <_printf_i+0x1f4>
 8009f2c:	6820      	ldr	r0, [r4, #0]
 8009f2e:	6829      	ldr	r1, [r5, #0]
 8009f30:	0606      	lsls	r6, r0, #24
 8009f32:	f101 0304 	add.w	r3, r1, #4
 8009f36:	d50a      	bpl.n	8009f4e <_printf_i+0xce>
 8009f38:	680e      	ldr	r6, [r1, #0]
 8009f3a:	602b      	str	r3, [r5, #0]
 8009f3c:	2e00      	cmp	r6, #0
 8009f3e:	da03      	bge.n	8009f48 <_printf_i+0xc8>
 8009f40:	232d      	movs	r3, #45	; 0x2d
 8009f42:	4276      	negs	r6, r6
 8009f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f48:	485e      	ldr	r0, [pc, #376]	; (800a0c4 <_printf_i+0x244>)
 8009f4a:	230a      	movs	r3, #10
 8009f4c:	e019      	b.n	8009f82 <_printf_i+0x102>
 8009f4e:	680e      	ldr	r6, [r1, #0]
 8009f50:	602b      	str	r3, [r5, #0]
 8009f52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f56:	bf18      	it	ne
 8009f58:	b236      	sxthne	r6, r6
 8009f5a:	e7ef      	b.n	8009f3c <_printf_i+0xbc>
 8009f5c:	682b      	ldr	r3, [r5, #0]
 8009f5e:	6820      	ldr	r0, [r4, #0]
 8009f60:	1d19      	adds	r1, r3, #4
 8009f62:	6029      	str	r1, [r5, #0]
 8009f64:	0601      	lsls	r1, r0, #24
 8009f66:	d501      	bpl.n	8009f6c <_printf_i+0xec>
 8009f68:	681e      	ldr	r6, [r3, #0]
 8009f6a:	e002      	b.n	8009f72 <_printf_i+0xf2>
 8009f6c:	0646      	lsls	r6, r0, #25
 8009f6e:	d5fb      	bpl.n	8009f68 <_printf_i+0xe8>
 8009f70:	881e      	ldrh	r6, [r3, #0]
 8009f72:	4854      	ldr	r0, [pc, #336]	; (800a0c4 <_printf_i+0x244>)
 8009f74:	2f6f      	cmp	r7, #111	; 0x6f
 8009f76:	bf0c      	ite	eq
 8009f78:	2308      	moveq	r3, #8
 8009f7a:	230a      	movne	r3, #10
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f82:	6865      	ldr	r5, [r4, #4]
 8009f84:	60a5      	str	r5, [r4, #8]
 8009f86:	2d00      	cmp	r5, #0
 8009f88:	bfa2      	ittt	ge
 8009f8a:	6821      	ldrge	r1, [r4, #0]
 8009f8c:	f021 0104 	bicge.w	r1, r1, #4
 8009f90:	6021      	strge	r1, [r4, #0]
 8009f92:	b90e      	cbnz	r6, 8009f98 <_printf_i+0x118>
 8009f94:	2d00      	cmp	r5, #0
 8009f96:	d04d      	beq.n	800a034 <_printf_i+0x1b4>
 8009f98:	4615      	mov	r5, r2
 8009f9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f9e:	fb03 6711 	mls	r7, r3, r1, r6
 8009fa2:	5dc7      	ldrb	r7, [r0, r7]
 8009fa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009fa8:	4637      	mov	r7, r6
 8009faa:	42bb      	cmp	r3, r7
 8009fac:	460e      	mov	r6, r1
 8009fae:	d9f4      	bls.n	8009f9a <_printf_i+0x11a>
 8009fb0:	2b08      	cmp	r3, #8
 8009fb2:	d10b      	bne.n	8009fcc <_printf_i+0x14c>
 8009fb4:	6823      	ldr	r3, [r4, #0]
 8009fb6:	07de      	lsls	r6, r3, #31
 8009fb8:	d508      	bpl.n	8009fcc <_printf_i+0x14c>
 8009fba:	6923      	ldr	r3, [r4, #16]
 8009fbc:	6861      	ldr	r1, [r4, #4]
 8009fbe:	4299      	cmp	r1, r3
 8009fc0:	bfde      	ittt	le
 8009fc2:	2330      	movle	r3, #48	; 0x30
 8009fc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009fc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009fcc:	1b52      	subs	r2, r2, r5
 8009fce:	6122      	str	r2, [r4, #16]
 8009fd0:	f8cd a000 	str.w	sl, [sp]
 8009fd4:	464b      	mov	r3, r9
 8009fd6:	aa03      	add	r2, sp, #12
 8009fd8:	4621      	mov	r1, r4
 8009fda:	4640      	mov	r0, r8
 8009fdc:	f7ff fee2 	bl	8009da4 <_printf_common>
 8009fe0:	3001      	adds	r0, #1
 8009fe2:	d14c      	bne.n	800a07e <_printf_i+0x1fe>
 8009fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe8:	b004      	add	sp, #16
 8009fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fee:	4835      	ldr	r0, [pc, #212]	; (800a0c4 <_printf_i+0x244>)
 8009ff0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009ff4:	6829      	ldr	r1, [r5, #0]
 8009ff6:	6823      	ldr	r3, [r4, #0]
 8009ff8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ffc:	6029      	str	r1, [r5, #0]
 8009ffe:	061d      	lsls	r5, r3, #24
 800a000:	d514      	bpl.n	800a02c <_printf_i+0x1ac>
 800a002:	07df      	lsls	r7, r3, #31
 800a004:	bf44      	itt	mi
 800a006:	f043 0320 	orrmi.w	r3, r3, #32
 800a00a:	6023      	strmi	r3, [r4, #0]
 800a00c:	b91e      	cbnz	r6, 800a016 <_printf_i+0x196>
 800a00e:	6823      	ldr	r3, [r4, #0]
 800a010:	f023 0320 	bic.w	r3, r3, #32
 800a014:	6023      	str	r3, [r4, #0]
 800a016:	2310      	movs	r3, #16
 800a018:	e7b0      	b.n	8009f7c <_printf_i+0xfc>
 800a01a:	6823      	ldr	r3, [r4, #0]
 800a01c:	f043 0320 	orr.w	r3, r3, #32
 800a020:	6023      	str	r3, [r4, #0]
 800a022:	2378      	movs	r3, #120	; 0x78
 800a024:	4828      	ldr	r0, [pc, #160]	; (800a0c8 <_printf_i+0x248>)
 800a026:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a02a:	e7e3      	b.n	8009ff4 <_printf_i+0x174>
 800a02c:	0659      	lsls	r1, r3, #25
 800a02e:	bf48      	it	mi
 800a030:	b2b6      	uxthmi	r6, r6
 800a032:	e7e6      	b.n	800a002 <_printf_i+0x182>
 800a034:	4615      	mov	r5, r2
 800a036:	e7bb      	b.n	8009fb0 <_printf_i+0x130>
 800a038:	682b      	ldr	r3, [r5, #0]
 800a03a:	6826      	ldr	r6, [r4, #0]
 800a03c:	6961      	ldr	r1, [r4, #20]
 800a03e:	1d18      	adds	r0, r3, #4
 800a040:	6028      	str	r0, [r5, #0]
 800a042:	0635      	lsls	r5, r6, #24
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	d501      	bpl.n	800a04c <_printf_i+0x1cc>
 800a048:	6019      	str	r1, [r3, #0]
 800a04a:	e002      	b.n	800a052 <_printf_i+0x1d2>
 800a04c:	0670      	lsls	r0, r6, #25
 800a04e:	d5fb      	bpl.n	800a048 <_printf_i+0x1c8>
 800a050:	8019      	strh	r1, [r3, #0]
 800a052:	2300      	movs	r3, #0
 800a054:	6123      	str	r3, [r4, #16]
 800a056:	4615      	mov	r5, r2
 800a058:	e7ba      	b.n	8009fd0 <_printf_i+0x150>
 800a05a:	682b      	ldr	r3, [r5, #0]
 800a05c:	1d1a      	adds	r2, r3, #4
 800a05e:	602a      	str	r2, [r5, #0]
 800a060:	681d      	ldr	r5, [r3, #0]
 800a062:	6862      	ldr	r2, [r4, #4]
 800a064:	2100      	movs	r1, #0
 800a066:	4628      	mov	r0, r5
 800a068:	f7f6 f8a2 	bl	80001b0 <memchr>
 800a06c:	b108      	cbz	r0, 800a072 <_printf_i+0x1f2>
 800a06e:	1b40      	subs	r0, r0, r5
 800a070:	6060      	str	r0, [r4, #4]
 800a072:	6863      	ldr	r3, [r4, #4]
 800a074:	6123      	str	r3, [r4, #16]
 800a076:	2300      	movs	r3, #0
 800a078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a07c:	e7a8      	b.n	8009fd0 <_printf_i+0x150>
 800a07e:	6923      	ldr	r3, [r4, #16]
 800a080:	462a      	mov	r2, r5
 800a082:	4649      	mov	r1, r9
 800a084:	4640      	mov	r0, r8
 800a086:	47d0      	blx	sl
 800a088:	3001      	adds	r0, #1
 800a08a:	d0ab      	beq.n	8009fe4 <_printf_i+0x164>
 800a08c:	6823      	ldr	r3, [r4, #0]
 800a08e:	079b      	lsls	r3, r3, #30
 800a090:	d413      	bmi.n	800a0ba <_printf_i+0x23a>
 800a092:	68e0      	ldr	r0, [r4, #12]
 800a094:	9b03      	ldr	r3, [sp, #12]
 800a096:	4298      	cmp	r0, r3
 800a098:	bfb8      	it	lt
 800a09a:	4618      	movlt	r0, r3
 800a09c:	e7a4      	b.n	8009fe8 <_printf_i+0x168>
 800a09e:	2301      	movs	r3, #1
 800a0a0:	4632      	mov	r2, r6
 800a0a2:	4649      	mov	r1, r9
 800a0a4:	4640      	mov	r0, r8
 800a0a6:	47d0      	blx	sl
 800a0a8:	3001      	adds	r0, #1
 800a0aa:	d09b      	beq.n	8009fe4 <_printf_i+0x164>
 800a0ac:	3501      	adds	r5, #1
 800a0ae:	68e3      	ldr	r3, [r4, #12]
 800a0b0:	9903      	ldr	r1, [sp, #12]
 800a0b2:	1a5b      	subs	r3, r3, r1
 800a0b4:	42ab      	cmp	r3, r5
 800a0b6:	dcf2      	bgt.n	800a09e <_printf_i+0x21e>
 800a0b8:	e7eb      	b.n	800a092 <_printf_i+0x212>
 800a0ba:	2500      	movs	r5, #0
 800a0bc:	f104 0619 	add.w	r6, r4, #25
 800a0c0:	e7f5      	b.n	800a0ae <_printf_i+0x22e>
 800a0c2:	bf00      	nop
 800a0c4:	0800cb3e 	.word	0x0800cb3e
 800a0c8:	0800cb4f 	.word	0x0800cb4f

0800a0cc <siprintf>:
 800a0cc:	b40e      	push	{r1, r2, r3}
 800a0ce:	b500      	push	{lr}
 800a0d0:	b09c      	sub	sp, #112	; 0x70
 800a0d2:	ab1d      	add	r3, sp, #116	; 0x74
 800a0d4:	9002      	str	r0, [sp, #8]
 800a0d6:	9006      	str	r0, [sp, #24]
 800a0d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a0dc:	4809      	ldr	r0, [pc, #36]	; (800a104 <siprintf+0x38>)
 800a0de:	9107      	str	r1, [sp, #28]
 800a0e0:	9104      	str	r1, [sp, #16]
 800a0e2:	4909      	ldr	r1, [pc, #36]	; (800a108 <siprintf+0x3c>)
 800a0e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0e8:	9105      	str	r1, [sp, #20]
 800a0ea:	6800      	ldr	r0, [r0, #0]
 800a0ec:	9301      	str	r3, [sp, #4]
 800a0ee:	a902      	add	r1, sp, #8
 800a0f0:	f001 fb78 	bl	800b7e4 <_svfiprintf_r>
 800a0f4:	9b02      	ldr	r3, [sp, #8]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	701a      	strb	r2, [r3, #0]
 800a0fa:	b01c      	add	sp, #112	; 0x70
 800a0fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a100:	b003      	add	sp, #12
 800a102:	4770      	bx	lr
 800a104:	20000044 	.word	0x20000044
 800a108:	ffff0208 	.word	0xffff0208

0800a10c <quorem>:
 800a10c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a110:	6903      	ldr	r3, [r0, #16]
 800a112:	690c      	ldr	r4, [r1, #16]
 800a114:	42a3      	cmp	r3, r4
 800a116:	4607      	mov	r7, r0
 800a118:	f2c0 8081 	blt.w	800a21e <quorem+0x112>
 800a11c:	3c01      	subs	r4, #1
 800a11e:	f101 0814 	add.w	r8, r1, #20
 800a122:	f100 0514 	add.w	r5, r0, #20
 800a126:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a12a:	9301      	str	r3, [sp, #4]
 800a12c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a130:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a134:	3301      	adds	r3, #1
 800a136:	429a      	cmp	r2, r3
 800a138:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a13c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a140:	fbb2 f6f3 	udiv	r6, r2, r3
 800a144:	d331      	bcc.n	800a1aa <quorem+0x9e>
 800a146:	f04f 0e00 	mov.w	lr, #0
 800a14a:	4640      	mov	r0, r8
 800a14c:	46ac      	mov	ip, r5
 800a14e:	46f2      	mov	sl, lr
 800a150:	f850 2b04 	ldr.w	r2, [r0], #4
 800a154:	b293      	uxth	r3, r2
 800a156:	fb06 e303 	mla	r3, r6, r3, lr
 800a15a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a15e:	b29b      	uxth	r3, r3
 800a160:	ebaa 0303 	sub.w	r3, sl, r3
 800a164:	f8dc a000 	ldr.w	sl, [ip]
 800a168:	0c12      	lsrs	r2, r2, #16
 800a16a:	fa13 f38a 	uxtah	r3, r3, sl
 800a16e:	fb06 e202 	mla	r2, r6, r2, lr
 800a172:	9300      	str	r3, [sp, #0]
 800a174:	9b00      	ldr	r3, [sp, #0]
 800a176:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a17a:	b292      	uxth	r2, r2
 800a17c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a180:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a184:	f8bd 3000 	ldrh.w	r3, [sp]
 800a188:	4581      	cmp	r9, r0
 800a18a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a18e:	f84c 3b04 	str.w	r3, [ip], #4
 800a192:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a196:	d2db      	bcs.n	800a150 <quorem+0x44>
 800a198:	f855 300b 	ldr.w	r3, [r5, fp]
 800a19c:	b92b      	cbnz	r3, 800a1aa <quorem+0x9e>
 800a19e:	9b01      	ldr	r3, [sp, #4]
 800a1a0:	3b04      	subs	r3, #4
 800a1a2:	429d      	cmp	r5, r3
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	d32e      	bcc.n	800a206 <quorem+0xfa>
 800a1a8:	613c      	str	r4, [r7, #16]
 800a1aa:	4638      	mov	r0, r7
 800a1ac:	f001 f8c6 	bl	800b33c <__mcmp>
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	db24      	blt.n	800a1fe <quorem+0xf2>
 800a1b4:	3601      	adds	r6, #1
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	f04f 0c00 	mov.w	ip, #0
 800a1bc:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1c0:	f8d0 e000 	ldr.w	lr, [r0]
 800a1c4:	b293      	uxth	r3, r2
 800a1c6:	ebac 0303 	sub.w	r3, ip, r3
 800a1ca:	0c12      	lsrs	r2, r2, #16
 800a1cc:	fa13 f38e 	uxtah	r3, r3, lr
 800a1d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a1d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1de:	45c1      	cmp	r9, r8
 800a1e0:	f840 3b04 	str.w	r3, [r0], #4
 800a1e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a1e8:	d2e8      	bcs.n	800a1bc <quorem+0xb0>
 800a1ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1f2:	b922      	cbnz	r2, 800a1fe <quorem+0xf2>
 800a1f4:	3b04      	subs	r3, #4
 800a1f6:	429d      	cmp	r5, r3
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	d30a      	bcc.n	800a212 <quorem+0x106>
 800a1fc:	613c      	str	r4, [r7, #16]
 800a1fe:	4630      	mov	r0, r6
 800a200:	b003      	add	sp, #12
 800a202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a206:	6812      	ldr	r2, [r2, #0]
 800a208:	3b04      	subs	r3, #4
 800a20a:	2a00      	cmp	r2, #0
 800a20c:	d1cc      	bne.n	800a1a8 <quorem+0x9c>
 800a20e:	3c01      	subs	r4, #1
 800a210:	e7c7      	b.n	800a1a2 <quorem+0x96>
 800a212:	6812      	ldr	r2, [r2, #0]
 800a214:	3b04      	subs	r3, #4
 800a216:	2a00      	cmp	r2, #0
 800a218:	d1f0      	bne.n	800a1fc <quorem+0xf0>
 800a21a:	3c01      	subs	r4, #1
 800a21c:	e7eb      	b.n	800a1f6 <quorem+0xea>
 800a21e:	2000      	movs	r0, #0
 800a220:	e7ee      	b.n	800a200 <quorem+0xf4>
 800a222:	0000      	movs	r0, r0
 800a224:	0000      	movs	r0, r0
	...

0800a228 <_dtoa_r>:
 800a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22c:	ed2d 8b04 	vpush	{d8-d9}
 800a230:	ec57 6b10 	vmov	r6, r7, d0
 800a234:	b093      	sub	sp, #76	; 0x4c
 800a236:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a238:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a23c:	9106      	str	r1, [sp, #24]
 800a23e:	ee10 aa10 	vmov	sl, s0
 800a242:	4604      	mov	r4, r0
 800a244:	9209      	str	r2, [sp, #36]	; 0x24
 800a246:	930c      	str	r3, [sp, #48]	; 0x30
 800a248:	46bb      	mov	fp, r7
 800a24a:	b975      	cbnz	r5, 800a26a <_dtoa_r+0x42>
 800a24c:	2010      	movs	r0, #16
 800a24e:	f000 fddd 	bl	800ae0c <malloc>
 800a252:	4602      	mov	r2, r0
 800a254:	6260      	str	r0, [r4, #36]	; 0x24
 800a256:	b920      	cbnz	r0, 800a262 <_dtoa_r+0x3a>
 800a258:	4ba7      	ldr	r3, [pc, #668]	; (800a4f8 <_dtoa_r+0x2d0>)
 800a25a:	21ea      	movs	r1, #234	; 0xea
 800a25c:	48a7      	ldr	r0, [pc, #668]	; (800a4fc <_dtoa_r+0x2d4>)
 800a25e:	f001 fbd1 	bl	800ba04 <__assert_func>
 800a262:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a266:	6005      	str	r5, [r0, #0]
 800a268:	60c5      	str	r5, [r0, #12]
 800a26a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a26c:	6819      	ldr	r1, [r3, #0]
 800a26e:	b151      	cbz	r1, 800a286 <_dtoa_r+0x5e>
 800a270:	685a      	ldr	r2, [r3, #4]
 800a272:	604a      	str	r2, [r1, #4]
 800a274:	2301      	movs	r3, #1
 800a276:	4093      	lsls	r3, r2
 800a278:	608b      	str	r3, [r1, #8]
 800a27a:	4620      	mov	r0, r4
 800a27c:	f000 fe1c 	bl	800aeb8 <_Bfree>
 800a280:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a282:	2200      	movs	r2, #0
 800a284:	601a      	str	r2, [r3, #0]
 800a286:	1e3b      	subs	r3, r7, #0
 800a288:	bfaa      	itet	ge
 800a28a:	2300      	movge	r3, #0
 800a28c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a290:	f8c8 3000 	strge.w	r3, [r8]
 800a294:	4b9a      	ldr	r3, [pc, #616]	; (800a500 <_dtoa_r+0x2d8>)
 800a296:	bfbc      	itt	lt
 800a298:	2201      	movlt	r2, #1
 800a29a:	f8c8 2000 	strlt.w	r2, [r8]
 800a29e:	ea33 030b 	bics.w	r3, r3, fp
 800a2a2:	d11b      	bne.n	800a2dc <_dtoa_r+0xb4>
 800a2a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2a6:	f242 730f 	movw	r3, #9999	; 0x270f
 800a2aa:	6013      	str	r3, [r2, #0]
 800a2ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2b0:	4333      	orrs	r3, r6
 800a2b2:	f000 8592 	beq.w	800adda <_dtoa_r+0xbb2>
 800a2b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2b8:	b963      	cbnz	r3, 800a2d4 <_dtoa_r+0xac>
 800a2ba:	4b92      	ldr	r3, [pc, #584]	; (800a504 <_dtoa_r+0x2dc>)
 800a2bc:	e022      	b.n	800a304 <_dtoa_r+0xdc>
 800a2be:	4b92      	ldr	r3, [pc, #584]	; (800a508 <_dtoa_r+0x2e0>)
 800a2c0:	9301      	str	r3, [sp, #4]
 800a2c2:	3308      	adds	r3, #8
 800a2c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2c6:	6013      	str	r3, [r2, #0]
 800a2c8:	9801      	ldr	r0, [sp, #4]
 800a2ca:	b013      	add	sp, #76	; 0x4c
 800a2cc:	ecbd 8b04 	vpop	{d8-d9}
 800a2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2d4:	4b8b      	ldr	r3, [pc, #556]	; (800a504 <_dtoa_r+0x2dc>)
 800a2d6:	9301      	str	r3, [sp, #4]
 800a2d8:	3303      	adds	r3, #3
 800a2da:	e7f3      	b.n	800a2c4 <_dtoa_r+0x9c>
 800a2dc:	2200      	movs	r2, #0
 800a2de:	2300      	movs	r3, #0
 800a2e0:	4650      	mov	r0, sl
 800a2e2:	4659      	mov	r1, fp
 800a2e4:	f7f6 fbd8 	bl	8000a98 <__aeabi_dcmpeq>
 800a2e8:	ec4b ab19 	vmov	d9, sl, fp
 800a2ec:	4680      	mov	r8, r0
 800a2ee:	b158      	cbz	r0, 800a308 <_dtoa_r+0xe0>
 800a2f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	6013      	str	r3, [r2, #0]
 800a2f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	f000 856b 	beq.w	800add4 <_dtoa_r+0xbac>
 800a2fe:	4883      	ldr	r0, [pc, #524]	; (800a50c <_dtoa_r+0x2e4>)
 800a300:	6018      	str	r0, [r3, #0]
 800a302:	1e43      	subs	r3, r0, #1
 800a304:	9301      	str	r3, [sp, #4]
 800a306:	e7df      	b.n	800a2c8 <_dtoa_r+0xa0>
 800a308:	ec4b ab10 	vmov	d0, sl, fp
 800a30c:	aa10      	add	r2, sp, #64	; 0x40
 800a30e:	a911      	add	r1, sp, #68	; 0x44
 800a310:	4620      	mov	r0, r4
 800a312:	f001 f8b9 	bl	800b488 <__d2b>
 800a316:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a31a:	ee08 0a10 	vmov	s16, r0
 800a31e:	2d00      	cmp	r5, #0
 800a320:	f000 8084 	beq.w	800a42c <_dtoa_r+0x204>
 800a324:	ee19 3a90 	vmov	r3, s19
 800a328:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a32c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a330:	4656      	mov	r6, sl
 800a332:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a336:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a33a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a33e:	4b74      	ldr	r3, [pc, #464]	; (800a510 <_dtoa_r+0x2e8>)
 800a340:	2200      	movs	r2, #0
 800a342:	4630      	mov	r0, r6
 800a344:	4639      	mov	r1, r7
 800a346:	f7f5 ff87 	bl	8000258 <__aeabi_dsub>
 800a34a:	a365      	add	r3, pc, #404	; (adr r3, 800a4e0 <_dtoa_r+0x2b8>)
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	f7f6 f93a 	bl	80005c8 <__aeabi_dmul>
 800a354:	a364      	add	r3, pc, #400	; (adr r3, 800a4e8 <_dtoa_r+0x2c0>)
 800a356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35a:	f7f5 ff7f 	bl	800025c <__adddf3>
 800a35e:	4606      	mov	r6, r0
 800a360:	4628      	mov	r0, r5
 800a362:	460f      	mov	r7, r1
 800a364:	f7f6 f8c6 	bl	80004f4 <__aeabi_i2d>
 800a368:	a361      	add	r3, pc, #388	; (adr r3, 800a4f0 <_dtoa_r+0x2c8>)
 800a36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36e:	f7f6 f92b 	bl	80005c8 <__aeabi_dmul>
 800a372:	4602      	mov	r2, r0
 800a374:	460b      	mov	r3, r1
 800a376:	4630      	mov	r0, r6
 800a378:	4639      	mov	r1, r7
 800a37a:	f7f5 ff6f 	bl	800025c <__adddf3>
 800a37e:	4606      	mov	r6, r0
 800a380:	460f      	mov	r7, r1
 800a382:	f7f6 fbd1 	bl	8000b28 <__aeabi_d2iz>
 800a386:	2200      	movs	r2, #0
 800a388:	9000      	str	r0, [sp, #0]
 800a38a:	2300      	movs	r3, #0
 800a38c:	4630      	mov	r0, r6
 800a38e:	4639      	mov	r1, r7
 800a390:	f7f6 fb8c 	bl	8000aac <__aeabi_dcmplt>
 800a394:	b150      	cbz	r0, 800a3ac <_dtoa_r+0x184>
 800a396:	9800      	ldr	r0, [sp, #0]
 800a398:	f7f6 f8ac 	bl	80004f4 <__aeabi_i2d>
 800a39c:	4632      	mov	r2, r6
 800a39e:	463b      	mov	r3, r7
 800a3a0:	f7f6 fb7a 	bl	8000a98 <__aeabi_dcmpeq>
 800a3a4:	b910      	cbnz	r0, 800a3ac <_dtoa_r+0x184>
 800a3a6:	9b00      	ldr	r3, [sp, #0]
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	9300      	str	r3, [sp, #0]
 800a3ac:	9b00      	ldr	r3, [sp, #0]
 800a3ae:	2b16      	cmp	r3, #22
 800a3b0:	d85a      	bhi.n	800a468 <_dtoa_r+0x240>
 800a3b2:	9a00      	ldr	r2, [sp, #0]
 800a3b4:	4b57      	ldr	r3, [pc, #348]	; (800a514 <_dtoa_r+0x2ec>)
 800a3b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3be:	ec51 0b19 	vmov	r0, r1, d9
 800a3c2:	f7f6 fb73 	bl	8000aac <__aeabi_dcmplt>
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	d050      	beq.n	800a46c <_dtoa_r+0x244>
 800a3ca:	9b00      	ldr	r3, [sp, #0]
 800a3cc:	3b01      	subs	r3, #1
 800a3ce:	9300      	str	r3, [sp, #0]
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3d6:	1b5d      	subs	r5, r3, r5
 800a3d8:	1e6b      	subs	r3, r5, #1
 800a3da:	9305      	str	r3, [sp, #20]
 800a3dc:	bf45      	ittet	mi
 800a3de:	f1c5 0301 	rsbmi	r3, r5, #1
 800a3e2:	9304      	strmi	r3, [sp, #16]
 800a3e4:	2300      	movpl	r3, #0
 800a3e6:	2300      	movmi	r3, #0
 800a3e8:	bf4c      	ite	mi
 800a3ea:	9305      	strmi	r3, [sp, #20]
 800a3ec:	9304      	strpl	r3, [sp, #16]
 800a3ee:	9b00      	ldr	r3, [sp, #0]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	db3d      	blt.n	800a470 <_dtoa_r+0x248>
 800a3f4:	9b05      	ldr	r3, [sp, #20]
 800a3f6:	9a00      	ldr	r2, [sp, #0]
 800a3f8:	920a      	str	r2, [sp, #40]	; 0x28
 800a3fa:	4413      	add	r3, r2
 800a3fc:	9305      	str	r3, [sp, #20]
 800a3fe:	2300      	movs	r3, #0
 800a400:	9307      	str	r3, [sp, #28]
 800a402:	9b06      	ldr	r3, [sp, #24]
 800a404:	2b09      	cmp	r3, #9
 800a406:	f200 8089 	bhi.w	800a51c <_dtoa_r+0x2f4>
 800a40a:	2b05      	cmp	r3, #5
 800a40c:	bfc4      	itt	gt
 800a40e:	3b04      	subgt	r3, #4
 800a410:	9306      	strgt	r3, [sp, #24]
 800a412:	9b06      	ldr	r3, [sp, #24]
 800a414:	f1a3 0302 	sub.w	r3, r3, #2
 800a418:	bfcc      	ite	gt
 800a41a:	2500      	movgt	r5, #0
 800a41c:	2501      	movle	r5, #1
 800a41e:	2b03      	cmp	r3, #3
 800a420:	f200 8087 	bhi.w	800a532 <_dtoa_r+0x30a>
 800a424:	e8df f003 	tbb	[pc, r3]
 800a428:	59383a2d 	.word	0x59383a2d
 800a42c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a430:	441d      	add	r5, r3
 800a432:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a436:	2b20      	cmp	r3, #32
 800a438:	bfc1      	itttt	gt
 800a43a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a43e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a442:	fa0b f303 	lslgt.w	r3, fp, r3
 800a446:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a44a:	bfda      	itte	le
 800a44c:	f1c3 0320 	rsble	r3, r3, #32
 800a450:	fa06 f003 	lslle.w	r0, r6, r3
 800a454:	4318      	orrgt	r0, r3
 800a456:	f7f6 f83d 	bl	80004d4 <__aeabi_ui2d>
 800a45a:	2301      	movs	r3, #1
 800a45c:	4606      	mov	r6, r0
 800a45e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a462:	3d01      	subs	r5, #1
 800a464:	930e      	str	r3, [sp, #56]	; 0x38
 800a466:	e76a      	b.n	800a33e <_dtoa_r+0x116>
 800a468:	2301      	movs	r3, #1
 800a46a:	e7b2      	b.n	800a3d2 <_dtoa_r+0x1aa>
 800a46c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a46e:	e7b1      	b.n	800a3d4 <_dtoa_r+0x1ac>
 800a470:	9b04      	ldr	r3, [sp, #16]
 800a472:	9a00      	ldr	r2, [sp, #0]
 800a474:	1a9b      	subs	r3, r3, r2
 800a476:	9304      	str	r3, [sp, #16]
 800a478:	4253      	negs	r3, r2
 800a47a:	9307      	str	r3, [sp, #28]
 800a47c:	2300      	movs	r3, #0
 800a47e:	930a      	str	r3, [sp, #40]	; 0x28
 800a480:	e7bf      	b.n	800a402 <_dtoa_r+0x1da>
 800a482:	2300      	movs	r3, #0
 800a484:	9308      	str	r3, [sp, #32]
 800a486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a488:	2b00      	cmp	r3, #0
 800a48a:	dc55      	bgt.n	800a538 <_dtoa_r+0x310>
 800a48c:	2301      	movs	r3, #1
 800a48e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a492:	461a      	mov	r2, r3
 800a494:	9209      	str	r2, [sp, #36]	; 0x24
 800a496:	e00c      	b.n	800a4b2 <_dtoa_r+0x28a>
 800a498:	2301      	movs	r3, #1
 800a49a:	e7f3      	b.n	800a484 <_dtoa_r+0x25c>
 800a49c:	2300      	movs	r3, #0
 800a49e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4a0:	9308      	str	r3, [sp, #32]
 800a4a2:	9b00      	ldr	r3, [sp, #0]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	9302      	str	r3, [sp, #8]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	9303      	str	r3, [sp, #12]
 800a4ae:	bfb8      	it	lt
 800a4b0:	2301      	movlt	r3, #1
 800a4b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	6042      	str	r2, [r0, #4]
 800a4b8:	2204      	movs	r2, #4
 800a4ba:	f102 0614 	add.w	r6, r2, #20
 800a4be:	429e      	cmp	r6, r3
 800a4c0:	6841      	ldr	r1, [r0, #4]
 800a4c2:	d93d      	bls.n	800a540 <_dtoa_r+0x318>
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	f000 fcb7 	bl	800ae38 <_Balloc>
 800a4ca:	9001      	str	r0, [sp, #4]
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	d13b      	bne.n	800a548 <_dtoa_r+0x320>
 800a4d0:	4b11      	ldr	r3, [pc, #68]	; (800a518 <_dtoa_r+0x2f0>)
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a4d8:	e6c0      	b.n	800a25c <_dtoa_r+0x34>
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e7df      	b.n	800a49e <_dtoa_r+0x276>
 800a4de:	bf00      	nop
 800a4e0:	636f4361 	.word	0x636f4361
 800a4e4:	3fd287a7 	.word	0x3fd287a7
 800a4e8:	8b60c8b3 	.word	0x8b60c8b3
 800a4ec:	3fc68a28 	.word	0x3fc68a28
 800a4f0:	509f79fb 	.word	0x509f79fb
 800a4f4:	3fd34413 	.word	0x3fd34413
 800a4f8:	0800cb6d 	.word	0x0800cb6d
 800a4fc:	0800cb84 	.word	0x0800cb84
 800a500:	7ff00000 	.word	0x7ff00000
 800a504:	0800cb69 	.word	0x0800cb69
 800a508:	0800cb60 	.word	0x0800cb60
 800a50c:	0800cb3d 	.word	0x0800cb3d
 800a510:	3ff80000 	.word	0x3ff80000
 800a514:	0800cc78 	.word	0x0800cc78
 800a518:	0800cbdf 	.word	0x0800cbdf
 800a51c:	2501      	movs	r5, #1
 800a51e:	2300      	movs	r3, #0
 800a520:	9306      	str	r3, [sp, #24]
 800a522:	9508      	str	r5, [sp, #32]
 800a524:	f04f 33ff 	mov.w	r3, #4294967295
 800a528:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a52c:	2200      	movs	r2, #0
 800a52e:	2312      	movs	r3, #18
 800a530:	e7b0      	b.n	800a494 <_dtoa_r+0x26c>
 800a532:	2301      	movs	r3, #1
 800a534:	9308      	str	r3, [sp, #32]
 800a536:	e7f5      	b.n	800a524 <_dtoa_r+0x2fc>
 800a538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a53a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a53e:	e7b8      	b.n	800a4b2 <_dtoa_r+0x28a>
 800a540:	3101      	adds	r1, #1
 800a542:	6041      	str	r1, [r0, #4]
 800a544:	0052      	lsls	r2, r2, #1
 800a546:	e7b8      	b.n	800a4ba <_dtoa_r+0x292>
 800a548:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a54a:	9a01      	ldr	r2, [sp, #4]
 800a54c:	601a      	str	r2, [r3, #0]
 800a54e:	9b03      	ldr	r3, [sp, #12]
 800a550:	2b0e      	cmp	r3, #14
 800a552:	f200 809d 	bhi.w	800a690 <_dtoa_r+0x468>
 800a556:	2d00      	cmp	r5, #0
 800a558:	f000 809a 	beq.w	800a690 <_dtoa_r+0x468>
 800a55c:	9b00      	ldr	r3, [sp, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	dd32      	ble.n	800a5c8 <_dtoa_r+0x3a0>
 800a562:	4ab7      	ldr	r2, [pc, #732]	; (800a840 <_dtoa_r+0x618>)
 800a564:	f003 030f 	and.w	r3, r3, #15
 800a568:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a56c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a570:	9b00      	ldr	r3, [sp, #0]
 800a572:	05d8      	lsls	r0, r3, #23
 800a574:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a578:	d516      	bpl.n	800a5a8 <_dtoa_r+0x380>
 800a57a:	4bb2      	ldr	r3, [pc, #712]	; (800a844 <_dtoa_r+0x61c>)
 800a57c:	ec51 0b19 	vmov	r0, r1, d9
 800a580:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a584:	f7f6 f94a 	bl	800081c <__aeabi_ddiv>
 800a588:	f007 070f 	and.w	r7, r7, #15
 800a58c:	4682      	mov	sl, r0
 800a58e:	468b      	mov	fp, r1
 800a590:	2503      	movs	r5, #3
 800a592:	4eac      	ldr	r6, [pc, #688]	; (800a844 <_dtoa_r+0x61c>)
 800a594:	b957      	cbnz	r7, 800a5ac <_dtoa_r+0x384>
 800a596:	4642      	mov	r2, r8
 800a598:	464b      	mov	r3, r9
 800a59a:	4650      	mov	r0, sl
 800a59c:	4659      	mov	r1, fp
 800a59e:	f7f6 f93d 	bl	800081c <__aeabi_ddiv>
 800a5a2:	4682      	mov	sl, r0
 800a5a4:	468b      	mov	fp, r1
 800a5a6:	e028      	b.n	800a5fa <_dtoa_r+0x3d2>
 800a5a8:	2502      	movs	r5, #2
 800a5aa:	e7f2      	b.n	800a592 <_dtoa_r+0x36a>
 800a5ac:	07f9      	lsls	r1, r7, #31
 800a5ae:	d508      	bpl.n	800a5c2 <_dtoa_r+0x39a>
 800a5b0:	4640      	mov	r0, r8
 800a5b2:	4649      	mov	r1, r9
 800a5b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a5b8:	f7f6 f806 	bl	80005c8 <__aeabi_dmul>
 800a5bc:	3501      	adds	r5, #1
 800a5be:	4680      	mov	r8, r0
 800a5c0:	4689      	mov	r9, r1
 800a5c2:	107f      	asrs	r7, r7, #1
 800a5c4:	3608      	adds	r6, #8
 800a5c6:	e7e5      	b.n	800a594 <_dtoa_r+0x36c>
 800a5c8:	f000 809b 	beq.w	800a702 <_dtoa_r+0x4da>
 800a5cc:	9b00      	ldr	r3, [sp, #0]
 800a5ce:	4f9d      	ldr	r7, [pc, #628]	; (800a844 <_dtoa_r+0x61c>)
 800a5d0:	425e      	negs	r6, r3
 800a5d2:	4b9b      	ldr	r3, [pc, #620]	; (800a840 <_dtoa_r+0x618>)
 800a5d4:	f006 020f 	and.w	r2, r6, #15
 800a5d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e0:	ec51 0b19 	vmov	r0, r1, d9
 800a5e4:	f7f5 fff0 	bl	80005c8 <__aeabi_dmul>
 800a5e8:	1136      	asrs	r6, r6, #4
 800a5ea:	4682      	mov	sl, r0
 800a5ec:	468b      	mov	fp, r1
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	2502      	movs	r5, #2
 800a5f2:	2e00      	cmp	r6, #0
 800a5f4:	d17a      	bne.n	800a6ec <_dtoa_r+0x4c4>
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d1d3      	bne.n	800a5a2 <_dtoa_r+0x37a>
 800a5fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f000 8082 	beq.w	800a706 <_dtoa_r+0x4de>
 800a602:	4b91      	ldr	r3, [pc, #580]	; (800a848 <_dtoa_r+0x620>)
 800a604:	2200      	movs	r2, #0
 800a606:	4650      	mov	r0, sl
 800a608:	4659      	mov	r1, fp
 800a60a:	f7f6 fa4f 	bl	8000aac <__aeabi_dcmplt>
 800a60e:	2800      	cmp	r0, #0
 800a610:	d079      	beq.n	800a706 <_dtoa_r+0x4de>
 800a612:	9b03      	ldr	r3, [sp, #12]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d076      	beq.n	800a706 <_dtoa_r+0x4de>
 800a618:	9b02      	ldr	r3, [sp, #8]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	dd36      	ble.n	800a68c <_dtoa_r+0x464>
 800a61e:	9b00      	ldr	r3, [sp, #0]
 800a620:	4650      	mov	r0, sl
 800a622:	4659      	mov	r1, fp
 800a624:	1e5f      	subs	r7, r3, #1
 800a626:	2200      	movs	r2, #0
 800a628:	4b88      	ldr	r3, [pc, #544]	; (800a84c <_dtoa_r+0x624>)
 800a62a:	f7f5 ffcd 	bl	80005c8 <__aeabi_dmul>
 800a62e:	9e02      	ldr	r6, [sp, #8]
 800a630:	4682      	mov	sl, r0
 800a632:	468b      	mov	fp, r1
 800a634:	3501      	adds	r5, #1
 800a636:	4628      	mov	r0, r5
 800a638:	f7f5 ff5c 	bl	80004f4 <__aeabi_i2d>
 800a63c:	4652      	mov	r2, sl
 800a63e:	465b      	mov	r3, fp
 800a640:	f7f5 ffc2 	bl	80005c8 <__aeabi_dmul>
 800a644:	4b82      	ldr	r3, [pc, #520]	; (800a850 <_dtoa_r+0x628>)
 800a646:	2200      	movs	r2, #0
 800a648:	f7f5 fe08 	bl	800025c <__adddf3>
 800a64c:	46d0      	mov	r8, sl
 800a64e:	46d9      	mov	r9, fp
 800a650:	4682      	mov	sl, r0
 800a652:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a656:	2e00      	cmp	r6, #0
 800a658:	d158      	bne.n	800a70c <_dtoa_r+0x4e4>
 800a65a:	4b7e      	ldr	r3, [pc, #504]	; (800a854 <_dtoa_r+0x62c>)
 800a65c:	2200      	movs	r2, #0
 800a65e:	4640      	mov	r0, r8
 800a660:	4649      	mov	r1, r9
 800a662:	f7f5 fdf9 	bl	8000258 <__aeabi_dsub>
 800a666:	4652      	mov	r2, sl
 800a668:	465b      	mov	r3, fp
 800a66a:	4680      	mov	r8, r0
 800a66c:	4689      	mov	r9, r1
 800a66e:	f7f6 fa3b 	bl	8000ae8 <__aeabi_dcmpgt>
 800a672:	2800      	cmp	r0, #0
 800a674:	f040 8295 	bne.w	800aba2 <_dtoa_r+0x97a>
 800a678:	4652      	mov	r2, sl
 800a67a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a67e:	4640      	mov	r0, r8
 800a680:	4649      	mov	r1, r9
 800a682:	f7f6 fa13 	bl	8000aac <__aeabi_dcmplt>
 800a686:	2800      	cmp	r0, #0
 800a688:	f040 8289 	bne.w	800ab9e <_dtoa_r+0x976>
 800a68c:	ec5b ab19 	vmov	sl, fp, d9
 800a690:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a692:	2b00      	cmp	r3, #0
 800a694:	f2c0 8148 	blt.w	800a928 <_dtoa_r+0x700>
 800a698:	9a00      	ldr	r2, [sp, #0]
 800a69a:	2a0e      	cmp	r2, #14
 800a69c:	f300 8144 	bgt.w	800a928 <_dtoa_r+0x700>
 800a6a0:	4b67      	ldr	r3, [pc, #412]	; (800a840 <_dtoa_r+0x618>)
 800a6a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	f280 80d5 	bge.w	800a85c <_dtoa_r+0x634>
 800a6b2:	9b03      	ldr	r3, [sp, #12]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	f300 80d1 	bgt.w	800a85c <_dtoa_r+0x634>
 800a6ba:	f040 826f 	bne.w	800ab9c <_dtoa_r+0x974>
 800a6be:	4b65      	ldr	r3, [pc, #404]	; (800a854 <_dtoa_r+0x62c>)
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	4640      	mov	r0, r8
 800a6c4:	4649      	mov	r1, r9
 800a6c6:	f7f5 ff7f 	bl	80005c8 <__aeabi_dmul>
 800a6ca:	4652      	mov	r2, sl
 800a6cc:	465b      	mov	r3, fp
 800a6ce:	f7f6 fa01 	bl	8000ad4 <__aeabi_dcmpge>
 800a6d2:	9e03      	ldr	r6, [sp, #12]
 800a6d4:	4637      	mov	r7, r6
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	f040 8245 	bne.w	800ab66 <_dtoa_r+0x93e>
 800a6dc:	9d01      	ldr	r5, [sp, #4]
 800a6de:	2331      	movs	r3, #49	; 0x31
 800a6e0:	f805 3b01 	strb.w	r3, [r5], #1
 800a6e4:	9b00      	ldr	r3, [sp, #0]
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	9300      	str	r3, [sp, #0]
 800a6ea:	e240      	b.n	800ab6e <_dtoa_r+0x946>
 800a6ec:	07f2      	lsls	r2, r6, #31
 800a6ee:	d505      	bpl.n	800a6fc <_dtoa_r+0x4d4>
 800a6f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6f4:	f7f5 ff68 	bl	80005c8 <__aeabi_dmul>
 800a6f8:	3501      	adds	r5, #1
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	1076      	asrs	r6, r6, #1
 800a6fe:	3708      	adds	r7, #8
 800a700:	e777      	b.n	800a5f2 <_dtoa_r+0x3ca>
 800a702:	2502      	movs	r5, #2
 800a704:	e779      	b.n	800a5fa <_dtoa_r+0x3d2>
 800a706:	9f00      	ldr	r7, [sp, #0]
 800a708:	9e03      	ldr	r6, [sp, #12]
 800a70a:	e794      	b.n	800a636 <_dtoa_r+0x40e>
 800a70c:	9901      	ldr	r1, [sp, #4]
 800a70e:	4b4c      	ldr	r3, [pc, #304]	; (800a840 <_dtoa_r+0x618>)
 800a710:	4431      	add	r1, r6
 800a712:	910d      	str	r1, [sp, #52]	; 0x34
 800a714:	9908      	ldr	r1, [sp, #32]
 800a716:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a71a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a71e:	2900      	cmp	r1, #0
 800a720:	d043      	beq.n	800a7aa <_dtoa_r+0x582>
 800a722:	494d      	ldr	r1, [pc, #308]	; (800a858 <_dtoa_r+0x630>)
 800a724:	2000      	movs	r0, #0
 800a726:	f7f6 f879 	bl	800081c <__aeabi_ddiv>
 800a72a:	4652      	mov	r2, sl
 800a72c:	465b      	mov	r3, fp
 800a72e:	f7f5 fd93 	bl	8000258 <__aeabi_dsub>
 800a732:	9d01      	ldr	r5, [sp, #4]
 800a734:	4682      	mov	sl, r0
 800a736:	468b      	mov	fp, r1
 800a738:	4649      	mov	r1, r9
 800a73a:	4640      	mov	r0, r8
 800a73c:	f7f6 f9f4 	bl	8000b28 <__aeabi_d2iz>
 800a740:	4606      	mov	r6, r0
 800a742:	f7f5 fed7 	bl	80004f4 <__aeabi_i2d>
 800a746:	4602      	mov	r2, r0
 800a748:	460b      	mov	r3, r1
 800a74a:	4640      	mov	r0, r8
 800a74c:	4649      	mov	r1, r9
 800a74e:	f7f5 fd83 	bl	8000258 <__aeabi_dsub>
 800a752:	3630      	adds	r6, #48	; 0x30
 800a754:	f805 6b01 	strb.w	r6, [r5], #1
 800a758:	4652      	mov	r2, sl
 800a75a:	465b      	mov	r3, fp
 800a75c:	4680      	mov	r8, r0
 800a75e:	4689      	mov	r9, r1
 800a760:	f7f6 f9a4 	bl	8000aac <__aeabi_dcmplt>
 800a764:	2800      	cmp	r0, #0
 800a766:	d163      	bne.n	800a830 <_dtoa_r+0x608>
 800a768:	4642      	mov	r2, r8
 800a76a:	464b      	mov	r3, r9
 800a76c:	4936      	ldr	r1, [pc, #216]	; (800a848 <_dtoa_r+0x620>)
 800a76e:	2000      	movs	r0, #0
 800a770:	f7f5 fd72 	bl	8000258 <__aeabi_dsub>
 800a774:	4652      	mov	r2, sl
 800a776:	465b      	mov	r3, fp
 800a778:	f7f6 f998 	bl	8000aac <__aeabi_dcmplt>
 800a77c:	2800      	cmp	r0, #0
 800a77e:	f040 80b5 	bne.w	800a8ec <_dtoa_r+0x6c4>
 800a782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a784:	429d      	cmp	r5, r3
 800a786:	d081      	beq.n	800a68c <_dtoa_r+0x464>
 800a788:	4b30      	ldr	r3, [pc, #192]	; (800a84c <_dtoa_r+0x624>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	4650      	mov	r0, sl
 800a78e:	4659      	mov	r1, fp
 800a790:	f7f5 ff1a 	bl	80005c8 <__aeabi_dmul>
 800a794:	4b2d      	ldr	r3, [pc, #180]	; (800a84c <_dtoa_r+0x624>)
 800a796:	4682      	mov	sl, r0
 800a798:	468b      	mov	fp, r1
 800a79a:	4640      	mov	r0, r8
 800a79c:	4649      	mov	r1, r9
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f7f5 ff12 	bl	80005c8 <__aeabi_dmul>
 800a7a4:	4680      	mov	r8, r0
 800a7a6:	4689      	mov	r9, r1
 800a7a8:	e7c6      	b.n	800a738 <_dtoa_r+0x510>
 800a7aa:	4650      	mov	r0, sl
 800a7ac:	4659      	mov	r1, fp
 800a7ae:	f7f5 ff0b 	bl	80005c8 <__aeabi_dmul>
 800a7b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7b4:	9d01      	ldr	r5, [sp, #4]
 800a7b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7b8:	4682      	mov	sl, r0
 800a7ba:	468b      	mov	fp, r1
 800a7bc:	4649      	mov	r1, r9
 800a7be:	4640      	mov	r0, r8
 800a7c0:	f7f6 f9b2 	bl	8000b28 <__aeabi_d2iz>
 800a7c4:	4606      	mov	r6, r0
 800a7c6:	f7f5 fe95 	bl	80004f4 <__aeabi_i2d>
 800a7ca:	3630      	adds	r6, #48	; 0x30
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	4640      	mov	r0, r8
 800a7d2:	4649      	mov	r1, r9
 800a7d4:	f7f5 fd40 	bl	8000258 <__aeabi_dsub>
 800a7d8:	f805 6b01 	strb.w	r6, [r5], #1
 800a7dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7de:	429d      	cmp	r5, r3
 800a7e0:	4680      	mov	r8, r0
 800a7e2:	4689      	mov	r9, r1
 800a7e4:	f04f 0200 	mov.w	r2, #0
 800a7e8:	d124      	bne.n	800a834 <_dtoa_r+0x60c>
 800a7ea:	4b1b      	ldr	r3, [pc, #108]	; (800a858 <_dtoa_r+0x630>)
 800a7ec:	4650      	mov	r0, sl
 800a7ee:	4659      	mov	r1, fp
 800a7f0:	f7f5 fd34 	bl	800025c <__adddf3>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	4640      	mov	r0, r8
 800a7fa:	4649      	mov	r1, r9
 800a7fc:	f7f6 f974 	bl	8000ae8 <__aeabi_dcmpgt>
 800a800:	2800      	cmp	r0, #0
 800a802:	d173      	bne.n	800a8ec <_dtoa_r+0x6c4>
 800a804:	4652      	mov	r2, sl
 800a806:	465b      	mov	r3, fp
 800a808:	4913      	ldr	r1, [pc, #76]	; (800a858 <_dtoa_r+0x630>)
 800a80a:	2000      	movs	r0, #0
 800a80c:	f7f5 fd24 	bl	8000258 <__aeabi_dsub>
 800a810:	4602      	mov	r2, r0
 800a812:	460b      	mov	r3, r1
 800a814:	4640      	mov	r0, r8
 800a816:	4649      	mov	r1, r9
 800a818:	f7f6 f948 	bl	8000aac <__aeabi_dcmplt>
 800a81c:	2800      	cmp	r0, #0
 800a81e:	f43f af35 	beq.w	800a68c <_dtoa_r+0x464>
 800a822:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a824:	1e6b      	subs	r3, r5, #1
 800a826:	930f      	str	r3, [sp, #60]	; 0x3c
 800a828:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a82c:	2b30      	cmp	r3, #48	; 0x30
 800a82e:	d0f8      	beq.n	800a822 <_dtoa_r+0x5fa>
 800a830:	9700      	str	r7, [sp, #0]
 800a832:	e049      	b.n	800a8c8 <_dtoa_r+0x6a0>
 800a834:	4b05      	ldr	r3, [pc, #20]	; (800a84c <_dtoa_r+0x624>)
 800a836:	f7f5 fec7 	bl	80005c8 <__aeabi_dmul>
 800a83a:	4680      	mov	r8, r0
 800a83c:	4689      	mov	r9, r1
 800a83e:	e7bd      	b.n	800a7bc <_dtoa_r+0x594>
 800a840:	0800cc78 	.word	0x0800cc78
 800a844:	0800cc50 	.word	0x0800cc50
 800a848:	3ff00000 	.word	0x3ff00000
 800a84c:	40240000 	.word	0x40240000
 800a850:	401c0000 	.word	0x401c0000
 800a854:	40140000 	.word	0x40140000
 800a858:	3fe00000 	.word	0x3fe00000
 800a85c:	9d01      	ldr	r5, [sp, #4]
 800a85e:	4656      	mov	r6, sl
 800a860:	465f      	mov	r7, fp
 800a862:	4642      	mov	r2, r8
 800a864:	464b      	mov	r3, r9
 800a866:	4630      	mov	r0, r6
 800a868:	4639      	mov	r1, r7
 800a86a:	f7f5 ffd7 	bl	800081c <__aeabi_ddiv>
 800a86e:	f7f6 f95b 	bl	8000b28 <__aeabi_d2iz>
 800a872:	4682      	mov	sl, r0
 800a874:	f7f5 fe3e 	bl	80004f4 <__aeabi_i2d>
 800a878:	4642      	mov	r2, r8
 800a87a:	464b      	mov	r3, r9
 800a87c:	f7f5 fea4 	bl	80005c8 <__aeabi_dmul>
 800a880:	4602      	mov	r2, r0
 800a882:	460b      	mov	r3, r1
 800a884:	4630      	mov	r0, r6
 800a886:	4639      	mov	r1, r7
 800a888:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a88c:	f7f5 fce4 	bl	8000258 <__aeabi_dsub>
 800a890:	f805 6b01 	strb.w	r6, [r5], #1
 800a894:	9e01      	ldr	r6, [sp, #4]
 800a896:	9f03      	ldr	r7, [sp, #12]
 800a898:	1bae      	subs	r6, r5, r6
 800a89a:	42b7      	cmp	r7, r6
 800a89c:	4602      	mov	r2, r0
 800a89e:	460b      	mov	r3, r1
 800a8a0:	d135      	bne.n	800a90e <_dtoa_r+0x6e6>
 800a8a2:	f7f5 fcdb 	bl	800025c <__adddf3>
 800a8a6:	4642      	mov	r2, r8
 800a8a8:	464b      	mov	r3, r9
 800a8aa:	4606      	mov	r6, r0
 800a8ac:	460f      	mov	r7, r1
 800a8ae:	f7f6 f91b 	bl	8000ae8 <__aeabi_dcmpgt>
 800a8b2:	b9d0      	cbnz	r0, 800a8ea <_dtoa_r+0x6c2>
 800a8b4:	4642      	mov	r2, r8
 800a8b6:	464b      	mov	r3, r9
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	4639      	mov	r1, r7
 800a8bc:	f7f6 f8ec 	bl	8000a98 <__aeabi_dcmpeq>
 800a8c0:	b110      	cbz	r0, 800a8c8 <_dtoa_r+0x6a0>
 800a8c2:	f01a 0f01 	tst.w	sl, #1
 800a8c6:	d110      	bne.n	800a8ea <_dtoa_r+0x6c2>
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	ee18 1a10 	vmov	r1, s16
 800a8ce:	f000 faf3 	bl	800aeb8 <_Bfree>
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	9800      	ldr	r0, [sp, #0]
 800a8d6:	702b      	strb	r3, [r5, #0]
 800a8d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8da:	3001      	adds	r0, #1
 800a8dc:	6018      	str	r0, [r3, #0]
 800a8de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f43f acf1 	beq.w	800a2c8 <_dtoa_r+0xa0>
 800a8e6:	601d      	str	r5, [r3, #0]
 800a8e8:	e4ee      	b.n	800a2c8 <_dtoa_r+0xa0>
 800a8ea:	9f00      	ldr	r7, [sp, #0]
 800a8ec:	462b      	mov	r3, r5
 800a8ee:	461d      	mov	r5, r3
 800a8f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8f4:	2a39      	cmp	r2, #57	; 0x39
 800a8f6:	d106      	bne.n	800a906 <_dtoa_r+0x6de>
 800a8f8:	9a01      	ldr	r2, [sp, #4]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d1f7      	bne.n	800a8ee <_dtoa_r+0x6c6>
 800a8fe:	9901      	ldr	r1, [sp, #4]
 800a900:	2230      	movs	r2, #48	; 0x30
 800a902:	3701      	adds	r7, #1
 800a904:	700a      	strb	r2, [r1, #0]
 800a906:	781a      	ldrb	r2, [r3, #0]
 800a908:	3201      	adds	r2, #1
 800a90a:	701a      	strb	r2, [r3, #0]
 800a90c:	e790      	b.n	800a830 <_dtoa_r+0x608>
 800a90e:	4ba6      	ldr	r3, [pc, #664]	; (800aba8 <_dtoa_r+0x980>)
 800a910:	2200      	movs	r2, #0
 800a912:	f7f5 fe59 	bl	80005c8 <__aeabi_dmul>
 800a916:	2200      	movs	r2, #0
 800a918:	2300      	movs	r3, #0
 800a91a:	4606      	mov	r6, r0
 800a91c:	460f      	mov	r7, r1
 800a91e:	f7f6 f8bb 	bl	8000a98 <__aeabi_dcmpeq>
 800a922:	2800      	cmp	r0, #0
 800a924:	d09d      	beq.n	800a862 <_dtoa_r+0x63a>
 800a926:	e7cf      	b.n	800a8c8 <_dtoa_r+0x6a0>
 800a928:	9a08      	ldr	r2, [sp, #32]
 800a92a:	2a00      	cmp	r2, #0
 800a92c:	f000 80d7 	beq.w	800aade <_dtoa_r+0x8b6>
 800a930:	9a06      	ldr	r2, [sp, #24]
 800a932:	2a01      	cmp	r2, #1
 800a934:	f300 80ba 	bgt.w	800aaac <_dtoa_r+0x884>
 800a938:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a93a:	2a00      	cmp	r2, #0
 800a93c:	f000 80b2 	beq.w	800aaa4 <_dtoa_r+0x87c>
 800a940:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a944:	9e07      	ldr	r6, [sp, #28]
 800a946:	9d04      	ldr	r5, [sp, #16]
 800a948:	9a04      	ldr	r2, [sp, #16]
 800a94a:	441a      	add	r2, r3
 800a94c:	9204      	str	r2, [sp, #16]
 800a94e:	9a05      	ldr	r2, [sp, #20]
 800a950:	2101      	movs	r1, #1
 800a952:	441a      	add	r2, r3
 800a954:	4620      	mov	r0, r4
 800a956:	9205      	str	r2, [sp, #20]
 800a958:	f000 fb66 	bl	800b028 <__i2b>
 800a95c:	4607      	mov	r7, r0
 800a95e:	2d00      	cmp	r5, #0
 800a960:	dd0c      	ble.n	800a97c <_dtoa_r+0x754>
 800a962:	9b05      	ldr	r3, [sp, #20]
 800a964:	2b00      	cmp	r3, #0
 800a966:	dd09      	ble.n	800a97c <_dtoa_r+0x754>
 800a968:	42ab      	cmp	r3, r5
 800a96a:	9a04      	ldr	r2, [sp, #16]
 800a96c:	bfa8      	it	ge
 800a96e:	462b      	movge	r3, r5
 800a970:	1ad2      	subs	r2, r2, r3
 800a972:	9204      	str	r2, [sp, #16]
 800a974:	9a05      	ldr	r2, [sp, #20]
 800a976:	1aed      	subs	r5, r5, r3
 800a978:	1ad3      	subs	r3, r2, r3
 800a97a:	9305      	str	r3, [sp, #20]
 800a97c:	9b07      	ldr	r3, [sp, #28]
 800a97e:	b31b      	cbz	r3, 800a9c8 <_dtoa_r+0x7a0>
 800a980:	9b08      	ldr	r3, [sp, #32]
 800a982:	2b00      	cmp	r3, #0
 800a984:	f000 80af 	beq.w	800aae6 <_dtoa_r+0x8be>
 800a988:	2e00      	cmp	r6, #0
 800a98a:	dd13      	ble.n	800a9b4 <_dtoa_r+0x78c>
 800a98c:	4639      	mov	r1, r7
 800a98e:	4632      	mov	r2, r6
 800a990:	4620      	mov	r0, r4
 800a992:	f000 fc09 	bl	800b1a8 <__pow5mult>
 800a996:	ee18 2a10 	vmov	r2, s16
 800a99a:	4601      	mov	r1, r0
 800a99c:	4607      	mov	r7, r0
 800a99e:	4620      	mov	r0, r4
 800a9a0:	f000 fb58 	bl	800b054 <__multiply>
 800a9a4:	ee18 1a10 	vmov	r1, s16
 800a9a8:	4680      	mov	r8, r0
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f000 fa84 	bl	800aeb8 <_Bfree>
 800a9b0:	ee08 8a10 	vmov	s16, r8
 800a9b4:	9b07      	ldr	r3, [sp, #28]
 800a9b6:	1b9a      	subs	r2, r3, r6
 800a9b8:	d006      	beq.n	800a9c8 <_dtoa_r+0x7a0>
 800a9ba:	ee18 1a10 	vmov	r1, s16
 800a9be:	4620      	mov	r0, r4
 800a9c0:	f000 fbf2 	bl	800b1a8 <__pow5mult>
 800a9c4:	ee08 0a10 	vmov	s16, r0
 800a9c8:	2101      	movs	r1, #1
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	f000 fb2c 	bl	800b028 <__i2b>
 800a9d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	4606      	mov	r6, r0
 800a9d6:	f340 8088 	ble.w	800aaea <_dtoa_r+0x8c2>
 800a9da:	461a      	mov	r2, r3
 800a9dc:	4601      	mov	r1, r0
 800a9de:	4620      	mov	r0, r4
 800a9e0:	f000 fbe2 	bl	800b1a8 <__pow5mult>
 800a9e4:	9b06      	ldr	r3, [sp, #24]
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	4606      	mov	r6, r0
 800a9ea:	f340 8081 	ble.w	800aaf0 <_dtoa_r+0x8c8>
 800a9ee:	f04f 0800 	mov.w	r8, #0
 800a9f2:	6933      	ldr	r3, [r6, #16]
 800a9f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a9f8:	6918      	ldr	r0, [r3, #16]
 800a9fa:	f000 fac5 	bl	800af88 <__hi0bits>
 800a9fe:	f1c0 0020 	rsb	r0, r0, #32
 800aa02:	9b05      	ldr	r3, [sp, #20]
 800aa04:	4418      	add	r0, r3
 800aa06:	f010 001f 	ands.w	r0, r0, #31
 800aa0a:	f000 8092 	beq.w	800ab32 <_dtoa_r+0x90a>
 800aa0e:	f1c0 0320 	rsb	r3, r0, #32
 800aa12:	2b04      	cmp	r3, #4
 800aa14:	f340 808a 	ble.w	800ab2c <_dtoa_r+0x904>
 800aa18:	f1c0 001c 	rsb	r0, r0, #28
 800aa1c:	9b04      	ldr	r3, [sp, #16]
 800aa1e:	4403      	add	r3, r0
 800aa20:	9304      	str	r3, [sp, #16]
 800aa22:	9b05      	ldr	r3, [sp, #20]
 800aa24:	4403      	add	r3, r0
 800aa26:	4405      	add	r5, r0
 800aa28:	9305      	str	r3, [sp, #20]
 800aa2a:	9b04      	ldr	r3, [sp, #16]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	dd07      	ble.n	800aa40 <_dtoa_r+0x818>
 800aa30:	ee18 1a10 	vmov	r1, s16
 800aa34:	461a      	mov	r2, r3
 800aa36:	4620      	mov	r0, r4
 800aa38:	f000 fc10 	bl	800b25c <__lshift>
 800aa3c:	ee08 0a10 	vmov	s16, r0
 800aa40:	9b05      	ldr	r3, [sp, #20]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	dd05      	ble.n	800aa52 <_dtoa_r+0x82a>
 800aa46:	4631      	mov	r1, r6
 800aa48:	461a      	mov	r2, r3
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f000 fc06 	bl	800b25c <__lshift>
 800aa50:	4606      	mov	r6, r0
 800aa52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d06e      	beq.n	800ab36 <_dtoa_r+0x90e>
 800aa58:	ee18 0a10 	vmov	r0, s16
 800aa5c:	4631      	mov	r1, r6
 800aa5e:	f000 fc6d 	bl	800b33c <__mcmp>
 800aa62:	2800      	cmp	r0, #0
 800aa64:	da67      	bge.n	800ab36 <_dtoa_r+0x90e>
 800aa66:	9b00      	ldr	r3, [sp, #0]
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	ee18 1a10 	vmov	r1, s16
 800aa6e:	9300      	str	r3, [sp, #0]
 800aa70:	220a      	movs	r2, #10
 800aa72:	2300      	movs	r3, #0
 800aa74:	4620      	mov	r0, r4
 800aa76:	f000 fa41 	bl	800aefc <__multadd>
 800aa7a:	9b08      	ldr	r3, [sp, #32]
 800aa7c:	ee08 0a10 	vmov	s16, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f000 81b1 	beq.w	800ade8 <_dtoa_r+0xbc0>
 800aa86:	2300      	movs	r3, #0
 800aa88:	4639      	mov	r1, r7
 800aa8a:	220a      	movs	r2, #10
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	f000 fa35 	bl	800aefc <__multadd>
 800aa92:	9b02      	ldr	r3, [sp, #8]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	4607      	mov	r7, r0
 800aa98:	f300 808e 	bgt.w	800abb8 <_dtoa_r+0x990>
 800aa9c:	9b06      	ldr	r3, [sp, #24]
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	dc51      	bgt.n	800ab46 <_dtoa_r+0x91e>
 800aaa2:	e089      	b.n	800abb8 <_dtoa_r+0x990>
 800aaa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aaa6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aaaa:	e74b      	b.n	800a944 <_dtoa_r+0x71c>
 800aaac:	9b03      	ldr	r3, [sp, #12]
 800aaae:	1e5e      	subs	r6, r3, #1
 800aab0:	9b07      	ldr	r3, [sp, #28]
 800aab2:	42b3      	cmp	r3, r6
 800aab4:	bfbf      	itttt	lt
 800aab6:	9b07      	ldrlt	r3, [sp, #28]
 800aab8:	9607      	strlt	r6, [sp, #28]
 800aaba:	1af2      	sublt	r2, r6, r3
 800aabc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aabe:	bfb6      	itet	lt
 800aac0:	189b      	addlt	r3, r3, r2
 800aac2:	1b9e      	subge	r6, r3, r6
 800aac4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800aac6:	9b03      	ldr	r3, [sp, #12]
 800aac8:	bfb8      	it	lt
 800aaca:	2600      	movlt	r6, #0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	bfb7      	itett	lt
 800aad0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800aad4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800aad8:	1a9d      	sublt	r5, r3, r2
 800aada:	2300      	movlt	r3, #0
 800aadc:	e734      	b.n	800a948 <_dtoa_r+0x720>
 800aade:	9e07      	ldr	r6, [sp, #28]
 800aae0:	9d04      	ldr	r5, [sp, #16]
 800aae2:	9f08      	ldr	r7, [sp, #32]
 800aae4:	e73b      	b.n	800a95e <_dtoa_r+0x736>
 800aae6:	9a07      	ldr	r2, [sp, #28]
 800aae8:	e767      	b.n	800a9ba <_dtoa_r+0x792>
 800aaea:	9b06      	ldr	r3, [sp, #24]
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	dc18      	bgt.n	800ab22 <_dtoa_r+0x8fa>
 800aaf0:	f1ba 0f00 	cmp.w	sl, #0
 800aaf4:	d115      	bne.n	800ab22 <_dtoa_r+0x8fa>
 800aaf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aafa:	b993      	cbnz	r3, 800ab22 <_dtoa_r+0x8fa>
 800aafc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ab00:	0d1b      	lsrs	r3, r3, #20
 800ab02:	051b      	lsls	r3, r3, #20
 800ab04:	b183      	cbz	r3, 800ab28 <_dtoa_r+0x900>
 800ab06:	9b04      	ldr	r3, [sp, #16]
 800ab08:	3301      	adds	r3, #1
 800ab0a:	9304      	str	r3, [sp, #16]
 800ab0c:	9b05      	ldr	r3, [sp, #20]
 800ab0e:	3301      	adds	r3, #1
 800ab10:	9305      	str	r3, [sp, #20]
 800ab12:	f04f 0801 	mov.w	r8, #1
 800ab16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	f47f af6a 	bne.w	800a9f2 <_dtoa_r+0x7ca>
 800ab1e:	2001      	movs	r0, #1
 800ab20:	e76f      	b.n	800aa02 <_dtoa_r+0x7da>
 800ab22:	f04f 0800 	mov.w	r8, #0
 800ab26:	e7f6      	b.n	800ab16 <_dtoa_r+0x8ee>
 800ab28:	4698      	mov	r8, r3
 800ab2a:	e7f4      	b.n	800ab16 <_dtoa_r+0x8ee>
 800ab2c:	f43f af7d 	beq.w	800aa2a <_dtoa_r+0x802>
 800ab30:	4618      	mov	r0, r3
 800ab32:	301c      	adds	r0, #28
 800ab34:	e772      	b.n	800aa1c <_dtoa_r+0x7f4>
 800ab36:	9b03      	ldr	r3, [sp, #12]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	dc37      	bgt.n	800abac <_dtoa_r+0x984>
 800ab3c:	9b06      	ldr	r3, [sp, #24]
 800ab3e:	2b02      	cmp	r3, #2
 800ab40:	dd34      	ble.n	800abac <_dtoa_r+0x984>
 800ab42:	9b03      	ldr	r3, [sp, #12]
 800ab44:	9302      	str	r3, [sp, #8]
 800ab46:	9b02      	ldr	r3, [sp, #8]
 800ab48:	b96b      	cbnz	r3, 800ab66 <_dtoa_r+0x93e>
 800ab4a:	4631      	mov	r1, r6
 800ab4c:	2205      	movs	r2, #5
 800ab4e:	4620      	mov	r0, r4
 800ab50:	f000 f9d4 	bl	800aefc <__multadd>
 800ab54:	4601      	mov	r1, r0
 800ab56:	4606      	mov	r6, r0
 800ab58:	ee18 0a10 	vmov	r0, s16
 800ab5c:	f000 fbee 	bl	800b33c <__mcmp>
 800ab60:	2800      	cmp	r0, #0
 800ab62:	f73f adbb 	bgt.w	800a6dc <_dtoa_r+0x4b4>
 800ab66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab68:	9d01      	ldr	r5, [sp, #4]
 800ab6a:	43db      	mvns	r3, r3
 800ab6c:	9300      	str	r3, [sp, #0]
 800ab6e:	f04f 0800 	mov.w	r8, #0
 800ab72:	4631      	mov	r1, r6
 800ab74:	4620      	mov	r0, r4
 800ab76:	f000 f99f 	bl	800aeb8 <_Bfree>
 800ab7a:	2f00      	cmp	r7, #0
 800ab7c:	f43f aea4 	beq.w	800a8c8 <_dtoa_r+0x6a0>
 800ab80:	f1b8 0f00 	cmp.w	r8, #0
 800ab84:	d005      	beq.n	800ab92 <_dtoa_r+0x96a>
 800ab86:	45b8      	cmp	r8, r7
 800ab88:	d003      	beq.n	800ab92 <_dtoa_r+0x96a>
 800ab8a:	4641      	mov	r1, r8
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	f000 f993 	bl	800aeb8 <_Bfree>
 800ab92:	4639      	mov	r1, r7
 800ab94:	4620      	mov	r0, r4
 800ab96:	f000 f98f 	bl	800aeb8 <_Bfree>
 800ab9a:	e695      	b.n	800a8c8 <_dtoa_r+0x6a0>
 800ab9c:	2600      	movs	r6, #0
 800ab9e:	4637      	mov	r7, r6
 800aba0:	e7e1      	b.n	800ab66 <_dtoa_r+0x93e>
 800aba2:	9700      	str	r7, [sp, #0]
 800aba4:	4637      	mov	r7, r6
 800aba6:	e599      	b.n	800a6dc <_dtoa_r+0x4b4>
 800aba8:	40240000 	.word	0x40240000
 800abac:	9b08      	ldr	r3, [sp, #32]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	f000 80ca 	beq.w	800ad48 <_dtoa_r+0xb20>
 800abb4:	9b03      	ldr	r3, [sp, #12]
 800abb6:	9302      	str	r3, [sp, #8]
 800abb8:	2d00      	cmp	r5, #0
 800abba:	dd05      	ble.n	800abc8 <_dtoa_r+0x9a0>
 800abbc:	4639      	mov	r1, r7
 800abbe:	462a      	mov	r2, r5
 800abc0:	4620      	mov	r0, r4
 800abc2:	f000 fb4b 	bl	800b25c <__lshift>
 800abc6:	4607      	mov	r7, r0
 800abc8:	f1b8 0f00 	cmp.w	r8, #0
 800abcc:	d05b      	beq.n	800ac86 <_dtoa_r+0xa5e>
 800abce:	6879      	ldr	r1, [r7, #4]
 800abd0:	4620      	mov	r0, r4
 800abd2:	f000 f931 	bl	800ae38 <_Balloc>
 800abd6:	4605      	mov	r5, r0
 800abd8:	b928      	cbnz	r0, 800abe6 <_dtoa_r+0x9be>
 800abda:	4b87      	ldr	r3, [pc, #540]	; (800adf8 <_dtoa_r+0xbd0>)
 800abdc:	4602      	mov	r2, r0
 800abde:	f240 21ea 	movw	r1, #746	; 0x2ea
 800abe2:	f7ff bb3b 	b.w	800a25c <_dtoa_r+0x34>
 800abe6:	693a      	ldr	r2, [r7, #16]
 800abe8:	3202      	adds	r2, #2
 800abea:	0092      	lsls	r2, r2, #2
 800abec:	f107 010c 	add.w	r1, r7, #12
 800abf0:	300c      	adds	r0, #12
 800abf2:	f000 f913 	bl	800ae1c <memcpy>
 800abf6:	2201      	movs	r2, #1
 800abf8:	4629      	mov	r1, r5
 800abfa:	4620      	mov	r0, r4
 800abfc:	f000 fb2e 	bl	800b25c <__lshift>
 800ac00:	9b01      	ldr	r3, [sp, #4]
 800ac02:	f103 0901 	add.w	r9, r3, #1
 800ac06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	9305      	str	r3, [sp, #20]
 800ac0e:	f00a 0301 	and.w	r3, sl, #1
 800ac12:	46b8      	mov	r8, r7
 800ac14:	9304      	str	r3, [sp, #16]
 800ac16:	4607      	mov	r7, r0
 800ac18:	4631      	mov	r1, r6
 800ac1a:	ee18 0a10 	vmov	r0, s16
 800ac1e:	f7ff fa75 	bl	800a10c <quorem>
 800ac22:	4641      	mov	r1, r8
 800ac24:	9002      	str	r0, [sp, #8]
 800ac26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ac2a:	ee18 0a10 	vmov	r0, s16
 800ac2e:	f000 fb85 	bl	800b33c <__mcmp>
 800ac32:	463a      	mov	r2, r7
 800ac34:	9003      	str	r0, [sp, #12]
 800ac36:	4631      	mov	r1, r6
 800ac38:	4620      	mov	r0, r4
 800ac3a:	f000 fb9b 	bl	800b374 <__mdiff>
 800ac3e:	68c2      	ldr	r2, [r0, #12]
 800ac40:	f109 3bff 	add.w	fp, r9, #4294967295
 800ac44:	4605      	mov	r5, r0
 800ac46:	bb02      	cbnz	r2, 800ac8a <_dtoa_r+0xa62>
 800ac48:	4601      	mov	r1, r0
 800ac4a:	ee18 0a10 	vmov	r0, s16
 800ac4e:	f000 fb75 	bl	800b33c <__mcmp>
 800ac52:	4602      	mov	r2, r0
 800ac54:	4629      	mov	r1, r5
 800ac56:	4620      	mov	r0, r4
 800ac58:	9207      	str	r2, [sp, #28]
 800ac5a:	f000 f92d 	bl	800aeb8 <_Bfree>
 800ac5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ac62:	ea43 0102 	orr.w	r1, r3, r2
 800ac66:	9b04      	ldr	r3, [sp, #16]
 800ac68:	430b      	orrs	r3, r1
 800ac6a:	464d      	mov	r5, r9
 800ac6c:	d10f      	bne.n	800ac8e <_dtoa_r+0xa66>
 800ac6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ac72:	d02a      	beq.n	800acca <_dtoa_r+0xaa2>
 800ac74:	9b03      	ldr	r3, [sp, #12]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	dd02      	ble.n	800ac80 <_dtoa_r+0xa58>
 800ac7a:	9b02      	ldr	r3, [sp, #8]
 800ac7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ac80:	f88b a000 	strb.w	sl, [fp]
 800ac84:	e775      	b.n	800ab72 <_dtoa_r+0x94a>
 800ac86:	4638      	mov	r0, r7
 800ac88:	e7ba      	b.n	800ac00 <_dtoa_r+0x9d8>
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	e7e2      	b.n	800ac54 <_dtoa_r+0xa2c>
 800ac8e:	9b03      	ldr	r3, [sp, #12]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	db04      	blt.n	800ac9e <_dtoa_r+0xa76>
 800ac94:	9906      	ldr	r1, [sp, #24]
 800ac96:	430b      	orrs	r3, r1
 800ac98:	9904      	ldr	r1, [sp, #16]
 800ac9a:	430b      	orrs	r3, r1
 800ac9c:	d122      	bne.n	800ace4 <_dtoa_r+0xabc>
 800ac9e:	2a00      	cmp	r2, #0
 800aca0:	ddee      	ble.n	800ac80 <_dtoa_r+0xa58>
 800aca2:	ee18 1a10 	vmov	r1, s16
 800aca6:	2201      	movs	r2, #1
 800aca8:	4620      	mov	r0, r4
 800acaa:	f000 fad7 	bl	800b25c <__lshift>
 800acae:	4631      	mov	r1, r6
 800acb0:	ee08 0a10 	vmov	s16, r0
 800acb4:	f000 fb42 	bl	800b33c <__mcmp>
 800acb8:	2800      	cmp	r0, #0
 800acba:	dc03      	bgt.n	800acc4 <_dtoa_r+0xa9c>
 800acbc:	d1e0      	bne.n	800ac80 <_dtoa_r+0xa58>
 800acbe:	f01a 0f01 	tst.w	sl, #1
 800acc2:	d0dd      	beq.n	800ac80 <_dtoa_r+0xa58>
 800acc4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800acc8:	d1d7      	bne.n	800ac7a <_dtoa_r+0xa52>
 800acca:	2339      	movs	r3, #57	; 0x39
 800accc:	f88b 3000 	strb.w	r3, [fp]
 800acd0:	462b      	mov	r3, r5
 800acd2:	461d      	mov	r5, r3
 800acd4:	3b01      	subs	r3, #1
 800acd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800acda:	2a39      	cmp	r2, #57	; 0x39
 800acdc:	d071      	beq.n	800adc2 <_dtoa_r+0xb9a>
 800acde:	3201      	adds	r2, #1
 800ace0:	701a      	strb	r2, [r3, #0]
 800ace2:	e746      	b.n	800ab72 <_dtoa_r+0x94a>
 800ace4:	2a00      	cmp	r2, #0
 800ace6:	dd07      	ble.n	800acf8 <_dtoa_r+0xad0>
 800ace8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800acec:	d0ed      	beq.n	800acca <_dtoa_r+0xaa2>
 800acee:	f10a 0301 	add.w	r3, sl, #1
 800acf2:	f88b 3000 	strb.w	r3, [fp]
 800acf6:	e73c      	b.n	800ab72 <_dtoa_r+0x94a>
 800acf8:	9b05      	ldr	r3, [sp, #20]
 800acfa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800acfe:	4599      	cmp	r9, r3
 800ad00:	d047      	beq.n	800ad92 <_dtoa_r+0xb6a>
 800ad02:	ee18 1a10 	vmov	r1, s16
 800ad06:	2300      	movs	r3, #0
 800ad08:	220a      	movs	r2, #10
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	f000 f8f6 	bl	800aefc <__multadd>
 800ad10:	45b8      	cmp	r8, r7
 800ad12:	ee08 0a10 	vmov	s16, r0
 800ad16:	f04f 0300 	mov.w	r3, #0
 800ad1a:	f04f 020a 	mov.w	r2, #10
 800ad1e:	4641      	mov	r1, r8
 800ad20:	4620      	mov	r0, r4
 800ad22:	d106      	bne.n	800ad32 <_dtoa_r+0xb0a>
 800ad24:	f000 f8ea 	bl	800aefc <__multadd>
 800ad28:	4680      	mov	r8, r0
 800ad2a:	4607      	mov	r7, r0
 800ad2c:	f109 0901 	add.w	r9, r9, #1
 800ad30:	e772      	b.n	800ac18 <_dtoa_r+0x9f0>
 800ad32:	f000 f8e3 	bl	800aefc <__multadd>
 800ad36:	4639      	mov	r1, r7
 800ad38:	4680      	mov	r8, r0
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	220a      	movs	r2, #10
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f000 f8dc 	bl	800aefc <__multadd>
 800ad44:	4607      	mov	r7, r0
 800ad46:	e7f1      	b.n	800ad2c <_dtoa_r+0xb04>
 800ad48:	9b03      	ldr	r3, [sp, #12]
 800ad4a:	9302      	str	r3, [sp, #8]
 800ad4c:	9d01      	ldr	r5, [sp, #4]
 800ad4e:	ee18 0a10 	vmov	r0, s16
 800ad52:	4631      	mov	r1, r6
 800ad54:	f7ff f9da 	bl	800a10c <quorem>
 800ad58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ad5c:	9b01      	ldr	r3, [sp, #4]
 800ad5e:	f805 ab01 	strb.w	sl, [r5], #1
 800ad62:	1aea      	subs	r2, r5, r3
 800ad64:	9b02      	ldr	r3, [sp, #8]
 800ad66:	4293      	cmp	r3, r2
 800ad68:	dd09      	ble.n	800ad7e <_dtoa_r+0xb56>
 800ad6a:	ee18 1a10 	vmov	r1, s16
 800ad6e:	2300      	movs	r3, #0
 800ad70:	220a      	movs	r2, #10
 800ad72:	4620      	mov	r0, r4
 800ad74:	f000 f8c2 	bl	800aefc <__multadd>
 800ad78:	ee08 0a10 	vmov	s16, r0
 800ad7c:	e7e7      	b.n	800ad4e <_dtoa_r+0xb26>
 800ad7e:	9b02      	ldr	r3, [sp, #8]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	bfc8      	it	gt
 800ad84:	461d      	movgt	r5, r3
 800ad86:	9b01      	ldr	r3, [sp, #4]
 800ad88:	bfd8      	it	le
 800ad8a:	2501      	movle	r5, #1
 800ad8c:	441d      	add	r5, r3
 800ad8e:	f04f 0800 	mov.w	r8, #0
 800ad92:	ee18 1a10 	vmov	r1, s16
 800ad96:	2201      	movs	r2, #1
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f000 fa5f 	bl	800b25c <__lshift>
 800ad9e:	4631      	mov	r1, r6
 800ada0:	ee08 0a10 	vmov	s16, r0
 800ada4:	f000 faca 	bl	800b33c <__mcmp>
 800ada8:	2800      	cmp	r0, #0
 800adaa:	dc91      	bgt.n	800acd0 <_dtoa_r+0xaa8>
 800adac:	d102      	bne.n	800adb4 <_dtoa_r+0xb8c>
 800adae:	f01a 0f01 	tst.w	sl, #1
 800adb2:	d18d      	bne.n	800acd0 <_dtoa_r+0xaa8>
 800adb4:	462b      	mov	r3, r5
 800adb6:	461d      	mov	r5, r3
 800adb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adbc:	2a30      	cmp	r2, #48	; 0x30
 800adbe:	d0fa      	beq.n	800adb6 <_dtoa_r+0xb8e>
 800adc0:	e6d7      	b.n	800ab72 <_dtoa_r+0x94a>
 800adc2:	9a01      	ldr	r2, [sp, #4]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d184      	bne.n	800acd2 <_dtoa_r+0xaaa>
 800adc8:	9b00      	ldr	r3, [sp, #0]
 800adca:	3301      	adds	r3, #1
 800adcc:	9300      	str	r3, [sp, #0]
 800adce:	2331      	movs	r3, #49	; 0x31
 800add0:	7013      	strb	r3, [r2, #0]
 800add2:	e6ce      	b.n	800ab72 <_dtoa_r+0x94a>
 800add4:	4b09      	ldr	r3, [pc, #36]	; (800adfc <_dtoa_r+0xbd4>)
 800add6:	f7ff ba95 	b.w	800a304 <_dtoa_r+0xdc>
 800adda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800addc:	2b00      	cmp	r3, #0
 800adde:	f47f aa6e 	bne.w	800a2be <_dtoa_r+0x96>
 800ade2:	4b07      	ldr	r3, [pc, #28]	; (800ae00 <_dtoa_r+0xbd8>)
 800ade4:	f7ff ba8e 	b.w	800a304 <_dtoa_r+0xdc>
 800ade8:	9b02      	ldr	r3, [sp, #8]
 800adea:	2b00      	cmp	r3, #0
 800adec:	dcae      	bgt.n	800ad4c <_dtoa_r+0xb24>
 800adee:	9b06      	ldr	r3, [sp, #24]
 800adf0:	2b02      	cmp	r3, #2
 800adf2:	f73f aea8 	bgt.w	800ab46 <_dtoa_r+0x91e>
 800adf6:	e7a9      	b.n	800ad4c <_dtoa_r+0xb24>
 800adf8:	0800cbdf 	.word	0x0800cbdf
 800adfc:	0800cb3c 	.word	0x0800cb3c
 800ae00:	0800cb60 	.word	0x0800cb60

0800ae04 <_localeconv_r>:
 800ae04:	4800      	ldr	r0, [pc, #0]	; (800ae08 <_localeconv_r+0x4>)
 800ae06:	4770      	bx	lr
 800ae08:	20000198 	.word	0x20000198

0800ae0c <malloc>:
 800ae0c:	4b02      	ldr	r3, [pc, #8]	; (800ae18 <malloc+0xc>)
 800ae0e:	4601      	mov	r1, r0
 800ae10:	6818      	ldr	r0, [r3, #0]
 800ae12:	f000 bc17 	b.w	800b644 <_malloc_r>
 800ae16:	bf00      	nop
 800ae18:	20000044 	.word	0x20000044

0800ae1c <memcpy>:
 800ae1c:	440a      	add	r2, r1
 800ae1e:	4291      	cmp	r1, r2
 800ae20:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae24:	d100      	bne.n	800ae28 <memcpy+0xc>
 800ae26:	4770      	bx	lr
 800ae28:	b510      	push	{r4, lr}
 800ae2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae32:	4291      	cmp	r1, r2
 800ae34:	d1f9      	bne.n	800ae2a <memcpy+0xe>
 800ae36:	bd10      	pop	{r4, pc}

0800ae38 <_Balloc>:
 800ae38:	b570      	push	{r4, r5, r6, lr}
 800ae3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	460d      	mov	r5, r1
 800ae40:	b976      	cbnz	r6, 800ae60 <_Balloc+0x28>
 800ae42:	2010      	movs	r0, #16
 800ae44:	f7ff ffe2 	bl	800ae0c <malloc>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	6260      	str	r0, [r4, #36]	; 0x24
 800ae4c:	b920      	cbnz	r0, 800ae58 <_Balloc+0x20>
 800ae4e:	4b18      	ldr	r3, [pc, #96]	; (800aeb0 <_Balloc+0x78>)
 800ae50:	4818      	ldr	r0, [pc, #96]	; (800aeb4 <_Balloc+0x7c>)
 800ae52:	2166      	movs	r1, #102	; 0x66
 800ae54:	f000 fdd6 	bl	800ba04 <__assert_func>
 800ae58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae5c:	6006      	str	r6, [r0, #0]
 800ae5e:	60c6      	str	r6, [r0, #12]
 800ae60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ae62:	68f3      	ldr	r3, [r6, #12]
 800ae64:	b183      	cbz	r3, 800ae88 <_Balloc+0x50>
 800ae66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae68:	68db      	ldr	r3, [r3, #12]
 800ae6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae6e:	b9b8      	cbnz	r0, 800aea0 <_Balloc+0x68>
 800ae70:	2101      	movs	r1, #1
 800ae72:	fa01 f605 	lsl.w	r6, r1, r5
 800ae76:	1d72      	adds	r2, r6, #5
 800ae78:	0092      	lsls	r2, r2, #2
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	f000 fb60 	bl	800b540 <_calloc_r>
 800ae80:	b160      	cbz	r0, 800ae9c <_Balloc+0x64>
 800ae82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae86:	e00e      	b.n	800aea6 <_Balloc+0x6e>
 800ae88:	2221      	movs	r2, #33	; 0x21
 800ae8a:	2104      	movs	r1, #4
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	f000 fb57 	bl	800b540 <_calloc_r>
 800ae92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae94:	60f0      	str	r0, [r6, #12]
 800ae96:	68db      	ldr	r3, [r3, #12]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d1e4      	bne.n	800ae66 <_Balloc+0x2e>
 800ae9c:	2000      	movs	r0, #0
 800ae9e:	bd70      	pop	{r4, r5, r6, pc}
 800aea0:	6802      	ldr	r2, [r0, #0]
 800aea2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aea6:	2300      	movs	r3, #0
 800aea8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aeac:	e7f7      	b.n	800ae9e <_Balloc+0x66>
 800aeae:	bf00      	nop
 800aeb0:	0800cb6d 	.word	0x0800cb6d
 800aeb4:	0800cbf0 	.word	0x0800cbf0

0800aeb8 <_Bfree>:
 800aeb8:	b570      	push	{r4, r5, r6, lr}
 800aeba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aebc:	4605      	mov	r5, r0
 800aebe:	460c      	mov	r4, r1
 800aec0:	b976      	cbnz	r6, 800aee0 <_Bfree+0x28>
 800aec2:	2010      	movs	r0, #16
 800aec4:	f7ff ffa2 	bl	800ae0c <malloc>
 800aec8:	4602      	mov	r2, r0
 800aeca:	6268      	str	r0, [r5, #36]	; 0x24
 800aecc:	b920      	cbnz	r0, 800aed8 <_Bfree+0x20>
 800aece:	4b09      	ldr	r3, [pc, #36]	; (800aef4 <_Bfree+0x3c>)
 800aed0:	4809      	ldr	r0, [pc, #36]	; (800aef8 <_Bfree+0x40>)
 800aed2:	218a      	movs	r1, #138	; 0x8a
 800aed4:	f000 fd96 	bl	800ba04 <__assert_func>
 800aed8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aedc:	6006      	str	r6, [r0, #0]
 800aede:	60c6      	str	r6, [r0, #12]
 800aee0:	b13c      	cbz	r4, 800aef2 <_Bfree+0x3a>
 800aee2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aee4:	6862      	ldr	r2, [r4, #4]
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aeec:	6021      	str	r1, [r4, #0]
 800aeee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aef2:	bd70      	pop	{r4, r5, r6, pc}
 800aef4:	0800cb6d 	.word	0x0800cb6d
 800aef8:	0800cbf0 	.word	0x0800cbf0

0800aefc <__multadd>:
 800aefc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af00:	690d      	ldr	r5, [r1, #16]
 800af02:	4607      	mov	r7, r0
 800af04:	460c      	mov	r4, r1
 800af06:	461e      	mov	r6, r3
 800af08:	f101 0c14 	add.w	ip, r1, #20
 800af0c:	2000      	movs	r0, #0
 800af0e:	f8dc 3000 	ldr.w	r3, [ip]
 800af12:	b299      	uxth	r1, r3
 800af14:	fb02 6101 	mla	r1, r2, r1, r6
 800af18:	0c1e      	lsrs	r6, r3, #16
 800af1a:	0c0b      	lsrs	r3, r1, #16
 800af1c:	fb02 3306 	mla	r3, r2, r6, r3
 800af20:	b289      	uxth	r1, r1
 800af22:	3001      	adds	r0, #1
 800af24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af28:	4285      	cmp	r5, r0
 800af2a:	f84c 1b04 	str.w	r1, [ip], #4
 800af2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af32:	dcec      	bgt.n	800af0e <__multadd+0x12>
 800af34:	b30e      	cbz	r6, 800af7a <__multadd+0x7e>
 800af36:	68a3      	ldr	r3, [r4, #8]
 800af38:	42ab      	cmp	r3, r5
 800af3a:	dc19      	bgt.n	800af70 <__multadd+0x74>
 800af3c:	6861      	ldr	r1, [r4, #4]
 800af3e:	4638      	mov	r0, r7
 800af40:	3101      	adds	r1, #1
 800af42:	f7ff ff79 	bl	800ae38 <_Balloc>
 800af46:	4680      	mov	r8, r0
 800af48:	b928      	cbnz	r0, 800af56 <__multadd+0x5a>
 800af4a:	4602      	mov	r2, r0
 800af4c:	4b0c      	ldr	r3, [pc, #48]	; (800af80 <__multadd+0x84>)
 800af4e:	480d      	ldr	r0, [pc, #52]	; (800af84 <__multadd+0x88>)
 800af50:	21b5      	movs	r1, #181	; 0xb5
 800af52:	f000 fd57 	bl	800ba04 <__assert_func>
 800af56:	6922      	ldr	r2, [r4, #16]
 800af58:	3202      	adds	r2, #2
 800af5a:	f104 010c 	add.w	r1, r4, #12
 800af5e:	0092      	lsls	r2, r2, #2
 800af60:	300c      	adds	r0, #12
 800af62:	f7ff ff5b 	bl	800ae1c <memcpy>
 800af66:	4621      	mov	r1, r4
 800af68:	4638      	mov	r0, r7
 800af6a:	f7ff ffa5 	bl	800aeb8 <_Bfree>
 800af6e:	4644      	mov	r4, r8
 800af70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af74:	3501      	adds	r5, #1
 800af76:	615e      	str	r6, [r3, #20]
 800af78:	6125      	str	r5, [r4, #16]
 800af7a:	4620      	mov	r0, r4
 800af7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af80:	0800cbdf 	.word	0x0800cbdf
 800af84:	0800cbf0 	.word	0x0800cbf0

0800af88 <__hi0bits>:
 800af88:	0c03      	lsrs	r3, r0, #16
 800af8a:	041b      	lsls	r3, r3, #16
 800af8c:	b9d3      	cbnz	r3, 800afc4 <__hi0bits+0x3c>
 800af8e:	0400      	lsls	r0, r0, #16
 800af90:	2310      	movs	r3, #16
 800af92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800af96:	bf04      	itt	eq
 800af98:	0200      	lsleq	r0, r0, #8
 800af9a:	3308      	addeq	r3, #8
 800af9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800afa0:	bf04      	itt	eq
 800afa2:	0100      	lsleq	r0, r0, #4
 800afa4:	3304      	addeq	r3, #4
 800afa6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800afaa:	bf04      	itt	eq
 800afac:	0080      	lsleq	r0, r0, #2
 800afae:	3302      	addeq	r3, #2
 800afb0:	2800      	cmp	r0, #0
 800afb2:	db05      	blt.n	800afc0 <__hi0bits+0x38>
 800afb4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800afb8:	f103 0301 	add.w	r3, r3, #1
 800afbc:	bf08      	it	eq
 800afbe:	2320      	moveq	r3, #32
 800afc0:	4618      	mov	r0, r3
 800afc2:	4770      	bx	lr
 800afc4:	2300      	movs	r3, #0
 800afc6:	e7e4      	b.n	800af92 <__hi0bits+0xa>

0800afc8 <__lo0bits>:
 800afc8:	6803      	ldr	r3, [r0, #0]
 800afca:	f013 0207 	ands.w	r2, r3, #7
 800afce:	4601      	mov	r1, r0
 800afd0:	d00b      	beq.n	800afea <__lo0bits+0x22>
 800afd2:	07da      	lsls	r2, r3, #31
 800afd4:	d423      	bmi.n	800b01e <__lo0bits+0x56>
 800afd6:	0798      	lsls	r0, r3, #30
 800afd8:	bf49      	itett	mi
 800afda:	085b      	lsrmi	r3, r3, #1
 800afdc:	089b      	lsrpl	r3, r3, #2
 800afde:	2001      	movmi	r0, #1
 800afe0:	600b      	strmi	r3, [r1, #0]
 800afe2:	bf5c      	itt	pl
 800afe4:	600b      	strpl	r3, [r1, #0]
 800afe6:	2002      	movpl	r0, #2
 800afe8:	4770      	bx	lr
 800afea:	b298      	uxth	r0, r3
 800afec:	b9a8      	cbnz	r0, 800b01a <__lo0bits+0x52>
 800afee:	0c1b      	lsrs	r3, r3, #16
 800aff0:	2010      	movs	r0, #16
 800aff2:	b2da      	uxtb	r2, r3
 800aff4:	b90a      	cbnz	r2, 800affa <__lo0bits+0x32>
 800aff6:	3008      	adds	r0, #8
 800aff8:	0a1b      	lsrs	r3, r3, #8
 800affa:	071a      	lsls	r2, r3, #28
 800affc:	bf04      	itt	eq
 800affe:	091b      	lsreq	r3, r3, #4
 800b000:	3004      	addeq	r0, #4
 800b002:	079a      	lsls	r2, r3, #30
 800b004:	bf04      	itt	eq
 800b006:	089b      	lsreq	r3, r3, #2
 800b008:	3002      	addeq	r0, #2
 800b00a:	07da      	lsls	r2, r3, #31
 800b00c:	d403      	bmi.n	800b016 <__lo0bits+0x4e>
 800b00e:	085b      	lsrs	r3, r3, #1
 800b010:	f100 0001 	add.w	r0, r0, #1
 800b014:	d005      	beq.n	800b022 <__lo0bits+0x5a>
 800b016:	600b      	str	r3, [r1, #0]
 800b018:	4770      	bx	lr
 800b01a:	4610      	mov	r0, r2
 800b01c:	e7e9      	b.n	800aff2 <__lo0bits+0x2a>
 800b01e:	2000      	movs	r0, #0
 800b020:	4770      	bx	lr
 800b022:	2020      	movs	r0, #32
 800b024:	4770      	bx	lr
	...

0800b028 <__i2b>:
 800b028:	b510      	push	{r4, lr}
 800b02a:	460c      	mov	r4, r1
 800b02c:	2101      	movs	r1, #1
 800b02e:	f7ff ff03 	bl	800ae38 <_Balloc>
 800b032:	4602      	mov	r2, r0
 800b034:	b928      	cbnz	r0, 800b042 <__i2b+0x1a>
 800b036:	4b05      	ldr	r3, [pc, #20]	; (800b04c <__i2b+0x24>)
 800b038:	4805      	ldr	r0, [pc, #20]	; (800b050 <__i2b+0x28>)
 800b03a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b03e:	f000 fce1 	bl	800ba04 <__assert_func>
 800b042:	2301      	movs	r3, #1
 800b044:	6144      	str	r4, [r0, #20]
 800b046:	6103      	str	r3, [r0, #16]
 800b048:	bd10      	pop	{r4, pc}
 800b04a:	bf00      	nop
 800b04c:	0800cbdf 	.word	0x0800cbdf
 800b050:	0800cbf0 	.word	0x0800cbf0

0800b054 <__multiply>:
 800b054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b058:	4691      	mov	r9, r2
 800b05a:	690a      	ldr	r2, [r1, #16]
 800b05c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b060:	429a      	cmp	r2, r3
 800b062:	bfb8      	it	lt
 800b064:	460b      	movlt	r3, r1
 800b066:	460c      	mov	r4, r1
 800b068:	bfbc      	itt	lt
 800b06a:	464c      	movlt	r4, r9
 800b06c:	4699      	movlt	r9, r3
 800b06e:	6927      	ldr	r7, [r4, #16]
 800b070:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b074:	68a3      	ldr	r3, [r4, #8]
 800b076:	6861      	ldr	r1, [r4, #4]
 800b078:	eb07 060a 	add.w	r6, r7, sl
 800b07c:	42b3      	cmp	r3, r6
 800b07e:	b085      	sub	sp, #20
 800b080:	bfb8      	it	lt
 800b082:	3101      	addlt	r1, #1
 800b084:	f7ff fed8 	bl	800ae38 <_Balloc>
 800b088:	b930      	cbnz	r0, 800b098 <__multiply+0x44>
 800b08a:	4602      	mov	r2, r0
 800b08c:	4b44      	ldr	r3, [pc, #272]	; (800b1a0 <__multiply+0x14c>)
 800b08e:	4845      	ldr	r0, [pc, #276]	; (800b1a4 <__multiply+0x150>)
 800b090:	f240 115d 	movw	r1, #349	; 0x15d
 800b094:	f000 fcb6 	bl	800ba04 <__assert_func>
 800b098:	f100 0514 	add.w	r5, r0, #20
 800b09c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b0a0:	462b      	mov	r3, r5
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	4543      	cmp	r3, r8
 800b0a6:	d321      	bcc.n	800b0ec <__multiply+0x98>
 800b0a8:	f104 0314 	add.w	r3, r4, #20
 800b0ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b0b0:	f109 0314 	add.w	r3, r9, #20
 800b0b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b0b8:	9202      	str	r2, [sp, #8]
 800b0ba:	1b3a      	subs	r2, r7, r4
 800b0bc:	3a15      	subs	r2, #21
 800b0be:	f022 0203 	bic.w	r2, r2, #3
 800b0c2:	3204      	adds	r2, #4
 800b0c4:	f104 0115 	add.w	r1, r4, #21
 800b0c8:	428f      	cmp	r7, r1
 800b0ca:	bf38      	it	cc
 800b0cc:	2204      	movcc	r2, #4
 800b0ce:	9201      	str	r2, [sp, #4]
 800b0d0:	9a02      	ldr	r2, [sp, #8]
 800b0d2:	9303      	str	r3, [sp, #12]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d80c      	bhi.n	800b0f2 <__multiply+0x9e>
 800b0d8:	2e00      	cmp	r6, #0
 800b0da:	dd03      	ble.n	800b0e4 <__multiply+0x90>
 800b0dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d05a      	beq.n	800b19a <__multiply+0x146>
 800b0e4:	6106      	str	r6, [r0, #16]
 800b0e6:	b005      	add	sp, #20
 800b0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ec:	f843 2b04 	str.w	r2, [r3], #4
 800b0f0:	e7d8      	b.n	800b0a4 <__multiply+0x50>
 800b0f2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b0f6:	f1ba 0f00 	cmp.w	sl, #0
 800b0fa:	d024      	beq.n	800b146 <__multiply+0xf2>
 800b0fc:	f104 0e14 	add.w	lr, r4, #20
 800b100:	46a9      	mov	r9, r5
 800b102:	f04f 0c00 	mov.w	ip, #0
 800b106:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b10a:	f8d9 1000 	ldr.w	r1, [r9]
 800b10e:	fa1f fb82 	uxth.w	fp, r2
 800b112:	b289      	uxth	r1, r1
 800b114:	fb0a 110b 	mla	r1, sl, fp, r1
 800b118:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b11c:	f8d9 2000 	ldr.w	r2, [r9]
 800b120:	4461      	add	r1, ip
 800b122:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b126:	fb0a c20b 	mla	r2, sl, fp, ip
 800b12a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b12e:	b289      	uxth	r1, r1
 800b130:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b134:	4577      	cmp	r7, lr
 800b136:	f849 1b04 	str.w	r1, [r9], #4
 800b13a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b13e:	d8e2      	bhi.n	800b106 <__multiply+0xb2>
 800b140:	9a01      	ldr	r2, [sp, #4]
 800b142:	f845 c002 	str.w	ip, [r5, r2]
 800b146:	9a03      	ldr	r2, [sp, #12]
 800b148:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b14c:	3304      	adds	r3, #4
 800b14e:	f1b9 0f00 	cmp.w	r9, #0
 800b152:	d020      	beq.n	800b196 <__multiply+0x142>
 800b154:	6829      	ldr	r1, [r5, #0]
 800b156:	f104 0c14 	add.w	ip, r4, #20
 800b15a:	46ae      	mov	lr, r5
 800b15c:	f04f 0a00 	mov.w	sl, #0
 800b160:	f8bc b000 	ldrh.w	fp, [ip]
 800b164:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b168:	fb09 220b 	mla	r2, r9, fp, r2
 800b16c:	4492      	add	sl, r2
 800b16e:	b289      	uxth	r1, r1
 800b170:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b174:	f84e 1b04 	str.w	r1, [lr], #4
 800b178:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b17c:	f8be 1000 	ldrh.w	r1, [lr]
 800b180:	0c12      	lsrs	r2, r2, #16
 800b182:	fb09 1102 	mla	r1, r9, r2, r1
 800b186:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b18a:	4567      	cmp	r7, ip
 800b18c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b190:	d8e6      	bhi.n	800b160 <__multiply+0x10c>
 800b192:	9a01      	ldr	r2, [sp, #4]
 800b194:	50a9      	str	r1, [r5, r2]
 800b196:	3504      	adds	r5, #4
 800b198:	e79a      	b.n	800b0d0 <__multiply+0x7c>
 800b19a:	3e01      	subs	r6, #1
 800b19c:	e79c      	b.n	800b0d8 <__multiply+0x84>
 800b19e:	bf00      	nop
 800b1a0:	0800cbdf 	.word	0x0800cbdf
 800b1a4:	0800cbf0 	.word	0x0800cbf0

0800b1a8 <__pow5mult>:
 800b1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1ac:	4615      	mov	r5, r2
 800b1ae:	f012 0203 	ands.w	r2, r2, #3
 800b1b2:	4606      	mov	r6, r0
 800b1b4:	460f      	mov	r7, r1
 800b1b6:	d007      	beq.n	800b1c8 <__pow5mult+0x20>
 800b1b8:	4c25      	ldr	r4, [pc, #148]	; (800b250 <__pow5mult+0xa8>)
 800b1ba:	3a01      	subs	r2, #1
 800b1bc:	2300      	movs	r3, #0
 800b1be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1c2:	f7ff fe9b 	bl	800aefc <__multadd>
 800b1c6:	4607      	mov	r7, r0
 800b1c8:	10ad      	asrs	r5, r5, #2
 800b1ca:	d03d      	beq.n	800b248 <__pow5mult+0xa0>
 800b1cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b1ce:	b97c      	cbnz	r4, 800b1f0 <__pow5mult+0x48>
 800b1d0:	2010      	movs	r0, #16
 800b1d2:	f7ff fe1b 	bl	800ae0c <malloc>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	6270      	str	r0, [r6, #36]	; 0x24
 800b1da:	b928      	cbnz	r0, 800b1e8 <__pow5mult+0x40>
 800b1dc:	4b1d      	ldr	r3, [pc, #116]	; (800b254 <__pow5mult+0xac>)
 800b1de:	481e      	ldr	r0, [pc, #120]	; (800b258 <__pow5mult+0xb0>)
 800b1e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b1e4:	f000 fc0e 	bl	800ba04 <__assert_func>
 800b1e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1ec:	6004      	str	r4, [r0, #0]
 800b1ee:	60c4      	str	r4, [r0, #12]
 800b1f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b1f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b1f8:	b94c      	cbnz	r4, 800b20e <__pow5mult+0x66>
 800b1fa:	f240 2171 	movw	r1, #625	; 0x271
 800b1fe:	4630      	mov	r0, r6
 800b200:	f7ff ff12 	bl	800b028 <__i2b>
 800b204:	2300      	movs	r3, #0
 800b206:	f8c8 0008 	str.w	r0, [r8, #8]
 800b20a:	4604      	mov	r4, r0
 800b20c:	6003      	str	r3, [r0, #0]
 800b20e:	f04f 0900 	mov.w	r9, #0
 800b212:	07eb      	lsls	r3, r5, #31
 800b214:	d50a      	bpl.n	800b22c <__pow5mult+0x84>
 800b216:	4639      	mov	r1, r7
 800b218:	4622      	mov	r2, r4
 800b21a:	4630      	mov	r0, r6
 800b21c:	f7ff ff1a 	bl	800b054 <__multiply>
 800b220:	4639      	mov	r1, r7
 800b222:	4680      	mov	r8, r0
 800b224:	4630      	mov	r0, r6
 800b226:	f7ff fe47 	bl	800aeb8 <_Bfree>
 800b22a:	4647      	mov	r7, r8
 800b22c:	106d      	asrs	r5, r5, #1
 800b22e:	d00b      	beq.n	800b248 <__pow5mult+0xa0>
 800b230:	6820      	ldr	r0, [r4, #0]
 800b232:	b938      	cbnz	r0, 800b244 <__pow5mult+0x9c>
 800b234:	4622      	mov	r2, r4
 800b236:	4621      	mov	r1, r4
 800b238:	4630      	mov	r0, r6
 800b23a:	f7ff ff0b 	bl	800b054 <__multiply>
 800b23e:	6020      	str	r0, [r4, #0]
 800b240:	f8c0 9000 	str.w	r9, [r0]
 800b244:	4604      	mov	r4, r0
 800b246:	e7e4      	b.n	800b212 <__pow5mult+0x6a>
 800b248:	4638      	mov	r0, r7
 800b24a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b24e:	bf00      	nop
 800b250:	0800cd40 	.word	0x0800cd40
 800b254:	0800cb6d 	.word	0x0800cb6d
 800b258:	0800cbf0 	.word	0x0800cbf0

0800b25c <__lshift>:
 800b25c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b260:	460c      	mov	r4, r1
 800b262:	6849      	ldr	r1, [r1, #4]
 800b264:	6923      	ldr	r3, [r4, #16]
 800b266:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b26a:	68a3      	ldr	r3, [r4, #8]
 800b26c:	4607      	mov	r7, r0
 800b26e:	4691      	mov	r9, r2
 800b270:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b274:	f108 0601 	add.w	r6, r8, #1
 800b278:	42b3      	cmp	r3, r6
 800b27a:	db0b      	blt.n	800b294 <__lshift+0x38>
 800b27c:	4638      	mov	r0, r7
 800b27e:	f7ff fddb 	bl	800ae38 <_Balloc>
 800b282:	4605      	mov	r5, r0
 800b284:	b948      	cbnz	r0, 800b29a <__lshift+0x3e>
 800b286:	4602      	mov	r2, r0
 800b288:	4b2a      	ldr	r3, [pc, #168]	; (800b334 <__lshift+0xd8>)
 800b28a:	482b      	ldr	r0, [pc, #172]	; (800b338 <__lshift+0xdc>)
 800b28c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b290:	f000 fbb8 	bl	800ba04 <__assert_func>
 800b294:	3101      	adds	r1, #1
 800b296:	005b      	lsls	r3, r3, #1
 800b298:	e7ee      	b.n	800b278 <__lshift+0x1c>
 800b29a:	2300      	movs	r3, #0
 800b29c:	f100 0114 	add.w	r1, r0, #20
 800b2a0:	f100 0210 	add.w	r2, r0, #16
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	4553      	cmp	r3, sl
 800b2a8:	db37      	blt.n	800b31a <__lshift+0xbe>
 800b2aa:	6920      	ldr	r0, [r4, #16]
 800b2ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b2b0:	f104 0314 	add.w	r3, r4, #20
 800b2b4:	f019 091f 	ands.w	r9, r9, #31
 800b2b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b2c0:	d02f      	beq.n	800b322 <__lshift+0xc6>
 800b2c2:	f1c9 0e20 	rsb	lr, r9, #32
 800b2c6:	468a      	mov	sl, r1
 800b2c8:	f04f 0c00 	mov.w	ip, #0
 800b2cc:	681a      	ldr	r2, [r3, #0]
 800b2ce:	fa02 f209 	lsl.w	r2, r2, r9
 800b2d2:	ea42 020c 	orr.w	r2, r2, ip
 800b2d6:	f84a 2b04 	str.w	r2, [sl], #4
 800b2da:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2de:	4298      	cmp	r0, r3
 800b2e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b2e4:	d8f2      	bhi.n	800b2cc <__lshift+0x70>
 800b2e6:	1b03      	subs	r3, r0, r4
 800b2e8:	3b15      	subs	r3, #21
 800b2ea:	f023 0303 	bic.w	r3, r3, #3
 800b2ee:	3304      	adds	r3, #4
 800b2f0:	f104 0215 	add.w	r2, r4, #21
 800b2f4:	4290      	cmp	r0, r2
 800b2f6:	bf38      	it	cc
 800b2f8:	2304      	movcc	r3, #4
 800b2fa:	f841 c003 	str.w	ip, [r1, r3]
 800b2fe:	f1bc 0f00 	cmp.w	ip, #0
 800b302:	d001      	beq.n	800b308 <__lshift+0xac>
 800b304:	f108 0602 	add.w	r6, r8, #2
 800b308:	3e01      	subs	r6, #1
 800b30a:	4638      	mov	r0, r7
 800b30c:	612e      	str	r6, [r5, #16]
 800b30e:	4621      	mov	r1, r4
 800b310:	f7ff fdd2 	bl	800aeb8 <_Bfree>
 800b314:	4628      	mov	r0, r5
 800b316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b31a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b31e:	3301      	adds	r3, #1
 800b320:	e7c1      	b.n	800b2a6 <__lshift+0x4a>
 800b322:	3904      	subs	r1, #4
 800b324:	f853 2b04 	ldr.w	r2, [r3], #4
 800b328:	f841 2f04 	str.w	r2, [r1, #4]!
 800b32c:	4298      	cmp	r0, r3
 800b32e:	d8f9      	bhi.n	800b324 <__lshift+0xc8>
 800b330:	e7ea      	b.n	800b308 <__lshift+0xac>
 800b332:	bf00      	nop
 800b334:	0800cbdf 	.word	0x0800cbdf
 800b338:	0800cbf0 	.word	0x0800cbf0

0800b33c <__mcmp>:
 800b33c:	b530      	push	{r4, r5, lr}
 800b33e:	6902      	ldr	r2, [r0, #16]
 800b340:	690c      	ldr	r4, [r1, #16]
 800b342:	1b12      	subs	r2, r2, r4
 800b344:	d10e      	bne.n	800b364 <__mcmp+0x28>
 800b346:	f100 0314 	add.w	r3, r0, #20
 800b34a:	3114      	adds	r1, #20
 800b34c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b350:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b354:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b358:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b35c:	42a5      	cmp	r5, r4
 800b35e:	d003      	beq.n	800b368 <__mcmp+0x2c>
 800b360:	d305      	bcc.n	800b36e <__mcmp+0x32>
 800b362:	2201      	movs	r2, #1
 800b364:	4610      	mov	r0, r2
 800b366:	bd30      	pop	{r4, r5, pc}
 800b368:	4283      	cmp	r3, r0
 800b36a:	d3f3      	bcc.n	800b354 <__mcmp+0x18>
 800b36c:	e7fa      	b.n	800b364 <__mcmp+0x28>
 800b36e:	f04f 32ff 	mov.w	r2, #4294967295
 800b372:	e7f7      	b.n	800b364 <__mcmp+0x28>

0800b374 <__mdiff>:
 800b374:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b378:	460c      	mov	r4, r1
 800b37a:	4606      	mov	r6, r0
 800b37c:	4611      	mov	r1, r2
 800b37e:	4620      	mov	r0, r4
 800b380:	4690      	mov	r8, r2
 800b382:	f7ff ffdb 	bl	800b33c <__mcmp>
 800b386:	1e05      	subs	r5, r0, #0
 800b388:	d110      	bne.n	800b3ac <__mdiff+0x38>
 800b38a:	4629      	mov	r1, r5
 800b38c:	4630      	mov	r0, r6
 800b38e:	f7ff fd53 	bl	800ae38 <_Balloc>
 800b392:	b930      	cbnz	r0, 800b3a2 <__mdiff+0x2e>
 800b394:	4b3a      	ldr	r3, [pc, #232]	; (800b480 <__mdiff+0x10c>)
 800b396:	4602      	mov	r2, r0
 800b398:	f240 2132 	movw	r1, #562	; 0x232
 800b39c:	4839      	ldr	r0, [pc, #228]	; (800b484 <__mdiff+0x110>)
 800b39e:	f000 fb31 	bl	800ba04 <__assert_func>
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b3a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ac:	bfa4      	itt	ge
 800b3ae:	4643      	movge	r3, r8
 800b3b0:	46a0      	movge	r8, r4
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b3b8:	bfa6      	itte	ge
 800b3ba:	461c      	movge	r4, r3
 800b3bc:	2500      	movge	r5, #0
 800b3be:	2501      	movlt	r5, #1
 800b3c0:	f7ff fd3a 	bl	800ae38 <_Balloc>
 800b3c4:	b920      	cbnz	r0, 800b3d0 <__mdiff+0x5c>
 800b3c6:	4b2e      	ldr	r3, [pc, #184]	; (800b480 <__mdiff+0x10c>)
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b3ce:	e7e5      	b.n	800b39c <__mdiff+0x28>
 800b3d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b3d4:	6926      	ldr	r6, [r4, #16]
 800b3d6:	60c5      	str	r5, [r0, #12]
 800b3d8:	f104 0914 	add.w	r9, r4, #20
 800b3dc:	f108 0514 	add.w	r5, r8, #20
 800b3e0:	f100 0e14 	add.w	lr, r0, #20
 800b3e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b3e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b3ec:	f108 0210 	add.w	r2, r8, #16
 800b3f0:	46f2      	mov	sl, lr
 800b3f2:	2100      	movs	r1, #0
 800b3f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b3f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b3fc:	fa1f f883 	uxth.w	r8, r3
 800b400:	fa11 f18b 	uxtah	r1, r1, fp
 800b404:	0c1b      	lsrs	r3, r3, #16
 800b406:	eba1 0808 	sub.w	r8, r1, r8
 800b40a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b40e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b412:	fa1f f888 	uxth.w	r8, r8
 800b416:	1419      	asrs	r1, r3, #16
 800b418:	454e      	cmp	r6, r9
 800b41a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b41e:	f84a 3b04 	str.w	r3, [sl], #4
 800b422:	d8e7      	bhi.n	800b3f4 <__mdiff+0x80>
 800b424:	1b33      	subs	r3, r6, r4
 800b426:	3b15      	subs	r3, #21
 800b428:	f023 0303 	bic.w	r3, r3, #3
 800b42c:	3304      	adds	r3, #4
 800b42e:	3415      	adds	r4, #21
 800b430:	42a6      	cmp	r6, r4
 800b432:	bf38      	it	cc
 800b434:	2304      	movcc	r3, #4
 800b436:	441d      	add	r5, r3
 800b438:	4473      	add	r3, lr
 800b43a:	469e      	mov	lr, r3
 800b43c:	462e      	mov	r6, r5
 800b43e:	4566      	cmp	r6, ip
 800b440:	d30e      	bcc.n	800b460 <__mdiff+0xec>
 800b442:	f10c 0203 	add.w	r2, ip, #3
 800b446:	1b52      	subs	r2, r2, r5
 800b448:	f022 0203 	bic.w	r2, r2, #3
 800b44c:	3d03      	subs	r5, #3
 800b44e:	45ac      	cmp	ip, r5
 800b450:	bf38      	it	cc
 800b452:	2200      	movcc	r2, #0
 800b454:	441a      	add	r2, r3
 800b456:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b45a:	b17b      	cbz	r3, 800b47c <__mdiff+0x108>
 800b45c:	6107      	str	r7, [r0, #16]
 800b45e:	e7a3      	b.n	800b3a8 <__mdiff+0x34>
 800b460:	f856 8b04 	ldr.w	r8, [r6], #4
 800b464:	fa11 f288 	uxtah	r2, r1, r8
 800b468:	1414      	asrs	r4, r2, #16
 800b46a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b46e:	b292      	uxth	r2, r2
 800b470:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b474:	f84e 2b04 	str.w	r2, [lr], #4
 800b478:	1421      	asrs	r1, r4, #16
 800b47a:	e7e0      	b.n	800b43e <__mdiff+0xca>
 800b47c:	3f01      	subs	r7, #1
 800b47e:	e7ea      	b.n	800b456 <__mdiff+0xe2>
 800b480:	0800cbdf 	.word	0x0800cbdf
 800b484:	0800cbf0 	.word	0x0800cbf0

0800b488 <__d2b>:
 800b488:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b48c:	4689      	mov	r9, r1
 800b48e:	2101      	movs	r1, #1
 800b490:	ec57 6b10 	vmov	r6, r7, d0
 800b494:	4690      	mov	r8, r2
 800b496:	f7ff fccf 	bl	800ae38 <_Balloc>
 800b49a:	4604      	mov	r4, r0
 800b49c:	b930      	cbnz	r0, 800b4ac <__d2b+0x24>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	4b25      	ldr	r3, [pc, #148]	; (800b538 <__d2b+0xb0>)
 800b4a2:	4826      	ldr	r0, [pc, #152]	; (800b53c <__d2b+0xb4>)
 800b4a4:	f240 310a 	movw	r1, #778	; 0x30a
 800b4a8:	f000 faac 	bl	800ba04 <__assert_func>
 800b4ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b4b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b4b4:	bb35      	cbnz	r5, 800b504 <__d2b+0x7c>
 800b4b6:	2e00      	cmp	r6, #0
 800b4b8:	9301      	str	r3, [sp, #4]
 800b4ba:	d028      	beq.n	800b50e <__d2b+0x86>
 800b4bc:	4668      	mov	r0, sp
 800b4be:	9600      	str	r6, [sp, #0]
 800b4c0:	f7ff fd82 	bl	800afc8 <__lo0bits>
 800b4c4:	9900      	ldr	r1, [sp, #0]
 800b4c6:	b300      	cbz	r0, 800b50a <__d2b+0x82>
 800b4c8:	9a01      	ldr	r2, [sp, #4]
 800b4ca:	f1c0 0320 	rsb	r3, r0, #32
 800b4ce:	fa02 f303 	lsl.w	r3, r2, r3
 800b4d2:	430b      	orrs	r3, r1
 800b4d4:	40c2      	lsrs	r2, r0
 800b4d6:	6163      	str	r3, [r4, #20]
 800b4d8:	9201      	str	r2, [sp, #4]
 800b4da:	9b01      	ldr	r3, [sp, #4]
 800b4dc:	61a3      	str	r3, [r4, #24]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	bf14      	ite	ne
 800b4e2:	2202      	movne	r2, #2
 800b4e4:	2201      	moveq	r2, #1
 800b4e6:	6122      	str	r2, [r4, #16]
 800b4e8:	b1d5      	cbz	r5, 800b520 <__d2b+0x98>
 800b4ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b4ee:	4405      	add	r5, r0
 800b4f0:	f8c9 5000 	str.w	r5, [r9]
 800b4f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b4f8:	f8c8 0000 	str.w	r0, [r8]
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	b003      	add	sp, #12
 800b500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b508:	e7d5      	b.n	800b4b6 <__d2b+0x2e>
 800b50a:	6161      	str	r1, [r4, #20]
 800b50c:	e7e5      	b.n	800b4da <__d2b+0x52>
 800b50e:	a801      	add	r0, sp, #4
 800b510:	f7ff fd5a 	bl	800afc8 <__lo0bits>
 800b514:	9b01      	ldr	r3, [sp, #4]
 800b516:	6163      	str	r3, [r4, #20]
 800b518:	2201      	movs	r2, #1
 800b51a:	6122      	str	r2, [r4, #16]
 800b51c:	3020      	adds	r0, #32
 800b51e:	e7e3      	b.n	800b4e8 <__d2b+0x60>
 800b520:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b524:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b528:	f8c9 0000 	str.w	r0, [r9]
 800b52c:	6918      	ldr	r0, [r3, #16]
 800b52e:	f7ff fd2b 	bl	800af88 <__hi0bits>
 800b532:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b536:	e7df      	b.n	800b4f8 <__d2b+0x70>
 800b538:	0800cbdf 	.word	0x0800cbdf
 800b53c:	0800cbf0 	.word	0x0800cbf0

0800b540 <_calloc_r>:
 800b540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b542:	fba1 2402 	umull	r2, r4, r1, r2
 800b546:	b94c      	cbnz	r4, 800b55c <_calloc_r+0x1c>
 800b548:	4611      	mov	r1, r2
 800b54a:	9201      	str	r2, [sp, #4]
 800b54c:	f000 f87a 	bl	800b644 <_malloc_r>
 800b550:	9a01      	ldr	r2, [sp, #4]
 800b552:	4605      	mov	r5, r0
 800b554:	b930      	cbnz	r0, 800b564 <_calloc_r+0x24>
 800b556:	4628      	mov	r0, r5
 800b558:	b003      	add	sp, #12
 800b55a:	bd30      	pop	{r4, r5, pc}
 800b55c:	220c      	movs	r2, #12
 800b55e:	6002      	str	r2, [r0, #0]
 800b560:	2500      	movs	r5, #0
 800b562:	e7f8      	b.n	800b556 <_calloc_r+0x16>
 800b564:	4621      	mov	r1, r4
 800b566:	f7fe f93f 	bl	80097e8 <memset>
 800b56a:	e7f4      	b.n	800b556 <_calloc_r+0x16>

0800b56c <_free_r>:
 800b56c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b56e:	2900      	cmp	r1, #0
 800b570:	d044      	beq.n	800b5fc <_free_r+0x90>
 800b572:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b576:	9001      	str	r0, [sp, #4]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	f1a1 0404 	sub.w	r4, r1, #4
 800b57e:	bfb8      	it	lt
 800b580:	18e4      	addlt	r4, r4, r3
 800b582:	f000 fa9b 	bl	800babc <__malloc_lock>
 800b586:	4a1e      	ldr	r2, [pc, #120]	; (800b600 <_free_r+0x94>)
 800b588:	9801      	ldr	r0, [sp, #4]
 800b58a:	6813      	ldr	r3, [r2, #0]
 800b58c:	b933      	cbnz	r3, 800b59c <_free_r+0x30>
 800b58e:	6063      	str	r3, [r4, #4]
 800b590:	6014      	str	r4, [r2, #0]
 800b592:	b003      	add	sp, #12
 800b594:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b598:	f000 ba96 	b.w	800bac8 <__malloc_unlock>
 800b59c:	42a3      	cmp	r3, r4
 800b59e:	d908      	bls.n	800b5b2 <_free_r+0x46>
 800b5a0:	6825      	ldr	r5, [r4, #0]
 800b5a2:	1961      	adds	r1, r4, r5
 800b5a4:	428b      	cmp	r3, r1
 800b5a6:	bf01      	itttt	eq
 800b5a8:	6819      	ldreq	r1, [r3, #0]
 800b5aa:	685b      	ldreq	r3, [r3, #4]
 800b5ac:	1949      	addeq	r1, r1, r5
 800b5ae:	6021      	streq	r1, [r4, #0]
 800b5b0:	e7ed      	b.n	800b58e <_free_r+0x22>
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	b10b      	cbz	r3, 800b5bc <_free_r+0x50>
 800b5b8:	42a3      	cmp	r3, r4
 800b5ba:	d9fa      	bls.n	800b5b2 <_free_r+0x46>
 800b5bc:	6811      	ldr	r1, [r2, #0]
 800b5be:	1855      	adds	r5, r2, r1
 800b5c0:	42a5      	cmp	r5, r4
 800b5c2:	d10b      	bne.n	800b5dc <_free_r+0x70>
 800b5c4:	6824      	ldr	r4, [r4, #0]
 800b5c6:	4421      	add	r1, r4
 800b5c8:	1854      	adds	r4, r2, r1
 800b5ca:	42a3      	cmp	r3, r4
 800b5cc:	6011      	str	r1, [r2, #0]
 800b5ce:	d1e0      	bne.n	800b592 <_free_r+0x26>
 800b5d0:	681c      	ldr	r4, [r3, #0]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	6053      	str	r3, [r2, #4]
 800b5d6:	4421      	add	r1, r4
 800b5d8:	6011      	str	r1, [r2, #0]
 800b5da:	e7da      	b.n	800b592 <_free_r+0x26>
 800b5dc:	d902      	bls.n	800b5e4 <_free_r+0x78>
 800b5de:	230c      	movs	r3, #12
 800b5e0:	6003      	str	r3, [r0, #0]
 800b5e2:	e7d6      	b.n	800b592 <_free_r+0x26>
 800b5e4:	6825      	ldr	r5, [r4, #0]
 800b5e6:	1961      	adds	r1, r4, r5
 800b5e8:	428b      	cmp	r3, r1
 800b5ea:	bf04      	itt	eq
 800b5ec:	6819      	ldreq	r1, [r3, #0]
 800b5ee:	685b      	ldreq	r3, [r3, #4]
 800b5f0:	6063      	str	r3, [r4, #4]
 800b5f2:	bf04      	itt	eq
 800b5f4:	1949      	addeq	r1, r1, r5
 800b5f6:	6021      	streq	r1, [r4, #0]
 800b5f8:	6054      	str	r4, [r2, #4]
 800b5fa:	e7ca      	b.n	800b592 <_free_r+0x26>
 800b5fc:	b003      	add	sp, #12
 800b5fe:	bd30      	pop	{r4, r5, pc}
 800b600:	20000688 	.word	0x20000688

0800b604 <sbrk_aligned>:
 800b604:	b570      	push	{r4, r5, r6, lr}
 800b606:	4e0e      	ldr	r6, [pc, #56]	; (800b640 <sbrk_aligned+0x3c>)
 800b608:	460c      	mov	r4, r1
 800b60a:	6831      	ldr	r1, [r6, #0]
 800b60c:	4605      	mov	r5, r0
 800b60e:	b911      	cbnz	r1, 800b616 <sbrk_aligned+0x12>
 800b610:	f000 f9e8 	bl	800b9e4 <_sbrk_r>
 800b614:	6030      	str	r0, [r6, #0]
 800b616:	4621      	mov	r1, r4
 800b618:	4628      	mov	r0, r5
 800b61a:	f000 f9e3 	bl	800b9e4 <_sbrk_r>
 800b61e:	1c43      	adds	r3, r0, #1
 800b620:	d00a      	beq.n	800b638 <sbrk_aligned+0x34>
 800b622:	1cc4      	adds	r4, r0, #3
 800b624:	f024 0403 	bic.w	r4, r4, #3
 800b628:	42a0      	cmp	r0, r4
 800b62a:	d007      	beq.n	800b63c <sbrk_aligned+0x38>
 800b62c:	1a21      	subs	r1, r4, r0
 800b62e:	4628      	mov	r0, r5
 800b630:	f000 f9d8 	bl	800b9e4 <_sbrk_r>
 800b634:	3001      	adds	r0, #1
 800b636:	d101      	bne.n	800b63c <sbrk_aligned+0x38>
 800b638:	f04f 34ff 	mov.w	r4, #4294967295
 800b63c:	4620      	mov	r0, r4
 800b63e:	bd70      	pop	{r4, r5, r6, pc}
 800b640:	2000068c 	.word	0x2000068c

0800b644 <_malloc_r>:
 800b644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b648:	1ccd      	adds	r5, r1, #3
 800b64a:	f025 0503 	bic.w	r5, r5, #3
 800b64e:	3508      	adds	r5, #8
 800b650:	2d0c      	cmp	r5, #12
 800b652:	bf38      	it	cc
 800b654:	250c      	movcc	r5, #12
 800b656:	2d00      	cmp	r5, #0
 800b658:	4607      	mov	r7, r0
 800b65a:	db01      	blt.n	800b660 <_malloc_r+0x1c>
 800b65c:	42a9      	cmp	r1, r5
 800b65e:	d905      	bls.n	800b66c <_malloc_r+0x28>
 800b660:	230c      	movs	r3, #12
 800b662:	603b      	str	r3, [r7, #0]
 800b664:	2600      	movs	r6, #0
 800b666:	4630      	mov	r0, r6
 800b668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b66c:	4e2e      	ldr	r6, [pc, #184]	; (800b728 <_malloc_r+0xe4>)
 800b66e:	f000 fa25 	bl	800babc <__malloc_lock>
 800b672:	6833      	ldr	r3, [r6, #0]
 800b674:	461c      	mov	r4, r3
 800b676:	bb34      	cbnz	r4, 800b6c6 <_malloc_r+0x82>
 800b678:	4629      	mov	r1, r5
 800b67a:	4638      	mov	r0, r7
 800b67c:	f7ff ffc2 	bl	800b604 <sbrk_aligned>
 800b680:	1c43      	adds	r3, r0, #1
 800b682:	4604      	mov	r4, r0
 800b684:	d14d      	bne.n	800b722 <_malloc_r+0xde>
 800b686:	6834      	ldr	r4, [r6, #0]
 800b688:	4626      	mov	r6, r4
 800b68a:	2e00      	cmp	r6, #0
 800b68c:	d140      	bne.n	800b710 <_malloc_r+0xcc>
 800b68e:	6823      	ldr	r3, [r4, #0]
 800b690:	4631      	mov	r1, r6
 800b692:	4638      	mov	r0, r7
 800b694:	eb04 0803 	add.w	r8, r4, r3
 800b698:	f000 f9a4 	bl	800b9e4 <_sbrk_r>
 800b69c:	4580      	cmp	r8, r0
 800b69e:	d13a      	bne.n	800b716 <_malloc_r+0xd2>
 800b6a0:	6821      	ldr	r1, [r4, #0]
 800b6a2:	3503      	adds	r5, #3
 800b6a4:	1a6d      	subs	r5, r5, r1
 800b6a6:	f025 0503 	bic.w	r5, r5, #3
 800b6aa:	3508      	adds	r5, #8
 800b6ac:	2d0c      	cmp	r5, #12
 800b6ae:	bf38      	it	cc
 800b6b0:	250c      	movcc	r5, #12
 800b6b2:	4629      	mov	r1, r5
 800b6b4:	4638      	mov	r0, r7
 800b6b6:	f7ff ffa5 	bl	800b604 <sbrk_aligned>
 800b6ba:	3001      	adds	r0, #1
 800b6bc:	d02b      	beq.n	800b716 <_malloc_r+0xd2>
 800b6be:	6823      	ldr	r3, [r4, #0]
 800b6c0:	442b      	add	r3, r5
 800b6c2:	6023      	str	r3, [r4, #0]
 800b6c4:	e00e      	b.n	800b6e4 <_malloc_r+0xa0>
 800b6c6:	6822      	ldr	r2, [r4, #0]
 800b6c8:	1b52      	subs	r2, r2, r5
 800b6ca:	d41e      	bmi.n	800b70a <_malloc_r+0xc6>
 800b6cc:	2a0b      	cmp	r2, #11
 800b6ce:	d916      	bls.n	800b6fe <_malloc_r+0xba>
 800b6d0:	1961      	adds	r1, r4, r5
 800b6d2:	42a3      	cmp	r3, r4
 800b6d4:	6025      	str	r5, [r4, #0]
 800b6d6:	bf18      	it	ne
 800b6d8:	6059      	strne	r1, [r3, #4]
 800b6da:	6863      	ldr	r3, [r4, #4]
 800b6dc:	bf08      	it	eq
 800b6de:	6031      	streq	r1, [r6, #0]
 800b6e0:	5162      	str	r2, [r4, r5]
 800b6e2:	604b      	str	r3, [r1, #4]
 800b6e4:	4638      	mov	r0, r7
 800b6e6:	f104 060b 	add.w	r6, r4, #11
 800b6ea:	f000 f9ed 	bl	800bac8 <__malloc_unlock>
 800b6ee:	f026 0607 	bic.w	r6, r6, #7
 800b6f2:	1d23      	adds	r3, r4, #4
 800b6f4:	1af2      	subs	r2, r6, r3
 800b6f6:	d0b6      	beq.n	800b666 <_malloc_r+0x22>
 800b6f8:	1b9b      	subs	r3, r3, r6
 800b6fa:	50a3      	str	r3, [r4, r2]
 800b6fc:	e7b3      	b.n	800b666 <_malloc_r+0x22>
 800b6fe:	6862      	ldr	r2, [r4, #4]
 800b700:	42a3      	cmp	r3, r4
 800b702:	bf0c      	ite	eq
 800b704:	6032      	streq	r2, [r6, #0]
 800b706:	605a      	strne	r2, [r3, #4]
 800b708:	e7ec      	b.n	800b6e4 <_malloc_r+0xa0>
 800b70a:	4623      	mov	r3, r4
 800b70c:	6864      	ldr	r4, [r4, #4]
 800b70e:	e7b2      	b.n	800b676 <_malloc_r+0x32>
 800b710:	4634      	mov	r4, r6
 800b712:	6876      	ldr	r6, [r6, #4]
 800b714:	e7b9      	b.n	800b68a <_malloc_r+0x46>
 800b716:	230c      	movs	r3, #12
 800b718:	603b      	str	r3, [r7, #0]
 800b71a:	4638      	mov	r0, r7
 800b71c:	f000 f9d4 	bl	800bac8 <__malloc_unlock>
 800b720:	e7a1      	b.n	800b666 <_malloc_r+0x22>
 800b722:	6025      	str	r5, [r4, #0]
 800b724:	e7de      	b.n	800b6e4 <_malloc_r+0xa0>
 800b726:	bf00      	nop
 800b728:	20000688 	.word	0x20000688

0800b72c <__ssputs_r>:
 800b72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b730:	688e      	ldr	r6, [r1, #8]
 800b732:	429e      	cmp	r6, r3
 800b734:	4682      	mov	sl, r0
 800b736:	460c      	mov	r4, r1
 800b738:	4690      	mov	r8, r2
 800b73a:	461f      	mov	r7, r3
 800b73c:	d838      	bhi.n	800b7b0 <__ssputs_r+0x84>
 800b73e:	898a      	ldrh	r2, [r1, #12]
 800b740:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b744:	d032      	beq.n	800b7ac <__ssputs_r+0x80>
 800b746:	6825      	ldr	r5, [r4, #0]
 800b748:	6909      	ldr	r1, [r1, #16]
 800b74a:	eba5 0901 	sub.w	r9, r5, r1
 800b74e:	6965      	ldr	r5, [r4, #20]
 800b750:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b754:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b758:	3301      	adds	r3, #1
 800b75a:	444b      	add	r3, r9
 800b75c:	106d      	asrs	r5, r5, #1
 800b75e:	429d      	cmp	r5, r3
 800b760:	bf38      	it	cc
 800b762:	461d      	movcc	r5, r3
 800b764:	0553      	lsls	r3, r2, #21
 800b766:	d531      	bpl.n	800b7cc <__ssputs_r+0xa0>
 800b768:	4629      	mov	r1, r5
 800b76a:	f7ff ff6b 	bl	800b644 <_malloc_r>
 800b76e:	4606      	mov	r6, r0
 800b770:	b950      	cbnz	r0, 800b788 <__ssputs_r+0x5c>
 800b772:	230c      	movs	r3, #12
 800b774:	f8ca 3000 	str.w	r3, [sl]
 800b778:	89a3      	ldrh	r3, [r4, #12]
 800b77a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b77e:	81a3      	strh	r3, [r4, #12]
 800b780:	f04f 30ff 	mov.w	r0, #4294967295
 800b784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b788:	6921      	ldr	r1, [r4, #16]
 800b78a:	464a      	mov	r2, r9
 800b78c:	f7ff fb46 	bl	800ae1c <memcpy>
 800b790:	89a3      	ldrh	r3, [r4, #12]
 800b792:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b79a:	81a3      	strh	r3, [r4, #12]
 800b79c:	6126      	str	r6, [r4, #16]
 800b79e:	6165      	str	r5, [r4, #20]
 800b7a0:	444e      	add	r6, r9
 800b7a2:	eba5 0509 	sub.w	r5, r5, r9
 800b7a6:	6026      	str	r6, [r4, #0]
 800b7a8:	60a5      	str	r5, [r4, #8]
 800b7aa:	463e      	mov	r6, r7
 800b7ac:	42be      	cmp	r6, r7
 800b7ae:	d900      	bls.n	800b7b2 <__ssputs_r+0x86>
 800b7b0:	463e      	mov	r6, r7
 800b7b2:	6820      	ldr	r0, [r4, #0]
 800b7b4:	4632      	mov	r2, r6
 800b7b6:	4641      	mov	r1, r8
 800b7b8:	f000 f966 	bl	800ba88 <memmove>
 800b7bc:	68a3      	ldr	r3, [r4, #8]
 800b7be:	1b9b      	subs	r3, r3, r6
 800b7c0:	60a3      	str	r3, [r4, #8]
 800b7c2:	6823      	ldr	r3, [r4, #0]
 800b7c4:	4433      	add	r3, r6
 800b7c6:	6023      	str	r3, [r4, #0]
 800b7c8:	2000      	movs	r0, #0
 800b7ca:	e7db      	b.n	800b784 <__ssputs_r+0x58>
 800b7cc:	462a      	mov	r2, r5
 800b7ce:	f000 f981 	bl	800bad4 <_realloc_r>
 800b7d2:	4606      	mov	r6, r0
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	d1e1      	bne.n	800b79c <__ssputs_r+0x70>
 800b7d8:	6921      	ldr	r1, [r4, #16]
 800b7da:	4650      	mov	r0, sl
 800b7dc:	f7ff fec6 	bl	800b56c <_free_r>
 800b7e0:	e7c7      	b.n	800b772 <__ssputs_r+0x46>
	...

0800b7e4 <_svfiprintf_r>:
 800b7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e8:	4698      	mov	r8, r3
 800b7ea:	898b      	ldrh	r3, [r1, #12]
 800b7ec:	061b      	lsls	r3, r3, #24
 800b7ee:	b09d      	sub	sp, #116	; 0x74
 800b7f0:	4607      	mov	r7, r0
 800b7f2:	460d      	mov	r5, r1
 800b7f4:	4614      	mov	r4, r2
 800b7f6:	d50e      	bpl.n	800b816 <_svfiprintf_r+0x32>
 800b7f8:	690b      	ldr	r3, [r1, #16]
 800b7fa:	b963      	cbnz	r3, 800b816 <_svfiprintf_r+0x32>
 800b7fc:	2140      	movs	r1, #64	; 0x40
 800b7fe:	f7ff ff21 	bl	800b644 <_malloc_r>
 800b802:	6028      	str	r0, [r5, #0]
 800b804:	6128      	str	r0, [r5, #16]
 800b806:	b920      	cbnz	r0, 800b812 <_svfiprintf_r+0x2e>
 800b808:	230c      	movs	r3, #12
 800b80a:	603b      	str	r3, [r7, #0]
 800b80c:	f04f 30ff 	mov.w	r0, #4294967295
 800b810:	e0d1      	b.n	800b9b6 <_svfiprintf_r+0x1d2>
 800b812:	2340      	movs	r3, #64	; 0x40
 800b814:	616b      	str	r3, [r5, #20]
 800b816:	2300      	movs	r3, #0
 800b818:	9309      	str	r3, [sp, #36]	; 0x24
 800b81a:	2320      	movs	r3, #32
 800b81c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b820:	f8cd 800c 	str.w	r8, [sp, #12]
 800b824:	2330      	movs	r3, #48	; 0x30
 800b826:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b9d0 <_svfiprintf_r+0x1ec>
 800b82a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b82e:	f04f 0901 	mov.w	r9, #1
 800b832:	4623      	mov	r3, r4
 800b834:	469a      	mov	sl, r3
 800b836:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b83a:	b10a      	cbz	r2, 800b840 <_svfiprintf_r+0x5c>
 800b83c:	2a25      	cmp	r2, #37	; 0x25
 800b83e:	d1f9      	bne.n	800b834 <_svfiprintf_r+0x50>
 800b840:	ebba 0b04 	subs.w	fp, sl, r4
 800b844:	d00b      	beq.n	800b85e <_svfiprintf_r+0x7a>
 800b846:	465b      	mov	r3, fp
 800b848:	4622      	mov	r2, r4
 800b84a:	4629      	mov	r1, r5
 800b84c:	4638      	mov	r0, r7
 800b84e:	f7ff ff6d 	bl	800b72c <__ssputs_r>
 800b852:	3001      	adds	r0, #1
 800b854:	f000 80aa 	beq.w	800b9ac <_svfiprintf_r+0x1c8>
 800b858:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b85a:	445a      	add	r2, fp
 800b85c:	9209      	str	r2, [sp, #36]	; 0x24
 800b85e:	f89a 3000 	ldrb.w	r3, [sl]
 800b862:	2b00      	cmp	r3, #0
 800b864:	f000 80a2 	beq.w	800b9ac <_svfiprintf_r+0x1c8>
 800b868:	2300      	movs	r3, #0
 800b86a:	f04f 32ff 	mov.w	r2, #4294967295
 800b86e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b872:	f10a 0a01 	add.w	sl, sl, #1
 800b876:	9304      	str	r3, [sp, #16]
 800b878:	9307      	str	r3, [sp, #28]
 800b87a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b87e:	931a      	str	r3, [sp, #104]	; 0x68
 800b880:	4654      	mov	r4, sl
 800b882:	2205      	movs	r2, #5
 800b884:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b888:	4851      	ldr	r0, [pc, #324]	; (800b9d0 <_svfiprintf_r+0x1ec>)
 800b88a:	f7f4 fc91 	bl	80001b0 <memchr>
 800b88e:	9a04      	ldr	r2, [sp, #16]
 800b890:	b9d8      	cbnz	r0, 800b8ca <_svfiprintf_r+0xe6>
 800b892:	06d0      	lsls	r0, r2, #27
 800b894:	bf44      	itt	mi
 800b896:	2320      	movmi	r3, #32
 800b898:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b89c:	0711      	lsls	r1, r2, #28
 800b89e:	bf44      	itt	mi
 800b8a0:	232b      	movmi	r3, #43	; 0x2b
 800b8a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8a6:	f89a 3000 	ldrb.w	r3, [sl]
 800b8aa:	2b2a      	cmp	r3, #42	; 0x2a
 800b8ac:	d015      	beq.n	800b8da <_svfiprintf_r+0xf6>
 800b8ae:	9a07      	ldr	r2, [sp, #28]
 800b8b0:	4654      	mov	r4, sl
 800b8b2:	2000      	movs	r0, #0
 800b8b4:	f04f 0c0a 	mov.w	ip, #10
 800b8b8:	4621      	mov	r1, r4
 800b8ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8be:	3b30      	subs	r3, #48	; 0x30
 800b8c0:	2b09      	cmp	r3, #9
 800b8c2:	d94e      	bls.n	800b962 <_svfiprintf_r+0x17e>
 800b8c4:	b1b0      	cbz	r0, 800b8f4 <_svfiprintf_r+0x110>
 800b8c6:	9207      	str	r2, [sp, #28]
 800b8c8:	e014      	b.n	800b8f4 <_svfiprintf_r+0x110>
 800b8ca:	eba0 0308 	sub.w	r3, r0, r8
 800b8ce:	fa09 f303 	lsl.w	r3, r9, r3
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	9304      	str	r3, [sp, #16]
 800b8d6:	46a2      	mov	sl, r4
 800b8d8:	e7d2      	b.n	800b880 <_svfiprintf_r+0x9c>
 800b8da:	9b03      	ldr	r3, [sp, #12]
 800b8dc:	1d19      	adds	r1, r3, #4
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	9103      	str	r1, [sp, #12]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	bfbb      	ittet	lt
 800b8e6:	425b      	neglt	r3, r3
 800b8e8:	f042 0202 	orrlt.w	r2, r2, #2
 800b8ec:	9307      	strge	r3, [sp, #28]
 800b8ee:	9307      	strlt	r3, [sp, #28]
 800b8f0:	bfb8      	it	lt
 800b8f2:	9204      	strlt	r2, [sp, #16]
 800b8f4:	7823      	ldrb	r3, [r4, #0]
 800b8f6:	2b2e      	cmp	r3, #46	; 0x2e
 800b8f8:	d10c      	bne.n	800b914 <_svfiprintf_r+0x130>
 800b8fa:	7863      	ldrb	r3, [r4, #1]
 800b8fc:	2b2a      	cmp	r3, #42	; 0x2a
 800b8fe:	d135      	bne.n	800b96c <_svfiprintf_r+0x188>
 800b900:	9b03      	ldr	r3, [sp, #12]
 800b902:	1d1a      	adds	r2, r3, #4
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	9203      	str	r2, [sp, #12]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	bfb8      	it	lt
 800b90c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b910:	3402      	adds	r4, #2
 800b912:	9305      	str	r3, [sp, #20]
 800b914:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b9e0 <_svfiprintf_r+0x1fc>
 800b918:	7821      	ldrb	r1, [r4, #0]
 800b91a:	2203      	movs	r2, #3
 800b91c:	4650      	mov	r0, sl
 800b91e:	f7f4 fc47 	bl	80001b0 <memchr>
 800b922:	b140      	cbz	r0, 800b936 <_svfiprintf_r+0x152>
 800b924:	2340      	movs	r3, #64	; 0x40
 800b926:	eba0 000a 	sub.w	r0, r0, sl
 800b92a:	fa03 f000 	lsl.w	r0, r3, r0
 800b92e:	9b04      	ldr	r3, [sp, #16]
 800b930:	4303      	orrs	r3, r0
 800b932:	3401      	adds	r4, #1
 800b934:	9304      	str	r3, [sp, #16]
 800b936:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b93a:	4826      	ldr	r0, [pc, #152]	; (800b9d4 <_svfiprintf_r+0x1f0>)
 800b93c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b940:	2206      	movs	r2, #6
 800b942:	f7f4 fc35 	bl	80001b0 <memchr>
 800b946:	2800      	cmp	r0, #0
 800b948:	d038      	beq.n	800b9bc <_svfiprintf_r+0x1d8>
 800b94a:	4b23      	ldr	r3, [pc, #140]	; (800b9d8 <_svfiprintf_r+0x1f4>)
 800b94c:	bb1b      	cbnz	r3, 800b996 <_svfiprintf_r+0x1b2>
 800b94e:	9b03      	ldr	r3, [sp, #12]
 800b950:	3307      	adds	r3, #7
 800b952:	f023 0307 	bic.w	r3, r3, #7
 800b956:	3308      	adds	r3, #8
 800b958:	9303      	str	r3, [sp, #12]
 800b95a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b95c:	4433      	add	r3, r6
 800b95e:	9309      	str	r3, [sp, #36]	; 0x24
 800b960:	e767      	b.n	800b832 <_svfiprintf_r+0x4e>
 800b962:	fb0c 3202 	mla	r2, ip, r2, r3
 800b966:	460c      	mov	r4, r1
 800b968:	2001      	movs	r0, #1
 800b96a:	e7a5      	b.n	800b8b8 <_svfiprintf_r+0xd4>
 800b96c:	2300      	movs	r3, #0
 800b96e:	3401      	adds	r4, #1
 800b970:	9305      	str	r3, [sp, #20]
 800b972:	4619      	mov	r1, r3
 800b974:	f04f 0c0a 	mov.w	ip, #10
 800b978:	4620      	mov	r0, r4
 800b97a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b97e:	3a30      	subs	r2, #48	; 0x30
 800b980:	2a09      	cmp	r2, #9
 800b982:	d903      	bls.n	800b98c <_svfiprintf_r+0x1a8>
 800b984:	2b00      	cmp	r3, #0
 800b986:	d0c5      	beq.n	800b914 <_svfiprintf_r+0x130>
 800b988:	9105      	str	r1, [sp, #20]
 800b98a:	e7c3      	b.n	800b914 <_svfiprintf_r+0x130>
 800b98c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b990:	4604      	mov	r4, r0
 800b992:	2301      	movs	r3, #1
 800b994:	e7f0      	b.n	800b978 <_svfiprintf_r+0x194>
 800b996:	ab03      	add	r3, sp, #12
 800b998:	9300      	str	r3, [sp, #0]
 800b99a:	462a      	mov	r2, r5
 800b99c:	4b0f      	ldr	r3, [pc, #60]	; (800b9dc <_svfiprintf_r+0x1f8>)
 800b99e:	a904      	add	r1, sp, #16
 800b9a0:	4638      	mov	r0, r7
 800b9a2:	f7fd ffc9 	bl	8009938 <_printf_float>
 800b9a6:	1c42      	adds	r2, r0, #1
 800b9a8:	4606      	mov	r6, r0
 800b9aa:	d1d6      	bne.n	800b95a <_svfiprintf_r+0x176>
 800b9ac:	89ab      	ldrh	r3, [r5, #12]
 800b9ae:	065b      	lsls	r3, r3, #25
 800b9b0:	f53f af2c 	bmi.w	800b80c <_svfiprintf_r+0x28>
 800b9b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9b6:	b01d      	add	sp, #116	; 0x74
 800b9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9bc:	ab03      	add	r3, sp, #12
 800b9be:	9300      	str	r3, [sp, #0]
 800b9c0:	462a      	mov	r2, r5
 800b9c2:	4b06      	ldr	r3, [pc, #24]	; (800b9dc <_svfiprintf_r+0x1f8>)
 800b9c4:	a904      	add	r1, sp, #16
 800b9c6:	4638      	mov	r0, r7
 800b9c8:	f7fe fa5a 	bl	8009e80 <_printf_i>
 800b9cc:	e7eb      	b.n	800b9a6 <_svfiprintf_r+0x1c2>
 800b9ce:	bf00      	nop
 800b9d0:	0800cd4c 	.word	0x0800cd4c
 800b9d4:	0800cd56 	.word	0x0800cd56
 800b9d8:	08009939 	.word	0x08009939
 800b9dc:	0800b72d 	.word	0x0800b72d
 800b9e0:	0800cd52 	.word	0x0800cd52

0800b9e4 <_sbrk_r>:
 800b9e4:	b538      	push	{r3, r4, r5, lr}
 800b9e6:	4d06      	ldr	r5, [pc, #24]	; (800ba00 <_sbrk_r+0x1c>)
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	4604      	mov	r4, r0
 800b9ec:	4608      	mov	r0, r1
 800b9ee:	602b      	str	r3, [r5, #0]
 800b9f0:	f7f7 fc8a 	bl	8003308 <_sbrk>
 800b9f4:	1c43      	adds	r3, r0, #1
 800b9f6:	d102      	bne.n	800b9fe <_sbrk_r+0x1a>
 800b9f8:	682b      	ldr	r3, [r5, #0]
 800b9fa:	b103      	cbz	r3, 800b9fe <_sbrk_r+0x1a>
 800b9fc:	6023      	str	r3, [r4, #0]
 800b9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ba00:	20000690 	.word	0x20000690

0800ba04 <__assert_func>:
 800ba04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba06:	4614      	mov	r4, r2
 800ba08:	461a      	mov	r2, r3
 800ba0a:	4b09      	ldr	r3, [pc, #36]	; (800ba30 <__assert_func+0x2c>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4605      	mov	r5, r0
 800ba10:	68d8      	ldr	r0, [r3, #12]
 800ba12:	b14c      	cbz	r4, 800ba28 <__assert_func+0x24>
 800ba14:	4b07      	ldr	r3, [pc, #28]	; (800ba34 <__assert_func+0x30>)
 800ba16:	9100      	str	r1, [sp, #0]
 800ba18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba1c:	4906      	ldr	r1, [pc, #24]	; (800ba38 <__assert_func+0x34>)
 800ba1e:	462b      	mov	r3, r5
 800ba20:	f000 f80e 	bl	800ba40 <fiprintf>
 800ba24:	f000 faac 	bl	800bf80 <abort>
 800ba28:	4b04      	ldr	r3, [pc, #16]	; (800ba3c <__assert_func+0x38>)
 800ba2a:	461c      	mov	r4, r3
 800ba2c:	e7f3      	b.n	800ba16 <__assert_func+0x12>
 800ba2e:	bf00      	nop
 800ba30:	20000044 	.word	0x20000044
 800ba34:	0800cd5d 	.word	0x0800cd5d
 800ba38:	0800cd6a 	.word	0x0800cd6a
 800ba3c:	0800cd98 	.word	0x0800cd98

0800ba40 <fiprintf>:
 800ba40:	b40e      	push	{r1, r2, r3}
 800ba42:	b503      	push	{r0, r1, lr}
 800ba44:	4601      	mov	r1, r0
 800ba46:	ab03      	add	r3, sp, #12
 800ba48:	4805      	ldr	r0, [pc, #20]	; (800ba60 <fiprintf+0x20>)
 800ba4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba4e:	6800      	ldr	r0, [r0, #0]
 800ba50:	9301      	str	r3, [sp, #4]
 800ba52:	f000 f897 	bl	800bb84 <_vfiprintf_r>
 800ba56:	b002      	add	sp, #8
 800ba58:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba5c:	b003      	add	sp, #12
 800ba5e:	4770      	bx	lr
 800ba60:	20000044 	.word	0x20000044

0800ba64 <__ascii_mbtowc>:
 800ba64:	b082      	sub	sp, #8
 800ba66:	b901      	cbnz	r1, 800ba6a <__ascii_mbtowc+0x6>
 800ba68:	a901      	add	r1, sp, #4
 800ba6a:	b142      	cbz	r2, 800ba7e <__ascii_mbtowc+0x1a>
 800ba6c:	b14b      	cbz	r3, 800ba82 <__ascii_mbtowc+0x1e>
 800ba6e:	7813      	ldrb	r3, [r2, #0]
 800ba70:	600b      	str	r3, [r1, #0]
 800ba72:	7812      	ldrb	r2, [r2, #0]
 800ba74:	1e10      	subs	r0, r2, #0
 800ba76:	bf18      	it	ne
 800ba78:	2001      	movne	r0, #1
 800ba7a:	b002      	add	sp, #8
 800ba7c:	4770      	bx	lr
 800ba7e:	4610      	mov	r0, r2
 800ba80:	e7fb      	b.n	800ba7a <__ascii_mbtowc+0x16>
 800ba82:	f06f 0001 	mvn.w	r0, #1
 800ba86:	e7f8      	b.n	800ba7a <__ascii_mbtowc+0x16>

0800ba88 <memmove>:
 800ba88:	4288      	cmp	r0, r1
 800ba8a:	b510      	push	{r4, lr}
 800ba8c:	eb01 0402 	add.w	r4, r1, r2
 800ba90:	d902      	bls.n	800ba98 <memmove+0x10>
 800ba92:	4284      	cmp	r4, r0
 800ba94:	4623      	mov	r3, r4
 800ba96:	d807      	bhi.n	800baa8 <memmove+0x20>
 800ba98:	1e43      	subs	r3, r0, #1
 800ba9a:	42a1      	cmp	r1, r4
 800ba9c:	d008      	beq.n	800bab0 <memmove+0x28>
 800ba9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800baa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800baa6:	e7f8      	b.n	800ba9a <memmove+0x12>
 800baa8:	4402      	add	r2, r0
 800baaa:	4601      	mov	r1, r0
 800baac:	428a      	cmp	r2, r1
 800baae:	d100      	bne.n	800bab2 <memmove+0x2a>
 800bab0:	bd10      	pop	{r4, pc}
 800bab2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bab6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800baba:	e7f7      	b.n	800baac <memmove+0x24>

0800babc <__malloc_lock>:
 800babc:	4801      	ldr	r0, [pc, #4]	; (800bac4 <__malloc_lock+0x8>)
 800babe:	f000 bc1f 	b.w	800c300 <__retarget_lock_acquire_recursive>
 800bac2:	bf00      	nop
 800bac4:	20000694 	.word	0x20000694

0800bac8 <__malloc_unlock>:
 800bac8:	4801      	ldr	r0, [pc, #4]	; (800bad0 <__malloc_unlock+0x8>)
 800baca:	f000 bc1a 	b.w	800c302 <__retarget_lock_release_recursive>
 800bace:	bf00      	nop
 800bad0:	20000694 	.word	0x20000694

0800bad4 <_realloc_r>:
 800bad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bad8:	4680      	mov	r8, r0
 800bada:	4614      	mov	r4, r2
 800badc:	460e      	mov	r6, r1
 800bade:	b921      	cbnz	r1, 800baea <_realloc_r+0x16>
 800bae0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bae4:	4611      	mov	r1, r2
 800bae6:	f7ff bdad 	b.w	800b644 <_malloc_r>
 800baea:	b92a      	cbnz	r2, 800baf8 <_realloc_r+0x24>
 800baec:	f7ff fd3e 	bl	800b56c <_free_r>
 800baf0:	4625      	mov	r5, r4
 800baf2:	4628      	mov	r0, r5
 800baf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baf8:	f000 fc6a 	bl	800c3d0 <_malloc_usable_size_r>
 800bafc:	4284      	cmp	r4, r0
 800bafe:	4607      	mov	r7, r0
 800bb00:	d802      	bhi.n	800bb08 <_realloc_r+0x34>
 800bb02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb06:	d812      	bhi.n	800bb2e <_realloc_r+0x5a>
 800bb08:	4621      	mov	r1, r4
 800bb0a:	4640      	mov	r0, r8
 800bb0c:	f7ff fd9a 	bl	800b644 <_malloc_r>
 800bb10:	4605      	mov	r5, r0
 800bb12:	2800      	cmp	r0, #0
 800bb14:	d0ed      	beq.n	800baf2 <_realloc_r+0x1e>
 800bb16:	42bc      	cmp	r4, r7
 800bb18:	4622      	mov	r2, r4
 800bb1a:	4631      	mov	r1, r6
 800bb1c:	bf28      	it	cs
 800bb1e:	463a      	movcs	r2, r7
 800bb20:	f7ff f97c 	bl	800ae1c <memcpy>
 800bb24:	4631      	mov	r1, r6
 800bb26:	4640      	mov	r0, r8
 800bb28:	f7ff fd20 	bl	800b56c <_free_r>
 800bb2c:	e7e1      	b.n	800baf2 <_realloc_r+0x1e>
 800bb2e:	4635      	mov	r5, r6
 800bb30:	e7df      	b.n	800baf2 <_realloc_r+0x1e>

0800bb32 <__sfputc_r>:
 800bb32:	6893      	ldr	r3, [r2, #8]
 800bb34:	3b01      	subs	r3, #1
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	b410      	push	{r4}
 800bb3a:	6093      	str	r3, [r2, #8]
 800bb3c:	da08      	bge.n	800bb50 <__sfputc_r+0x1e>
 800bb3e:	6994      	ldr	r4, [r2, #24]
 800bb40:	42a3      	cmp	r3, r4
 800bb42:	db01      	blt.n	800bb48 <__sfputc_r+0x16>
 800bb44:	290a      	cmp	r1, #10
 800bb46:	d103      	bne.n	800bb50 <__sfputc_r+0x1e>
 800bb48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb4c:	f000 b94a 	b.w	800bde4 <__swbuf_r>
 800bb50:	6813      	ldr	r3, [r2, #0]
 800bb52:	1c58      	adds	r0, r3, #1
 800bb54:	6010      	str	r0, [r2, #0]
 800bb56:	7019      	strb	r1, [r3, #0]
 800bb58:	4608      	mov	r0, r1
 800bb5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb5e:	4770      	bx	lr

0800bb60 <__sfputs_r>:
 800bb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb62:	4606      	mov	r6, r0
 800bb64:	460f      	mov	r7, r1
 800bb66:	4614      	mov	r4, r2
 800bb68:	18d5      	adds	r5, r2, r3
 800bb6a:	42ac      	cmp	r4, r5
 800bb6c:	d101      	bne.n	800bb72 <__sfputs_r+0x12>
 800bb6e:	2000      	movs	r0, #0
 800bb70:	e007      	b.n	800bb82 <__sfputs_r+0x22>
 800bb72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb76:	463a      	mov	r2, r7
 800bb78:	4630      	mov	r0, r6
 800bb7a:	f7ff ffda 	bl	800bb32 <__sfputc_r>
 800bb7e:	1c43      	adds	r3, r0, #1
 800bb80:	d1f3      	bne.n	800bb6a <__sfputs_r+0xa>
 800bb82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bb84 <_vfiprintf_r>:
 800bb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb88:	460d      	mov	r5, r1
 800bb8a:	b09d      	sub	sp, #116	; 0x74
 800bb8c:	4614      	mov	r4, r2
 800bb8e:	4698      	mov	r8, r3
 800bb90:	4606      	mov	r6, r0
 800bb92:	b118      	cbz	r0, 800bb9c <_vfiprintf_r+0x18>
 800bb94:	6983      	ldr	r3, [r0, #24]
 800bb96:	b90b      	cbnz	r3, 800bb9c <_vfiprintf_r+0x18>
 800bb98:	f000 fb14 	bl	800c1c4 <__sinit>
 800bb9c:	4b89      	ldr	r3, [pc, #548]	; (800bdc4 <_vfiprintf_r+0x240>)
 800bb9e:	429d      	cmp	r5, r3
 800bba0:	d11b      	bne.n	800bbda <_vfiprintf_r+0x56>
 800bba2:	6875      	ldr	r5, [r6, #4]
 800bba4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bba6:	07d9      	lsls	r1, r3, #31
 800bba8:	d405      	bmi.n	800bbb6 <_vfiprintf_r+0x32>
 800bbaa:	89ab      	ldrh	r3, [r5, #12]
 800bbac:	059a      	lsls	r2, r3, #22
 800bbae:	d402      	bmi.n	800bbb6 <_vfiprintf_r+0x32>
 800bbb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbb2:	f000 fba5 	bl	800c300 <__retarget_lock_acquire_recursive>
 800bbb6:	89ab      	ldrh	r3, [r5, #12]
 800bbb8:	071b      	lsls	r3, r3, #28
 800bbba:	d501      	bpl.n	800bbc0 <_vfiprintf_r+0x3c>
 800bbbc:	692b      	ldr	r3, [r5, #16]
 800bbbe:	b9eb      	cbnz	r3, 800bbfc <_vfiprintf_r+0x78>
 800bbc0:	4629      	mov	r1, r5
 800bbc2:	4630      	mov	r0, r6
 800bbc4:	f000 f96e 	bl	800bea4 <__swsetup_r>
 800bbc8:	b1c0      	cbz	r0, 800bbfc <_vfiprintf_r+0x78>
 800bbca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbcc:	07dc      	lsls	r4, r3, #31
 800bbce:	d50e      	bpl.n	800bbee <_vfiprintf_r+0x6a>
 800bbd0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbd4:	b01d      	add	sp, #116	; 0x74
 800bbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbda:	4b7b      	ldr	r3, [pc, #492]	; (800bdc8 <_vfiprintf_r+0x244>)
 800bbdc:	429d      	cmp	r5, r3
 800bbde:	d101      	bne.n	800bbe4 <_vfiprintf_r+0x60>
 800bbe0:	68b5      	ldr	r5, [r6, #8]
 800bbe2:	e7df      	b.n	800bba4 <_vfiprintf_r+0x20>
 800bbe4:	4b79      	ldr	r3, [pc, #484]	; (800bdcc <_vfiprintf_r+0x248>)
 800bbe6:	429d      	cmp	r5, r3
 800bbe8:	bf08      	it	eq
 800bbea:	68f5      	ldreq	r5, [r6, #12]
 800bbec:	e7da      	b.n	800bba4 <_vfiprintf_r+0x20>
 800bbee:	89ab      	ldrh	r3, [r5, #12]
 800bbf0:	0598      	lsls	r0, r3, #22
 800bbf2:	d4ed      	bmi.n	800bbd0 <_vfiprintf_r+0x4c>
 800bbf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbf6:	f000 fb84 	bl	800c302 <__retarget_lock_release_recursive>
 800bbfa:	e7e9      	b.n	800bbd0 <_vfiprintf_r+0x4c>
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	9309      	str	r3, [sp, #36]	; 0x24
 800bc00:	2320      	movs	r3, #32
 800bc02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc06:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc0a:	2330      	movs	r3, #48	; 0x30
 800bc0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bdd0 <_vfiprintf_r+0x24c>
 800bc10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc14:	f04f 0901 	mov.w	r9, #1
 800bc18:	4623      	mov	r3, r4
 800bc1a:	469a      	mov	sl, r3
 800bc1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc20:	b10a      	cbz	r2, 800bc26 <_vfiprintf_r+0xa2>
 800bc22:	2a25      	cmp	r2, #37	; 0x25
 800bc24:	d1f9      	bne.n	800bc1a <_vfiprintf_r+0x96>
 800bc26:	ebba 0b04 	subs.w	fp, sl, r4
 800bc2a:	d00b      	beq.n	800bc44 <_vfiprintf_r+0xc0>
 800bc2c:	465b      	mov	r3, fp
 800bc2e:	4622      	mov	r2, r4
 800bc30:	4629      	mov	r1, r5
 800bc32:	4630      	mov	r0, r6
 800bc34:	f7ff ff94 	bl	800bb60 <__sfputs_r>
 800bc38:	3001      	adds	r0, #1
 800bc3a:	f000 80aa 	beq.w	800bd92 <_vfiprintf_r+0x20e>
 800bc3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc40:	445a      	add	r2, fp
 800bc42:	9209      	str	r2, [sp, #36]	; 0x24
 800bc44:	f89a 3000 	ldrb.w	r3, [sl]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	f000 80a2 	beq.w	800bd92 <_vfiprintf_r+0x20e>
 800bc4e:	2300      	movs	r3, #0
 800bc50:	f04f 32ff 	mov.w	r2, #4294967295
 800bc54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc58:	f10a 0a01 	add.w	sl, sl, #1
 800bc5c:	9304      	str	r3, [sp, #16]
 800bc5e:	9307      	str	r3, [sp, #28]
 800bc60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc64:	931a      	str	r3, [sp, #104]	; 0x68
 800bc66:	4654      	mov	r4, sl
 800bc68:	2205      	movs	r2, #5
 800bc6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc6e:	4858      	ldr	r0, [pc, #352]	; (800bdd0 <_vfiprintf_r+0x24c>)
 800bc70:	f7f4 fa9e 	bl	80001b0 <memchr>
 800bc74:	9a04      	ldr	r2, [sp, #16]
 800bc76:	b9d8      	cbnz	r0, 800bcb0 <_vfiprintf_r+0x12c>
 800bc78:	06d1      	lsls	r1, r2, #27
 800bc7a:	bf44      	itt	mi
 800bc7c:	2320      	movmi	r3, #32
 800bc7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc82:	0713      	lsls	r3, r2, #28
 800bc84:	bf44      	itt	mi
 800bc86:	232b      	movmi	r3, #43	; 0x2b
 800bc88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc8c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc90:	2b2a      	cmp	r3, #42	; 0x2a
 800bc92:	d015      	beq.n	800bcc0 <_vfiprintf_r+0x13c>
 800bc94:	9a07      	ldr	r2, [sp, #28]
 800bc96:	4654      	mov	r4, sl
 800bc98:	2000      	movs	r0, #0
 800bc9a:	f04f 0c0a 	mov.w	ip, #10
 800bc9e:	4621      	mov	r1, r4
 800bca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bca4:	3b30      	subs	r3, #48	; 0x30
 800bca6:	2b09      	cmp	r3, #9
 800bca8:	d94e      	bls.n	800bd48 <_vfiprintf_r+0x1c4>
 800bcaa:	b1b0      	cbz	r0, 800bcda <_vfiprintf_r+0x156>
 800bcac:	9207      	str	r2, [sp, #28]
 800bcae:	e014      	b.n	800bcda <_vfiprintf_r+0x156>
 800bcb0:	eba0 0308 	sub.w	r3, r0, r8
 800bcb4:	fa09 f303 	lsl.w	r3, r9, r3
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	9304      	str	r3, [sp, #16]
 800bcbc:	46a2      	mov	sl, r4
 800bcbe:	e7d2      	b.n	800bc66 <_vfiprintf_r+0xe2>
 800bcc0:	9b03      	ldr	r3, [sp, #12]
 800bcc2:	1d19      	adds	r1, r3, #4
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	9103      	str	r1, [sp, #12]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	bfbb      	ittet	lt
 800bccc:	425b      	neglt	r3, r3
 800bcce:	f042 0202 	orrlt.w	r2, r2, #2
 800bcd2:	9307      	strge	r3, [sp, #28]
 800bcd4:	9307      	strlt	r3, [sp, #28]
 800bcd6:	bfb8      	it	lt
 800bcd8:	9204      	strlt	r2, [sp, #16]
 800bcda:	7823      	ldrb	r3, [r4, #0]
 800bcdc:	2b2e      	cmp	r3, #46	; 0x2e
 800bcde:	d10c      	bne.n	800bcfa <_vfiprintf_r+0x176>
 800bce0:	7863      	ldrb	r3, [r4, #1]
 800bce2:	2b2a      	cmp	r3, #42	; 0x2a
 800bce4:	d135      	bne.n	800bd52 <_vfiprintf_r+0x1ce>
 800bce6:	9b03      	ldr	r3, [sp, #12]
 800bce8:	1d1a      	adds	r2, r3, #4
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	9203      	str	r2, [sp, #12]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	bfb8      	it	lt
 800bcf2:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcf6:	3402      	adds	r4, #2
 800bcf8:	9305      	str	r3, [sp, #20]
 800bcfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bde0 <_vfiprintf_r+0x25c>
 800bcfe:	7821      	ldrb	r1, [r4, #0]
 800bd00:	2203      	movs	r2, #3
 800bd02:	4650      	mov	r0, sl
 800bd04:	f7f4 fa54 	bl	80001b0 <memchr>
 800bd08:	b140      	cbz	r0, 800bd1c <_vfiprintf_r+0x198>
 800bd0a:	2340      	movs	r3, #64	; 0x40
 800bd0c:	eba0 000a 	sub.w	r0, r0, sl
 800bd10:	fa03 f000 	lsl.w	r0, r3, r0
 800bd14:	9b04      	ldr	r3, [sp, #16]
 800bd16:	4303      	orrs	r3, r0
 800bd18:	3401      	adds	r4, #1
 800bd1a:	9304      	str	r3, [sp, #16]
 800bd1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd20:	482c      	ldr	r0, [pc, #176]	; (800bdd4 <_vfiprintf_r+0x250>)
 800bd22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd26:	2206      	movs	r2, #6
 800bd28:	f7f4 fa42 	bl	80001b0 <memchr>
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	d03f      	beq.n	800bdb0 <_vfiprintf_r+0x22c>
 800bd30:	4b29      	ldr	r3, [pc, #164]	; (800bdd8 <_vfiprintf_r+0x254>)
 800bd32:	bb1b      	cbnz	r3, 800bd7c <_vfiprintf_r+0x1f8>
 800bd34:	9b03      	ldr	r3, [sp, #12]
 800bd36:	3307      	adds	r3, #7
 800bd38:	f023 0307 	bic.w	r3, r3, #7
 800bd3c:	3308      	adds	r3, #8
 800bd3e:	9303      	str	r3, [sp, #12]
 800bd40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd42:	443b      	add	r3, r7
 800bd44:	9309      	str	r3, [sp, #36]	; 0x24
 800bd46:	e767      	b.n	800bc18 <_vfiprintf_r+0x94>
 800bd48:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd4c:	460c      	mov	r4, r1
 800bd4e:	2001      	movs	r0, #1
 800bd50:	e7a5      	b.n	800bc9e <_vfiprintf_r+0x11a>
 800bd52:	2300      	movs	r3, #0
 800bd54:	3401      	adds	r4, #1
 800bd56:	9305      	str	r3, [sp, #20]
 800bd58:	4619      	mov	r1, r3
 800bd5a:	f04f 0c0a 	mov.w	ip, #10
 800bd5e:	4620      	mov	r0, r4
 800bd60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd64:	3a30      	subs	r2, #48	; 0x30
 800bd66:	2a09      	cmp	r2, #9
 800bd68:	d903      	bls.n	800bd72 <_vfiprintf_r+0x1ee>
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d0c5      	beq.n	800bcfa <_vfiprintf_r+0x176>
 800bd6e:	9105      	str	r1, [sp, #20]
 800bd70:	e7c3      	b.n	800bcfa <_vfiprintf_r+0x176>
 800bd72:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd76:	4604      	mov	r4, r0
 800bd78:	2301      	movs	r3, #1
 800bd7a:	e7f0      	b.n	800bd5e <_vfiprintf_r+0x1da>
 800bd7c:	ab03      	add	r3, sp, #12
 800bd7e:	9300      	str	r3, [sp, #0]
 800bd80:	462a      	mov	r2, r5
 800bd82:	4b16      	ldr	r3, [pc, #88]	; (800bddc <_vfiprintf_r+0x258>)
 800bd84:	a904      	add	r1, sp, #16
 800bd86:	4630      	mov	r0, r6
 800bd88:	f7fd fdd6 	bl	8009938 <_printf_float>
 800bd8c:	4607      	mov	r7, r0
 800bd8e:	1c78      	adds	r0, r7, #1
 800bd90:	d1d6      	bne.n	800bd40 <_vfiprintf_r+0x1bc>
 800bd92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd94:	07d9      	lsls	r1, r3, #31
 800bd96:	d405      	bmi.n	800bda4 <_vfiprintf_r+0x220>
 800bd98:	89ab      	ldrh	r3, [r5, #12]
 800bd9a:	059a      	lsls	r2, r3, #22
 800bd9c:	d402      	bmi.n	800bda4 <_vfiprintf_r+0x220>
 800bd9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bda0:	f000 faaf 	bl	800c302 <__retarget_lock_release_recursive>
 800bda4:	89ab      	ldrh	r3, [r5, #12]
 800bda6:	065b      	lsls	r3, r3, #25
 800bda8:	f53f af12 	bmi.w	800bbd0 <_vfiprintf_r+0x4c>
 800bdac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdae:	e711      	b.n	800bbd4 <_vfiprintf_r+0x50>
 800bdb0:	ab03      	add	r3, sp, #12
 800bdb2:	9300      	str	r3, [sp, #0]
 800bdb4:	462a      	mov	r2, r5
 800bdb6:	4b09      	ldr	r3, [pc, #36]	; (800bddc <_vfiprintf_r+0x258>)
 800bdb8:	a904      	add	r1, sp, #16
 800bdba:	4630      	mov	r0, r6
 800bdbc:	f7fe f860 	bl	8009e80 <_printf_i>
 800bdc0:	e7e4      	b.n	800bd8c <_vfiprintf_r+0x208>
 800bdc2:	bf00      	nop
 800bdc4:	0800cec4 	.word	0x0800cec4
 800bdc8:	0800cee4 	.word	0x0800cee4
 800bdcc:	0800cea4 	.word	0x0800cea4
 800bdd0:	0800cd4c 	.word	0x0800cd4c
 800bdd4:	0800cd56 	.word	0x0800cd56
 800bdd8:	08009939 	.word	0x08009939
 800bddc:	0800bb61 	.word	0x0800bb61
 800bde0:	0800cd52 	.word	0x0800cd52

0800bde4 <__swbuf_r>:
 800bde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bde6:	460e      	mov	r6, r1
 800bde8:	4614      	mov	r4, r2
 800bdea:	4605      	mov	r5, r0
 800bdec:	b118      	cbz	r0, 800bdf6 <__swbuf_r+0x12>
 800bdee:	6983      	ldr	r3, [r0, #24]
 800bdf0:	b90b      	cbnz	r3, 800bdf6 <__swbuf_r+0x12>
 800bdf2:	f000 f9e7 	bl	800c1c4 <__sinit>
 800bdf6:	4b21      	ldr	r3, [pc, #132]	; (800be7c <__swbuf_r+0x98>)
 800bdf8:	429c      	cmp	r4, r3
 800bdfa:	d12b      	bne.n	800be54 <__swbuf_r+0x70>
 800bdfc:	686c      	ldr	r4, [r5, #4]
 800bdfe:	69a3      	ldr	r3, [r4, #24]
 800be00:	60a3      	str	r3, [r4, #8]
 800be02:	89a3      	ldrh	r3, [r4, #12]
 800be04:	071a      	lsls	r2, r3, #28
 800be06:	d52f      	bpl.n	800be68 <__swbuf_r+0x84>
 800be08:	6923      	ldr	r3, [r4, #16]
 800be0a:	b36b      	cbz	r3, 800be68 <__swbuf_r+0x84>
 800be0c:	6923      	ldr	r3, [r4, #16]
 800be0e:	6820      	ldr	r0, [r4, #0]
 800be10:	1ac0      	subs	r0, r0, r3
 800be12:	6963      	ldr	r3, [r4, #20]
 800be14:	b2f6      	uxtb	r6, r6
 800be16:	4283      	cmp	r3, r0
 800be18:	4637      	mov	r7, r6
 800be1a:	dc04      	bgt.n	800be26 <__swbuf_r+0x42>
 800be1c:	4621      	mov	r1, r4
 800be1e:	4628      	mov	r0, r5
 800be20:	f000 f93c 	bl	800c09c <_fflush_r>
 800be24:	bb30      	cbnz	r0, 800be74 <__swbuf_r+0x90>
 800be26:	68a3      	ldr	r3, [r4, #8]
 800be28:	3b01      	subs	r3, #1
 800be2a:	60a3      	str	r3, [r4, #8]
 800be2c:	6823      	ldr	r3, [r4, #0]
 800be2e:	1c5a      	adds	r2, r3, #1
 800be30:	6022      	str	r2, [r4, #0]
 800be32:	701e      	strb	r6, [r3, #0]
 800be34:	6963      	ldr	r3, [r4, #20]
 800be36:	3001      	adds	r0, #1
 800be38:	4283      	cmp	r3, r0
 800be3a:	d004      	beq.n	800be46 <__swbuf_r+0x62>
 800be3c:	89a3      	ldrh	r3, [r4, #12]
 800be3e:	07db      	lsls	r3, r3, #31
 800be40:	d506      	bpl.n	800be50 <__swbuf_r+0x6c>
 800be42:	2e0a      	cmp	r6, #10
 800be44:	d104      	bne.n	800be50 <__swbuf_r+0x6c>
 800be46:	4621      	mov	r1, r4
 800be48:	4628      	mov	r0, r5
 800be4a:	f000 f927 	bl	800c09c <_fflush_r>
 800be4e:	b988      	cbnz	r0, 800be74 <__swbuf_r+0x90>
 800be50:	4638      	mov	r0, r7
 800be52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be54:	4b0a      	ldr	r3, [pc, #40]	; (800be80 <__swbuf_r+0x9c>)
 800be56:	429c      	cmp	r4, r3
 800be58:	d101      	bne.n	800be5e <__swbuf_r+0x7a>
 800be5a:	68ac      	ldr	r4, [r5, #8]
 800be5c:	e7cf      	b.n	800bdfe <__swbuf_r+0x1a>
 800be5e:	4b09      	ldr	r3, [pc, #36]	; (800be84 <__swbuf_r+0xa0>)
 800be60:	429c      	cmp	r4, r3
 800be62:	bf08      	it	eq
 800be64:	68ec      	ldreq	r4, [r5, #12]
 800be66:	e7ca      	b.n	800bdfe <__swbuf_r+0x1a>
 800be68:	4621      	mov	r1, r4
 800be6a:	4628      	mov	r0, r5
 800be6c:	f000 f81a 	bl	800bea4 <__swsetup_r>
 800be70:	2800      	cmp	r0, #0
 800be72:	d0cb      	beq.n	800be0c <__swbuf_r+0x28>
 800be74:	f04f 37ff 	mov.w	r7, #4294967295
 800be78:	e7ea      	b.n	800be50 <__swbuf_r+0x6c>
 800be7a:	bf00      	nop
 800be7c:	0800cec4 	.word	0x0800cec4
 800be80:	0800cee4 	.word	0x0800cee4
 800be84:	0800cea4 	.word	0x0800cea4

0800be88 <__ascii_wctomb>:
 800be88:	b149      	cbz	r1, 800be9e <__ascii_wctomb+0x16>
 800be8a:	2aff      	cmp	r2, #255	; 0xff
 800be8c:	bf85      	ittet	hi
 800be8e:	238a      	movhi	r3, #138	; 0x8a
 800be90:	6003      	strhi	r3, [r0, #0]
 800be92:	700a      	strbls	r2, [r1, #0]
 800be94:	f04f 30ff 	movhi.w	r0, #4294967295
 800be98:	bf98      	it	ls
 800be9a:	2001      	movls	r0, #1
 800be9c:	4770      	bx	lr
 800be9e:	4608      	mov	r0, r1
 800bea0:	4770      	bx	lr
	...

0800bea4 <__swsetup_r>:
 800bea4:	4b32      	ldr	r3, [pc, #200]	; (800bf70 <__swsetup_r+0xcc>)
 800bea6:	b570      	push	{r4, r5, r6, lr}
 800bea8:	681d      	ldr	r5, [r3, #0]
 800beaa:	4606      	mov	r6, r0
 800beac:	460c      	mov	r4, r1
 800beae:	b125      	cbz	r5, 800beba <__swsetup_r+0x16>
 800beb0:	69ab      	ldr	r3, [r5, #24]
 800beb2:	b913      	cbnz	r3, 800beba <__swsetup_r+0x16>
 800beb4:	4628      	mov	r0, r5
 800beb6:	f000 f985 	bl	800c1c4 <__sinit>
 800beba:	4b2e      	ldr	r3, [pc, #184]	; (800bf74 <__swsetup_r+0xd0>)
 800bebc:	429c      	cmp	r4, r3
 800bebe:	d10f      	bne.n	800bee0 <__swsetup_r+0x3c>
 800bec0:	686c      	ldr	r4, [r5, #4]
 800bec2:	89a3      	ldrh	r3, [r4, #12]
 800bec4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bec8:	0719      	lsls	r1, r3, #28
 800beca:	d42c      	bmi.n	800bf26 <__swsetup_r+0x82>
 800becc:	06dd      	lsls	r5, r3, #27
 800bece:	d411      	bmi.n	800bef4 <__swsetup_r+0x50>
 800bed0:	2309      	movs	r3, #9
 800bed2:	6033      	str	r3, [r6, #0]
 800bed4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bed8:	81a3      	strh	r3, [r4, #12]
 800beda:	f04f 30ff 	mov.w	r0, #4294967295
 800bede:	e03e      	b.n	800bf5e <__swsetup_r+0xba>
 800bee0:	4b25      	ldr	r3, [pc, #148]	; (800bf78 <__swsetup_r+0xd4>)
 800bee2:	429c      	cmp	r4, r3
 800bee4:	d101      	bne.n	800beea <__swsetup_r+0x46>
 800bee6:	68ac      	ldr	r4, [r5, #8]
 800bee8:	e7eb      	b.n	800bec2 <__swsetup_r+0x1e>
 800beea:	4b24      	ldr	r3, [pc, #144]	; (800bf7c <__swsetup_r+0xd8>)
 800beec:	429c      	cmp	r4, r3
 800beee:	bf08      	it	eq
 800bef0:	68ec      	ldreq	r4, [r5, #12]
 800bef2:	e7e6      	b.n	800bec2 <__swsetup_r+0x1e>
 800bef4:	0758      	lsls	r0, r3, #29
 800bef6:	d512      	bpl.n	800bf1e <__swsetup_r+0x7a>
 800bef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800befa:	b141      	cbz	r1, 800bf0e <__swsetup_r+0x6a>
 800befc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf00:	4299      	cmp	r1, r3
 800bf02:	d002      	beq.n	800bf0a <__swsetup_r+0x66>
 800bf04:	4630      	mov	r0, r6
 800bf06:	f7ff fb31 	bl	800b56c <_free_r>
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	6363      	str	r3, [r4, #52]	; 0x34
 800bf0e:	89a3      	ldrh	r3, [r4, #12]
 800bf10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf14:	81a3      	strh	r3, [r4, #12]
 800bf16:	2300      	movs	r3, #0
 800bf18:	6063      	str	r3, [r4, #4]
 800bf1a:	6923      	ldr	r3, [r4, #16]
 800bf1c:	6023      	str	r3, [r4, #0]
 800bf1e:	89a3      	ldrh	r3, [r4, #12]
 800bf20:	f043 0308 	orr.w	r3, r3, #8
 800bf24:	81a3      	strh	r3, [r4, #12]
 800bf26:	6923      	ldr	r3, [r4, #16]
 800bf28:	b94b      	cbnz	r3, 800bf3e <__swsetup_r+0x9a>
 800bf2a:	89a3      	ldrh	r3, [r4, #12]
 800bf2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf34:	d003      	beq.n	800bf3e <__swsetup_r+0x9a>
 800bf36:	4621      	mov	r1, r4
 800bf38:	4630      	mov	r0, r6
 800bf3a:	f000 fa09 	bl	800c350 <__smakebuf_r>
 800bf3e:	89a0      	ldrh	r0, [r4, #12]
 800bf40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf44:	f010 0301 	ands.w	r3, r0, #1
 800bf48:	d00a      	beq.n	800bf60 <__swsetup_r+0xbc>
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	60a3      	str	r3, [r4, #8]
 800bf4e:	6963      	ldr	r3, [r4, #20]
 800bf50:	425b      	negs	r3, r3
 800bf52:	61a3      	str	r3, [r4, #24]
 800bf54:	6923      	ldr	r3, [r4, #16]
 800bf56:	b943      	cbnz	r3, 800bf6a <__swsetup_r+0xc6>
 800bf58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf5c:	d1ba      	bne.n	800bed4 <__swsetup_r+0x30>
 800bf5e:	bd70      	pop	{r4, r5, r6, pc}
 800bf60:	0781      	lsls	r1, r0, #30
 800bf62:	bf58      	it	pl
 800bf64:	6963      	ldrpl	r3, [r4, #20]
 800bf66:	60a3      	str	r3, [r4, #8]
 800bf68:	e7f4      	b.n	800bf54 <__swsetup_r+0xb0>
 800bf6a:	2000      	movs	r0, #0
 800bf6c:	e7f7      	b.n	800bf5e <__swsetup_r+0xba>
 800bf6e:	bf00      	nop
 800bf70:	20000044 	.word	0x20000044
 800bf74:	0800cec4 	.word	0x0800cec4
 800bf78:	0800cee4 	.word	0x0800cee4
 800bf7c:	0800cea4 	.word	0x0800cea4

0800bf80 <abort>:
 800bf80:	b508      	push	{r3, lr}
 800bf82:	2006      	movs	r0, #6
 800bf84:	f000 fa54 	bl	800c430 <raise>
 800bf88:	2001      	movs	r0, #1
 800bf8a:	f7f7 f945 	bl	8003218 <_exit>
	...

0800bf90 <__sflush_r>:
 800bf90:	898a      	ldrh	r2, [r1, #12]
 800bf92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf96:	4605      	mov	r5, r0
 800bf98:	0710      	lsls	r0, r2, #28
 800bf9a:	460c      	mov	r4, r1
 800bf9c:	d458      	bmi.n	800c050 <__sflush_r+0xc0>
 800bf9e:	684b      	ldr	r3, [r1, #4]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	dc05      	bgt.n	800bfb0 <__sflush_r+0x20>
 800bfa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	dc02      	bgt.n	800bfb0 <__sflush_r+0x20>
 800bfaa:	2000      	movs	r0, #0
 800bfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfb2:	2e00      	cmp	r6, #0
 800bfb4:	d0f9      	beq.n	800bfaa <__sflush_r+0x1a>
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bfbc:	682f      	ldr	r7, [r5, #0]
 800bfbe:	602b      	str	r3, [r5, #0]
 800bfc0:	d032      	beq.n	800c028 <__sflush_r+0x98>
 800bfc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bfc4:	89a3      	ldrh	r3, [r4, #12]
 800bfc6:	075a      	lsls	r2, r3, #29
 800bfc8:	d505      	bpl.n	800bfd6 <__sflush_r+0x46>
 800bfca:	6863      	ldr	r3, [r4, #4]
 800bfcc:	1ac0      	subs	r0, r0, r3
 800bfce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bfd0:	b10b      	cbz	r3, 800bfd6 <__sflush_r+0x46>
 800bfd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bfd4:	1ac0      	subs	r0, r0, r3
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	4602      	mov	r2, r0
 800bfda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfdc:	6a21      	ldr	r1, [r4, #32]
 800bfde:	4628      	mov	r0, r5
 800bfe0:	47b0      	blx	r6
 800bfe2:	1c43      	adds	r3, r0, #1
 800bfe4:	89a3      	ldrh	r3, [r4, #12]
 800bfe6:	d106      	bne.n	800bff6 <__sflush_r+0x66>
 800bfe8:	6829      	ldr	r1, [r5, #0]
 800bfea:	291d      	cmp	r1, #29
 800bfec:	d82c      	bhi.n	800c048 <__sflush_r+0xb8>
 800bfee:	4a2a      	ldr	r2, [pc, #168]	; (800c098 <__sflush_r+0x108>)
 800bff0:	40ca      	lsrs	r2, r1
 800bff2:	07d6      	lsls	r6, r2, #31
 800bff4:	d528      	bpl.n	800c048 <__sflush_r+0xb8>
 800bff6:	2200      	movs	r2, #0
 800bff8:	6062      	str	r2, [r4, #4]
 800bffa:	04d9      	lsls	r1, r3, #19
 800bffc:	6922      	ldr	r2, [r4, #16]
 800bffe:	6022      	str	r2, [r4, #0]
 800c000:	d504      	bpl.n	800c00c <__sflush_r+0x7c>
 800c002:	1c42      	adds	r2, r0, #1
 800c004:	d101      	bne.n	800c00a <__sflush_r+0x7a>
 800c006:	682b      	ldr	r3, [r5, #0]
 800c008:	b903      	cbnz	r3, 800c00c <__sflush_r+0x7c>
 800c00a:	6560      	str	r0, [r4, #84]	; 0x54
 800c00c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c00e:	602f      	str	r7, [r5, #0]
 800c010:	2900      	cmp	r1, #0
 800c012:	d0ca      	beq.n	800bfaa <__sflush_r+0x1a>
 800c014:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c018:	4299      	cmp	r1, r3
 800c01a:	d002      	beq.n	800c022 <__sflush_r+0x92>
 800c01c:	4628      	mov	r0, r5
 800c01e:	f7ff faa5 	bl	800b56c <_free_r>
 800c022:	2000      	movs	r0, #0
 800c024:	6360      	str	r0, [r4, #52]	; 0x34
 800c026:	e7c1      	b.n	800bfac <__sflush_r+0x1c>
 800c028:	6a21      	ldr	r1, [r4, #32]
 800c02a:	2301      	movs	r3, #1
 800c02c:	4628      	mov	r0, r5
 800c02e:	47b0      	blx	r6
 800c030:	1c41      	adds	r1, r0, #1
 800c032:	d1c7      	bne.n	800bfc4 <__sflush_r+0x34>
 800c034:	682b      	ldr	r3, [r5, #0]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d0c4      	beq.n	800bfc4 <__sflush_r+0x34>
 800c03a:	2b1d      	cmp	r3, #29
 800c03c:	d001      	beq.n	800c042 <__sflush_r+0xb2>
 800c03e:	2b16      	cmp	r3, #22
 800c040:	d101      	bne.n	800c046 <__sflush_r+0xb6>
 800c042:	602f      	str	r7, [r5, #0]
 800c044:	e7b1      	b.n	800bfaa <__sflush_r+0x1a>
 800c046:	89a3      	ldrh	r3, [r4, #12]
 800c048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c04c:	81a3      	strh	r3, [r4, #12]
 800c04e:	e7ad      	b.n	800bfac <__sflush_r+0x1c>
 800c050:	690f      	ldr	r7, [r1, #16]
 800c052:	2f00      	cmp	r7, #0
 800c054:	d0a9      	beq.n	800bfaa <__sflush_r+0x1a>
 800c056:	0793      	lsls	r3, r2, #30
 800c058:	680e      	ldr	r6, [r1, #0]
 800c05a:	bf08      	it	eq
 800c05c:	694b      	ldreq	r3, [r1, #20]
 800c05e:	600f      	str	r7, [r1, #0]
 800c060:	bf18      	it	ne
 800c062:	2300      	movne	r3, #0
 800c064:	eba6 0807 	sub.w	r8, r6, r7
 800c068:	608b      	str	r3, [r1, #8]
 800c06a:	f1b8 0f00 	cmp.w	r8, #0
 800c06e:	dd9c      	ble.n	800bfaa <__sflush_r+0x1a>
 800c070:	6a21      	ldr	r1, [r4, #32]
 800c072:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c074:	4643      	mov	r3, r8
 800c076:	463a      	mov	r2, r7
 800c078:	4628      	mov	r0, r5
 800c07a:	47b0      	blx	r6
 800c07c:	2800      	cmp	r0, #0
 800c07e:	dc06      	bgt.n	800c08e <__sflush_r+0xfe>
 800c080:	89a3      	ldrh	r3, [r4, #12]
 800c082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c086:	81a3      	strh	r3, [r4, #12]
 800c088:	f04f 30ff 	mov.w	r0, #4294967295
 800c08c:	e78e      	b.n	800bfac <__sflush_r+0x1c>
 800c08e:	4407      	add	r7, r0
 800c090:	eba8 0800 	sub.w	r8, r8, r0
 800c094:	e7e9      	b.n	800c06a <__sflush_r+0xda>
 800c096:	bf00      	nop
 800c098:	20400001 	.word	0x20400001

0800c09c <_fflush_r>:
 800c09c:	b538      	push	{r3, r4, r5, lr}
 800c09e:	690b      	ldr	r3, [r1, #16]
 800c0a0:	4605      	mov	r5, r0
 800c0a2:	460c      	mov	r4, r1
 800c0a4:	b913      	cbnz	r3, 800c0ac <_fflush_r+0x10>
 800c0a6:	2500      	movs	r5, #0
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	bd38      	pop	{r3, r4, r5, pc}
 800c0ac:	b118      	cbz	r0, 800c0b6 <_fflush_r+0x1a>
 800c0ae:	6983      	ldr	r3, [r0, #24]
 800c0b0:	b90b      	cbnz	r3, 800c0b6 <_fflush_r+0x1a>
 800c0b2:	f000 f887 	bl	800c1c4 <__sinit>
 800c0b6:	4b14      	ldr	r3, [pc, #80]	; (800c108 <_fflush_r+0x6c>)
 800c0b8:	429c      	cmp	r4, r3
 800c0ba:	d11b      	bne.n	800c0f4 <_fflush_r+0x58>
 800c0bc:	686c      	ldr	r4, [r5, #4]
 800c0be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d0ef      	beq.n	800c0a6 <_fflush_r+0xa>
 800c0c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c0c8:	07d0      	lsls	r0, r2, #31
 800c0ca:	d404      	bmi.n	800c0d6 <_fflush_r+0x3a>
 800c0cc:	0599      	lsls	r1, r3, #22
 800c0ce:	d402      	bmi.n	800c0d6 <_fflush_r+0x3a>
 800c0d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0d2:	f000 f915 	bl	800c300 <__retarget_lock_acquire_recursive>
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	4621      	mov	r1, r4
 800c0da:	f7ff ff59 	bl	800bf90 <__sflush_r>
 800c0de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0e0:	07da      	lsls	r2, r3, #31
 800c0e2:	4605      	mov	r5, r0
 800c0e4:	d4e0      	bmi.n	800c0a8 <_fflush_r+0xc>
 800c0e6:	89a3      	ldrh	r3, [r4, #12]
 800c0e8:	059b      	lsls	r3, r3, #22
 800c0ea:	d4dd      	bmi.n	800c0a8 <_fflush_r+0xc>
 800c0ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0ee:	f000 f908 	bl	800c302 <__retarget_lock_release_recursive>
 800c0f2:	e7d9      	b.n	800c0a8 <_fflush_r+0xc>
 800c0f4:	4b05      	ldr	r3, [pc, #20]	; (800c10c <_fflush_r+0x70>)
 800c0f6:	429c      	cmp	r4, r3
 800c0f8:	d101      	bne.n	800c0fe <_fflush_r+0x62>
 800c0fa:	68ac      	ldr	r4, [r5, #8]
 800c0fc:	e7df      	b.n	800c0be <_fflush_r+0x22>
 800c0fe:	4b04      	ldr	r3, [pc, #16]	; (800c110 <_fflush_r+0x74>)
 800c100:	429c      	cmp	r4, r3
 800c102:	bf08      	it	eq
 800c104:	68ec      	ldreq	r4, [r5, #12]
 800c106:	e7da      	b.n	800c0be <_fflush_r+0x22>
 800c108:	0800cec4 	.word	0x0800cec4
 800c10c:	0800cee4 	.word	0x0800cee4
 800c110:	0800cea4 	.word	0x0800cea4

0800c114 <std>:
 800c114:	2300      	movs	r3, #0
 800c116:	b510      	push	{r4, lr}
 800c118:	4604      	mov	r4, r0
 800c11a:	e9c0 3300 	strd	r3, r3, [r0]
 800c11e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c122:	6083      	str	r3, [r0, #8]
 800c124:	8181      	strh	r1, [r0, #12]
 800c126:	6643      	str	r3, [r0, #100]	; 0x64
 800c128:	81c2      	strh	r2, [r0, #14]
 800c12a:	6183      	str	r3, [r0, #24]
 800c12c:	4619      	mov	r1, r3
 800c12e:	2208      	movs	r2, #8
 800c130:	305c      	adds	r0, #92	; 0x5c
 800c132:	f7fd fb59 	bl	80097e8 <memset>
 800c136:	4b05      	ldr	r3, [pc, #20]	; (800c14c <std+0x38>)
 800c138:	6263      	str	r3, [r4, #36]	; 0x24
 800c13a:	4b05      	ldr	r3, [pc, #20]	; (800c150 <std+0x3c>)
 800c13c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c13e:	4b05      	ldr	r3, [pc, #20]	; (800c154 <std+0x40>)
 800c140:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c142:	4b05      	ldr	r3, [pc, #20]	; (800c158 <std+0x44>)
 800c144:	6224      	str	r4, [r4, #32]
 800c146:	6323      	str	r3, [r4, #48]	; 0x30
 800c148:	bd10      	pop	{r4, pc}
 800c14a:	bf00      	nop
 800c14c:	0800c469 	.word	0x0800c469
 800c150:	0800c48b 	.word	0x0800c48b
 800c154:	0800c4c3 	.word	0x0800c4c3
 800c158:	0800c4e7 	.word	0x0800c4e7

0800c15c <_cleanup_r>:
 800c15c:	4901      	ldr	r1, [pc, #4]	; (800c164 <_cleanup_r+0x8>)
 800c15e:	f000 b8af 	b.w	800c2c0 <_fwalk_reent>
 800c162:	bf00      	nop
 800c164:	0800c09d 	.word	0x0800c09d

0800c168 <__sfmoreglue>:
 800c168:	b570      	push	{r4, r5, r6, lr}
 800c16a:	2268      	movs	r2, #104	; 0x68
 800c16c:	1e4d      	subs	r5, r1, #1
 800c16e:	4355      	muls	r5, r2
 800c170:	460e      	mov	r6, r1
 800c172:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c176:	f7ff fa65 	bl	800b644 <_malloc_r>
 800c17a:	4604      	mov	r4, r0
 800c17c:	b140      	cbz	r0, 800c190 <__sfmoreglue+0x28>
 800c17e:	2100      	movs	r1, #0
 800c180:	e9c0 1600 	strd	r1, r6, [r0]
 800c184:	300c      	adds	r0, #12
 800c186:	60a0      	str	r0, [r4, #8]
 800c188:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c18c:	f7fd fb2c 	bl	80097e8 <memset>
 800c190:	4620      	mov	r0, r4
 800c192:	bd70      	pop	{r4, r5, r6, pc}

0800c194 <__sfp_lock_acquire>:
 800c194:	4801      	ldr	r0, [pc, #4]	; (800c19c <__sfp_lock_acquire+0x8>)
 800c196:	f000 b8b3 	b.w	800c300 <__retarget_lock_acquire_recursive>
 800c19a:	bf00      	nop
 800c19c:	20000695 	.word	0x20000695

0800c1a0 <__sfp_lock_release>:
 800c1a0:	4801      	ldr	r0, [pc, #4]	; (800c1a8 <__sfp_lock_release+0x8>)
 800c1a2:	f000 b8ae 	b.w	800c302 <__retarget_lock_release_recursive>
 800c1a6:	bf00      	nop
 800c1a8:	20000695 	.word	0x20000695

0800c1ac <__sinit_lock_acquire>:
 800c1ac:	4801      	ldr	r0, [pc, #4]	; (800c1b4 <__sinit_lock_acquire+0x8>)
 800c1ae:	f000 b8a7 	b.w	800c300 <__retarget_lock_acquire_recursive>
 800c1b2:	bf00      	nop
 800c1b4:	20000696 	.word	0x20000696

0800c1b8 <__sinit_lock_release>:
 800c1b8:	4801      	ldr	r0, [pc, #4]	; (800c1c0 <__sinit_lock_release+0x8>)
 800c1ba:	f000 b8a2 	b.w	800c302 <__retarget_lock_release_recursive>
 800c1be:	bf00      	nop
 800c1c0:	20000696 	.word	0x20000696

0800c1c4 <__sinit>:
 800c1c4:	b510      	push	{r4, lr}
 800c1c6:	4604      	mov	r4, r0
 800c1c8:	f7ff fff0 	bl	800c1ac <__sinit_lock_acquire>
 800c1cc:	69a3      	ldr	r3, [r4, #24]
 800c1ce:	b11b      	cbz	r3, 800c1d8 <__sinit+0x14>
 800c1d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1d4:	f7ff bff0 	b.w	800c1b8 <__sinit_lock_release>
 800c1d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c1dc:	6523      	str	r3, [r4, #80]	; 0x50
 800c1de:	4b13      	ldr	r3, [pc, #76]	; (800c22c <__sinit+0x68>)
 800c1e0:	4a13      	ldr	r2, [pc, #76]	; (800c230 <__sinit+0x6c>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c1e6:	42a3      	cmp	r3, r4
 800c1e8:	bf04      	itt	eq
 800c1ea:	2301      	moveq	r3, #1
 800c1ec:	61a3      	streq	r3, [r4, #24]
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	f000 f820 	bl	800c234 <__sfp>
 800c1f4:	6060      	str	r0, [r4, #4]
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	f000 f81c 	bl	800c234 <__sfp>
 800c1fc:	60a0      	str	r0, [r4, #8]
 800c1fe:	4620      	mov	r0, r4
 800c200:	f000 f818 	bl	800c234 <__sfp>
 800c204:	2200      	movs	r2, #0
 800c206:	60e0      	str	r0, [r4, #12]
 800c208:	2104      	movs	r1, #4
 800c20a:	6860      	ldr	r0, [r4, #4]
 800c20c:	f7ff ff82 	bl	800c114 <std>
 800c210:	68a0      	ldr	r0, [r4, #8]
 800c212:	2201      	movs	r2, #1
 800c214:	2109      	movs	r1, #9
 800c216:	f7ff ff7d 	bl	800c114 <std>
 800c21a:	68e0      	ldr	r0, [r4, #12]
 800c21c:	2202      	movs	r2, #2
 800c21e:	2112      	movs	r1, #18
 800c220:	f7ff ff78 	bl	800c114 <std>
 800c224:	2301      	movs	r3, #1
 800c226:	61a3      	str	r3, [r4, #24]
 800c228:	e7d2      	b.n	800c1d0 <__sinit+0xc>
 800c22a:	bf00      	nop
 800c22c:	0800cb28 	.word	0x0800cb28
 800c230:	0800c15d 	.word	0x0800c15d

0800c234 <__sfp>:
 800c234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c236:	4607      	mov	r7, r0
 800c238:	f7ff ffac 	bl	800c194 <__sfp_lock_acquire>
 800c23c:	4b1e      	ldr	r3, [pc, #120]	; (800c2b8 <__sfp+0x84>)
 800c23e:	681e      	ldr	r6, [r3, #0]
 800c240:	69b3      	ldr	r3, [r6, #24]
 800c242:	b913      	cbnz	r3, 800c24a <__sfp+0x16>
 800c244:	4630      	mov	r0, r6
 800c246:	f7ff ffbd 	bl	800c1c4 <__sinit>
 800c24a:	3648      	adds	r6, #72	; 0x48
 800c24c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c250:	3b01      	subs	r3, #1
 800c252:	d503      	bpl.n	800c25c <__sfp+0x28>
 800c254:	6833      	ldr	r3, [r6, #0]
 800c256:	b30b      	cbz	r3, 800c29c <__sfp+0x68>
 800c258:	6836      	ldr	r6, [r6, #0]
 800c25a:	e7f7      	b.n	800c24c <__sfp+0x18>
 800c25c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c260:	b9d5      	cbnz	r5, 800c298 <__sfp+0x64>
 800c262:	4b16      	ldr	r3, [pc, #88]	; (800c2bc <__sfp+0x88>)
 800c264:	60e3      	str	r3, [r4, #12]
 800c266:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c26a:	6665      	str	r5, [r4, #100]	; 0x64
 800c26c:	f000 f847 	bl	800c2fe <__retarget_lock_init_recursive>
 800c270:	f7ff ff96 	bl	800c1a0 <__sfp_lock_release>
 800c274:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c278:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c27c:	6025      	str	r5, [r4, #0]
 800c27e:	61a5      	str	r5, [r4, #24]
 800c280:	2208      	movs	r2, #8
 800c282:	4629      	mov	r1, r5
 800c284:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c288:	f7fd faae 	bl	80097e8 <memset>
 800c28c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c290:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c294:	4620      	mov	r0, r4
 800c296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c298:	3468      	adds	r4, #104	; 0x68
 800c29a:	e7d9      	b.n	800c250 <__sfp+0x1c>
 800c29c:	2104      	movs	r1, #4
 800c29e:	4638      	mov	r0, r7
 800c2a0:	f7ff ff62 	bl	800c168 <__sfmoreglue>
 800c2a4:	4604      	mov	r4, r0
 800c2a6:	6030      	str	r0, [r6, #0]
 800c2a8:	2800      	cmp	r0, #0
 800c2aa:	d1d5      	bne.n	800c258 <__sfp+0x24>
 800c2ac:	f7ff ff78 	bl	800c1a0 <__sfp_lock_release>
 800c2b0:	230c      	movs	r3, #12
 800c2b2:	603b      	str	r3, [r7, #0]
 800c2b4:	e7ee      	b.n	800c294 <__sfp+0x60>
 800c2b6:	bf00      	nop
 800c2b8:	0800cb28 	.word	0x0800cb28
 800c2bc:	ffff0001 	.word	0xffff0001

0800c2c0 <_fwalk_reent>:
 800c2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2c4:	4606      	mov	r6, r0
 800c2c6:	4688      	mov	r8, r1
 800c2c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c2cc:	2700      	movs	r7, #0
 800c2ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c2d2:	f1b9 0901 	subs.w	r9, r9, #1
 800c2d6:	d505      	bpl.n	800c2e4 <_fwalk_reent+0x24>
 800c2d8:	6824      	ldr	r4, [r4, #0]
 800c2da:	2c00      	cmp	r4, #0
 800c2dc:	d1f7      	bne.n	800c2ce <_fwalk_reent+0xe>
 800c2de:	4638      	mov	r0, r7
 800c2e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2e4:	89ab      	ldrh	r3, [r5, #12]
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	d907      	bls.n	800c2fa <_fwalk_reent+0x3a>
 800c2ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	d003      	beq.n	800c2fa <_fwalk_reent+0x3a>
 800c2f2:	4629      	mov	r1, r5
 800c2f4:	4630      	mov	r0, r6
 800c2f6:	47c0      	blx	r8
 800c2f8:	4307      	orrs	r7, r0
 800c2fa:	3568      	adds	r5, #104	; 0x68
 800c2fc:	e7e9      	b.n	800c2d2 <_fwalk_reent+0x12>

0800c2fe <__retarget_lock_init_recursive>:
 800c2fe:	4770      	bx	lr

0800c300 <__retarget_lock_acquire_recursive>:
 800c300:	4770      	bx	lr

0800c302 <__retarget_lock_release_recursive>:
 800c302:	4770      	bx	lr

0800c304 <__swhatbuf_r>:
 800c304:	b570      	push	{r4, r5, r6, lr}
 800c306:	460e      	mov	r6, r1
 800c308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c30c:	2900      	cmp	r1, #0
 800c30e:	b096      	sub	sp, #88	; 0x58
 800c310:	4614      	mov	r4, r2
 800c312:	461d      	mov	r5, r3
 800c314:	da08      	bge.n	800c328 <__swhatbuf_r+0x24>
 800c316:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c31a:	2200      	movs	r2, #0
 800c31c:	602a      	str	r2, [r5, #0]
 800c31e:	061a      	lsls	r2, r3, #24
 800c320:	d410      	bmi.n	800c344 <__swhatbuf_r+0x40>
 800c322:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c326:	e00e      	b.n	800c346 <__swhatbuf_r+0x42>
 800c328:	466a      	mov	r2, sp
 800c32a:	f000 f903 	bl	800c534 <_fstat_r>
 800c32e:	2800      	cmp	r0, #0
 800c330:	dbf1      	blt.n	800c316 <__swhatbuf_r+0x12>
 800c332:	9a01      	ldr	r2, [sp, #4]
 800c334:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c338:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c33c:	425a      	negs	r2, r3
 800c33e:	415a      	adcs	r2, r3
 800c340:	602a      	str	r2, [r5, #0]
 800c342:	e7ee      	b.n	800c322 <__swhatbuf_r+0x1e>
 800c344:	2340      	movs	r3, #64	; 0x40
 800c346:	2000      	movs	r0, #0
 800c348:	6023      	str	r3, [r4, #0]
 800c34a:	b016      	add	sp, #88	; 0x58
 800c34c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c350 <__smakebuf_r>:
 800c350:	898b      	ldrh	r3, [r1, #12]
 800c352:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c354:	079d      	lsls	r5, r3, #30
 800c356:	4606      	mov	r6, r0
 800c358:	460c      	mov	r4, r1
 800c35a:	d507      	bpl.n	800c36c <__smakebuf_r+0x1c>
 800c35c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c360:	6023      	str	r3, [r4, #0]
 800c362:	6123      	str	r3, [r4, #16]
 800c364:	2301      	movs	r3, #1
 800c366:	6163      	str	r3, [r4, #20]
 800c368:	b002      	add	sp, #8
 800c36a:	bd70      	pop	{r4, r5, r6, pc}
 800c36c:	ab01      	add	r3, sp, #4
 800c36e:	466a      	mov	r2, sp
 800c370:	f7ff ffc8 	bl	800c304 <__swhatbuf_r>
 800c374:	9900      	ldr	r1, [sp, #0]
 800c376:	4605      	mov	r5, r0
 800c378:	4630      	mov	r0, r6
 800c37a:	f7ff f963 	bl	800b644 <_malloc_r>
 800c37e:	b948      	cbnz	r0, 800c394 <__smakebuf_r+0x44>
 800c380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c384:	059a      	lsls	r2, r3, #22
 800c386:	d4ef      	bmi.n	800c368 <__smakebuf_r+0x18>
 800c388:	f023 0303 	bic.w	r3, r3, #3
 800c38c:	f043 0302 	orr.w	r3, r3, #2
 800c390:	81a3      	strh	r3, [r4, #12]
 800c392:	e7e3      	b.n	800c35c <__smakebuf_r+0xc>
 800c394:	4b0d      	ldr	r3, [pc, #52]	; (800c3cc <__smakebuf_r+0x7c>)
 800c396:	62b3      	str	r3, [r6, #40]	; 0x28
 800c398:	89a3      	ldrh	r3, [r4, #12]
 800c39a:	6020      	str	r0, [r4, #0]
 800c39c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3a0:	81a3      	strh	r3, [r4, #12]
 800c3a2:	9b00      	ldr	r3, [sp, #0]
 800c3a4:	6163      	str	r3, [r4, #20]
 800c3a6:	9b01      	ldr	r3, [sp, #4]
 800c3a8:	6120      	str	r0, [r4, #16]
 800c3aa:	b15b      	cbz	r3, 800c3c4 <__smakebuf_r+0x74>
 800c3ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3b0:	4630      	mov	r0, r6
 800c3b2:	f000 f8d1 	bl	800c558 <_isatty_r>
 800c3b6:	b128      	cbz	r0, 800c3c4 <__smakebuf_r+0x74>
 800c3b8:	89a3      	ldrh	r3, [r4, #12]
 800c3ba:	f023 0303 	bic.w	r3, r3, #3
 800c3be:	f043 0301 	orr.w	r3, r3, #1
 800c3c2:	81a3      	strh	r3, [r4, #12]
 800c3c4:	89a0      	ldrh	r0, [r4, #12]
 800c3c6:	4305      	orrs	r5, r0
 800c3c8:	81a5      	strh	r5, [r4, #12]
 800c3ca:	e7cd      	b.n	800c368 <__smakebuf_r+0x18>
 800c3cc:	0800c15d 	.word	0x0800c15d

0800c3d0 <_malloc_usable_size_r>:
 800c3d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3d4:	1f18      	subs	r0, r3, #4
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	bfbc      	itt	lt
 800c3da:	580b      	ldrlt	r3, [r1, r0]
 800c3dc:	18c0      	addlt	r0, r0, r3
 800c3de:	4770      	bx	lr

0800c3e0 <_raise_r>:
 800c3e0:	291f      	cmp	r1, #31
 800c3e2:	b538      	push	{r3, r4, r5, lr}
 800c3e4:	4604      	mov	r4, r0
 800c3e6:	460d      	mov	r5, r1
 800c3e8:	d904      	bls.n	800c3f4 <_raise_r+0x14>
 800c3ea:	2316      	movs	r3, #22
 800c3ec:	6003      	str	r3, [r0, #0]
 800c3ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f2:	bd38      	pop	{r3, r4, r5, pc}
 800c3f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c3f6:	b112      	cbz	r2, 800c3fe <_raise_r+0x1e>
 800c3f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c3fc:	b94b      	cbnz	r3, 800c412 <_raise_r+0x32>
 800c3fe:	4620      	mov	r0, r4
 800c400:	f000 f830 	bl	800c464 <_getpid_r>
 800c404:	462a      	mov	r2, r5
 800c406:	4601      	mov	r1, r0
 800c408:	4620      	mov	r0, r4
 800c40a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c40e:	f000 b817 	b.w	800c440 <_kill_r>
 800c412:	2b01      	cmp	r3, #1
 800c414:	d00a      	beq.n	800c42c <_raise_r+0x4c>
 800c416:	1c59      	adds	r1, r3, #1
 800c418:	d103      	bne.n	800c422 <_raise_r+0x42>
 800c41a:	2316      	movs	r3, #22
 800c41c:	6003      	str	r3, [r0, #0]
 800c41e:	2001      	movs	r0, #1
 800c420:	e7e7      	b.n	800c3f2 <_raise_r+0x12>
 800c422:	2400      	movs	r4, #0
 800c424:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c428:	4628      	mov	r0, r5
 800c42a:	4798      	blx	r3
 800c42c:	2000      	movs	r0, #0
 800c42e:	e7e0      	b.n	800c3f2 <_raise_r+0x12>

0800c430 <raise>:
 800c430:	4b02      	ldr	r3, [pc, #8]	; (800c43c <raise+0xc>)
 800c432:	4601      	mov	r1, r0
 800c434:	6818      	ldr	r0, [r3, #0]
 800c436:	f7ff bfd3 	b.w	800c3e0 <_raise_r>
 800c43a:	bf00      	nop
 800c43c:	20000044 	.word	0x20000044

0800c440 <_kill_r>:
 800c440:	b538      	push	{r3, r4, r5, lr}
 800c442:	4d07      	ldr	r5, [pc, #28]	; (800c460 <_kill_r+0x20>)
 800c444:	2300      	movs	r3, #0
 800c446:	4604      	mov	r4, r0
 800c448:	4608      	mov	r0, r1
 800c44a:	4611      	mov	r1, r2
 800c44c:	602b      	str	r3, [r5, #0]
 800c44e:	f7f6 fed3 	bl	80031f8 <_kill>
 800c452:	1c43      	adds	r3, r0, #1
 800c454:	d102      	bne.n	800c45c <_kill_r+0x1c>
 800c456:	682b      	ldr	r3, [r5, #0]
 800c458:	b103      	cbz	r3, 800c45c <_kill_r+0x1c>
 800c45a:	6023      	str	r3, [r4, #0]
 800c45c:	bd38      	pop	{r3, r4, r5, pc}
 800c45e:	bf00      	nop
 800c460:	20000690 	.word	0x20000690

0800c464 <_getpid_r>:
 800c464:	f7f6 bec0 	b.w	80031e8 <_getpid>

0800c468 <__sread>:
 800c468:	b510      	push	{r4, lr}
 800c46a:	460c      	mov	r4, r1
 800c46c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c470:	f000 f894 	bl	800c59c <_read_r>
 800c474:	2800      	cmp	r0, #0
 800c476:	bfab      	itete	ge
 800c478:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c47a:	89a3      	ldrhlt	r3, [r4, #12]
 800c47c:	181b      	addge	r3, r3, r0
 800c47e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c482:	bfac      	ite	ge
 800c484:	6563      	strge	r3, [r4, #84]	; 0x54
 800c486:	81a3      	strhlt	r3, [r4, #12]
 800c488:	bd10      	pop	{r4, pc}

0800c48a <__swrite>:
 800c48a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c48e:	461f      	mov	r7, r3
 800c490:	898b      	ldrh	r3, [r1, #12]
 800c492:	05db      	lsls	r3, r3, #23
 800c494:	4605      	mov	r5, r0
 800c496:	460c      	mov	r4, r1
 800c498:	4616      	mov	r6, r2
 800c49a:	d505      	bpl.n	800c4a8 <__swrite+0x1e>
 800c49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4a0:	2302      	movs	r3, #2
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	f000 f868 	bl	800c578 <_lseek_r>
 800c4a8:	89a3      	ldrh	r3, [r4, #12]
 800c4aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c4b2:	81a3      	strh	r3, [r4, #12]
 800c4b4:	4632      	mov	r2, r6
 800c4b6:	463b      	mov	r3, r7
 800c4b8:	4628      	mov	r0, r5
 800c4ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4be:	f000 b817 	b.w	800c4f0 <_write_r>

0800c4c2 <__sseek>:
 800c4c2:	b510      	push	{r4, lr}
 800c4c4:	460c      	mov	r4, r1
 800c4c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4ca:	f000 f855 	bl	800c578 <_lseek_r>
 800c4ce:	1c43      	adds	r3, r0, #1
 800c4d0:	89a3      	ldrh	r3, [r4, #12]
 800c4d2:	bf15      	itete	ne
 800c4d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c4d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c4da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c4de:	81a3      	strheq	r3, [r4, #12]
 800c4e0:	bf18      	it	ne
 800c4e2:	81a3      	strhne	r3, [r4, #12]
 800c4e4:	bd10      	pop	{r4, pc}

0800c4e6 <__sclose>:
 800c4e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4ea:	f000 b813 	b.w	800c514 <_close_r>
	...

0800c4f0 <_write_r>:
 800c4f0:	b538      	push	{r3, r4, r5, lr}
 800c4f2:	4d07      	ldr	r5, [pc, #28]	; (800c510 <_write_r+0x20>)
 800c4f4:	4604      	mov	r4, r0
 800c4f6:	4608      	mov	r0, r1
 800c4f8:	4611      	mov	r1, r2
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	602a      	str	r2, [r5, #0]
 800c4fe:	461a      	mov	r2, r3
 800c500:	f7f6 feb1 	bl	8003266 <_write>
 800c504:	1c43      	adds	r3, r0, #1
 800c506:	d102      	bne.n	800c50e <_write_r+0x1e>
 800c508:	682b      	ldr	r3, [r5, #0]
 800c50a:	b103      	cbz	r3, 800c50e <_write_r+0x1e>
 800c50c:	6023      	str	r3, [r4, #0]
 800c50e:	bd38      	pop	{r3, r4, r5, pc}
 800c510:	20000690 	.word	0x20000690

0800c514 <_close_r>:
 800c514:	b538      	push	{r3, r4, r5, lr}
 800c516:	4d06      	ldr	r5, [pc, #24]	; (800c530 <_close_r+0x1c>)
 800c518:	2300      	movs	r3, #0
 800c51a:	4604      	mov	r4, r0
 800c51c:	4608      	mov	r0, r1
 800c51e:	602b      	str	r3, [r5, #0]
 800c520:	f7f6 febd 	bl	800329e <_close>
 800c524:	1c43      	adds	r3, r0, #1
 800c526:	d102      	bne.n	800c52e <_close_r+0x1a>
 800c528:	682b      	ldr	r3, [r5, #0]
 800c52a:	b103      	cbz	r3, 800c52e <_close_r+0x1a>
 800c52c:	6023      	str	r3, [r4, #0]
 800c52e:	bd38      	pop	{r3, r4, r5, pc}
 800c530:	20000690 	.word	0x20000690

0800c534 <_fstat_r>:
 800c534:	b538      	push	{r3, r4, r5, lr}
 800c536:	4d07      	ldr	r5, [pc, #28]	; (800c554 <_fstat_r+0x20>)
 800c538:	2300      	movs	r3, #0
 800c53a:	4604      	mov	r4, r0
 800c53c:	4608      	mov	r0, r1
 800c53e:	4611      	mov	r1, r2
 800c540:	602b      	str	r3, [r5, #0]
 800c542:	f7f6 feb8 	bl	80032b6 <_fstat>
 800c546:	1c43      	adds	r3, r0, #1
 800c548:	d102      	bne.n	800c550 <_fstat_r+0x1c>
 800c54a:	682b      	ldr	r3, [r5, #0]
 800c54c:	b103      	cbz	r3, 800c550 <_fstat_r+0x1c>
 800c54e:	6023      	str	r3, [r4, #0]
 800c550:	bd38      	pop	{r3, r4, r5, pc}
 800c552:	bf00      	nop
 800c554:	20000690 	.word	0x20000690

0800c558 <_isatty_r>:
 800c558:	b538      	push	{r3, r4, r5, lr}
 800c55a:	4d06      	ldr	r5, [pc, #24]	; (800c574 <_isatty_r+0x1c>)
 800c55c:	2300      	movs	r3, #0
 800c55e:	4604      	mov	r4, r0
 800c560:	4608      	mov	r0, r1
 800c562:	602b      	str	r3, [r5, #0]
 800c564:	f7f6 feb7 	bl	80032d6 <_isatty>
 800c568:	1c43      	adds	r3, r0, #1
 800c56a:	d102      	bne.n	800c572 <_isatty_r+0x1a>
 800c56c:	682b      	ldr	r3, [r5, #0]
 800c56e:	b103      	cbz	r3, 800c572 <_isatty_r+0x1a>
 800c570:	6023      	str	r3, [r4, #0]
 800c572:	bd38      	pop	{r3, r4, r5, pc}
 800c574:	20000690 	.word	0x20000690

0800c578 <_lseek_r>:
 800c578:	b538      	push	{r3, r4, r5, lr}
 800c57a:	4d07      	ldr	r5, [pc, #28]	; (800c598 <_lseek_r+0x20>)
 800c57c:	4604      	mov	r4, r0
 800c57e:	4608      	mov	r0, r1
 800c580:	4611      	mov	r1, r2
 800c582:	2200      	movs	r2, #0
 800c584:	602a      	str	r2, [r5, #0]
 800c586:	461a      	mov	r2, r3
 800c588:	f7f6 feb0 	bl	80032ec <_lseek>
 800c58c:	1c43      	adds	r3, r0, #1
 800c58e:	d102      	bne.n	800c596 <_lseek_r+0x1e>
 800c590:	682b      	ldr	r3, [r5, #0]
 800c592:	b103      	cbz	r3, 800c596 <_lseek_r+0x1e>
 800c594:	6023      	str	r3, [r4, #0]
 800c596:	bd38      	pop	{r3, r4, r5, pc}
 800c598:	20000690 	.word	0x20000690

0800c59c <_read_r>:
 800c59c:	b538      	push	{r3, r4, r5, lr}
 800c59e:	4d07      	ldr	r5, [pc, #28]	; (800c5bc <_read_r+0x20>)
 800c5a0:	4604      	mov	r4, r0
 800c5a2:	4608      	mov	r0, r1
 800c5a4:	4611      	mov	r1, r2
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	602a      	str	r2, [r5, #0]
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	f7f6 fe3e 	bl	800322c <_read>
 800c5b0:	1c43      	adds	r3, r0, #1
 800c5b2:	d102      	bne.n	800c5ba <_read_r+0x1e>
 800c5b4:	682b      	ldr	r3, [r5, #0]
 800c5b6:	b103      	cbz	r3, 800c5ba <_read_r+0x1e>
 800c5b8:	6023      	str	r3, [r4, #0]
 800c5ba:	bd38      	pop	{r3, r4, r5, pc}
 800c5bc:	20000690 	.word	0x20000690

0800c5c0 <_init>:
 800c5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5c2:	bf00      	nop
 800c5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5c6:	bc08      	pop	{r3}
 800c5c8:	469e      	mov	lr, r3
 800c5ca:	4770      	bx	lr

0800c5cc <_fini>:
 800c5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ce:	bf00      	nop
 800c5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5d2:	bc08      	pop	{r3}
 800c5d4:	469e      	mov	lr, r3
 800c5d6:	4770      	bx	lr
